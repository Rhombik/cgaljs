// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}

if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  Module['load'] = importScripts;
}

if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  BITSHIFT64_SHL: 0,
  BITSHIFT64_ASHR: 1,
  BITSHIFT64_LSHR: 2,
  bitshift64: function (low, high, op, bits) {
    var ret;
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
          break;
      }
    } else if (bits == 32) {
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [high, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high, 0];
          break;
      }
    } else { // bits > 32
      switch (op) {
        case Runtime.BITSHIFT64_SHL:
          ret = [0, low << (bits - 32)];
          break;
        case Runtime.BITSHIFT64_ASHR:
          ret = [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
          break;
        case Runtime.BITSHIFT64_LSHR:
          ret = [high >>>  (bits - 32) , 0];
          break;
      }
    }
    assert(ret);
    HEAP32[tempDoublePtr>>2] = ret[0]; // cannot use utility functions since we are in runtime itself
    HEAP32[tempDoublePtr+4>>2] = ret[1];
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func, sig) {
    //assert(sig); // TODO: support asm
    var table = FUNCTION_TABLE; // TODO: support asm
    var ret = table.length;
    table.push(func);
    table.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}







//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (HEAPF64[(tempDoublePtr)>>3]=value,HEAP32[((ptr)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[(((ptr)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (HEAP32[((tempDoublePtr)>>2)]=HEAP32[((ptr)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((ptr)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_NONE = 3; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// Simple unoptimized memset - necessary during startup
var _memset = function(ptr, value, num) {
  var stop = ptr + num;
  while (ptr < stop) {
    HEAP8[((ptr++)|0)]=value;
  }
}

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    _memset(ret, 0, size);
    return ret;
  }

  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }

  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
  assert(i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = TOTAL_STACK; // we lose a little stack here, but TOTAL_STACK is nice and round so use that as the max

var tempDoublePtr = Runtime.alignMemory(allocate(12, 'i8', ALLOC_STACK), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

STATICTOP = STACK_MAX;
assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STACK);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

if (!Math.imul) Math.imul = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===



assert(STATICTOP == STACK_MAX); assert(STACK_MAX == TOTAL_STACK);

STATICTOP += 14936;

assert(STATICTOP < TOTAL_MEMORY);

var _stdout;
var _stderr;





































































































































































































































allocate([255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,8,0,8,0,9,0,9,0,10,0,10,0,11,0,11,0,12,0,12,0,13,0,13,0,14,0,14,0,15,0,15,0,16,0,16,0,17,0,17,0,18,0,18,0,19,0,19,0,20,0,20,0,21,0,21,0,22,0,22,0,23,0,23,0,26,0,24,0,25,0,25,0,26,0,26,0,27,0,27,0,28,0,28,0,29,0,29,0,30,0,30,0,31,0,31,0,32,0,32,0,33,0,33,0,34,0,34,0,35,0,35,0,36,0,36,0,37,0,38,0,39,0,39,0,39,0,39,0,40,0,40,0,41,0,41,0,42,0,42,0,43,0,43,0,44,0,44,0,45,0,46,0,46,0,46,0,47,0,47,0,48,0,48,0,49,0,49,0,50,0,50,0,51,0,51,0,52,0,52,0,53,0,53,0,54,0,54,0,55,0,55,0,56,0,56,0,57,0,57,0,58,0,58,0,59,0,59,0,60,0,60,0,61,0,61,0,62,0,62,0,63,0,68,0,64,0,64,0,65,0,65,0,66,0,68,0,67,0,69,0,68,0,68,0,71,0,69,0,70,0,75,0,76,0,76,0,72,0,72,0,73,0,73,0,74,0,82,0,75,0,80,0,78,0,76,0,77,0,77,0,78,0,83,0,79,0,81,0,82,0,80,0,81,0,81,0,82,0,82,0,83,0,85,0,84,0,84,0,85,0,85,0,86,0,86,0,87,0,87,0,88,0,88,0,89,0,89,0,90,0,92,0,91,0,93,0,94,0,92,0,93,0,93,0,94,0,94,0,95,0,95,0,96,0,96,0,97,0,97,0,98,0,98,0,99,0,99,0,100,0,100,0,101,0,101,0,102,0,102,0,103,0,103,0,104,0,104,0,105,0,105,0,106,0,106,0,107,0,107,0,108,0,108,0,109,0,112,0,110,0,110,0,111,0,118,0,112,0,112,0,113,0,113,0,114,0,114,0,115,0,122,0,123,0,116,0,117,0,117,0,118,0,118,0,119,0,119,0,120,0,120,0,121,0,121,0,122,0,122,0,123,0,123,0,124,0,124,0,125,0,125,0,126,0,126,0,127,0,127,0,128,0,128,0,129,0,129,0,130,0,154,0,135,0,131,0,132,0,132,0,133,0,133,0,134,0,134,0,135,0,135,0,136,0,140,0,151,0,137,0,142,0,138,0,139,0,143,0,144,0,154,0,155,0,150,0,151,0,156,0,152,0,143,0,153,0,158,0,145,0,145,0,165,0,146,0,147,0,147,0,152,0,162,0,149,0,149,0,150,0,150,0,151,0,151,0,152,0,171,0,153,0,153,0,154,0,154,0,155,0,155,0,156,0,156,0,157,0,157,0,158,0,158,0,159,0,159,0,160,0,160,0,161,0,161,0,162,0,162,0,163,0,163,0,164,0,164,0,165,0,165,0,166,0,166,0,167,0,167,0,168,0,168,0,169,0,169,0,170,0,170,0,171,0,171,0,172,0,183,0,173,0,173,0,174,0,174,0,175,0,175,0,176,0,187,0,194,0,182,0,183,0,178,0,179,0,179,0,180,0,180,0,181,0,181,0,182,0,182,0,183,0,183,0,195,0,184,0,185,0,185,0,186,0,197,0,187,0,187,0,188,0,188,0,189,0,189,0,190,0,190,0,191,0,191,0,192,0,192,0,193,0,204,0,207,0,200,0,201,0,208,0,209,0,196,0,197,0,203,0,204,0,198,0,199,0,199,0,200,0,200,0,201,0,201,0,202,0,215,0,216,0,230,0,217,0,210,0,211,0,218,0,212,0,206,0,207,0,207,0,208,0,208,0,209,0,209,0,210,0,230,0,231,0,231,0,232,0,225,0,226,0,226,0,227,0,227,0,228,0,242,0,222,0,1,1,217,0,217,0,218,0,245,0,246,0,219,0,220,0,240,0,241,0,234,0,235,0,235,0,236,0,8,1,230,0,2,1,225,0,225,0,226,0,226,0,227,0,227,0,228,0,228,0,229,0,4,1,5,1,230,0,231,0,14,1,247,0,232,0,233,0,233,0,234,0,234,0,235,0,235,0,236,0,236,0,237,0,237,0,238,0,238,0,239,0,239,0,240,0,240,0,241,0,241,0,242,0,242,0,243,0,243,0,244,0,244,0,245,0,245,0,246,0,246,0,247,0,247,0,248,0,248,0,249,0,249,0,250,0,250,0,251,0,251,0,252,0,252,0,253,0,253,0,254,0,254,0,255,0,255,0,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,23,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,38,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,81,1,93,1,82,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,83,1,104,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,98,1,99,1,89,1,90,1,90,1,112,1,112,1,113,1,113,1,103,1,93,1,137,1,126,1,127,1,105,1,106,1,106,1,107,1,107,1,109,1,109,1,110,1,134,1,111,1,135,1,124,1,148,1,102,1,137,1,150,1,126,1,127,1,139,1,140,1,140,1,129,1,153,1,130,1,154,1,131,1,143,1,132,1,156,1,157,1,145,1,134,1,111,1,112,1,147,1,148,1,160,1,161,1,149,1,126,1,150,1,151,1,151,1,152,1,152,1,153,1,153,1,154,1,154,1,179,1,155,1,156,1,156,1,157,1,157,1,158,1,123,1,183,1,171,1,172,1,136,1,137,1,185,1,186,1,174,1,223,1,199,1,188,1,176,1,181,1,130,1,195,1,131,1,209,1,183,1,171,1,133,1,134,1,198,1,199,1,199,1,148,1,161,1,188,1,188,1,138,1,138,1,139,1,190,1,204,1,204,1,205,1,231,1,154,1,219,1,143,1,220,1,221,1,208,1,145,1,209,1,146,1,236,1,147,1,147,1,148,1,148,1,149,1,149,1,150,1,150,1,151,1,163,1,152,1,152,1,153,1,153,1,154,1,154,1,155,1,155,1,156,1,156,1,157,1,157,1,158,1,158,1,159,1,159,1,160,1,160,1,161,1,161,1,162,1,162,1,163,1,163,1,164,1,164,1,165,1,165,1,166,1,166,1,167,1,167,1,168,1,168,1,169,1,252,1,170,1,170,1,171,1,171,1,172,1,172,1,173,1,173,1,174,1,174,1,175,1,175,1,176,1,176,1,177,1,177,1,178,1,178,1,179,1,179,1,180,1,180,1,181,1,181,1,182,1,182,1,183,1,24,2,184,1,184,1,185,1,185,1,186,1,186,1,187,1,187,1,188,1,188,1,189,1,189,1,190,1,190,1,191,1,191,1,192,1,192,1,193,1,220,1,194,1,194,1,195,1,195,1,196,1,196,1,226,1,197,1,198,1,198,1,199,1,199,1,200,1,200,1,201,1,201,1,202,1,202,1,203,1,203,1,204,1,204,1,205,1,205,1,206,1,206,1,207,1,207,1,208,1,208,1,209,1,209,1,210,1,210,1,211,1,211,1,212,1,212,1,213,1,213,1,214,1,214,1,215,1,215,1,216,1,216,1,217,1,217,1,218,1,218,1,219,1,219,1,220,1,220,1,221,1,221,1,222,1,222,1,223,1,223,1,224,1,224,1,225,1,225,1,226,1,226,1,227,1,227,1,228,1,228,1,229,1,229,1,230,1,230,1,231,1,231,1,232,1,232,1,233,1,233,1,234,1,234,1,235,1,235,1,236,1,236,1,237,1,237,1,238,1,238,1,239,1,239,1,240,1,240,1,241,1,241,1,242,1,242,1,243,1,243,1,244,1,244,1,245,1,245,1,246,1,246,1,247,1,247,1,248,1,248,1,249,1,249,1,250,1,250,1,251,1,251,1,252,1,252,1,253,1,253,1,254,1,254,1,255,1,255,1,0,2,0,2,1,2,1,2], "i8", ALLOC_NONE, 5242880);
allocate([48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0] /* 0123456789ABCDEFGHIJ */, "i8", ALLOC_NONE, 5244928);
allocate([48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,0] /* 0123456789abcdefghij */, "i8", ALLOC_NONE, 5244992);
allocate([255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,20,0,20,0,24,0,26,0,0,0,0,0,24,0,26,0,28,0,27,0,26,0,28,0,30,0,32,0,32,0,32,0,30,0,30,0,34,0,34,0,32,0,34,0,34,0,36,0,32,0,34,0,36,0,34,0,35,0,0,0,0,0,36,0,36,0,0,0,37,0,48,0,0,0,0,0,48,0,48,0,51,0,0,0,48,0,52,0,51,0,0,0,52,0,52,0,51,0,55,0,52,0,56,0,55,0,0,0,56,0,60,0,59,0,59,0,60,0,64,0,63,0,63,0,64,0,64,0,67,0,67,0,68,0,72,0,63,0,71,0,72,0,60,0,67,0,67,0,60,0,72,0,63,0,61,0,64,0,64,0,63,0,71,0,68,0,68,0,71,0,67,0,68,0,68,0,67,0,71,0,68,0,72,0,68,0,68,0,72,0,72,0,76,0,76,0,69,0,69,0,72,0,72,0,71,0,103,0,104,0,72,0,73,0,96,0,103,0,94,0,95,0,104,0,96,0,96,0,94,0,103,0,104,0,104,0,96,0,96,0,103,0,103,0,104,0,104,0,120,0,120,0,103,0,103,0,104,0,104,0,120,0,111,0,103,0,112,0,104,0,104,0,120,0,120,0,109,0,103,0,119,0,119,0,120,0,120,0,127,0,112,0,128,0,128,0,120,0,120,0,136,0,127,0,128,0,128,0,120,0,126,0,121,0,129,0,126,0,134,0,135,0,135,0,136,0,120,0,113,0,113,0,114,0,118,0,127,0,127,0,136,0,120,0,121,0,125,0,126,0,118,0,119,0,119,0,120,0,136,0,121,0,153,0,122,0,122,0,127,0,119,0,120,0,128,0,165,0,153,0,162,0,134,0,163,0,159,0,136,0,136,0,153,0,153,0,134,0,158,0,135,0,135,0,136,0,136,0,153,0,153,0,162,0,158,0,159,0,159,0,156,0,152,0,153,0,189,0,158,0,186,0,187,0,163,0,156,0,168,0,189,0,159,0,165,0,165,0,176,0,176,0,172,0,172,0,183,0,173,0,164,0,174,0,165,0,165,0,176,0,176,0,177,0,177,0,183,0,188,0,189,0,189,0,180,0,185,0,176,0,186,0,177,0,177,0,193,0,188,0,189,0,189,0,200,0,200,0,201,0,201,0,177,0,207,0,188,0,198,0,199,0,189,0,200,0,200,0,186,0,201,0,207,0,207,0,213,0,203,0,189,0,189,0,200,0,210,0,201,0,196,0,212,0,207,0,208,0,213,0,189,0,199,0,200,0,200,0,203,0,209,0,216,0,204,0,199,0,223,0,206,0,200,0,213,0,225,0,208,0,208,0,203,0,203,0,216,0,204,0,205,0,205,0,224,0,212,0,213,0,213,0,184,0,208,0,209,0,203,0,198,0,210,0,199,0,187,0,206,0,200,0,201,0,189,0,208,0,208,0,203,0,185,0,216,0,198,0,187,0,199,0,200,0,212,0,213,0,213,0,202,0,208,0,203,0,197,0,198,0,198,0,199,0,211,0,212,0,212,0,29,1,213,0,24,1,18,1,227,0,19,1,32,1,204,0,28,1,28,1,22,1,29,1,51,1,216,0,17,1,52,1,53,1,53,1,19,1,219,0,213,0,55,1,49,1,28,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,47,1,47,1,55,1,55,1,28,1,56,1,29,1,29,1,51,1,30,1,31,1,52,1,53,1,53,1,47,1,47,1,48,1,76,1,49,1,49,1,50,1,43,1,72,1,44,1,52,1,45,1,53,1,53,1,47,1,54,1,55,1,55,1,77,1,49,1,29,1,29,1,51,1,58,1,52,1,52,1,65,1,49,1,98,1,66,1,75,1,99,1,76,1,52,1,53,1,77,1,78,1,78,1,47,1,47,1,48,1,56,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,46,1,46,1,119,1,55,1,56,1,104,1,97,1,49,1,74,1,98,1,51,1,99,1,124,1,52,1,101,1,53,1,102,1,102,1,103,1,55,1,56,1,56,1,89,1,73,1,122,1,98,1,75,1,99,1,100,1,100,1,101,1,101,1,118,1,78,1,119,1,55,1,80,1,128,1,100,1,73,1,74,1,101,1,75,1,102,1,148,1,76,1,113,1,77,1,78,1,78,1,79,1,97,1,98,1,98,1,99,1,126,1,100,1,91,1,101,1,101,1,102,1,102,1,121,1,103,1,149,1,77,1,96,1,123,1,97,1,97,1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,101,1,102,1,120,1,103,1,121,1,113,1,104,1,123,1,114,1,124,1,124,1,98,1,116,1,99,1,126,1,127,1,145,1,101,1,101,1,120,1,102,1,121,1,121,1,149,1,122,1,123,1,123,1,124,1,124,1,125,1,125,1,146,1,146,1,97,1,147,1,148,1,148,1,149,1,149,1,120,1,120,1,121,1,101,1,112,1,102,1,123,1,123,1,104,1,144,1,145,1,125,1,116,1,196,1,117,1,127,1,198,1,128,1,149,1,149,1,200,1,100,1,101,1,101,1,102,1,122,1,123,1,123,1,234,1,114,1,125,1,125,1,236,1,146,1,207,1,147,1,148,1,148,1,149,1,149,1,200,1,200,1,15,2,101,1,192,1,192,1,233,1,193,1,144,1,194,1,197,1,197,1,198,1,198,1,199,1,199,1,200,1,200,1,212,1,234,1,235,1,235,1,236,1,148,1,149,1,226,1,216,1,194,1,195,1,206,1,207,1,207,1,208,1,197,1,209,1,209,1,199,1,199,1,200,1,233,1,234,1,234,1,235,1,235,1,236,1,236,1,149,1,14,2,227,1,15,2,228,1,228,1,196,1,196,1,230,1,197,1,198,1,198,1,199,1,221,1,200,1,10,2,234,1,234,1,235,1,12,2,225,1,236,1,14,2,226,1,227,1,15,2,239,1,5,2,9,2,21,2,10,2,218,1,243,1,11,2,12,2,12,2,233,1,233,1,234,1,14,2,15,2,15,2,16,2,16,2,17,2,17,2,6,2,42,2,239,1,227,1,240,1,216,1,9,2,45,2,230,1,10,2,23,2,23,2,12,2,0,2,13,2,49,2,14,2,14,2,235,1,15,2,16,2,16,2,17,2,5,2,6,2,42,2,19,2,7,2,32,2,8,2,9,2,9,2,46,2,34,2,47,2,23,2,48,2,24,2,233,1,61,2,234,1,2,2,235,1,51,2,236,1,236,1,16,2,233,1,43,2,43,2,235,1,235,1,236,1,84,2,85,2,33,2,34,2,34,2,48,2,87,2,88,2,88,2,11,2,50,2,51,2,255,1,52,2,13,2,14,2,118,2,41,2,15,2,16,2,16,2,95,2,43,2,83,2,31,2,32,2,19,2,20,2,59,2,47,2,47,2,87,2,48,2,23,2,23,2,50,2,50,2,51,2,25,2,52,2,52,2,53,2,118,2,2,2,119,2,16,2,120,2,43,2,30,2,122,2,83,2,45,2,45,2,85,2,46,2,47,2,47,2,59,2,87,2,18,2,18,2,47,2,33,2,34,2,104,2,49,2,35,2,36,2,22,2,121,2,51,2,52,2,52,2,95,2,25,2,82,2,124,2,55,2,27,2,112,2,42,2,43,2,43,2,86,2,86,2,45,2,45,2,46,2,60,2,47,2,47,2,48,2,62,2,91,2,49,2,50,2,120,2,51,2,51,2,66,2,80,2,81,2,95,2,68,2,96,2,41,2,97,2,112,2,84,2,85,2,85,2,86,2,100,2,115,2,73,2,88,2,102,2,61,2,117,2,104,2,90,2,87,2,87,2,73,2,73,2,104,2,104,2,75,2,120,2,91,2,91,2,122,2,122,2,123,2,93,2,124,2,109,2,110,2,95,2,111,2,81,2,97,2,97,2,113,2,98,2,99,2,114,2,100,2,85,2,116,2,86,2,87,2,87,2,88,2,118,2,119,2,104,2,90,2,120,2,121,2,91,2,122,2,122,2,123,2,123,2,124,2,124,2,95,2,125,2,156,2,96,2,97,2,97,2,98,2,98,2,99,2,99,2,85,2,145,2,116,2,116,2,117,2,117,2,118,2,118,2,97,2,113,2,50,2,114,2,115,2,51,2,52,2,116,2,117,2,117,2,118,2,118,2,119,2,87,2,152,2,120,2,169,2,121,2,122,2,122,2,123,2,123,2,108,2,124,2,109,2,109,2,110,2,110,2,111,2,127,2,160,2,80,2,97,2,129,2,82,2,82,2,83,2,115,2,84,2,52,2,117,2,85,2,86,2,86,2,119,2,87,2,88,2,88,2,89,2,169,2,106,2,122,2,91,2,123,2,124,2,124,2,45,2,109,2,110,2,94,2,111,2,111,2,96,2,96,2], "i8", ALLOC_NONE, 5245032);
allocate([144,1,0,0,32,3,0,0,64,6,0,0,128,12,0,0,128,37,0,0,128,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,1,0,0,192,3,0,0,128,7,0,0,0,15,0,0,0,45,0,0,0,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5247080);
allocate(4, "i8", ALLOC_NONE, 5247208);
allocate([0,0,72,4,78,233,169,169,193,156,132,161], "i8", ALLOC_NONE, 5247212);
allocate([0,14,224,202], "i8", ALLOC_NONE, 5247224);
allocate([0,0,176,170,170,170,170,170,170,170,170,170], "i8", ALLOC_NONE, 5247228);
allocate([0,0,0,192], "i8", ALLOC_NONE, 5247240);
allocate([0,0,184,55,17,167,77,117,214,201,96,182], "i8", ALLOC_NONE, 5247244);
allocate([0,180,171,179], "i8", ALLOC_NONE, 5247256);
allocate([0,0,16,255,233,249,84,224,54,146,17,198], "i8", ALLOC_NONE, 5247260);
allocate([0,8,112,165], "i8", ALLOC_NONE, 5247272);
allocate([0,0,248,116,5,249,49,24,196,195,250,171], "i8", ALLOC_NONE, 5247276);
allocate([0,200,136,190], "i8", ALLOC_NONE, 5247288);
allocate([0,0,248,77,87,119,203,49,130,233,168,172], "i8", ALLOC_NONE, 5247292);
allocate([0,154,200,189], "i8", ALLOC_NONE, 5247304);
allocate([0,0,88,254,109,32,85,53,28,91,91,173], "i8", ALLOC_NONE, 5247308);
allocate([0,64,5,189], "i8", ALLOC_NONE, 5247320);
allocate([0,0,184,103,40,151,123,40,72,163,129,220], "i8", ALLOC_NONE, 5247324);
allocate([0,122,154,148], "i8", ALLOC_NONE, 5247336);
allocate([0,0,0,208,223,151,151,47,66,72,18,174], "i8", ALLOC_NONE, 5247340);
allocate([0,158,62,188], "i8", ALLOC_NONE, 5247352);
allocate([0,0,24,93,161,65,20,97,157,227,205,174], "i8", ALLOC_NONE, 5247356);
allocate([0,150,116,187], "i8", ALLOC_NONE, 5247368);
allocate([0,0,176,239,79,129,47,142,14,99,142,175], "i8", ALLOC_NONE, 5247372);
allocate([0,10,167,186], "i8", ALLOC_NONE, 5247384);
allocate([0,0,24,232,123,76,44,170,242,255,83,176], "i8", ALLOC_NONE, 5247388);
allocate([0,218,213,185], "i8", ALLOC_NONE, 5247400);
allocate([0,0,64,122,142,209,181,164,110,247,30,177], "i8", ALLOC_NONE, 5247404);
allocate([0,232,0,185], "i8", ALLOC_NONE, 5247416);
allocate([0,0,104,243,64,233,134,62,195,138,239,177], "i8", ALLOC_NONE, 5247420);
allocate([0,10,40,184], "i8", ALLOC_NONE, 5247432);
allocate([0,0,96,163,203,140,95,235,169,255,197,178], "i8", ALLOC_NONE, 5247436);
allocate([0,32,75,183], "i8", ALLOC_NONE, 5247448);
allocate([0,0,8,70,179,252,207,238,187,160,162,179], "i8", ALLOC_NONE, 5247452);
allocate([0,2,106,182], "i8", ALLOC_NONE, 5247464);
allocate([0,0,0,64,169,233,138,15,229,189,133,180], "i8", ALLOC_NONE, 5247468);
allocate([0,132,132,181], "i8", ALLOC_NONE, 5247480);
allocate([0,0,240,39,50,229,68,115,227,172,111,181], "i8", ALLOC_NONE, 5247484);
allocate([0,122,154,180], "i8", ALLOC_NONE, 5247496);
allocate([0,0,0,0,0,0,0,0,0,0,0,128], "i8", ALLOC_NONE, 5247500);
allocate([0,0,0,128], "i8", ALLOC_NONE, 5247512);
allocate([0,0,184,55,17,167,77,117,214,201,96,182], "i8", ALLOC_NONE, 5247516);
allocate([0,180,171,179], "i8", ALLOC_NONE, 5247528);
allocate([0,0,144,4,61,102,13,150,222,119,89,183], "i8", ALLOC_NONE, 5247532);
allocate([0,4,184,178], "i8", ALLOC_NONE, 5247544);
allocate([0,0,24,81,51,65,228,251,208,33,90,184], "i8", ALLOC_NONE, 5247548);
allocate([0,50,191,177], "i8", ALLOC_NONE, 5247560);
allocate([0,0,112,182,18,5,170,105,1,59,99,185], "i8", ALLOC_NONE, 5247564);
allocate([0,6,193,176], "i8", ALLOC_NONE, 5247576);
allocate([0,0,120,30,245,118,16,16,38,64,117,186], "i8", ALLOC_NONE, 5247580);
allocate([0,68,189,175], "i8", ALLOC_NONE, 5247592);
allocate([0,0,144,21,144,78,61,58,89,184,144,187], "i8", ALLOC_NONE, 5247596);
allocate([0,170,179,174], "i8", ALLOC_NONE, 5247608);
allocate([0,0,96,149,181,42,24,145,61,54,182,188], "i8", ALLOC_NONE, 5247612);
allocate([0,246,163,173], "i8", ALLOC_NONE, 5247624);
allocate([0,0,16,186,37,113,155,147,74,89,230,189], "i8", ALLOC_NONE, 5247628);
allocate([0,222,141,172], "i8", ALLOC_NONE, 5247640);
allocate([0,0,40,220,239,124,149,246,71,207,33,191], "i8", ALLOC_NONE, 5247644);
allocate([0,18,113,171], "i8", ALLOC_NONE, 5247656);
allocate([0,0,232,220,72,73,247,239,255,85,105,192], "i8", ALLOC_NONE, 5247660);
allocate([0,62,77,170], "i8", ALLOC_NONE, 5247672);
allocate([0,0,72,4,78,233,169,169,193,156,132,161], "i8", ALLOC_NONE, 5247676);
allocate([0,14,224,202], "i8", ALLOC_NONE, 5247688);
allocate([0,0,248,252,181,241,202,16,50,189,189,193], "i8", ALLOC_NONE, 5247692);
allocate([0,4,34,169], "i8", ALLOC_NONE, 5247704);
allocate([0,0,224,163,5,149,130,81,210,232,31,195], "i8", ALLOC_NONE, 5247708);
allocate([0,6,239,167], "i8", ALLOC_NONE, 5247720);
allocate([0,0,24,22,54,107,215,112,162,211,144,196], "i8", ALLOC_NONE, 5247724);
allocate([0,216,179,166], "i8", ALLOC_NONE, 5247736);
allocate([0,0,16,255,233,249,84,224,54,146,17,198], "i8", ALLOC_NONE, 5247740);
allocate([0,8,112,165], "i8", ALLOC_NONE, 5247752);
allocate([0,0,96,105,194,24,55,96,124,86,163,199], "i8", ALLOC_NONE, 5247756);
allocate([0,24,35,164], "i8", ALLOC_NONE, 5247768);
allocate([0,0,80,251,202,23,121,90,216,115,71,201], "i8", ALLOC_NONE, 5247772);
allocate([0,128,204,162], "i8", ALLOC_NONE, 5247784);
allocate([0,0,136,8,135,161,4,83,4,100,255,202], "i8", ALLOC_NONE, 5247788);
allocate([0,174,107,161], "i8", ALLOC_NONE, 5247800);
allocate([0,0,208,204,204,204,204,204,204,204,204,204], "i8", ALLOC_NONE, 5247804);
allocate([0,0,0,160], "i8", ALLOC_NONE, 5247816);
allocate([0,0,120,213,202,247,238,99,230,134,177,206], "i8", ALLOC_NONE, 5247820);
allocate([0,200,136,158], "i8", ALLOC_NONE, 5247832);
allocate([0,0,136,53,50,23,173,92,25,166,175,208], "i8", ALLOC_NONE, 5247836);
allocate([0,64,5,157], "i8", ALLOC_NONE, 5247848);
allocate([0,0,0,0,0,0,0,0,0,0,0,128], "i8", ALLOC_NONE, 5247852);
allocate([0,0,0,128], "i8", ALLOC_NONE, 5247864);
allocate([0,0,200,204,179,98,108,156,21,131,201,210], "i8", ALLOC_NONE, 5247868);
allocate([0,150,116,155], "i8", ALLOC_NONE, 5247880);
allocate([0,0,184,222,184,232,223,113,88,199,1,213], "i8", ALLOC_NONE, 5247884);
allocate([0,218,213,153], "i8", ALLOC_NONE, 5247896);
allocate([0,0,8,91,189,225,55,226,172,123,91,215], "i8", ALLOC_NONE, 5247900);
allocate([0,10,40,152], "i8", ALLOC_NONE, 5247912);
allocate([0,0,88,100,164,120,131,117,249,25,218,217], "i8", ALLOC_NONE, 5247916);
allocate([0,2,106,150], "i8", ALLOC_NONE, 5247928);
allocate([0,0,184,103,40,151,123,40,72,163,129,220], "i8", ALLOC_NONE, 5247932);
allocate([0,122,154,148], "i8", ALLOC_NONE, 5247944);
allocate([0,0,104,54,99,114,198,199,68,187,86,223], "i8", ALLOC_NONE, 5247948);
allocate([0,4,184,146], "i8", ALLOC_NONE, 5247960);
allocate([0,0,224,195,106,88,185,70,221,202,94,226], "i8", ALLOC_NONE, 5247964);
allocate([0,6,193,144], "i8", ALLOC_NONE, 5247976);
allocate([0,0,232,219,97,240,185,96,77,44,160,229], "i8", ALLOC_NONE, 5247980);
allocate([0,170,179,142], "i8", ALLOC_NONE, 5247992);
allocate([0,0,8,65,38,107,208,179,193,99,34,233], "i8", ALLOC_NONE, 5247996);
allocate([0,222,141,140], "i8", ALLOC_NONE, 5248008);
allocate([0,0,64,11,28,167,193,28,10,105,238,236], "i8", ALLOC_NONE, 5248012);
allocate([0,62,77,138], "i8", ALLOC_NONE, 5248024);
allocate([0,0,184,13,140,85,237,98,192,8,15,241], "i8", ALLOC_NONE, 5248028);
allocate([0,6,239,135], "i8", ALLOC_NONE, 5248040);
allocate([0,0,152,54,120,19,55,85,52,102,145,245], "i8", ALLOC_NONE, 5248044);
allocate([0,8,112,133], "i8", ALLOC_NONE, 5248056);
allocate([0,0,32,135,155,37,196,98,245,171,133,250], "i8", ALLOC_NONE, 5248060);
allocate([0,128,204,130], "i8", ALLOC_NONE, 5248072);
allocate([0,0,0,0,0,0,0,0,0,0,0,128], "i8", ALLOC_NONE, 5248076);
allocate([0,0,0,128], "i8", ALLOC_NONE, 5248088);
allocate([0,0,128,111,170,166,240,105,35,238,12,131], "i8", ALLOC_NONE, 5248092);
allocate([0,128,10,250], "i8", ALLOC_NONE, 5248104);
allocate([0,0,168,133,171,92,181,150,246,255,121,134], "i8", ALLOC_NONE, 5248108);
allocate([0,180,171,243], "i8", ALLOC_NONE, 5248120);
allocate([0,0,248,87,180,247,32,203,198,167,92,138], "i8", ALLOC_NONE, 5248124);
allocate([0,2,212,236], "i8", ALLOC_NONE, 5248136);
allocate([0,0,40,254,36,28,3,11,26,156,209,142], "i8", ALLOC_NONE, 5248140);
allocate([0,8,112,229], "i8", ALLOC_NONE, 5248152);
allocate([0,0,112,225,16,157,34,235,14,78,0,148], "i8", ALLOC_NONE, 5248156);
allocate([0,84,103,221], "i8", ALLOC_NONE, 5248168);
allocate([0,0,144,143,152,247,207,251,132,154,32,154], "i8", ALLOC_NONE, 5248172);
allocate([0,122,154,212], "i8", ALLOC_NONE, 5248184);
allocate(4, "i8", ALLOC_NONE, 5248188);
allocate([1,2,3,3,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8] /* \01\02\03\03\04\04\0 */, "i8", ALLOC_NONE, 5248192);
allocate(4, "i8", ALLOC_NONE, 5248320);
allocate(24, "i8", ALLOC_NONE, 5248324);
allocate([0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0], "i8", ALLOC_NONE, 5248348);
allocate([102,32,60,61,32,48,0] /* f _= 0\00 */, "i8", ALLOC_NONE, 5248384);
allocate([109,117,108,95,117,105,46,99,0] /* mul_ui.c\00 */, "i8", ALLOC_NONE, 5248392);
allocate([101,37,108,100,0] /* e%ld\00 */, "i8", ALLOC_NONE, 5248404);
allocate([109,117,108,46,99,0] /* mul.c\00 */, "i8", ALLOC_NONE, 5248412);
allocate([95,108,105,109,98,32,61,61,32,40,101,120,112,41,32,45,32,49,0] /* _limb == (exp) - 1\0 */, "i8", ALLOC_NONE, 5248420);
allocate([101,32,60,61,32,50,49,52,55,52,56,51,54,52,55,76,0] /* e _= 2147483647L\00 */, "i8", ALLOC_NONE, 5248440);
allocate([40,101,120,112,41,32,62,32,49,0] /* (exp) _ 1\00 */, "i8", ALLOC_NONE, 5248460);
allocate([101,32,62,61,32,40,45,50,49,52,55,52,56,51,54,52,55,76,45,49,41,0] /* e _= (-2147483647L-1 */, "i8", ALLOC_NONE, 5248472);
allocate([95,108,105,109,98,32,61,61,32,40,112,114,101,99,41,32,45,32,49,0] /* _limb == (prec) - 1\ */, "i8", ALLOC_NONE, 5248496);
allocate([45,48,0] /* -0\00 */, "i8", ALLOC_NONE, 5248516);
allocate([40,112,114,101,99,41,32,62,32,49,0] /* (prec) _ 1\00 */, "i8", ALLOC_NONE, 5248520);
allocate([64,78,97,78,64,0] /* @NaN@\00 */, "i8", ALLOC_NONE, 5248532);
allocate([110,108,32,61,61,32,48,0] /* nl == 0\00 */, "i8", ALLOC_NONE, 5248540);
allocate([48,0] /* 0\00 */, "i8", ALLOC_NONE, 5248548);
allocate([95,108,105,109,98,32,61,61,32,40,110,32,43,32,50,41,32,45,32,49,0] /* _limb == (n + 2) - 1 */, "i8", ALLOC_NONE, 5248552);
allocate([115,101,116,95,115,105,95,50,101,120,112,46,99,0] /* set_si_2exp.c\00 */, "i8", ALLOC_NONE, 5248576);
allocate([109,32,62,61,32,50,32,124,124,32,40,40,40,40,98,41,32,38,32,40,40,98,41,32,45,32,49,41,41,32,61,61,32,48,41,32,61,61,32,48,32,38,38,32,109,32,62,61,32,49,41,0] /* m _= 2 || ((((b) & ( */, "i8", ALLOC_NONE, 5248592);
allocate([110,112,114,105,109,101,50,32,60,32,110,0] /* nprime2 _ n\00 */, "i8", ALLOC_NONE, 5248644);
allocate([37,115,58,0] /* %s:\00 */, "i8", ALLOC_NONE, 5248656);
allocate([109,112,110,95,101,120,112,46,99,0] /* mpn_exp.c\00 */, "i8", ALLOC_NONE, 5248660);
allocate([115,117,98,49,115,112,46,99,0] /* sub1sp.c\00 */, "i8", ALLOC_NONE, 5248672);
allocate([45,64,73,110,102,64,0] /* -@Inf@\00 */, "i8", ALLOC_NONE, 5248684);
allocate([117,32,61,61,32,40,109,112,95,108,105,109,98,95,116,41,32,117,0] /* u == (mp_limb_t) u\0 */, "i8", ALLOC_NONE, 5248692);
allocate([40,110,32,43,32,50,41,32,62,32,49,0] /* (n + 2) _ 1\00 */, "i8", ALLOC_NONE, 5248712);
allocate([109,117,95,100,105,118,95,113,114,46,99,0] /* mu_div_qr.c\00 */, "i8", ALLOC_NONE, 5248724);
allocate([115,98,112,105,49,95,100,105,118,97,112,112,114,95,113,46,99,0] /* sbpi1_divappr_q.c\00 */, "i8", ALLOC_NONE, 5248736);
allocate([105,110,105,116,50,46,99,0] /* init2.c\00 */, "i8", ALLOC_NONE, 5248756);
allocate([103,101,116,95,115,116,114,46,99,0] /* get_str.c\00 */, "i8", ALLOC_NONE, 5248764);
allocate([77,80,70,82,58,32,67,97,110,39,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,40,115,105,122,101,61,37,108,117,41,10,0] /* MPFR: Can't allocate */, "i8", ALLOC_NONE, 5248776);
allocate([40,114,110,100,95,109,111,100,101,32,33,61,32,77,80,70,82,95,82,78,68,78,41,32,124,124,32,40,98,99,112,32,33,61,32,48,41,32,124,124,32,40,98,98,99,112,32,61,61,32,48,41,32,124,124,32,40,98,98,99,112,49,32,33,61,32,40,109,112,95,108,105,109,98,95,116,41,32,45,49,41,0] /* (rnd_mode != MPFR_RN */, "i8", ALLOC_NONE, 5248816);
allocate([114,110,32,61,61,32,100,110,0] /* rn == dn\00 */, "i8", ALLOC_NONE, 5248900);
allocate([71,78,85,32,77,80,58,32,67,97,110,110,111,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,40,115,105,122,101,61,37,108,117,41,10,0] /* GNU MP: Cannot alloc */, "i8", ALLOC_NONE, 5248912);
allocate([40,110,32,38,32,40,75,50,32,45,32,49,41,41,32,61,61,32,48,0] /* (n & (K2 - 1)) == 0\ */, "i8", ALLOC_NONE, 5248956);
allocate([64,73,110,102,64,0] /* @Inf@\00 */, "i8", ALLOC_NONE, 5248976);
allocate([97,100,100,49,46,99,0] /* add1.c\00 */, "i8", ALLOC_NONE, 5248984);
allocate([95,108,105,109,98,32,61,61,32,40,117,41,32,45,32,49,0] /* _limb == (u) - 1\00 */, "i8", ALLOC_NONE, 5248992);
allocate([116,104,114,101,115,104,111,108,100,32,62,61,32,49,0] /* threshold _= 1\00 */, "i8", ALLOC_NONE, 5249012);
allocate([64,73,110,102,64,0] /* @Inf@\00 */, "i8", ALLOC_NONE, 5249028);
allocate([77,80,70,82,32,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,37,115,10,0] /* MPFR assertion faile */, "i8", ALLOC_NONE, 5249036);
allocate([40,50,32,60,61,32,98,41,32,38,38,32,40,98,32,60,61,32,54,50,41,0] /* (2 _= b) && (b _= 62 */, "i8", ALLOC_NONE, 5249064);
allocate([98,98,99,112,49,32,33,61,32,40,109,112,95,108,105,109,98,95,116,41,32,45,49,0] /* bbcp1 != (mp_limb_t) */, "i8", ALLOC_NONE, 5249088);
allocate([99,120,32,62,61,32,99,121,0] /* cx _= cy\00 */, "i8", ALLOC_NONE, 5249112);
allocate([116,100,105,118,95,113,114,46,99,0] /* tdiv_qr.c\00 */, "i8", ALLOC_NONE, 5249124);
allocate([112,32,62,61,32,50,32,38,38,32,112,32,60,61,32,40,40,109,112,102,114,95,112,114,101,99,95,116,41,40,40,109,112,102,114,95,117,112,114,101,99,95,116,41,40,126,40,109,112,102,114,95,117,112,114,101,99,95,116,41,48,41,62,62,49,41,41,0] /* p _= 2 && p _= ((mpf */, "i8", ALLOC_NONE, 5249136);
allocate([100,105,118,46,99,0] /* div.c\00 */, "i8", ALLOC_NONE, 5249204);
allocate([95,108,105,109,98,32,61,61,32,40,50,32,42,32,110,32,43,32,50,41,32,45,32,49,0] /* _limb == (2 _ n + 2) */, "i8", ALLOC_NONE, 5249212);
allocate([110,50,112,91,113,110,93,32,62,61,32,99,121,50,0] /* n2p[qn] _= cy2\00 */, "i8", ALLOC_NONE, 5249240);
allocate([71,78,85,32,77,80,32,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,58,32,37,115,10,0] /* GNU MP assertion fai */, "i8", ALLOC_NONE, 5249256);
allocate([110,112,114,105,109,101,32,60,32,112,108,0] /* nprime _ pl\00 */, "i8", ALLOC_NONE, 5249288);
allocate([64,78,97,78,64,0] /* @NaN@\00 */, "i8", ALLOC_NONE, 5249300);
allocate([37,115,58,0] /* %s:\00 */, "i8", ALLOC_NONE, 5249308);
allocate([103,101,116,95,115,116,114,46,99,0] /* get_str.c\00 */, "i8", ALLOC_NONE, 5249312);
allocate([40,117,41,32,62,32,49,0] /* (u) _ 1\00 */, "i8", ALLOC_NONE, 5249324);
allocate([115,101,116,95,100,46,99,0] /* set_d.c\00 */, "i8", ALLOC_NONE, 5249332);
allocate([40,109,112,102,114,95,117,112,114,101,99,95,116,41,32,98,113,32,43,32,99,113,32,60,61,32,40,40,109,112,102,114,95,112,114,101,99,95,116,41,40,40,109,112,102,114,95,117,112,114,101,99,95,116,41,40,126,40,109,112,102,114,95,117,112,114,101,99,95,116,41,48,41,62,62,49,41,41,0] /* (mpfr_uprec_t) bq +  */, "i8", ALLOC_NONE, 5249340);
allocate([109,117,108,95,102,102,116,46,99,0] /* mul_fft.c\00 */, "i8", ALLOC_NONE, 5249420);
allocate([99,109,112,95,115,105,46,99,0] /* cmp_si.c\00 */, "i8", ALLOC_NONE, 5249432);
allocate([45,64,73,110,102,64,0] /* -@Inf@\00 */, "i8", ALLOC_NONE, 5249444);
allocate([40,40,105,41,32,62,61,32,48,32,63,32,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,40,105,41,32,58,32,45,40,117,110,115,105,103,110,101,100,32,108,111,110,103,41,40,105,41,41,32,61,61,32,97,105,0] /* ((i) _= 0 ? (unsigne */, "i8", ALLOC_NONE, 5249452);
allocate([37,100,58,32,0] /* %d: \00 */, "i8", ALLOC_NONE, 5249512);
allocate([101,32,62,32,48,0] /* e _ 0\00 */, "i8", ALLOC_NONE, 5249520);
allocate([98,98,99,112,32,33,61,32,40,109,112,95,108,105,109,98,95,116,41,32,45,49,0] /* bbcp != (mp_limb_t)  */, "i8", ALLOC_NONE, 5249528);
allocate([71,78,85,32,77,80,58,32,67,97,110,110,111,116,32,114,101,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,32,40,111,108,100,95,115,105,122,101,61,37,108,117,32,110,101,119,95,115,105,122,101,61,37,108,117,41,10,0] /* GNU MP: Cannot reall */, "i8", ALLOC_NONE, 5249552);
allocate([114,110,100,95,109,111,100,101,32,61,61,32,77,80,70,82,95,82,78,68,65,0] /* rnd_mode == MPFR_RND */, "i8", ALLOC_NONE, 5249616);
allocate([99,121,32,61,61,32,48,0] /* cy == 0\00 */, "i8", ALLOC_NONE, 5249640);
allocate([110,112,91,49,93,32,61,61,32,110,49,0] /* np[1] == n1\00 */, "i8", ALLOC_NONE, 5249648);
allocate([95,95,103,109,112,95,98,105,116,115,95,112,101,114,95,108,105,109,98,32,61,61,32,40,51,50,32,45,32,48,41,0] /* __gmp_bits_per_limb  */, "i8", ALLOC_NONE, 5249660);
allocate([115,105,122,101,95,115,49,32,62,61,32,50,0] /* size_s1 _= 2\00 */, "i8", ALLOC_NONE, 5249692);
allocate([40,50,32,42,32,110,32,43,32,50,41,32,62,32,49,0] /* (2 _ n + 2) _ 1\00 */, "i8", ALLOC_NONE, 5249708);
allocate([113,120,110,32,61,61,32,48,0] /* qxn == 0\00 */, "i8", ALLOC_NONE, 5249724);
allocate([37,100,58,32,0] /* %d: \00 */, "i8", ALLOC_NONE, 5249736);
allocate([112,111,119,116,97,98,95,109,101,109,95,112,116,114,32,60,32,112,111,119,116,97,98,95,109,101,109,32,43,32,40,40,117,110,41,32,43,32,50,32,42,32,51,50,41,0] /* powtab_mem_ptr _ pow */, "i8", ALLOC_NONE, 5249744);
allocate([100,32,42,32,48,46,53,32,33,61,32,100,0] /* d _ 0.5 != d\00 */, "i8", ALLOC_NONE, 5249792);
allocate([97,105,32,61,61,32,40,109,112,95,108,105,109,98,95,116,41,32,97,105,0] /* ai == (mp_limb_t) ai */, "i8", ALLOC_NONE, 5249808);
allocate([95,95,103,109,112,110,95,102,102,116,95,110,101,120,116,95,115,105,122,101,32,40,112,108,44,32,107,41,32,61,61,32,112,108,0] /* __gmpn_fft_next_size */, "i8", ALLOC_NONE, 5249832);
allocate([115,105,122,101,95,115,49,32,62,61,32,109,0] /* size_s1 _= m\00 */, "i8", ALLOC_NONE, 5249868);
allocate([98,97,115,101,32,62,61,32,50,32,38,38,32,98,97,115,101,32,60,61,32,54,50,0] /* base _= 2 && base _= */, "i8", ALLOC_NONE, 5249884);
allocate([102,32,62,32,40,45,110,32,42,32,40,51,50,32,45,32,48,41,41,0] /* f _ (-n _ (32 - 0))\ */, "i8", ALLOC_NONE, 5249908);
allocate([64,37,108,100,0] /* @%ld\00 */, "i8", ALLOC_NONE, 5249928);
allocate([111,117,116,95,115,116,114,46,99,0] /* out_str.c\00 */, "i8", ALLOC_NONE, 5249936);
allocate([83,117,109,32,105,115,32,0] /* Sum is \00 */, "i8", ALLOC_NONE, 5249948);
allocate(468, "i8", ALLOC_NONE, 5249956);
allocate([1,2,3,3,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9] /* \01\02\03\03\04\04\0 */, "i8", ALLOC_NONE, 5250424);
allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,255,255,255,255,255,255,255,31,1,0,0,0,0,0,0,0,20,0,0,0,193,156,132,161,71,3,184,50,145,27,212,207,36,60,86,59,16,0,0,0,255,255,255,127,255,255,255,63,2,0,0,0,0,0,0,0,13,0,0,0,164,209,64,110,37,60,77,74,149,115,194,72,132,38,92,194,12,0,0,0,27,201,8,99,71,3,184,82,0,16,191,129,182,209,27,249,11,0,0,0,235,100,48,91,253,217,213,89,151,156,219,117,203,162,7,22,10,0,0,0,85,85,85,85,255,255,255,95,3,0,0,0,0,0,0,0,10,0,0,0,96,78,194,80,142,6,112,101,145,27,212,207,36,60,86,59,9,0,0,0,66,77,16,77,37,60,77,106,0,202,154,59,130,190,224,18,9,0,0,0,7,39,0,74,240,169,179,110,43,109,139,140,4,222,76,210,8,0,0,0,13,206,104,71,71,3,184,114,0,0,161,25,181,154,163,63,8,0,0,0,227,83,46,69,142,0,106,118,33,16,159,48,95,172,248,80,8,0,0,0,251,255,60,67,253,217,213,121,0,193,246,87,30,59,132,116,8,0,0,0,17,119,134,65,109,63,5,125,129,155,194,152,194,38,3,173,8,0,0,0,255,255,255,63,255,255,255,127,4,0,0,0,0,0,0,0,7,0,0,0,253,106,161,62,223,126,204,130,113,69,117,24,189,182,240,78,7,0,0,0,141,89,100,61,142,6,112,133,128,188,125,36,161,72,252,192,7,0,0,0,48,194,67,60,174,5,239,135,123,102,71,53,66,137,131,51,7,0,0,0,66,154,59,59,37,60,77,138,0,64,75,76,171,41,127,173,7,0,0,0,240,152,72,58,68,221,141,140,29,110,90,107,21,61,60,49,7,0,0,0,19,11,104,57,240,169,179,142,128,225,172,148,224,169,204,184,7,0,0,0,183,178,151,56,0,5,193,144,103,131,241,202,233,109,237,66,6,0,0,0,209,174,213,55,71,3,184,146,0,0,100,11,11,14,152,103,6,0,0,0,210,104,32,55,75,120,154,148,81,74,141,14,18,152,121,25,6,0,0,0,126,134,118,54,142,0,106,150,64,174,105,18,150,83,232,188,6,0,0,0,235,222,214,53,213,9,40,152,73,145,23,23,169,3,193,98,6,0,0,0,214,113,64,53,253,217,213,153,0,16,185,28,67,61,53,29,6,0,0,0,197,96,178,52,143,148,116,155,153,72,116,35,234,236,29,206,6,0,0,0,134,233,43,52,109,63,5,157,64,168,115,43,17,197,15,121,6,0,0,0,185,97,172,51,179,198,136,158,65,59,230,52,160,101,184,53,6,0,0,0,51,51,51,51,255,255,255,159,5,0,0,0,0,0,0,0,6,0,0,0,1,217,191,50,55,173,107,161,193,60,250,76,179,209,174,169,6,0,0,0,246,220,81,50,223,126,204,162,64,216,19,92,41,194,223,99,6,0,0,0,159,213,232,49,35,22,35,164,25,181,145,109,48,238,15,43,6,0,0,0,141,100,132,49,142,6,112,165,0,16,191,129,182,209,27,249,6,0,0,0,232,52,36,49,139,215,179,166,201,224,237,152,169,195,137,172,6,0,0,0,52,250,199,48,174,5,239,167,64,62,119,179,254,50,44,109,6,0,0,0,76,111,111,48,213,3,34,169,209,196,187,209,201,7,121,56,6,0,0,0,127,85,26,48,37,60,77,170,0,0,36,244,11,122,111,12,5,0,0,0,209,115,200,47,230,16,113,171,73,211,231,6,84,129,146,40,5,0,0,0,82,150,121,47,68,221,141,172,160,48,202,7,157,98,232,6,5,0,0,0,143,141,45,47,251,245,163,173,187,43,195,8,160,220,115,211,5,0,0,0,22,46,228,46,240,169,179,174,0,108,212,9,149,120,177,160,5,0,0,0,9,80,157,46,180,66,189,175,253,172,255,10,165,17,104,116,5,0,0,0,192,206,88,46,0,5,193,176,224,190,70,12,15,80,166,77,5,0,0,0,116,136,22,46,30,49,191,177,239,134,171,13,130,53,162,43,5,0,0,0,247,93,214,45,71,3,184,178,0,0,48,15,136,10,178,13,5,0,0,0,117,50,152,45,250,179,171,179,241,58,214,16,228,92,141,230,5,0,0,0,56,235,91,45,75,120,154,180,32,95,160,18,157,253,205,183,5,0,0,0,121,111,33,45,38,130,132,181,227,170,144,20,51,57,88,142,5,0,0,0,46,168,232,44,142,0,106,182,0,116,169,22,234,195,124,105,5,0,0,0,234,127,177,44,214,31,75,183,37,40,237,24,108,202,165,72,5,0,0,0,176,226,123,44,213,9,40,184,96,77,94,27,22,219,82,43,5,0,0,0,219,189,71,44,21,230,0,185,151,130,255,29,166,134,21,17,5,0,0,0,252,255,20,44,253,217,213,185,0,128,211,32,54,43,29,243,5,0,0,0,195,152,227,43,245,8,167,186,153,23,221,35,25,109,215,200,5,0,0,0,231,120,179,43,143,148,116,187,160,53,31,39,180,30,203,162,5,0,0,0,16,146,132,43,162,156,62,188,11,225,156,42,195,62,124,128,5,0,0,0,199,214,86,43,109,63,5,189,0,60,89,46,191,200,126,97,5,0,0,0,96,58,42,43,171,153,200,189,77,132,87,50,190,108,116,69,5,0,0,0,241,176,254,42,179,198,136,190,224,19,155,54,115,162,10,44,5,0,0,0,60,47,212,42,139,224,69,191,63,97,39,59,5,8,249,20,5,0,0,0,170,170,170,42,255,255,255,191,6,0,0,0,0,0,0,0,5,0,0,0,58,25,130,42,180,60,183,192,65,161,40,69,41,8,207,217,5,0,0,0,118,113,90,42,55,173,107,193,32,20,165,74,65,72,252,182,5,0,0,0,110,170,51,42,19,103,29,194,51,70,121,80,203,84,48,151,5,0,0,0,170,187,13,42,223,126,204,194,0,68,169,86,75,190,29,122,5,0,0,0,36,157,232,41,72,8,121,195,117,57,57,93,127,205,127,95,5,0,0,0,64,71,196,41,35,22,35,196,96,114,45,100,132,108,25,71,5,0,0,0,199,178,160,41,120,186,202,196,231,90,138,107,53,54,180,48,5,0,0,0,219,216,125,41,142,6,112,197,0,128,84,115,246,165,31,28,5,0,0,0,249,178,91,41,244,10,19,198,233,143,144,123,74,99,48,9,5,0,0,0,235,58,58,41,139,215,179,198,160,90,67,132,60,74,127,239,5,0,0,0,204,106,25,41,147,123,82,199,91,210,113,141,210,82,85,207,5,0,0,0,251,60,249,40,174,5,239,199,0,12,33,151,142,124,164,177,5,0,0,0,27,172,217,40,237,131,137,200,157,63,86,161,62,180,52,150,5,0,0,0,16,179,186,40,213,3,34,201,224,200,22,172,125,129,211,124,5,0,0,0,248,76,156,40,103,146,184,201,143,39,104,183,97,103,83,101,5,0,0,0,41,117,126,40,37,60,77,202,0,0,80,195,142,88,139,79,5,0,0,0,48,39,97,40,28,13,224,202,145,27,212,207,36,60,86,59,5,0,0,0,201,94,68,40,230,16,113,203,32,105,250,220,84,129,146,40,5,0,0,0,225,23,40,40,177,82,0,204,131,253,200,234,176,191,33,23,5,0,0,0,144,78,12,40,68,221,141,204,0,20,70,249,157,98,232,6,4,0,0,0,27,255,240,39,5,187,25,205,177,132,28,3,124,193,28,73,4,0,0,0,236,37,214,39,251,245,163,205,16,171,66,3,59,216,17,58,4,0,0,0,149,191,187,39,214,151,44,206,33,44,106,3,205,116,224,43,4,0,0,0,200,200,161,39,240,169,179,206,0,16,147,3,231,2,122,30,4,0,0,0,94,62,136,39,80,53,57,207,225,94,189,3,221,14,209,17,4,0,0,0,76,29,111,39,180,66,189,207,16,33,233,3,104,44,217,5,4,0,0,0,168,98,86,39,139,218,63,208,241,94,22,4,178,191,13,245,4,0,0,0,163,11,62,39,0,5,193,208,0,33,69,4,22,19,159,223,4,0,0,0,140,21,38,39,250,201,64,209,209,111,117,4,132,166,82,203,4,0,0,0,201,125,14,39,30,49,191,209,16,84,167,4,151,62,22,184,4,0,0,0,221,65,247,38,212,65,60,210,129,214,218,4,105,242,216,165,4,0,0,0,95,95,224,38,71,3,184,210,0,0,16,5,205,15,139,148,4,0,0,0,254,211,201,38,106,124,50,211,129,217,70,5,21,2,30,132,4,0,0,0,127,157,179,38,250,179,171,211,16,108,127,5,30,59,132,116,4,0,0,0,188,185,157,38,126,176,35,212,209,192,185,5,110,30,177,101,4,0,0,0,161,38,136,38,75,120,154,212,0,225,245,5,35,238,152,87,4,0,0,0,45,226,114,38,135,17,16,213,241,213,51,6,155,185,48,74,4,0,0,0,114,234,93,38,38,130,132,213,16,169,115,6,148,77,110,61,4,0,0,0,147,61,73,38,244,207,247,213,225,99,181,6,176,37,72,49,4,0,0,0,194,217,52,38,142,0,106,214,0,16,249,6,46,95,181,37,4,0,0,0,65,189,32,38,106,25,219,214,33,183,62,7,203,172,173,26,4,0,0,0,98,230,12,38,214,31,75,215,16,99,134,7,162,75,41,16,4,0,0,0,133,83,249,37,249,24,186,215,177,29,208,7,246,248,32,6,4,0,0,0,22,3,230,37,213,9,40,216,0,241,27,8,182,209,27,249,4,0,0,0,144,243,210,37,75,247,148,216,17,231,105,8,42,123,211,230,4,0,0,0,121,35,192,37,21,230,0,217,16,10,186,8,110,255,92,213,4,0,0,0,101,145,173,37,210,218,107,217,65,100,12,9,178,45,173,196,4,0,0,0,243,59,155,37,253,217,213,217,0,0,97,9,207,133,185,180,4,0,0,0,203,33,137,37,243,231,62,218,193,231,183,9,239,43,120,165,4,0,0,0,162,65,119,37,245,8,167,218,16,38,17,10,42,221,223,150,4,0,0,0,55,154,101,37,38,65,14,219,145,197,108,10,9,229,231,136,4,0,0,0,80,42,84,37,143,148,116,219,0,209,202,10,211,19,136,123,4,0,0,0,194,240,66,37,28,7,218,219,49,83,43,11,149,181,184,110,4,0,0,0,100,236,49,37,162,156,62,220,16,87,142,11,219,137,114,98,4,0,0,0,28,28,33,37,220,88,162,220,161,231,243,11,7,188,174,86,4,0,0,0,213,126,16,37,109,63,5,221,0,16,92,12,51,220,102,75,4,0,0,0,131,19,0,37,224,83,103,221,97,219,198,12,163,216,148,64,4,0,0,0,33,217,239,36,171,153,200,221,16,85,52,13,165,247,50,54,4,0,0,0,179,206,223,36,46,20,41,222,113,136,164,13,240,209,59,44,4,0,0,0,67,243,207,36,179,198,136,222,0,129,23,14,95,77,170,34,4,0,0,0,225,69,192,36,113,180,231,222,81,74,141,14,18,152,121,25,4,0,0,0,166,197,176,36,139,224,69,223,16,240,5,15,229,35,165,16,4,0,0,0,176,113,161,36,17,78,163,223,1,126,129,15,55,162,40,8,4,0,0,0,36,73,146,36,255,255,255,223,7,0,0,0,0,0,0,0,4,0,0,0,44,75,131,36,66,249,91,224,1,130,129,16,82,196,78,240,4,0,0,0,249,118,116,36,180,60,183,224,16,16,6,17,74,68,54,225,4,0,0,0,192,203,101,36,29,205,17,225,81,182,141,17,137,149,175,210,4,0,0,0,188,72,87,36,55,173,107,225,0,129,24,18,131,42,180,196,4,0,0,0,47,237,72,36,171,223,196,225,113,124,166,18,245,204,61,183,4,0,0,0,93,184,58,36,19,103,29,226,16,181,55,19,197,152,70,170,4,0,0,0,146,169,44,36,251,69,117,226,97,55,204,19,41,247,200,157,4,0,0,0,27,192,30,36,223,126,204,226,0,16,100,20,48,154,191,145,4,0,0,0,77,251,16,36,45,20,35,227,161,75,255,20,135,120,37,134,4,0,0,0,128,90,3,36,72,8,121,227,16,247,157,21,140,201,245,122,4,0,0,0,16,221,245,35,130,93,206,227,49,31,64,22,160,1,44,112,4,0,0,0,93,130,232,35,35,22,35,228,0,209,229,22,177,206,195,101,4,0,0,0,204,73,219,35,101,52,119,228,145,25,143,23,2,21,185,91,4,0,0,0,196,50,206,35,120,186,202,228,16,6,60,24,35,236,7,82,4,0,0,0,179,60,193,35,126,170,29,229,193,163,236,24,25,156,172,72,4,0,0,0,6,103,180,35,142,6,112,229,0,0,161,25,181,154,163,63,4,0,0,0,50,177,167,35,181,208,193,229,65,40,89,26,18,137,233,54,4,0,0,0,172,26,155,35,244,10,19,230,16,42,21,27,64,49,123,46,4,0,0,0,239,162,142,35,65,183,99,230,17,19,213,27,11,132,85,38,4,0,0,0,118,73,130,35,139,215,179,230,0,241,152,28,234,150,117,30,4,0,0,0,195,13,118,35,179,109,3,231,177,209,96,29,13,162,216,22,4,0,0,0,88,239,105,35,147,123,82,231,16,195,44,30,135,254,123,15,4,0,0,0,187,237,93,35,249,2,161,231,33,211,252,30,146,36,93,8,4,0,0,0,116,8,82,35,174,5,239,231,0,16,209,31,244,169,121,1,4,0,0,0,16,63,70,35,109,133,60,232,225,135,169,32,235,128,158,245,4,0,0,0,27,145,58,35,237,131,137,232,16,73,134,33,219,104,183,232,4,0,0,0,38,254,46,35,217,2,214,232,241,97,103,34,213,214,57,220,4,0,0,0,198,133,35,35,213,3,34,233,0,225,76,35,209,197,33,208,4,0,0,0,142,39,24,35,126,136,109,233,209,212,54,36,55,94,107,196,4,0,0,0,24,227,12,35,103,146,184,233,16,76,37,37,156,243,18,185,4,0,0,0,253,183,1,35,29,35,3,234,129,85,24,38,148,2,21,174,4,0,0,0,217,165,246,34,37,60,77,234,0,0,16,39,177,46,110,163,4,0,0,0,76,172,235,34,254,222,150,234,129,90,12,40,148,64,27,153,4,0,0,0,246,202,224,34,28,13,224,234,16,116,13,41,30,36,25,143,4,0,0,0,121,1,214,34,242,199,40,235,209,91,19,42,183,230,100,133,4,0,0,0,122,79,203,34,230,16,113,235,0,33,30,43,180,181,251,123,4,0,0,0,161,180,192,34,93,233,184,235,241,210,45,44,200,220,218,114,4,0,0,0,149,48,182,34,177,82,0,236,16,129,66,45,152,196,255,105,4,0,0,0,0,195,171,34,57,78,71,236,225,58,92,46,84,241,103,97,4,0,0,0,144,107,161,34,68,221,141,236,0,16,123,47,110,1,17,89,4,0,0,0,241,41,151,34,28,1,212,236,33,16,159,48,95,172,248,80,4,0,0,0,212,253,140,34,5,187,25,237,16,75,200,49,124,193,28,73,4,0,0,0,233,230,130,34,60,12,95,237,177,208,246,50,216,38,123,65,4,0,0,0,227,228,120,34,251,245,163,237,0,177,42,52,59,216,17,58,4,0,0,0,119,247,110,34,116,121,232,237,17,252,99,53,34,230,222,50,4,0,0,0,90,30,101,34,214,151,44,238,16,194,162,54,205,116,224,43,4,0,0,0,68,89,91,34,73,82,112,238,65,19,231,55,88,187,20,37,4,0,0,0,238,167,81,34,240,169,179,238,0,0,49,57,231,2,122,30,4,0,0,0,17,10,72,34,234,159,246,238,193,152,128,58,208,165,14,24,4,0,0,0,105,127,62,34,80,53,57,239,16,238,213,59,221,14,209,17,4,0,0,0,180,7,53,34,57,107,123,239,145,16,49,61,142,184,191,11,4,0,0,0,175,162,43,34,180,66,189,239,0,17,146,62,104,44,217,5,4,0,0,0,25,80,34,34,205,188,254,239,49,0,249,63,76,2,28,0,4,0,0,0,180,15,25,34,139,218,63,240,16,239,101,65,178,191,13,245,4,0,0,0,65,225,15,34,242,156,128,240,161,238,216,66,163,239,48,234,4,0,0,0,131,196,6,34,0,5,193,240,0,16,82,68,22,19,159,223,4,0,0,0,63,185,253,33,177,19,1,241,97,100,209,69,201,192,85,213,4,0,0,0,58,191,244,33,250,201,64,241,16,253,86,71,132,166,82,203,4,0,0,0,57,214,235,33,207,40,128,241,113,235,226,72,31,136,147,193,4,0,0,0,6,254,226,33,30,49,191,241,0,65,117,74,151,62,22,184,4,0,0,0,103,54,218,33,211,227,253,241,81,15,14,76,36,183,216,174,4,0,0,0,40,127,209,33,212,65,60,242,16,104,173,77,105,242,216,165,4,0,0,0,17,216,200,33,5,76,122,242,1,93,83,79,157,3,21,157,4,0,0,0,239,64,192,33,71,3,184,242,0,0,0,81,205,15,139,148,4,0,0,0,143,185,183,33,117,104,245,242,1,99,179,82,29,77,57,140,4,0,0,0,188,65,175,33,106,124,50,243,16,152,109,84,21,2,30,132,4,0,0,0,71,217,166,33,251,63,111,243,81,177,46,86,248,132,55,124,4,0,0,0,253,127,158,33,250,179,171,243,0,193,246,87,30,59,132,116,4,0,0,0,175,53,150,33,55,217,231,243,113,217,197,89,93,152,2,109,4,0,0,0,46,250,141,33,126,176,35,244,16,13,156,91,110,30,177,101,4,0,0,0,76,205,133,33,152,58,95,244,97,110,121,93,100,92,142,94,4,0,0,0,218,174,125,33,75,120,154,244,0,16,94,95,35,238,152,87,4,0,0,0,172,158,117,33,91,106,213,244,161,4,74,97,222,123,207,80,4,0,0,0,150,156,109,33,135,17,16,245,16,95,61,99,155,185,48,74,4,0,0,0,110,168,101,33,140,110,74,245,49,50,56,101,189,102,187,67,4,0,0,0,7,194,93,33,38,130,132,245,0,145,58,103,148,77,110,61,4,0,0,0,57,233,85,33,12,77,190,245,145,142,68,105,238,66,72,55,4,0,0,0,219,29,78,33,244,207,247,245,16,62,86,107,176,37,72,49,4,0,0,0,196,95,70,33,143,11,49,246,193,178,111,109,117,222,108,43,4,0,0,0,205,174,62,33,142,0,106,246,0,0,145,111,46,95,181,37,4,0,0,0,206,10,55,33,158,175,162,246,65,57,186,113,197,162,32,32,4,0,0,0,160,115,47,33,106,25,219,246,16,114,235,115,203,172,173,26,4,0,0,0,32,233,39,33,155,62,19,247,17,190,36,118,31,137,91,21,4,0,0,0,38,107,32,33,214,31,75,247,0,49,102,120,162,75,41,16,4,0,0,0,143,249,24,33,191,189,130,247,177,222,175,122,233,15,22,11,4,0,0,0,54,148,17,33,249,24,186,247,16,219,1,125,246,248,32,6,4,0,0,0,248,58,10,33,33,50,241,247,33,58,92,127,239,48,73,1,4,0,0,0,179,237,2,33,213,9,40,248,0,16,191,129,182,209,27,249,4,0,0,0,68,172,251,32,176,160,94,248,225,112,42,132,199,176,220,239,4,0,0,0,138,118,244,32,75,247,148,248,16,113,158,134,42,123,211,230,4,0,0,0,98,76,237,32,59,14,203,248,241,36,27,137,74,185,254,221,4,0,0,0,174,45,230,32,21,230,0,249,0,161,160,139,110,255,92,213,4,0,0,0,75,26,223,32,109,127,54,249,209,249,46,142,80,237,236,204,4,0,0,0,28,18,216,32,210,218,107,249,16,68,198,144,178,45,173,196,4,0,0,0,0,21,209,32,211,248,160,249,129,148,102,147,249,117,156,188,4,0,0,0,217,34,202,32,253,217,213,249,0,0,16,150,207,133,185,180,4,0,0,0,136,59,195,32,218,126,10,250,129,155,194,152,194,38,3,173,4,0,0,0,241,94,188,32,243,231,62,250,16,124,126,155,239,43,120,165,4,0,0,0,245,140,181,32,208,21,115,250,209,182,67,158,169,113,23,158,4,0,0,0,121,197,174,32,245,8,167,250,0,97,18,161,42,221,223,150,4,0,0,0,94,8,168,32,231,193,218,250,241,143,234,163,65,92,208,143,4,0,0,0,139,85,161,32,38,65,14,251,16,89,204,166,9,229,231,136,4,0,0,0,226,172,154,32,52,135,65,251,225,209,183,169,157,117,37,130,4,0,0,0,73,14,148,32,143,148,116,251,0,16,173,172,211,19,136,123,4,0,0,0,165,121,141,32,179,105,167,251,33,41,172,175,249,204,14,117,4,0,0,0,219,238,134,32,28,7,218,251,16,51,181,178,149,181,184,110,4,0,0,0,210,109,128,32,68,109,12,252,177,67,200,181,35,233,132,104,4,0,0,0,113,246,121,32,162,156,62,252,0,113,229,184,219,137,114,98,4,0,0,0,157,136,115,32,174,149,112,252,17,209,12,188,123,192,128,92,4,0,0,0,62,36,109,32,220,88,162,252,16,122,62,191,7,188,174,86,4,0,0,0,60,201,102,32,160,230,211,252,65,130,122,194,155,177,251,80,4,0,0,0,126,119,96,32,109,63,5,253,0,0,193,197,51,220,102,75,4,0,0,0,237,46,90,32,178,99,54,253,193,9,18,201,124,124,239,69,4,0,0,0,113,239,83,32,224,83,103,253,16,182,109,204,163,216,148,64,4,0,0,0,243,184,77,32,100,16,152,253,145,27,212,207,36,60,86,59,4,0,0,0,92,139,71,32,171,153,200,253,0,81,69,211,165,247,50,54,4,0,0,0,150,102,65,32,32,240,248,253,49,109,193,214,195,96,42,49,4,0,0,0,139,74,59,32,46,20,41,254,16,135,72,218,240,209,59,44,4,0,0,0,37,55,53,32,60,6,89,254,161,181,218,221,69,170,102,39,4,0,0,0,78,44,47,32,179,198,136,254,0,16,120,225,95,77,170,34,4,0,0,0,240,41,41,32,248,85,184,254,97,173,32,229,60,35,6,30,4,0,0,0,248,47,35,32,113,180,231,254,16,165,212,232,18,152,121,25,4,0,0,0,80,62,29,32,129,226,22,255,113,14,148,236,51,28,4,21,4,0,0,0,229,84,23,32,139,224,69,255,0,1,95,240,229,35,165,16,4,0,0,0,161,115,17,32,240,174,116,255,81,148,53,244,73,39,92,12,4,0,0,0,113,154,11,32,17,78,163,255,16,224,23,248,55,162,40,8,4,0,0,0,66,201,5,32,76,190,209,255,1,252,5,252,35,20,10,4,4,0,0,0,255,255,255,31,255,255,255,255,8,0,0,0,0,0,0,0], "i8", ALLOC_NONE, 5250556);
allocate([23,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,23,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0,23,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,77,0,0,0,1,0,0,0,254,255,255,255,0,0,0,0], "i8", ALLOC_NONE, 5255696);
allocate(4, "i8", ALLOC_NONE, 5257648);
allocate([1,0,0,192], "i8", ALLOC_NONE, 5257652);
allocate([255,255,255,63], "i8", ALLOC_NONE, 5257656);
allocate([6], ["i8* (i8*, i32, i32)*",0,0,0], ALLOC_NONE, 5257660);
allocate(4, "i8", ALLOC_NONE, 5257664);
allocate([2], ["void (i8*, i32)*",0,0,0], ALLOC_NONE, 5257668);
allocate(4, "i8", ALLOC_NONE, 5257672);
allocate([32,0,0,0], "i8", ALLOC_NONE, 5257676);
allocate([1,171,205,183,57,163,197,239,241,27,61,167,41,19,53,223,225,139,173,151,25,131,165,207,209,251,29,135,9,243,21,191,193,107,141,119,249,99,133,175,177,219,253,103,233,211,245,159,161,75,109,87,217,67,101,143,145,187,221,71,201,179,213,127,129,43,77,55,185,35,69,111,113,155,189,39,169,147,181,95,97,11,45,23,153,3,37,79,81,123,157,7,137,115,149,63,65,235,13,247,121,227,5,47,49,91,125,231,105,83,117,31,33,203,237,215,89,195,229,15,17,59,93,199,73,51,85,255] /* \01\AB\CD\B79\A3\C5\ */, "i8", ALLOC_NONE, 5257680);
allocate([4], ["i8* (i32)*",0,0,0], ALLOC_NONE, 5257808);
allocate(4, "i8", ALLOC_NONE, 5257812);
HEAP32[((5255708)>>2)]=((5247864)|0);
HEAP32[((5255724)>>2)]=((5247852)|0);
HEAP32[((5255740)>>2)]=((5247688)|0);
HEAP32[((5255756)>>2)]=((5247676)|0);
HEAP32[((5255772)>>2)]=((5247512)|0);
HEAP32[((5255788)>>2)]=((5247500)|0);
HEAP32[((5255804)>>2)]=((5247336)|0);
HEAP32[((5255820)>>2)]=((5247324)|0);
HEAP32[((5255836)>>2)]=((5247272)|0);
HEAP32[((5255852)>>2)]=((5247260)|0);
HEAP32[((5255868)>>2)]=((5247256)|0);
HEAP32[((5255884)>>2)]=((5247244)|0);
HEAP32[((5255900)>>2)]=((5247240)|0);
HEAP32[((5255916)>>2)]=((5247228)|0);
HEAP32[((5255932)>>2)]=((5247224)|0);
HEAP32[((5255948)>>2)]=((5247212)|0);
HEAP32[((5255964)>>2)]=((5248184)|0);
HEAP32[((5255980)>>2)]=((5248172)|0);
HEAP32[((5255996)>>2)]=((5248168)|0);
HEAP32[((5256012)>>2)]=((5248156)|0);
HEAP32[((5256028)>>2)]=((5248152)|0);
HEAP32[((5256044)>>2)]=((5248140)|0);
HEAP32[((5256060)>>2)]=((5248136)|0);
HEAP32[((5256076)>>2)]=((5248124)|0);
HEAP32[((5256092)>>2)]=((5248120)|0);
HEAP32[((5256108)>>2)]=((5248108)|0);
HEAP32[((5256124)>>2)]=((5248104)|0);
HEAP32[((5256140)>>2)]=((5248092)|0);
HEAP32[((5256156)>>2)]=((5248088)|0);
HEAP32[((5256172)>>2)]=((5248076)|0);
HEAP32[((5256188)>>2)]=((5248072)|0);
HEAP32[((5256204)>>2)]=((5248060)|0);
HEAP32[((5256220)>>2)]=((5248056)|0);
HEAP32[((5256236)>>2)]=((5248044)|0);
HEAP32[((5256252)>>2)]=((5248040)|0);
HEAP32[((5256268)>>2)]=((5248028)|0);
HEAP32[((5256284)>>2)]=((5248024)|0);
HEAP32[((5256300)>>2)]=((5248012)|0);
HEAP32[((5256316)>>2)]=((5248008)|0);
HEAP32[((5256332)>>2)]=((5247996)|0);
HEAP32[((5256348)>>2)]=((5247992)|0);
HEAP32[((5256364)>>2)]=((5247980)|0);
HEAP32[((5256380)>>2)]=((5247976)|0);
HEAP32[((5256396)>>2)]=((5247964)|0);
HEAP32[((5256412)>>2)]=((5247960)|0);
HEAP32[((5256428)>>2)]=((5247948)|0);
HEAP32[((5256444)>>2)]=((5247944)|0);
HEAP32[((5256460)>>2)]=((5247932)|0);
HEAP32[((5256476)>>2)]=((5247928)|0);
HEAP32[((5256492)>>2)]=((5247916)|0);
HEAP32[((5256508)>>2)]=((5247912)|0);
HEAP32[((5256524)>>2)]=((5247900)|0);
HEAP32[((5256540)>>2)]=((5247896)|0);
HEAP32[((5256556)>>2)]=((5247884)|0);
HEAP32[((5256572)>>2)]=((5247880)|0);
HEAP32[((5256588)>>2)]=((5247868)|0);
HEAP32[((5256604)>>2)]=((5247848)|0);
HEAP32[((5256620)>>2)]=((5247836)|0);
HEAP32[((5256636)>>2)]=((5247832)|0);
HEAP32[((5256652)>>2)]=((5247820)|0);
HEAP32[((5256668)>>2)]=((5247816)|0);
HEAP32[((5256684)>>2)]=((5247804)|0);
HEAP32[((5256700)>>2)]=((5247800)|0);
HEAP32[((5256716)>>2)]=((5247788)|0);
HEAP32[((5256732)>>2)]=((5247784)|0);
HEAP32[((5256748)>>2)]=((5247772)|0);
HEAP32[((5256764)>>2)]=((5247768)|0);
HEAP32[((5256780)>>2)]=((5247756)|0);
HEAP32[((5256796)>>2)]=((5247752)|0);
HEAP32[((5256812)>>2)]=((5247740)|0);
HEAP32[((5256828)>>2)]=((5247736)|0);
HEAP32[((5256844)>>2)]=((5247724)|0);
HEAP32[((5256860)>>2)]=((5247720)|0);
HEAP32[((5256876)>>2)]=((5247708)|0);
HEAP32[((5256892)>>2)]=((5247704)|0);
HEAP32[((5256908)>>2)]=((5247692)|0);
HEAP32[((5256924)>>2)]=((5247672)|0);
HEAP32[((5256940)>>2)]=((5247660)|0);
HEAP32[((5256956)>>2)]=((5247656)|0);
HEAP32[((5256972)>>2)]=((5247644)|0);
HEAP32[((5256988)>>2)]=((5247640)|0);
HEAP32[((5257004)>>2)]=((5247628)|0);
HEAP32[((5257020)>>2)]=((5247624)|0);
HEAP32[((5257036)>>2)]=((5247612)|0);
HEAP32[((5257052)>>2)]=((5247608)|0);
HEAP32[((5257068)>>2)]=((5247596)|0);
HEAP32[((5257084)>>2)]=((5247592)|0);
HEAP32[((5257100)>>2)]=((5247580)|0);
HEAP32[((5257116)>>2)]=((5247576)|0);
HEAP32[((5257132)>>2)]=((5247564)|0);
HEAP32[((5257148)>>2)]=((5247560)|0);
HEAP32[((5257164)>>2)]=((5247548)|0);
HEAP32[((5257180)>>2)]=((5247544)|0);
HEAP32[((5257196)>>2)]=((5247532)|0);
HEAP32[((5257212)>>2)]=((5247528)|0);
HEAP32[((5257228)>>2)]=((5247516)|0);
HEAP32[((5257244)>>2)]=((5247496)|0);
HEAP32[((5257260)>>2)]=((5247484)|0);
HEAP32[((5257276)>>2)]=((5247480)|0);
HEAP32[((5257292)>>2)]=((5247468)|0);
HEAP32[((5257308)>>2)]=((5247464)|0);
HEAP32[((5257324)>>2)]=((5247452)|0);
HEAP32[((5257340)>>2)]=((5247448)|0);
HEAP32[((5257356)>>2)]=((5247436)|0);
HEAP32[((5257372)>>2)]=((5247432)|0);
HEAP32[((5257388)>>2)]=((5247420)|0);
HEAP32[((5257404)>>2)]=((5247416)|0);
HEAP32[((5257420)>>2)]=((5247404)|0);
HEAP32[((5257436)>>2)]=((5247400)|0);
HEAP32[((5257452)>>2)]=((5247388)|0);
HEAP32[((5257468)>>2)]=((5247384)|0);
HEAP32[((5257484)>>2)]=((5247372)|0);
HEAP32[((5257500)>>2)]=((5247368)|0);
HEAP32[((5257516)>>2)]=((5247356)|0);
HEAP32[((5257532)>>2)]=((5247352)|0);
HEAP32[((5257548)>>2)]=((5247340)|0);
HEAP32[((5257564)>>2)]=((5247320)|0);
HEAP32[((5257580)>>2)]=((5247308)|0);
HEAP32[((5257596)>>2)]=((5247304)|0);
HEAP32[((5257612)>>2)]=((5247292)|0);
HEAP32[((5257628)>>2)]=((5247288)|0);
HEAP32[((5257644)>>2)]=((5247276)|0);

  
  
  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=allocate(1, "i32*", ALLOC_STACK);
  
  var _stdout=allocate(1, "i32*", ALLOC_STACK);
  
  var _stderr=allocate(1, "i32*", ALLOC_STACK);
  
  var __impure_ptr=allocate(1, "i32*", ALLOC_STACK);var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) if (FS.streams.hasOwnProperty(i)) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
  
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
    
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
    
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
    
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
    
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        assert(Math.max(_stdin, _stdout, _stderr) < 128); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(((buf)+(i))|0)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(((buf)+(i))|0)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]|0 != 0) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],HEAPF64[(tempDoublePtr)>>3]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (argSize == 8 && i64Math) argText = (origArg[1]>>>0).toString(16) + (origArg[0]>>>0).toString(16); else
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = _strlen(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[((arg++)|0)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }var _putc=_fputc;
var _llvm_expect_i32; // stub for _llvm_expect_i32

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if (num|0 >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
    }var _llvm_memset_p0i8_i32=_memset;

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num);
      }
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[((pdest+i)|0)]=HEAP8[((psrc+i)|0)];
        i ++;
      } while (HEAP8[(((psrc)+(i-1))|0)] != 0);
      return pdest;
    }




  function _localeconv() {
      // %struct.timeval = type { char* decimal point, other stuff... }
      // var indexes = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
      var me = _localeconv;
      if (!me.ret) {
        me.ret = allocate([allocate(intArrayFromString('.'), 'i8', ALLOC_NORMAL)], 'i8*', ALLOC_NORMAL); // just decimal point, for now
      }
      return me.ret;
    }

  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }

  function _memcmp(p1, p2, num) {
      p1 = p1|0; p2 = p2|0; num = num|0;
      var i = 0, v1 = 0, v2 = 0;
      while ((i|0) < (num|0)) {
        var v1 = HEAPU8[(((p1)+(i))|0)];
        var v2 = HEAPU8[(((p2)+(i))|0)];
        if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
        i = (i+1)|0;
      }
      return 0;
    }

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  
  function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno=___errno_location;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }





  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false,
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  


var FUNCTION_TABLE = [0,0,___gmp_default_free,0,___gmp_default_allocate,0,___gmp_default_reallocate,0];

function _mpfr_set_divby0() {
  var label = 0;


  var $1=HEAP32[((5257648)>>2)];
  var $2=$1 | 32;
  HEAP32[((5257648)>>2)]=$2;

  return;
}


function _main() {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 48)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $i;
      var $s=__stackBase__;
      var $t=(__stackBase__)+(16);
      var $u=(__stackBase__)+(32);
      $1=0;
      var $2=(($t)|0);
      _mpfr_init2($2, 200);
      var $3=(($t)|0);
      var $4=_mpfr_set_d($3, 1, 3);
      var $5=(($s)|0);
      _mpfr_init2($5, 200);
      var $6=(($s)|0);
      var $7=_mpfr_set_d($6, 1, 3);
      var $8=(($u)|0);
      _mpfr_init2($8, 200);
      $i=1;
      label = 3; break;
    case 3: 
      var $10=$i;
      var $11=(($10)>>>0) <= 100;
      if ($11) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $13=(($t)|0);
      var $14=(($t)|0);
      var $15=$i;
      var $16=_mpfr_mul_ui($13, $14, $15, 2);
      var $17=(($u)|0);
      var $18=_mpfr_set_d($17, 1, 3);
      var $19=(($u)|0);
      var $20=(($u)|0);
      var $21=(($t)|0);
      var $22=_mpfr_div($19, $20, $21, 3);
      var $23=(($s)|0);
      var $24=(($s)|0);
      var $25=(($u)|0);
      var $26=_mpfr_add($23, $24, $25, 3);
      label = 5; break;
    case 5: 
      var $28=$i;
      var $29=((($28)+(1))|0);
      $i=$29;
      label = 3; break;
    case 6: 
      var $31=_printf(((5249948)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $32=HEAP32[((_stdout)>>2)];
      var $33=(($s)|0);
      var $34=___gmpfr_out_str($32, 10, 0, $33, 3);
      var $35=HEAP32[((_stdout)>>2)];
      var $36=_fputc(10, $35);
      var $37=(($s)|0);
      _mpfr_clear($37);
      var $38=(($t)|0);
      _mpfr_clear($38);
      var $39=(($u)|0);
      _mpfr_clear($39);
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + label);
  }

}
Module["_main"] = _main;_main["X"]=1;

function _mpfr_check_range($x, $t, $rnd_mode) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $exp;
      $2=$x;
      $3=$t;
      $4=$rnd_mode;
      var $5=$2;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0) <= -2147483645;
      if ($8) { var $11 = 0;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $11 = 1;label = 4; break;
    case 4: 
      var $11;
      var $12=$11 ^ 1;
      var $13=$12 ^ 1;
      var $14=(($13)&1);
      var $15=($14);
      var $16=(($15)|0)!=0;
      if ($16) { label = 5; break; } else { label = 17; break; }
    case 5: 
      var $18=$2;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      $exp=$20;
      var $21=$exp;
      var $22=HEAP32[((5257652)>>2)];
      var $23=(($21)|0) < (($22)|0);
      var $24=$23 ^ 1;
      var $25=$24 ^ 1;
      var $26=(($25)&1);
      var $27=($26);
      var $28=(($27)|0)!=0;
      if ($28) { label = 6; break; } else { label = 14; break; }
    case 6: 
      var $30=$4;
      var $31=(($30)|0)==0;
      if ($31) { label = 7; break; } else { label = 13; break; }
    case 7: 
      var $33=$exp;
      var $34=((($33)+(1))|0);
      var $35=HEAP32[((5257652)>>2)];
      var $36=(($34)|0) < (($35)|0);
      if ($36) { label = 12; break; } else { label = 8; break; }
    case 8: 
      var $38=$2;
      var $39=_mpfr_powerof2_raw($38);
      var $40=(($39)|0)!=0;
      if ($40) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $42=$2;
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44)|0) < 0;
      if ($45) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $47=$3;
      var $48=(($47)|0) <= 0;
      if ($48) { label = 12; break; } else { label = 13; break; }
    case 11: 
      var $50=$3;
      var $51=(($50)|0) >= 0;
      if ($51) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $4=1;
      label = 13; break;
    case 13: 
      var $54=$2;
      var $55=$4;
      var $56=$2;
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=_mpfr_underflow($54, $55, $58);
      $1=$59;
      label = 26; break;
    case 14: 
      var $61=$exp;
      var $62=HEAP32[((5257656)>>2)];
      var $63=(($61)|0) > (($62)|0);
      var $64=$63 ^ 1;
      var $65=$64 ^ 1;
      var $66=(($65)&1);
      var $67=($66);
      var $68=(($67)|0)!=0;
      if ($68) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $70=$2;
      var $71=$4;
      var $72=$2;
      var $73=(($72+4)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=_mpfr_overflow($70, $71, $74);
      $1=$75;
      label = 26; break;
    case 16: 
      label = 22; break;
    case 17: 
      var $78=$3;
      var $79=(($78)|0)!=0;
      if ($79) { label = 18; break; } else { var $86 = 0;label = 19; break; }
    case 18: 
      var $81=$2;
      var $82=(($81+8)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83)|0)==-2147483645;
      var $86 = $84;label = 19; break;
    case 19: 
      var $86;
      var $87=$86 ^ 1;
      var $88=$87 ^ 1;
      var $89=(($88)&1);
      var $90=($89);
      var $91=(($90)|0)!=0;
      if ($91) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $93=HEAP32[((5257648)>>2)];
      var $94=$93 | 2;
      HEAP32[((5257648)>>2)]=$94;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $97=$3;
      var $98=(($97)|0)!=0;
      if ($98) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $100=HEAP32[((5257648)>>2)];
      var $101=$100 | 8;
      HEAP32[((5257648)>>2)]=$101;
      var $102=$3;
      var $105 = $102;label = 25; break;
    case 24: 
      var $105 = 0;label = 25; break;
    case 25: 
      var $105;
      $1=$105;
      label = 26; break;
    case 26: 
      var $107=$1;

      return $107;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_check_range["X"]=1;

function _mpfr_underflow($x, $rnd_mode, $sign) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $inex;
      $1=$x;
      $2=$rnd_mode;
      $3=$sign;
      var $4=$2;
      var $5=(($4)|0)==1;
      if ($5) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $7=$2;
      var $8=$3;
      var $9=(($8)|0) < 0;
      var $10=(($9)&1);
      var $11=((($7)+($10))|0);
      var $12=(($11)|0)==3;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=$1;
      var $15=(($14+8)|0);
      HEAP32[(($15)>>2)]=-2147483647;
      $inex=-1;
      label = 6; break;
    case 5: 
      var $17=$1;
      var $18=HEAP32[((5257652)>>2)];
      _mpfr_setmin($17, $18);
      $inex=1;
      label = 6; break;
    case 6: 
      var $20=$3;
      var $21=$1;
      var $22=(($21+4)|0);
      HEAP32[(($22)>>2)]=$20;
      var $23=HEAP32[((5257648)>>2)];
      var $24=$23 | 9;
      HEAP32[((5257648)>>2)]=$24;
      var $25=$3;
      var $26=(($25)|0) > 0;
      if ($26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $28=$inex;
      var $33 = $28;label = 9; break;
    case 8: 
      var $30=$inex;
      var $31=(((-$30))|0);
      var $33 = $31;label = 9; break;
    case 9: 
      var $33;

      return $33;
    default: assert(0, "bad label: " + label);
  }

}


function _mpfr_overflow($x, $rnd_mode, $sign) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $inex;
      $1=$x;
      $2=$rnd_mode;
      $3=$sign;
      var $4=$2;
      var $5=(($4)|0)==1;
      if ($5) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $7=$2;
      var $8=$3;
      var $9=(($8)|0) < 0;
      var $10=(($9)&1);
      var $11=((($7)+($10))|0);
      var $12=(($11)|0)==3;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14=$1;
      var $15=HEAP32[((5257656)>>2)];
      _mpfr_setmax($14, $15);
      $inex=-1;
      label = 6; break;
    case 5: 
      var $17=$1;
      var $18=(($17+8)|0);
      HEAP32[(($18)>>2)]=-2147483645;
      $inex=1;
      label = 6; break;
    case 6: 
      var $20=$3;
      var $21=$1;
      var $22=(($21+4)|0);
      HEAP32[(($22)>>2)]=$20;
      var $23=HEAP32[((5257648)>>2)];
      var $24=$23 | 10;
      HEAP32[((5257648)>>2)]=$24;
      var $25=$3;
      var $26=(($25)|0) > 0;
      if ($26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $28=$inex;
      var $33 = $28;label = 9; break;
    case 8: 
      var $30=$inex;
      var $31=(((-$30))|0);
      var $33 = $31;label = 9; break;
    case 9: 
      var $33;

      return $33;
    default: assert(0, "bad label: " + label);
  }

}


function _mpfr_add($a, $b, $c, $rnd_mode) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $2=$a;
      $3=$b;
      $4=$c;
      $5=$rnd_mode;
      var $6=$3;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0) <= -2147483645;
      var $10=$9 ^ 1;
      var $11=$10 ^ 1;
      var $12=(($11)&1);
      var $13=($12);
      var $14=(($13)|0)!=0;
      if ($14) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $16=$4;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|0) <= -2147483645;
      var $20=$19 ^ 1;
      var $21=$20 ^ 1;
      var $22=(($21)&1);
      var $23=($22);
      var $24=(($23)|0)!=0;
      if ($24) { label = 4; break; } else { label = 26; break; }
    case 4: 
      var $26=$3;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0)==-2147483646;
      if ($29) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $31=$4;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|0)==-2147483646;
      if ($34) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $36=$2;
      var $37=(($36+8)|0);
      HEAP32[(($37)>>2)]=-2147483646;
      var $38=HEAP32[((5257648)>>2)];
      var $39=$38 | 4;
      HEAP32[((5257648)>>2)]=$39;
      $1=0;
      label = 41; break;
    case 7: 
      var $41=$3;
      var $42=(($41+8)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(($43)|0)==-2147483645;
      if ($44) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $46=$4;
      var $47=(($46+8)|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=(($48)|0)==-2147483645;
      if ($49) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $51=$3;
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$4;
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      var $57=(($53)|0)==(($56)|0);
      if ($57) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $59=$2;
      var $60=(($59+8)|0);
      HEAP32[(($60)>>2)]=-2147483645;
      var $61=$3;
      var $62=(($61+4)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$2;
      var $65=(($64+4)|0);
      HEAP32[(($65)>>2)]=$63;
      $1=0;
      label = 41; break;
    case 11: 
      var $67=$2;
      var $68=(($67+8)|0);
      HEAP32[(($68)>>2)]=-2147483646;
      var $69=HEAP32[((5257648)>>2)];
      var $70=$69 | 4;
      HEAP32[((5257648)>>2)]=$70;
      $1=0;
      label = 41; break;
    case 12: 
      var $72=$4;
      var $73=(($72+8)|0);
      var $74=HEAP32[(($73)>>2)];
      var $75=(($74)|0)==-2147483645;
      if ($75) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $77=$2;
      var $78=(($77+8)|0);
      HEAP32[(($78)>>2)]=-2147483645;
      var $79=$4;
      var $80=(($79+4)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=$2;
      var $83=(($82+4)|0);
      HEAP32[(($83)>>2)]=$81;
      $1=0;
      label = 41; break;
    case 14: 
      var $85=$3;
      var $86=(($85+8)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87)|0)==-2147483647;
      if ($88) { label = 15; break; } else { label = 25; break; }
    case 15: 
      var $90=$4;
      var $91=(($90+8)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92)|0)==-2147483647;
      if ($93) { label = 16; break; } else { label = 24; break; }
    case 16: 
      var $95=$5;
      var $96=(($95)|0)!=3;
      if ($96) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $98=$3;
      var $99=(($98+4)|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=(($100)|0) < 0;
      if ($101) { label = 18; break; } else { var $108 = 0;label = 19; break; }
    case 18: 
      var $103=$4;
      var $104=(($103+4)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105)|0) < 0;
      var $108 = $106;label = 19; break;
    case 19: 
      var $108;
      var $109=$108 ? -1 : 1;
      var $124 = $109;label = 23; break;
    case 20: 
      var $111=$3;
      var $112=(($111+4)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113)|0) > 0;
      if ($114) { label = 21; break; } else { var $121 = 0;label = 22; break; }
    case 21: 
      var $116=$4;
      var $117=(($116+4)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118)|0) > 0;
      var $121 = $119;label = 22; break;
    case 22: 
      var $121;
      var $122=$121 ? 1 : -1;
      var $124 = $122;label = 23; break;
    case 23: 
      var $124;
      var $125=$2;
      var $126=(($125+4)|0);
      HEAP32[(($126)>>2)]=$124;
      var $127=$2;
      var $128=(($127+8)|0);
      HEAP32[(($128)>>2)]=-2147483647;
      $1=0;
      label = 41; break;
    case 24: 
      var $130=$2;
      var $131=$4;
      var $132=$5;
      var $133=$4;
      var $134=(($133+4)|0);
      var $135=HEAP32[(($134)>>2)];
      var $136=_mpfr_set4($130, $131, $132, $135);
      $1=$136;
      label = 41; break;
    case 25: 
      var $138=$2;
      var $139=$3;
      var $140=$5;
      var $141=$3;
      var $142=(($141+4)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=_mpfr_set4($138, $139, $140, $143);
      $1=$144;
      label = 41; break;
    case 26: 
      var $146=$3;
      var $147=(($146+4)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$4;
      var $150=(($149+4)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($148)|0)!=(($151)|0);
      var $153=$152 ^ 1;
      var $154=$153 ^ 1;
      var $155=(($154)&1);
      var $156=($155);
      var $157=(($156)|0)!=0;
      if ($157) { label = 27; break; } else { label = 32; break; }
    case 27: 
      var $159=$2;
      var $160=(($159)|0);
      var $161=HEAP32[(($160)>>2)];
      var $162=$3;
      var $163=(($162)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=(($161)|0)==(($164)|0);
      if ($165) { label = 28; break; } else { var $175 = 0;label = 29; break; }
    case 28: 
      var $167=$3;
      var $168=(($167)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=$4;
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=(($169)|0)==(($172)|0);
      var $175 = $173;label = 29; break;
    case 29: 
      var $175;
      var $176=$175 ^ 1;
      var $177=$176 ^ 1;
      var $178=(($177)&1);
      var $179=($178);
      var $180=(($179)|0)!=0;
      if ($180) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $182=$2;
      var $183=$3;
      var $184=$4;
      var $185=$5;
      var $186=_mpfr_sub1sp($182, $183, $184, $185);
      $1=$186;
      label = 41; break;
    case 31: 
      var $188=$2;
      var $189=$3;
      var $190=$4;
      var $191=$5;
      var $192=_mpfr_sub1($188, $189, $190, $191);
      $1=$192;
      label = 41; break;
    case 32: 
      var $194=$2;
      var $195=(($194)|0);
      var $196=HEAP32[(($195)>>2)];
      var $197=$3;
      var $198=(($197)|0);
      var $199=HEAP32[(($198)>>2)];
      var $200=(($196)|0)==(($199)|0);
      if ($200) { label = 33; break; } else { var $210 = 0;label = 34; break; }
    case 33: 
      var $202=$3;
      var $203=(($202)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=$4;
      var $206=(($205)|0);
      var $207=HEAP32[(($206)>>2)];
      var $208=(($204)|0)==(($207)|0);
      var $210 = $208;label = 34; break;
    case 34: 
      var $210;
      var $211=$210 ^ 1;
      var $212=$211 ^ 1;
      var $213=(($212)&1);
      var $214=($213);
      var $215=(($214)|0)!=0;
      if ($215) { label = 35; break; } else { label = 38; break; }
    case 35: 
      var $217=$3;
      var $218=(($217+8)|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=$4;
      var $221=(($220+8)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=(($219)|0) < (($222)|0);
      if ($223) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $225=$2;
      var $226=$4;
      var $227=$3;
      var $228=$5;
      var $229=_mpfr_add1sp($225, $226, $227, $228);
      $1=$229;
      label = 41; break;
    case 37: 
      var $231=$2;
      var $232=$3;
      var $233=$4;
      var $234=$5;
      var $235=_mpfr_add1sp($231, $232, $233, $234);
      $1=$235;
      label = 41; break;
    case 38: 
      var $237=$3;
      var $238=(($237+8)|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=$4;
      var $241=(($240+8)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=(($239)|0) < (($242)|0);
      if ($243) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $245=$2;
      var $246=$4;
      var $247=$3;
      var $248=$5;
      var $249=_mpfr_add1($245, $246, $247, $248);
      $1=$249;
      label = 41; break;
    case 40: 
      var $251=$2;
      var $252=$3;
      var $253=$4;
      var $254=$5;
      var $255=_mpfr_add1($251, $252, $253, $254);
      $1=$255;
      label = 41; break;
    case 41: 
      var $257=$1;

      return $257;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_add["X"]=1;

function _mpfr_add1($a, $b, $c, $rnd_mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ap;
      var $bp;
      var $cp;
      var $aq;
      var $bq;
      var $cq;
      var $aq2;
      var $an;
      var $bn;
      var $cn;
      var $difw;
      var $exp;
      var $sh;
      var $rb;
      var $fb;
      var $inex;
      var $diff_exp;
      var $tmp_marker=__stackBase__;
      var $a2p;
      var $cc;
      var $dif;
      var $difn;
      var $k;
      var $shift;
      var $mask;
      var $bb;
      var $mask1;
      var $bb2;
      var $bk;
      var $bb3;
      var $ck;
      var $cprev;
      var $difs;
      var $bb4;
      var $cc5;
      var $bb6;
      var $cc7;
      var $bb8;
      var $ck9;
      var $difs10;
      var $cc11;
      $1=$a;
      $2=$b;
      $3=$c;
      $4=$rnd_mode;
      HEAP32[(($tmp_marker)>>2)]=0;
      var $5=$1;
      var $6=(($5)|0);
      var $7=HEAP32[(($6)>>2)];
      $aq=$7;
      var $8=$2;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      $bq=$10;
      var $11=$3;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      $cq=$13;
      var $14=$aq;
      var $15=((($14)-(1))|0);
      var $16=((((($15)|0))/(32))&-1);
      var $17=((($16)+(1))|0);
      $an=$17;
      var $18=$an;
      var $19=($18<<5);
      $aq2=$19;
      var $20=$aq2;
      var $21=$aq;
      var $22=((($20)-($21))|0);
      $sh=$22;
      var $23=$bq;
      var $24=((($23)-(1))|0);
      var $25=((((($24)|0))/(32))&-1);
      var $26=((($25)+(1))|0);
      $bn=$26;
      var $27=$cq;
      var $28=((($27)-(1))|0);
      var $29=((((($28)|0))/(32))&-1);
      var $30=((($29)+(1))|0);
      $cn=$30;
      var $31=$1;
      var $32=(($31+12)|0);
      var $33=HEAP32[(($32)>>2)];
      $ap=$33;
      var $34=$2;
      var $35=(($34+12)|0);
      var $36=HEAP32[(($35)>>2)];
      $bp=$36;
      var $37=$3;
      var $38=(($37+12)|0);
      var $39=HEAP32[(($38)>>2)];
      $cp=$39;
      var $40=$ap;
      var $41=$bp;
      var $42=(($40)|0)==(($41)|0);
      var $43=$42 ^ 1;
      var $44=$43 ^ 1;
      var $45=(($44)&1);
      var $46=($45);
      var $47=(($46)|0)!=0;
      if ($47) { label = 3; break; } else { label = 13; break; }
    case 3: 
      var $49=$bn;
      var $50=($49<<2);
      var $51=(($50)>>>0) < 16384;
      var $52=$51 ^ 1;
      var $53=$52 ^ 1;
      var $54=(($53)&1);
      var $55=($54);
      var $56=(($55)|0)!=0;
      if ($56) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $58=$bn;
      var $59=($58<<2);
      var $60=STACKTOP;STACKTOP = (STACKTOP + $59)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $66 = $60;label = 6; break;
    case 5: 
      var $62=$bn;
      var $63=($62<<2);
      var $64=_mpfr_tmp_allocate($tmp_marker, $63);
      var $66 = $64;label = 6; break;
    case 6: 
      var $66;
      var $67=$66;
      $bp=$67;
      label = 7; break;
    case 7: 
      var $69=$bp;
      var $70=$ap;
      var $71=(($69)|0)!=(($70)|0);
      if ($71) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $73=$bp;
      var $74=$73;
      var $75=$ap;
      var $76=$75;
      var $77=$bn;
      var $78=($77<<2);
      assert($78 % 1 === 0);_memcpy($74, $76, $78);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $81=$ap;
      var $82=$cp;
      var $83=(($81)|0)==(($82)|0);
      if ($83) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $85=$bp;
      $cp=$85;
      label = 12; break;
    case 12: 
      label = 23; break;
    case 13: 
      var $88=$ap;
      var $89=$cp;
      var $90=(($88)|0)==(($89)|0);
      var $91=$90 ^ 1;
      var $92=$91 ^ 1;
      var $93=(($92)&1);
      var $94=($93);
      var $95=(($94)|0)!=0;
      if ($95) { label = 14; break; } else { label = 22; break; }
    case 14: 
      var $97=$cn;
      var $98=($97<<2);
      var $99=(($98)>>>0) < 16384;
      var $100=$99 ^ 1;
      var $101=$100 ^ 1;
      var $102=(($101)&1);
      var $103=($102);
      var $104=(($103)|0)!=0;
      if ($104) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $106=$cn;
      var $107=($106<<2);
      var $108=STACKTOP;STACKTOP = (STACKTOP + $107)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $114 = $108;label = 17; break;
    case 16: 
      var $110=$cn;
      var $111=($110<<2);
      var $112=_mpfr_tmp_allocate($tmp_marker, $111);
      var $114 = $112;label = 17; break;
    case 17: 
      var $114;
      var $115=$114;
      $cp=$115;
      label = 18; break;
    case 18: 
      var $117=$cp;
      var $118=$ap;
      var $119=(($117)|0)!=(($118)|0);
      if ($119) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $121=$cp;
      var $122=$121;
      var $123=$ap;
      var $124=$123;
      var $125=$cn;
      var $126=($125<<2);
      assert($126 % 1 === 0);_memcpy($122, $124, $126);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $131=$2;
      var $132=(($131+8)|0);
      var $133=HEAP32[(($132)>>2)];
      $exp=$133;
      var $134=$2;
      var $135=(($134+4)|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=$1;
      var $138=(($137+4)|0);
      HEAP32[(($138)>>2)]=$136;
      label = 24; break;
    case 24: 
      var $140=$4;
      var $141=(($140)|0)==2;
      if ($141) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $143=$2;
      var $144=(($143+4)|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=(($145)|0) > 0;
      var $147=$146 ? 4 : 1;
      $4=$147;
      label = 29; break;
    case 26: 
      var $149=$4;
      var $150=(($149)|0)==3;
      if ($150) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $152=$2;
      var $153=(($152+4)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=(($154)|0) < 0;
      var $156=$155 ? 4 : 1;
      $4=$156;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $160=$exp;
      var $161=$3;
      var $162=(($161+8)|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=((($160)-($163))|0);
      $diff_exp=$164;
      $fb=-1;
      $rb=-1;
      var $165=$aq2;
      var $166=$diff_exp;
      var $167=(($165)>>>0) <= (($166)>>>0);
      var $168=$167 ^ 1;
      var $169=$168 ^ 1;
      var $170=(($169)&1);
      var $171=($170);
      var $172=(($171)|0)!=0;
      if ($172) { label = 31; break; } else { label = 43; break; }
    case 31: 
      var $174=$an;
      var $175=$bn;
      var $176=(($174)|0) > (($175)|0);
      var $177=$176 ^ 1;
      var $178=$177 ^ 1;
      var $179=(($178)&1);
      var $180=($179);
      var $181=(($180)|0)!=0;
      if ($181) { label = 32; break; } else { label = 37; break; }
    case 32: 
      label = 33; break;
    case 33: 
      var $184=$ap;
      var $185=$an;
      var $186=$bn;
      var $187=((($185)-($186))|0);
      var $188=(($184+($187<<2))|0);
      var $189=$bp;
      var $190=(($188)|0)!=(($189)|0);
      if ($190) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $192=$ap;
      var $193=$an;
      var $194=$bn;
      var $195=((($193)-($194))|0);
      var $196=(($192+($195<<2))|0);
      var $197=$196;
      var $198=$bp;
      var $199=$198;
      var $200=$bn;
      var $201=($200<<2);
      assert($201 % 1 === 0);_memcpy($197, $199, $201);
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $204=$ap;
      var $205=$204;
      var $206=$an;
      var $207=$bn;
      var $208=((($206)-($207))|0);
      var $209=($208<<2);
      _memset($205, 0, $209);
      label = 42; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $212=$ap;
      var $213=$bp;
      var $214=$bn;
      var $215=$an;
      var $216=((($214)-($215))|0);
      var $217=(($213+($216<<2))|0);
      var $218=(($212)|0)!=(($217)|0);
      if ($218) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $220=$ap;
      var $221=$220;
      var $222=$bp;
      var $223=$bn;
      var $224=$an;
      var $225=((($223)-($224))|0);
      var $226=(($222+($225<<2))|0);
      var $227=$226;
      var $228=$an;
      var $229=($228<<2);
      assert($229 % 1 === 0);_memcpy($221, $227, $229);
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 72; break;
    case 43: 
      var $234=$aq2;
      var $235=$diff_exp;
      var $236=((($234)-($235))|0);
      $dif=$236;
      var $237=$dif;
      var $238=((($237)-(1))|0);
      var $239=((((($238)|0))/(32))&-1);
      var $240=((($239)+(1))|0);
      $difn=$240;
      var $241=$difn;
      var $242=$cn;
      var $243=(($241)|0) > (($242)|0);
      var $244=$243 ^ 1;
      var $245=$244 ^ 1;
      var $246=(($245)&1);
      var $247=($246);
      var $248=(($247)|0)!=0;
      if ($248) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $250=$ap;
      var $251=$250;
      var $252=$difn;
      var $253=$cn;
      var $254=((($252)-($253))|0);
      var $255=($254<<2);
      _memset($251, 0, $255);
      var $256=$cn;
      $difn=$256;
      label = 45; break;
    case 45: 
      var $258=$diff_exp;
      var $259=Math.floor(((($258)>>>0))/(32));
      $k=$259;
      var $260=$ap;
      var $261=$an;
      var $262=$k;
      var $263=((($261)-($262))|0);
      var $264=(($260+($263<<2))|0);
      $a2p=$264;
      var $265=$a2p;
      var $266=$265;
      var $267=$k;
      var $268=($267<<2);
      _memset($266, 0, $268);
      var $269=$diff_exp;
      var $270=((($269)>>>0))%(32);
      $shift=$270;
      var $271=$shift;
      var $272=(($271)|0)!=0;
      var $273=$272 ^ 1;
      var $274=$273 ^ 1;
      var $275=(($274)&1);
      var $276=($275);
      var $277=(($276)|0)!=0;
      if ($277) { label = 46; break; } else { label = 49; break; }
    case 46: 
      var $279=$a2p;
      var $280=$difn;
      var $281=(((-$280))|0);
      var $282=(($279+($281<<2))|0);
      var $283=$cp;
      var $284=$cn;
      var $285=$difn;
      var $286=((($284)-($285))|0);
      var $287=(($283+($286<<2))|0);
      var $288=$difn;
      var $289=$shift;
      var $290=___gmpn_rshift($282, $287, $288, $289);
      $cc=$290;
      var $291=$a2p;
      var $292=$difn;
      var $293=(((-$292))|0);
      var $294=(($291+($293<<2))|0);
      var $295=$ap;
      var $296=(($294)>>>0) > (($295)>>>0);
      var $297=$296 ^ 1;
      var $298=$297 ^ 1;
      var $299=(($298)&1);
      var $300=($299);
      var $301=(($300)|0)!=0;
      if ($301) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $303=$cc;
      var $304=$a2p;
      var $305=$difn;
      var $306=(((-$305))|0);
      var $307=(($304+($306<<2))|0);
      var $308=((($307)-(4))|0);
      HEAP32[(($308)>>2)]=$303;
      label = 48; break;
    case 48: 
      label = 54; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $312=$a2p;
      var $313=$difn;
      var $314=(((-$313))|0);
      var $315=(($312+($314<<2))|0);
      var $316=$cp;
      var $317=$cn;
      var $318=$difn;
      var $319=((($317)-($318))|0);
      var $320=(($316+($319<<2))|0);
      var $321=(($315)|0)!=(($320)|0);
      if ($321) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $323=$a2p;
      var $324=$difn;
      var $325=(((-$324))|0);
      var $326=(($323+($325<<2))|0);
      var $327=$326;
      var $328=$cp;
      var $329=$cn;
      var $330=$difn;
      var $331=((($329)-($330))|0);
      var $332=(($328+($331<<2))|0);
      var $333=$332;
      var $334=$difn;
      var $335=($334<<2);
      assert($335 % 1 === 0);_memcpy($327, $333, $335);
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $339=$an;
      var $340=$bn;
      var $341=(($339)|0) > (($340)|0);
      var $342=$341 ^ 1;
      var $343=$342 ^ 1;
      var $344=(($343)&1);
      var $345=($344);
      var $346=(($345)|0)!=0;
      if ($346) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $348=$ap;
      var $349=$an;
      var $350=$bn;
      var $351=((($349)-($350))|0);
      var $352=(($348+($351<<2))|0);
      var $353=$ap;
      var $354=$an;
      var $355=$bn;
      var $356=((($354)-($355))|0);
      var $357=(($353+($356<<2))|0);
      var $358=$bp;
      var $359=$bn;
      var $360=___gmpn_add_n($352, $357, $358, $359);
      var $372 = $360;label = 57; break;
    case 56: 
      var $362=$ap;
      var $363=$ap;
      var $364=$bp;
      var $365=$bn;
      var $366=$an;
      var $367=((($365)-($366))|0);
      var $368=(($364+($367<<2))|0);
      var $369=$an;
      var $370=___gmpn_add_n($362, $363, $368, $369);
      var $372 = $370;label = 57; break;
    case 57: 
      var $372;
      $cc=$372;
      var $373=$cc;
      var $374=(($373)|0)!=0;
      var $375=$374 ^ 1;
      var $376=$375 ^ 1;
      var $377=(($376)&1);
      var $378=($377);
      var $379=(($378)|0)!=0;
      if ($379) { label = 58; break; } else { label = 71; break; }
    case 58: 
      var $381=$exp;
      var $382=HEAP32[((5257656)>>2)];
      var $383=(($381)|0)==(($382)|0);
      var $384=$383 ^ 1;
      var $385=$384 ^ 1;
      var $386=(($385)&1);
      var $387=($386);
      var $388=(($387)|0)!=0;
      if ($388) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $390=$1;
      var $391=$4;
      var $392=$1;
      var $393=(($392+4)|0);
      var $394=HEAP32[(($393)>>2)];
      var $395=_mpfr_overflow($390, $391, $394);
      $inex=$395;
      label = 244; break;
    case 60: 
      var $397=$exp;
      var $398=((($397)+(1))|0);
      $exp=$398;
      var $399=$ap;
      var $400=(($399)|0);
      var $401=HEAP32[(($400)>>2)];
      var $402=$sh;
      var $403=$401 >>> (($402)>>>0);
      var $404=$403 & 1;
      $rb=$404;
      var $405=$sh;
      var $406=(($405)|0)!=0;
      var $407=$406 ^ 1;
      var $408=$407 ^ 1;
      var $409=(($408)&1);
      var $410=($409);
      var $411=(($410)|0)!=0;
      if ($411) { label = 61; break; } else { label = 67; break; }
    case 61: 
      var $413=$sh;
      var $414=1 << $413;
      var $415=((($414)-(1))|0);
      $mask=$415;
      var $416=$ap;
      var $417=(($416)|0);
      var $418=HEAP32[(($417)>>2)];
      var $419=$mask;
      var $420=$418 & $419;
      $bb=$420;
      var $421=$mask;
      var $422=$421 ^ -1;
      var $423=$422 << 1;
      var $424=$ap;
      var $425=(($424)|0);
      var $426=HEAP32[(($425)>>2)];
      var $427=$426 & $423;
      HEAP32[(($425)>>2)]=$427;
      var $428=$bb;
      var $429=(($428)|0)==0;
      if ($429) { label = 62; break; } else { label = 63; break; }
    case 62: 
      $fb=0;
      label = 66; break;
    case 63: 
      var $432=$bb;
      var $433=$mask;
      var $434=(($432)|0)==(($433)|0);
      if ($434) { label = 64; break; } else { label = 65; break; }
    case 64: 
      $fb=1;
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $439=$ap;
      var $440=$ap;
      var $441=$an;
      var $442=___gmpn_rshift($439, $440, $441, 1);
      var $443=$an;
      var $444=((($443)-(1))|0);
      var $445=$ap;
      var $446=(($445+($444<<2))|0);
      var $447=HEAP32[(($446)>>2)];
      var $448=((($447)-(2147483648))|0);
      HEAP32[(($446)>>2)]=$448;
      var $449=$sh;
      var $450=(($449)|0)!=0;
      if ($450) { label = 68; break; } else { label = 70; break; }
    case 68: 
      var $452=$fb;
      var $453=(($452)|0) < 0;
      if ($453) { label = 69; break; } else { label = 70; break; }
    case 69: 
      label = 211; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $458=$rb;
      var $459=(($458)|0) < 0;
      if ($459) { label = 73; break; } else { var $464 = 0;label = 74; break; }
    case 73: 
      var $461=$sh;
      var $462=(($461)|0)!=0;
      var $464 = $462;label = 74; break;
    case 74: 
      var $464;
      var $465=$464 ^ 1;
      var $466=$465 ^ 1;
      var $467=(($466)&1);
      var $468=($467);
      var $469=(($468)|0)!=0;
      if ($469) { label = 75; break; } else { label = 84; break; }
    case 75: 
      var $471=$sh;
      var $472=1 << $471;
      var $473=((($472)-(1))|0);
      $mask1=$473;
      var $474=$ap;
      var $475=(($474)|0);
      var $476=HEAP32[(($475)>>2)];
      var $477=$mask1;
      var $478=$476 & $477;
      $bb2=$478;
      var $479=$mask1;
      var $480=$479 ^ -1;
      var $481=$ap;
      var $482=(($481)|0);
      var $483=HEAP32[(($482)>>2)];
      var $484=$483 & $480;
      HEAP32[(($482)>>2)]=$484;
      var $485=$bb2;
      var $486=$sh;
      var $487=((($486)-(1))|0);
      var $488=$485 >>> (($487)>>>0);
      $rb=$488;
      var $489=$sh;
      var $490=(($489)|0) > 1;
      var $491=$490 ^ 1;
      var $492=$491 ^ 1;
      var $493=(($492)&1);
      var $494=($493);
      var $495=(($494)|0)!=0;
      if ($495) { label = 76; break; } else { label = 83; break; }
    case 76: 
      var $497=$mask1;
      var $498=$497 >>> 1;
      $mask1=$498;
      var $499=$mask1;
      var $500=$bb2;
      var $501=$500 & $499;
      $bb2=$501;
      var $502=$bb2;
      var $503=(($502)|0)==0;
      if ($503) { label = 77; break; } else { label = 78; break; }
    case 77: 
      $fb=0;
      label = 82; break;
    case 78: 
      var $506=$bb2;
      var $507=$mask1;
      var $508=(($506)|0)==(($507)|0);
      if ($508) { label = 79; break; } else { label = 80; break; }
    case 79: 
      $fb=1;
      label = 81; break;
    case 80: 
      label = 211; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      var $515=$an;
      var $516=$diff_exp;
      var $517=Math.floor(((($516)>>>0))/(32));
      var $518=((($515)-($517))|0);
      $difw=$518;
      var $519=$bn;
      var $520=$an;
      var $521=(($519)|0) > (($520)|0);
      var $522=$521 ^ 1;
      var $523=$522 ^ 1;
      var $524=(($523)&1);
      var $525=($524);
      var $526=(($525)|0)!=0;
      if ($526) { label = 85; break; } else { label = 181; break; }
    case 85: 
      var $528=$fb;
      var $529=(($528)|0)==0;
      if ($529) { label = 86; break; } else { label = 88; break; }
    case 86: 
      var $531=$difw;
      var $532=(($531)|0) <= 0;
      if ($532) { label = 87; break; } else { label = 88; break; }
    case 87: 
      $fb=1;
      label = 211; break;
    case 88: 
      var $535=$bn;
      var $536=$an;
      var $537=((($535)-($536))|0);
      $bk=$537;
      label = 89; break;
    case 89: 
      var $539=$difw;
      var $540=(($539)|0) < 0;
      if ($540) { label = 90; break; } else { label = 102; break; }
    case 90: 
      var $542=$bk;
      var $543=((($542)-(1))|0);
      $bk=$543;
      var $544=$bp;
      var $545=(($544+($543<<2))|0);
      var $546=HEAP32[(($545)>>2)];
      $bb3=$546;
      var $547=$fb;
      var $548=(($547)|0) > 0;
      if ($548) { label = 91; break; } else { label = 94; break; }
    case 91: 
      var $550=$bb3;
      var $551=(($550)|0)!=-1;
      if ($551) { label = 92; break; } else { label = 93; break; }
    case 92: 
      $fb=1;
      label = 211; break;
    case 93: 
      label = 99; break;
    case 94: 
      var $555=$rb;
      var $556=(($555)|0) < 0;
      if ($556) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $558=$bb3;
      var $559=$558 >>> 31;
      $rb=$559;
      var $560=$bb3;
      var $561=$560 | -2147483648;
      $bb3=$561;
      label = 96; break;
    case 96: 
      $fb=1;
      var $563=$bb3;
      var $564=(($563)|0)!=-1;
      if ($564) { label = 97; break; } else { label = 98; break; }
    case 97: 
      label = 211; break;
    case 98: 
      label = 99; break;
    case 99: 
      var $568=$bk;
      var $569=(($568)|0)==0;
      if ($569) { label = 100; break; } else { label = 101; break; }
    case 100: 
      $fb=1;
      label = 211; break;
    case 101: 
      var $572=$difw;
      var $573=((($572)+(1))|0);
      $difw=$573;
      label = 89; break;
    case 102: 
      var $575=$difw;
      var $576=$cn;
      var $577=(($575)|0) <= (($576)|0);
      if ($577) { label = 103; break; } else { label = 167; break; }
    case 103: 
      var $579=$cn;
      var $580=$difw;
      var $581=((($579)-($580))|0);
      $ck=$581;
      var $582=$diff_exp;
      var $583=((($582)>>>0))%(32);
      $difs=$583;
      var $584=$difs;
      var $585=(($584)|0)==0;
      if ($585) { label = 104; break; } else { label = 106; break; }
    case 104: 
      var $587=$ck;
      var $588=(($587)|0)==0;
      if ($588) { label = 105; break; } else { label = 106; break; }
    case 105: 
      label = 168; break;
    case 106: 
      var $591=$ck;
      var $592=$cn;
      var $593=(($591)|0)==(($592)|0);
      if ($593) { label = 107; break; } else { label = 108; break; }
    case 107: 
      var $601 = 0;label = 109; break;
    case 108: 
      var $596=$ck;
      var $597=$cp;
      var $598=(($597+($596<<2))|0);
      var $599=HEAP32[(($598)>>2)];
      var $601 = $599;label = 109; break;
    case 109: 
      var $601;
      $cprev=$601;
      var $602=$fb;
      var $603=(($602)|0) < 0;
      if ($603) { label = 110; break; } else { label = 128; break; }
    case 110: 
      var $605=$difs;
      var $606=(($605)|0)!=0;
      if ($606) { label = 111; break; } else { label = 114; break; }
    case 111: 
      var $608=$cprev;
      var $609=$difs;
      var $610=(((32)-($609))|0);
      var $611=$608 << $610;
      $cc5=$611;
      var $612=$ck;
      var $613=((($612)-(1))|0);
      $ck=$613;
      var $614=(($613)|0) >= 0;
      if ($614) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $616=$ck;
      var $617=$cp;
      var $618=(($617+($616<<2))|0);
      var $619=HEAP32[(($618)>>2)];
      $cprev=$619;
      var $620=$cprev;
      var $621=$difs;
      var $622=$620 >>> (($621)>>>0);
      var $623=$cc5;
      var $624=((($623)+($622))|0);
      $cc5=$624;
      label = 113; break;
    case 113: 
      label = 115; break;
    case 114: 
      var $627=$ck;
      var $628=((($627)-(1))|0);
      $ck=$628;
      var $629=$cp;
      var $630=(($629+($628<<2))|0);
      var $631=HEAP32[(($630)>>2)];
      $cc5=$631;
      label = 115; break;
    case 115: 
      var $633=$bk;
      var $634=((($633)-(1))|0);
      $bk=$634;
      var $635=$bp;
      var $636=(($635+($634<<2))|0);
      var $637=HEAP32[(($636)>>2)];
      var $638=$cc5;
      var $639=((($637)+($638))|0);
      $bb4=$639;
      var $640=$bb4;
      var $641=$cc5;
      var $642=(($640)>>>0) < (($641)>>>0);
      if ($642) { label = 116; break; } else { label = 122; break; }
    case 116: 
      var $644=$rb;
      var $645=(($644)|0) < 0;
      if ($645) { label = 118; break; } else { label = 117; break; }
    case 117: 
      var $647=$rb;
      var $648=$647 ^ 1;
      $rb=$648;
      var $649=(($648)|0)==0;
      if ($649) { label = 118; break; } else { label = 122; break; }
    case 118: 
      var $651=$ap;
      var $652=$ap;
      var $653=$an;
      var $654=$sh;
      var $655=1 << $654;
      var $656=___gmpn_add_1($651, $652, $653, $655);
      var $657=(($656)|0)!=0;
      if ($657) { label = 119; break; } else { label = 122; break; }
    case 119: 
      var $659=$exp;
      var $660=HEAP32[((5257656)>>2)];
      var $661=(($659)|0)==(($660)|0);
      if ($661) { label = 120; break; } else { label = 121; break; }
    case 120: 
      var $663=$1;
      var $664=$4;
      var $665=$1;
      var $666=(($665+4)|0);
      var $667=HEAP32[(($666)>>2)];
      var $668=_mpfr_overflow($663, $664, $667);
      $inex=$668;
      label = 244; break;
    case 121: 
      var $670=$exp;
      var $671=((($670)+(1))|0);
      $exp=$671;
      var $672=$an;
      var $673=((($672)-(1))|0);
      var $674=$ap;
      var $675=(($674+($673<<2))|0);
      HEAP32[(($675)>>2)]=-2147483648;
      $rb=0;
      label = 122; break;
    case 122: 
      var $677=$rb;
      var $678=(($677)|0) < 0;
      if ($678) { label = 123; break; } else { label = 124; break; }
    case 123: 
      var $680=$bb4;
      var $681=$680 >>> 31;
      $rb=$681;
      var $682=$bb4;
      var $683=$682 << 1;
      $bb4=$683;
      var $684=$bb4;
      var $685=$684 >>> 31;
      var $686=$bb4;
      var $687=$686 | $685;
      $bb4=$687;
      label = 124; break;
    case 124: 
      var $689=$bb4;
      var $690=(($689)|0)!=0;
      var $691=(($690)&1);
      $fb=$691;
      var $692=$fb;
      var $693=(($692)|0)!=0;
      if ($693) { label = 125; break; } else { label = 127; break; }
    case 125: 
      var $695=$bb4;
      var $696=(($695)|0)!=-1;
      if ($696) { label = 126; break; } else { label = 127; break; }
    case 126: 
      label = 211; break;
    case 127: 
      label = 128; break;
    case 128: 
      label = 129; break;
    case 129: 
      var $701=$bk;
      var $702=(($701)|0) > 0;
      if ($702) { label = 130; break; } else { label = 155; break; }
    case 130: 
      var $704=$difs;
      var $705=(($704)|0)!=0;
      if ($705) { label = 131; break; } else { label = 136; break; }
    case 131: 
      var $707=$ck;
      var $708=(($707)|0) < 0;
      if ($708) { label = 132; break; } else { label = 133; break; }
    case 132: 
      label = 168; break;
    case 133: 
      var $711=$cprev;
      var $712=$difs;
      var $713=(((32)-($712))|0);
      var $714=$711 << $713;
      $cc7=$714;
      var $715=$ck;
      var $716=((($715)-(1))|0);
      $ck=$716;
      var $717=(($716)|0) >= 0;
      if ($717) { label = 134; break; } else { label = 135; break; }
    case 134: 
      var $719=$ck;
      var $720=$cp;
      var $721=(($720+($719<<2))|0);
      var $722=HEAP32[(($721)>>2)];
      $cprev=$722;
      var $723=$cprev;
      var $724=$difs;
      var $725=$723 >>> (($724)>>>0);
      var $726=$cc7;
      var $727=((($726)+($725))|0);
      $cc7=$727;
      label = 135; break;
    case 135: 
      label = 139; break;
    case 136: 
      var $730=$ck;
      var $731=(($730)|0)==0;
      if ($731) { label = 137; break; } else { label = 138; break; }
    case 137: 
      label = 168; break;
    case 138: 
      var $734=$ck;
      var $735=((($734)-(1))|0);
      $ck=$735;
      var $736=$cp;
      var $737=(($736+($735<<2))|0);
      var $738=HEAP32[(($737)>>2)];
      $cc7=$738;
      label = 139; break;
    case 139: 
      var $740=$bk;
      var $741=((($740)-(1))|0);
      $bk=$741;
      var $742=$bp;
      var $743=(($742+($741<<2))|0);
      var $744=HEAP32[(($743)>>2)];
      var $745=$cc7;
      var $746=((($744)+($745))|0);
      $bb6=$746;
      var $747=$bb6;
      var $748=$cc7;
      var $749=(($747)>>>0) < (($748)>>>0);
      if ($749) { label = 140; break; } else { label = 148; break; }
    case 140: 
      var $751=$fb;
      var $752=$751 ^ 1;
      $fb=$752;
      var $753=$fb;
      var $754=(($753)|0)!=0;
      if ($754) { label = 141; break; } else { label = 142; break; }
    case 141: 
      label = 211; break;
    case 142: 
      var $757=$rb;
      var $758=$757 ^ 1;
      $rb=$758;
      var $759=$rb;
      var $760=(($759)|0)==0;
      if ($760) { label = 143; break; } else { label = 147; break; }
    case 143: 
      var $762=$ap;
      var $763=$ap;
      var $764=$an;
      var $765=$sh;
      var $766=1 << $765;
      var $767=___gmpn_add_1($762, $763, $764, $766);
      var $768=(($767)|0)!=0;
      if ($768) { label = 144; break; } else { label = 147; break; }
    case 144: 
      var $770=$exp;
      var $771=HEAP32[((5257656)>>2)];
      var $772=(($770)|0)==(($771)|0);
      var $773=$772 ^ 1;
      var $774=$773 ^ 1;
      var $775=(($774)&1);
      var $776=($775);
      var $777=(($776)|0)!=0;
      if ($777) { label = 145; break; } else { label = 146; break; }
    case 145: 
      var $779=$1;
      var $780=$4;
      var $781=$1;
      var $782=(($781+4)|0);
      var $783=HEAP32[(($782)>>2)];
      var $784=_mpfr_overflow($779, $780, $783);
      $inex=$784;
      label = 244; break;
    case 146: 
      var $786=$exp;
      var $787=((($786)+(1))|0);
      $exp=$787;
      var $788=$an;
      var $789=((($788)-(1))|0);
      var $790=$ap;
      var $791=(($790+($789<<2))|0);
      HEAP32[(($791)>>2)]=-2147483648;
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      var $794=$fb;
      var $795=(($794)|0)!=0;
      if ($795) { label = 151; break; } else { label = 149; break; }
    case 149: 
      var $797=$bb6;
      var $798=(($797)|0)!=0;
      if ($798) { label = 150; break; } else { label = 151; break; }
    case 150: 
      $fb=1;
      label = 211; break;
    case 151: 
      var $801=$fb;
      var $802=(($801)|0)!=0;
      if ($802) { label = 152; break; } else { label = 154; break; }
    case 152: 
      var $804=$bb6;
      var $805=(($804)|0)!=-1;
      if ($805) { label = 153; break; } else { label = 154; break; }
    case 153: 
      label = 211; break;
    case 154: 
      label = 129; break;
    case 155: 
      var $809=$fb;
      var $810=(($809)|0)!=0;
      if ($810) { label = 157; break; } else { label = 156; break; }
    case 156: 
      var $812=$ck;
      var $813=(($812)|0) < 0;
      if ($813) { label = 157; break; } else { label = 158; break; }
    case 157: 
      label = 211; break;
    case 158: 
      var $816=$difs;
      var $817=(($816)|0)!=0;
      if ($817) { label = 159; break; } else { label = 161; break; }
    case 159: 
      var $819=$cprev;
      var $820=$difs;
      var $821=(((32)-($820))|0);
      var $822=$819 << $821;
      var $823=(($822)|0)!=0;
      if ($823) { label = 160; break; } else { label = 161; break; }
    case 160: 
      $fb=1;
      label = 211; break;
    case 161: 
      label = 162; break;
    case 162: 
      var $827=$ck;
      var $828=(($827)|0)!=0;
      if ($828) { label = 163; break; } else { label = 166; break; }
    case 163: 
      var $830=$ck;
      var $831=((($830)-(1))|0);
      $ck=$831;
      var $832=$cp;
      var $833=(($832+($831<<2))|0);
      var $834=HEAP32[(($833)>>2)];
      var $835=(($834)|0)!=0;
      if ($835) { label = 164; break; } else { label = 165; break; }
    case 164: 
      $fb=1;
      label = 211; break;
    case 165: 
      label = 162; break;
    case 166: 
      label = 180; break;
    case 167: 
      label = 168; break;
    case 168: 
      var $841=$fb;
      var $842=(($841)|0) < 0;
      if ($842) { label = 169; break; } else { label = 172; break; }
    case 169: 
      var $844=$bk;
      var $845=((($844)-(1))|0);
      $bk=$845;
      var $846=$bp;
      var $847=(($846+($845<<2))|0);
      var $848=HEAP32[(($847)>>2)];
      $bb8=$848;
      var $849=$rb;
      var $850=(($849)|0) < 0;
      if ($850) { label = 170; break; } else { label = 171; break; }
    case 170: 
      var $852=$bb8;
      var $853=$852 >>> 31;
      $rb=$853;
      var $854=$bb8;
      var $855=$854 & 2147483647;
      $bb8=$855;
      label = 171; break;
    case 171: 
      var $857=$bb8;
      var $858=(($857)|0)!=0;
      var $859=(($858)&1);
      $fb=$859;
      label = 172; break;
    case 172: 
      var $861=$fb;
      var $862=(($861)|0)!=0;
      if ($862) { label = 173; break; } else { label = 174; break; }
    case 173: 
      label = 211; break;
    case 174: 
      label = 175; break;
    case 175: 
      var $866=$bk;
      var $867=(($866)|0)!=0;
      if ($867) { label = 176; break; } else { label = 179; break; }
    case 176: 
      var $869=$bk;
      var $870=((($869)-(1))|0);
      $bk=$870;
      var $871=$bp;
      var $872=(($871+($870<<2))|0);
      var $873=HEAP32[(($872)>>2)];
      var $874=(($873)|0)!=0;
      if ($874) { label = 177; break; } else { label = 178; break; }
    case 177: 
      $fb=1;
      label = 211; break;
    case 178: 
      label = 175; break;
    case 179: 
      label = 180; break;
    case 180: 
      label = 210; break;
    case 181: 
      var $880=$fb;
      var $881=(($880)|0)!=1;
      if ($881) { label = 182; break; } else { label = 209; break; }
    case 182: 
      var $883=$difw;
      var $884=$cn;
      var $885=(($883)|0) > (($884)|0);
      if ($885) { label = 183; break; } else { label = 186; break; }
    case 183: 
      var $887=$rb;
      var $888=(($887)|0) < 0;
      if ($888) { label = 184; break; } else { label = 185; break; }
    case 184: 
      $rb=0;
      label = 185; break;
    case 185: 
      $fb=0;
      label = 208; break;
    case 186: 
      var $892=$diff_exp;
      var $893=$aq2;
      var $894=(($892)>>>0) > (($893)>>>0);
      if ($894) { label = 187; break; } else { label = 190; break; }
    case 187: 
      var $896=$rb;
      var $897=(($896)|0) < 0;
      if ($897) { label = 188; break; } else { label = 189; break; }
    case 188: 
      $rb=0;
      label = 189; break;
    case 189: 
      $fb=1;
      label = 207; break;
    case 190: 
      var $901=$cn;
      var $902=$difw;
      var $903=((($901)-($902))|0);
      $ck9=$903;
      var $904=$diff_exp;
      var $905=((($904)>>>0))%(32);
      $difs10=$905;
      var $906=$difs10;
      var $907=(($906)|0)==0;
      if ($907) { label = 191; break; } else { label = 195; break; }
    case 191: 
      var $909=$ck9;
      var $910=(($909)|0)==0;
      if ($910) { label = 192; break; } else { label = 195; break; }
    case 192: 
      var $912=$rb;
      var $913=(($912)|0) < 0;
      if ($913) { label = 193; break; } else { label = 194; break; }
    case 193: 
      $rb=0;
      label = 194; break;
    case 194: 
      $fb=0;
      label = 206; break;
    case 195: 
      var $917=$difs10;
      var $918=(($917)|0)!=0;
      if ($918) { label = 196; break; } else { label = 197; break; }
    case 196: 
      var $920=$ck9;
      var $921=$cp;
      var $922=(($921+($920<<2))|0);
      var $923=HEAP32[(($922)>>2)];
      var $924=$difs10;
      var $925=(((32)-($924))|0);
      var $926=$923 << $925;
      var $934 = $926;label = 198; break;
    case 197: 
      var $928=$ck9;
      var $929=((($928)-(1))|0);
      $ck9=$929;
      var $930=$cp;
      var $931=(($930+($929<<2))|0);
      var $932=HEAP32[(($931)>>2)];
      var $934 = $932;label = 198; break;
    case 198: 
      var $934;
      $cc11=$934;
      var $935=$rb;
      var $936=(($935)|0) < 0;
      if ($936) { label = 199; break; } else { label = 200; break; }
    case 199: 
      var $938=$cc11;
      var $939=$938 >>> 31;
      $rb=$939;
      var $940=$cc11;
      var $941=$940 & 2147483647;
      $cc11=$941;
      label = 200; break;
    case 200: 
      label = 201; break;
    case 201: 
      var $944=$cc11;
      var $945=(($944)|0)==0;
      if ($945) { label = 202; break; } else { label = 205; break; }
    case 202: 
      var $947=$ck9;
      var $948=(($947)|0)==0;
      if ($948) { label = 203; break; } else { label = 204; break; }
    case 203: 
      $fb=0;
      label = 211; break;
    case 204: 
      var $951=$ck9;
      var $952=((($951)-(1))|0);
      $ck9=$952;
      var $953=$cp;
      var $954=(($953+($952<<2))|0);
      var $955=HEAP32[(($954)>>2)];
      $cc11=$955;
      label = 201; break;
    case 205: 
      $fb=1;
      label = 206; break;
    case 206: 
      label = 207; break;
    case 207: 
      label = 208; break;
    case 208: 
      label = 209; break;
    case 209: 
      label = 210; break;
    case 210: 
      label = 211; break;
    case 211: 
      var $963=$4;
      var $964=(($963)|0)==0;
      var $965=$964 ^ 1;
      var $966=$965 ^ 1;
      var $967=(($966)&1);
      var $968=($967);
      var $969=(($968)|0)!=0;
      if ($969) { label = 212; break; } else { label = 223; break; }
    case 212: 
      var $971=$fb;
      var $972=(($971)|0)==0;
      if ($972) { label = 213; break; } else { label = 218; break; }
    case 213: 
      var $974=$rb;
      var $975=(($974)|0)==0;
      if ($975) { label = 214; break; } else { label = 215; break; }
    case 214: 
      $inex=0;
      label = 243; break;
    case 215: 
      var $978=$ap;
      var $979=(($978)|0);
      var $980=HEAP32[(($979)>>2)];
      var $981=$sh;
      var $982=1 << $981;
      var $983=$980 & $982;
      var $984=(($983)|0)!=0;
      if ($984) { label = 216; break; } else { label = 217; break; }
    case 216: 
      label = 222; break;
    case 217: 
      label = 220; break;
    case 218: 
      var $988=$rb;
      var $989=(($988)|0)==0;
      if ($989) { label = 219; break; } else { label = 221; break; }
    case 219: 
      label = 220; break;
    case 220: 
      var $992=$1;
      var $993=(($992+4)|0);
      var $994=HEAP32[(($993)>>2)];
      var $995=(($994)|0) < 0;
      var $996=$995 ? 1 : -1;
      $inex=$996;
      label = 243; break;
    case 221: 
      label = 222; break;
    case 222: 
      var $999=$1;
      var $1000=(($999+4)|0);
      var $1001=HEAP32[(($1000)>>2)];
      var $1002=(($1001)|0) > 0;
      var $1003=$1002 ? 1 : -1;
      $inex=$1003;
      label = 238; break;
    case 223: 
      var $1005=$4;
      var $1006=(($1005)|0)==1;
      if ($1006) { label = 224; break; } else { label = 229; break; }
    case 224: 
      var $1008=$rb;
      var $1009=(($1008)|0)!=0;
      if ($1009) { label = 226; break; } else { label = 225; break; }
    case 225: 
      var $1011=$fb;
      var $1012=(($1011)|0)!=0;
      if ($1012) { label = 226; break; } else { label = 227; break; }
    case 226: 
      var $1014=$1;
      var $1015=(($1014+4)|0);
      var $1016=HEAP32[(($1015)>>2)];
      var $1017=(($1016)|0) < 0;
      var $1018=$1017 ? 1 : -1;
      var $1021 = $1018;label = 228; break;
    case 227: 
      var $1021 = 0;label = 228; break;
    case 228: 
      var $1021;
      $inex=$1021;
      label = 243; break;
    case 229: 
      var $1023=$4;
      var $1024=(($1023)|0)==4;
      var $1025=$1024 ^ 1;
      var $1026=$1025 ^ 1;
      var $1027=(($1026)&1);
      var $1028=($1027);
      var $1029=(($1028)|0)!=0;
      if ($1029) { var $1034 = 1;label = 231; break; } else { label = 230; break; }
    case 230: 
      _mpfr_assert_fail(((5248984)|0), 512, ((5249616)|0));
      var $1031=(0);
      var $1032=(($1031)|0)!=0;
      var $1034 = $1032;label = 231; break;
    case 231: 
      var $1034;
      var $1035=(($1034)&1);
      var $1036=$rb;
      var $1037=(($1036)|0)!=0;
      if ($1037) { label = 233; break; } else { label = 232; break; }
    case 232: 
      var $1039=$fb;
      var $1040=(($1039)|0)!=0;
      if ($1040) { label = 233; break; } else { label = 234; break; }
    case 233: 
      var $1042=$1;
      var $1043=(($1042+4)|0);
      var $1044=HEAP32[(($1043)>>2)];
      var $1045=(($1044)|0) > 0;
      var $1046=$1045 ? 1 : -1;
      var $1049 = $1046;label = 235; break;
    case 234: 
      var $1049 = 0;label = 235; break;
    case 235: 
      var $1049;
      $inex=$1049;
      var $1050=$inex;
      var $1051=(($1050)|0)!=0;
      if ($1051) { label = 236; break; } else { label = 237; break; }
    case 236: 
      label = 238; break;
    case 237: 
      label = 243; break;
    case 238: 
      var $1055=$ap;
      var $1056=$ap;
      var $1057=$an;
      var $1058=$sh;
      var $1059=1 << $1058;
      var $1060=___gmpn_add_1($1055, $1056, $1057, $1059);
      var $1061=(($1060)|0)!=0;
      var $1062=$1061 ^ 1;
      var $1063=$1062 ^ 1;
      var $1064=(($1063)&1);
      var $1065=($1064);
      var $1066=(($1065)|0)!=0;
      if ($1066) { label = 239; break; } else { label = 242; break; }
    case 239: 
      var $1068=$exp;
      var $1069=HEAP32[((5257656)>>2)];
      var $1070=(($1068)|0)==(($1069)|0);
      var $1071=$1070 ^ 1;
      var $1072=$1071 ^ 1;
      var $1073=(($1072)&1);
      var $1074=($1073);
      var $1075=(($1074)|0)!=0;
      if ($1075) { label = 240; break; } else { label = 241; break; }
    case 240: 
      var $1077=$1;
      var $1078=$4;
      var $1079=$1;
      var $1080=(($1079+4)|0);
      var $1081=HEAP32[(($1080)>>2)];
      var $1082=_mpfr_overflow($1077, $1078, $1081);
      $inex=$1082;
      label = 244; break;
    case 241: 
      var $1084=$exp;
      var $1085=((($1084)+(1))|0);
      $exp=$1085;
      var $1086=$an;
      var $1087=((($1086)-(1))|0);
      var $1088=$ap;
      var $1089=(($1088+($1087<<2))|0);
      HEAP32[(($1089)>>2)]=-2147483648;
      label = 242; break;
    case 242: 
      label = 243; break;
    case 243: 
      var $1092=$exp;
      var $1093=$1;
      var $1094=(($1093+8)|0);
      HEAP32[(($1094)>>2)]=$1092;
      label = 244; break;
    case 244: 
      var $1096=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($1096);
      var $1097=$inex;
      var $1098=(($1097)|0)!=0;
      if ($1098) { label = 245; break; } else { label = 246; break; }
    case 245: 
      var $1100=HEAP32[((5257648)>>2)];
      var $1101=$1100 | 8;
      HEAP32[((5257648)>>2)]=$1101;
      var $1102=$inex;
      var $1105 = $1102;label = 247; break;
    case 246: 
      var $1105 = 0;label = 247; break;
    case 247: 
      var $1105;
      STACKTOP = __stackBase__;
      return $1105;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_add1["X"]=1;

function _mpfr_clear($m) {
  var label = 0;


  var $1;
  $1=$m;
  ___gmp_get_memory_functions(5248320, 5247208, 5248188);
  var $2=HEAP32[((5248188)>>2)];
  var $3=$1;
  var $4=(($3+12)|0);
  var $5=HEAP32[(($4)>>2)];
  var $6=$5;
  var $7=((($6)-(4))|0);
  var $8=$7;
  var $9=$8;
  var $10=$1;
  var $11=(($10+12)|0);
  var $12=HEAP32[(($11)>>2)];
  var $13=((($12)-(4))|0);
  var $14=HEAP32[(($13)>>2)];
  var $15=(($14)|0);
  var $16=($15<<2);
  var $17=((($16)+(4))|0);
  FUNCTION_TABLE[$2]($9, $17);
  var $18=$1;
  var $19=(($18+12)|0);
  HEAP32[(($19)>>2)]=0;

  return;
}


function _mpfr_cmp_si_2exp($b, $i, $f) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $si;
      var $e;
      var $ai;
      var $k;
      var $bn;
      var $c;
      var $bp;
      var $__xr;
      var $__a;
      $2=$b;
      $3=$i;
      $4=$f;
      var $5=$3;
      var $6=(($5)|0) < 0;
      var $7=$6 ? -1 : 1;
      $si=$7;
      var $8=$2;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($10)|0) <= -2147483645;
      var $12=$11 ^ 1;
      var $13=$12 ^ 1;
      var $14=(($13)&1);
      var $15=($14);
      var $16=(($15)|0)!=0;
      if ($16) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $18=$2;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|0)==-2147483645;
      if ($21) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $23=$2;
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      $1=$25;
      label = 44; break;
    case 5: 
      var $27=$2;
      var $28=(($27+8)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|0)==-2147483647;
      if ($30) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $32=$3;
      var $33=(($32)|0)!=0;
      if ($33) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $35=$si;
      var $36=(((-$35))|0);
      var $39 = $36;label = 9; break;
    case 8: 
      var $39 = 0;label = 9; break;
    case 9: 
      var $39;
      $1=$39;
      label = 44; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $42=HEAP32[((5257648)>>2)];
      var $43=$42 | 16;
      HEAP32[((5257648)>>2)]=$43;
      $1=0;
      label = 44; break;
    case 12: 
      var $45=$2;
      var $46=(($45+4)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=$si;
      var $49=(($47)|0)!=(($48)|0);
      if ($49) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $51=$3;
      var $52=(($51)|0)==0;
      if ($52) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $54=$2;
      var $55=(($54+4)|0);
      var $56=HEAP32[(($55)>>2)];
      $1=$56;
      label = 44; break;
    case 15: 
      var $58=$3;
      var $59=(($58)|0) >= 0;
      if ($59) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $61=$3;
      var $66 = $61;label = 18; break;
    case 17: 
      var $63=$3;
      var $64=(((-$63))|0);
      var $66 = $64;label = 18; break;
    case 18: 
      var $66;
      $ai=$66;
      var $67=$ai;
      var $68=$ai;
      var $69=(($67)|0)==(($68)|0);
      var $70=$69 ^ 1;
      var $71=$70 ^ 1;
      var $72=(($71)&1);
      var $73=($72);
      var $74=(($73)|0)!=0;
      if ($74) { var $79 = 1;label = 20; break; } else { label = 19; break; }
    case 19: 
      _mpfr_assert_fail(((5249432)|0), 62, ((5249808)|0));
      var $76=(0);
      var $77=(($76)|0)!=0;
      var $79 = $77;label = 20; break;
    case 20: 
      var $79;
      var $80=(($79)&1);
      var $81=$2;
      var $82=(($81+8)|0);
      var $83=HEAP32[(($82)>>2)];
      $e=$83;
      var $84=$e;
      var $85=$4;
      var $86=(($84)|0) <= (($85)|0);
      if ($86) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $88=$si;
      var $89=(((-$88))|0);
      $1=$89;
      label = 44; break;
    case 22: 
      var $91=$4;
      var $92=(($91)|0) < 1073741791;
      if ($92) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $94=$e;
      var $95=$4;
      var $96=((($95)+(32))|0);
      var $97=(($94)|0) > (($96)|0);
      if ($97) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $99=$si;
      $1=$99;
      label = 44; break;
    case 25: 
      var $101=$ai;
      $c=$101;
      label = 26; break;
    case 26: 
      var $103=$c;
      $__xr=$103;
      var $104=$__xr;
      var $105=(($104)>>>0) < 65536;
      if ($105) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $107=$__xr;
      var $108=(($107)>>>0) < 256;
      var $109=$108 ? 1 : 9;
      var $115 = $109;label = 29; break;
    case 28: 
      var $111=$__xr;
      var $112=(($111)>>>0) < 16777216;
      var $113=$112 ? 17 : 25;
      var $115 = $113;label = 29; break;
    case 29: 
      var $115;
      $__a=$115;
      var $116=$__a;
      var $117=(((33)-($116))|0);
      var $118=$__xr;
      var $119=$__a;
      var $120=$118 >>> (($119)>>>0);
      var $121=((5248192+$120)|0);
      var $122=HEAP8[($121)];
      var $123=(($122)&255);
      var $124=((($117)-($123))|0);
      $k=$124;
      label = 30; break;
    case 30: 
      var $126=$e;
      var $127=$4;
      var $128=((($126)-($127))|0);
      var $129=$k;
      var $130=(((32)-($129))|0);
      var $131=(($128)|0) > (($130)|0);
      if ($131) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $133=$si;
      $1=$133;
      label = 44; break;
    case 32: 
      var $135=$e;
      var $136=$4;
      var $137=((($135)-($136))|0);
      var $138=$k;
      var $139=(((32)-($138))|0);
      var $140=(($137)|0) < (($139)|0);
      if ($140) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $142=$si;
      var $143=(((-$142))|0);
      $1=$143;
      label = 44; break;
    case 34: 
      var $145=$k;
      var $146=$c;
      var $147=$146 << $145;
      $c=$147;
      var $148=$2;
      var $149=(($148)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=((($150)-(1))|0);
      var $152=((((($151)|0))/(32))&-1);
      $bn=$152;
      var $153=$2;
      var $154=(($153+12)|0);
      var $155=HEAP32[(($154)>>2)];
      $bp=$155;
      var $156=$bn;
      var $157=$bp;
      var $158=(($157+($156<<2))|0);
      var $159=HEAP32[(($158)>>2)];
      var $160=$c;
      var $161=(($159)>>>0) > (($160)>>>0);
      if ($161) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $163=$si;
      $1=$163;
      label = 44; break;
    case 36: 
      var $165=$bn;
      var $166=$bp;
      var $167=(($166+($165<<2))|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=$c;
      var $170=(($168)>>>0) < (($169)>>>0);
      if ($170) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $172=$si;
      var $173=(((-$172))|0);
      $1=$173;
      label = 44; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $176=$bn;
      var $177=(($176)|0) > 0;
      if ($177) { label = 40; break; } else { label = 43; break; }
    case 40: 
      var $179=$bn;
      var $180=((($179)-(1))|0);
      $bn=$180;
      var $181=$bp;
      var $182=(($181+($180<<2))|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=(($183)|0)!=0;
      if ($184) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $186=$si;
      $1=$186;
      label = 44; break;
    case 42: 
      label = 39; break;
    case 43: 
      $1=0;
      label = 44; break;
    case 44: 
      var $190=$1;

      return $190;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_cmp_si_2exp["X"]=1;

function _mpfr_div($q, $u, $v, $rnd_mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $q0size;
      var $usize;
      var $vsize;
      var $qsize;
      var $qqsize;
      var $k;
      var $q0p;
      var $qp;
      var $up;
      var $vp;
      var $ap;
      var $bp;
      var $qh;
      var $sticky_u;
      var $low_u;
      var $sticky_v;
      var $sticky;
      var $sticky3;
      var $round_bit;
      var $qexp;
      var $sign_quotient;
      var $extra_bit;
      var $sh;
      var $sh2;
      var $inex;
      var $like_rndz;
      var $tmp_marker=__stackBase__;
      var $l;
      var $n;
      var $ap1;
      var $bp2;
      var $qp3;
      var $p;
      var $_b;
      var $_limb;
      var $__xr;
      var $__a;
      var $sticky3orig;
      var $l4;
      var $sp;
      var $cmp_s_r;
      var $qh2;
      var $cy;
      var $m;
      $2=$q;
      $3=$u;
      $4=$v;
      $5=$rnd_mode;
      var $6=$2;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=((($8)-(1))|0);
      var $10=((((($9)|0))/(32))&-1);
      var $11=((($10)+(1))|0);
      $q0size=$11;
      var $12=$3;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=((($14)-(1))|0);
      var $16=((((($15)|0))/(32))&-1);
      var $17=((($16)+(1))|0);
      $usize=$17;
      var $18=$4;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=((($20)-(1))|0);
      var $22=((((($21)|0))/(32))&-1);
      var $23=((($22)+(1))|0);
      $vsize=$23;
      var $24=$2;
      var $25=(($24+12)|0);
      var $26=HEAP32[(($25)>>2)];
      $q0p=$26;
      var $27=$3;
      var $28=(($27+12)|0);
      var $29=HEAP32[(($28)>>2)];
      $up=$29;
      var $30=$4;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      $vp=$32;
      $sticky_u=0;
      $sticky_v=0;
      $round_bit=0;
      var $33=$3;
      var $34=(($33+8)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=(($35)|0) <= -2147483645;
      var $37=$36 ^ 1;
      var $38=$37 ^ 1;
      var $39=(($38)&1);
      var $40=($39);
      var $41=(($40)|0)!=0;
      if ($41) { var $53 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $43=$4;
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0) <= -2147483645;
      var $47=$46 ^ 1;
      var $48=$47 ^ 1;
      var $49=(($48)&1);
      var $50=($49);
      var $51=(($50)|0)!=0;
      var $53 = $51;label = 4; break;
    case 4: 
      var $53;
      var $54=$53 ^ 1;
      var $55=$54 ^ 1;
      var $56=(($55)&1);
      var $57=($56);
      var $58=(($57)|0)!=0;
      if ($58) { label = 5; break; } else { label = 19; break; }
    case 5: 
      var $60=$3;
      var $61=(($60+8)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=(($62)|0)==-2147483646;
      if ($63) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $65=$4;
      var $66=(($65+8)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=(($67)|0)==-2147483646;
      if ($68) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $70=$2;
      var $71=(($70+8)|0);
      HEAP32[(($71)>>2)]=-2147483646;
      var $72=HEAP32[((5257648)>>2)];
      var $73=$72 | 4;
      HEAP32[((5257648)>>2)]=$73;
      $1=0;
      label = 283; break;
    case 8: 
      var $75=$3;
      var $76=(($75+4)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=$4;
      var $79=(($78+4)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=Math.imul($77,$80);
      $sign_quotient=$81;
      var $82=$sign_quotient;
      var $83=$2;
      var $84=(($83+4)|0);
      HEAP32[(($84)>>2)]=$82;
      var $85=$3;
      var $86=(($85+8)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($87)|0)==-2147483645;
      if ($88) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $90=$4;
      var $91=(($90+8)|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=(($92)|0)==-2147483645;
      if ($93) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $95=$2;
      var $96=(($95+8)|0);
      HEAP32[(($96)>>2)]=-2147483646;
      var $97=HEAP32[((5257648)>>2)];
      var $98=$97 | 4;
      HEAP32[((5257648)>>2)]=$98;
      $1=0;
      label = 283; break;
    case 11: 
      var $100=$2;
      var $101=(($100+8)|0);
      HEAP32[(($101)>>2)]=-2147483645;
      $1=0;
      label = 283; break;
    case 12: 
      var $103=$4;
      var $104=(($103+8)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=(($105)|0)==-2147483645;
      if ($106) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $108=$2;
      var $109=(($108+8)|0);
      HEAP32[(($109)>>2)]=-2147483647;
      $1=0;
      label = 283; break;
    case 14: 
      var $111=$4;
      var $112=(($111+8)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=(($113)|0)==-2147483647;
      if ($114) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $116=$3;
      var $117=(($116+8)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118)|0)==-2147483647;
      if ($119) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $121=$2;
      var $122=(($121+8)|0);
      HEAP32[(($122)>>2)]=-2147483646;
      var $123=HEAP32[((5257648)>>2)];
      var $124=$123 | 4;
      HEAP32[((5257648)>>2)]=$124;
      $1=0;
      label = 283; break;
    case 17: 
      var $126=$2;
      var $127=(($126+8)|0);
      HEAP32[(($127)>>2)]=-2147483645;
      _mpfr_set_divby0();
      $1=0;
      label = 283; break;
    case 18: 
      var $129=$2;
      var $130=(($129+8)|0);
      HEAP32[(($130)>>2)]=-2147483647;
      $1=0;
      label = 283; break;
    case 19: 
      HEAP32[(($tmp_marker)>>2)]=0;
      var $132=$3;
      var $133=(($132+4)|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=$4;
      var $136=(($135+4)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=Math.imul($134,$137);
      $sign_quotient=$138;
      var $139=$sign_quotient;
      var $140=$2;
      var $141=(($140+4)|0);
      HEAP32[(($141)>>2)]=$139;
      var $142=$usize;
      var $143=((($142)-(1))|0);
      var $144=$up;
      var $145=(($144+($143<<2))|0);
      var $146=HEAP32[(($145)>>2)];
      var $147=$vsize;
      var $148=((($147)-(1))|0);
      var $149=$vp;
      var $150=(($149+($148<<2))|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=(($146)|0)!=(($151)|0);
      var $153=$152 ^ 1;
      var $154=$153 ^ 1;
      var $155=(($154)&1);
      var $156=($155);
      var $157=(($156)|0)!=0;
      if ($157) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $159=$usize;
      var $160=((($159)-(1))|0);
      var $161=$up;
      var $162=(($161+($160<<2))|0);
      var $163=HEAP32[(($162)>>2)];
      var $164=$vsize;
      var $165=((($164)-(1))|0);
      var $166=$vp;
      var $167=(($166+($165<<2))|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=(($163)>>>0) > (($168)>>>0);
      var $170=$169 ? 1 : 0;
      $extra_bit=$170;
      label = 37; break;
    case 21: 
      var $172=$usize;
      var $173=((($172)-(1))|0);
      $k=$173;
      var $174=$vsize;
      var $175=((($174)-(1))|0);
      $l=$175;
      label = 22; break;
    case 22: 
      var $177=$k;
      var $178=(($177)|0)!=0;
      if ($178) { label = 23; break; } else { var $195 = 0;label = 25; break; }
    case 23: 
      var $180=$l;
      var $181=(($180)|0)!=0;
      if ($181) { label = 24; break; } else { var $195 = 0;label = 25; break; }
    case 24: 
      var $183=$k;
      var $184=((($183)-(1))|0);
      $k=$184;
      var $185=$up;
      var $186=(($185+($184<<2))|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=$l;
      var $189=((($188)-(1))|0);
      $l=$189;
      var $190=$vp;
      var $191=(($190+($189<<2))|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=(($187)|0)==(($192)|0);
      var $195 = $193;label = 25; break;
    case 25: 
      var $195;
      if ($195) { label = 26; break; } else { label = 27; break; }
    case 26: 
      label = 22; break;
    case 27: 
      var $198=$k;
      var $199=$up;
      var $200=(($199+($198<<2))|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=$l;
      var $203=$vp;
      var $204=(($203+($202<<2))|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=(($201)>>>0) > (($205)>>>0);
      if ($206) { label = 28; break; } else { label = 29; break; }
    case 28: 
      $extra_bit=1;
      label = 36; break;
    case 29: 
      var $209=$k;
      var $210=$up;
      var $211=(($210+($209<<2))|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=$l;
      var $214=$vp;
      var $215=(($214+($213<<2))|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=(($212)>>>0) < (($216)>>>0);
      if ($217) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $extra_bit=0;
      label = 35; break;
    case 31: 
      var $220=$l;
      var $221=(($220)|0)==0;
      if ($221) { label = 32; break; } else { label = 33; break; }
    case 32: 
      $extra_bit=1;
      label = 34; break;
    case 33: 
      var $224=$vp;
      var $225=$l;
      var $226=_mpfr_mpn_cmpzero($224, $225);
      var $227=(($226)|0)==0;
      var $228=(($227)&1);
      $extra_bit=$228;
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $233=$3;
      var $234=(($233+8)|0);
      var $235=HEAP32[(($234)>>2)];
      var $236=$4;
      var $237=(($236+8)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=((($235)-($238))|0);
      var $240=$extra_bit;
      var $241=((($239)+($240))|0);
      $qexp=$241;
      label = 38; break;
    case 38: 
      var $243=$2;
      var $244=(($243)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=(((-$245))|0);
      var $247=((($246)>>>0))%(32);
      $sh=$247;
      label = 39; break;
    case 39: 
      var $249=$5;
      var $250=(($249)|0)==1;
      if ($250) { var $258 = 1;label = 41; break; } else { label = 40; break; }
    case 40: 
      var $252=$5;
      var $253=$sign_quotient;
      var $254=(($253)|0) < 0;
      var $255=$254 ? 2 : 3;
      var $256=(($252)|0)==(($255)|0);
      var $258 = $256;label = 41; break;
    case 41: 
      var $258;
      var $259=(($258)&1);
      $like_rndz=$259;
      var $260=$q0size;
      var $261=(($260)|0) >= 25;
      if ($261) { label = 42; break; } else { var $266 = 0;label = 43; break; }
    case 42: 
      var $263=$vsize;
      var $264=(($263)|0) >= 25;
      var $266 = $264;label = 43; break;
    case 43: 
      var $266;
      var $267=$266 ^ 1;
      var $268=$267 ^ 1;
      var $269=(($268)&1);
      var $270=($269);
      var $271=(($270)|0)!=0;
      if ($271) { label = 44; break; } else { label = 105; break; }
    case 44: 
      var $273=$q0size;
      var $274=((($273)+(1))|0);
      $n=$274;
      var $275=$n;
      var $276=$n;
      var $277=((($275)+($276))|0);
      var $278=($277<<2);
      var $279=(($278)>>>0) < 16384;
      var $280=$279 ^ 1;
      var $281=$280 ^ 1;
      var $282=(($281)&1);
      var $283=($282);
      var $284=(($283)|0)!=0;
      if ($284) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $286=$n;
      var $287=$n;
      var $288=((($286)+($287))|0);
      var $289=($288<<2);
      var $290=STACKTOP;STACKTOP = (STACKTOP + $289)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $298 = $290;label = 47; break;
    case 46: 
      var $292=$n;
      var $293=$n;
      var $294=((($292)+($293))|0);
      var $295=($294<<2);
      var $296=_mpfr_tmp_allocate($tmp_marker, $295);
      var $298 = $296;label = 47; break;
    case 47: 
      var $298;
      var $299=$298;
      $ap1=$299;
      var $300=$usize;
      var $301=$n;
      var $302=$n;
      var $303=((($301)+($302))|0);
      var $304=(($300)|0) >= (($303)|0);
      if ($304) { label = 48; break; } else { label = 53; break; }
    case 48: 
      label = 49; break;
    case 49: 
      var $307=$ap1;
      var $308=$up;
      var $309=$usize;
      var $310=(($308+($309<<2))|0);
      var $311=$n;
      var $312=$n;
      var $313=((($311)+($312))|0);
      var $314=(((-$313))|0);
      var $315=(($310+($314<<2))|0);
      var $316=(($307)|0)!=(($315)|0);
      if ($316) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $318=$ap1;
      var $319=$318;
      var $320=$up;
      var $321=$usize;
      var $322=(($320+($321<<2))|0);
      var $323=$n;
      var $324=$n;
      var $325=((($323)+($324))|0);
      var $326=(((-$325))|0);
      var $327=(($322+($326<<2))|0);
      var $328=$327;
      var $329=$n;
      var $330=$n;
      var $331=((($329)+($330))|0);
      var $332=($331<<2);
      assert($332 % 1 === 0);_memcpy($319, $328, $332);
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 58; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $337=$ap1;
      var $338=$n;
      var $339=$n;
      var $340=((($338)+($339))|0);
      var $341=(($337+($340<<2))|0);
      var $342=$usize;
      var $343=(((-$342))|0);
      var $344=(($341+($343<<2))|0);
      var $345=$up;
      var $346=(($344)|0)!=(($345)|0);
      if ($346) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $348=$ap1;
      var $349=$n;
      var $350=$n;
      var $351=((($349)+($350))|0);
      var $352=(($348+($351<<2))|0);
      var $353=$usize;
      var $354=(((-$353))|0);
      var $355=(($352+($354<<2))|0);
      var $356=$355;
      var $357=$up;
      var $358=$357;
      var $359=$usize;
      var $360=($359<<2);
      assert($360 % 1 === 0);_memcpy($356, $358, $360);
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $363=$ap1;
      var $364=$363;
      var $365=$n;
      var $366=$n;
      var $367=((($365)+($366))|0);
      var $368=$usize;
      var $369=((($367)-($368))|0);
      var $370=($369<<2);
      _memset($364, 0, $370);
      label = 58; break;
    case 58: 
      var $372=$vsize;
      var $373=$n;
      var $374=(($372)|0) >= (($373)|0);
      if ($374) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $376=$vp;
      var $377=$vsize;
      var $378=(($376+($377<<2))|0);
      var $379=$n;
      var $380=(((-$379))|0);
      var $381=(($378+($380<<2))|0);
      $bp2=$381;
      label = 68; break;
    case 60: 
      var $383=$n;
      var $384=($383<<2);
      var $385=(($384)>>>0) < 16384;
      var $386=$385 ^ 1;
      var $387=$386 ^ 1;
      var $388=(($387)&1);
      var $389=($388);
      var $390=(($389)|0)!=0;
      if ($390) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $392=$n;
      var $393=($392<<2);
      var $394=STACKTOP;STACKTOP = (STACKTOP + $393)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $400 = $394;label = 63; break;
    case 62: 
      var $396=$n;
      var $397=($396<<2);
      var $398=_mpfr_tmp_allocate($tmp_marker, $397);
      var $400 = $398;label = 63; break;
    case 63: 
      var $400;
      var $401=$400;
      $bp2=$401;
      label = 64; break;
    case 64: 
      var $403=$bp2;
      var $404=$n;
      var $405=(($403+($404<<2))|0);
      var $406=$vsize;
      var $407=(((-$406))|0);
      var $408=(($405+($407<<2))|0);
      var $409=$vp;
      var $410=(($408)|0)!=(($409)|0);
      if ($410) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $412=$bp2;
      var $413=$n;
      var $414=(($412+($413<<2))|0);
      var $415=$vsize;
      var $416=(((-$415))|0);
      var $417=(($414+($416<<2))|0);
      var $418=$417;
      var $419=$vp;
      var $420=$419;
      var $421=$vsize;
      var $422=($421<<2);
      assert($422 % 1 === 0);_memcpy($418, $420, $422);
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $425=$bp2;
      var $426=$425;
      var $427=$n;
      var $428=$vsize;
      var $429=((($427)-($428))|0);
      var $430=($429<<2);
      _memset($426, 0, $430);
      label = 68; break;
    case 68: 
      var $432=$n;
      var $433=($432<<2);
      var $434=(($433)>>>0) < 16384;
      var $435=$434 ^ 1;
      var $436=$435 ^ 1;
      var $437=(($436)&1);
      var $438=($437);
      var $439=(($438)|0)!=0;
      if ($439) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $441=$n;
      var $442=($441<<2);
      var $443=STACKTOP;STACKTOP = (STACKTOP + $442)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $449 = $443;label = 71; break;
    case 70: 
      var $445=$n;
      var $446=($445<<2);
      var $447=_mpfr_tmp_allocate($tmp_marker, $446);
      var $449 = $447;label = 71; break;
    case 71: 
      var $449;
      var $450=$449;
      $qp3=$450;
      var $451=$qp3;
      var $452=$ap1;
      var $453=$bp2;
      var $454=$n;
      var $455=_mpfr_divhigh_n($451, $452, $453, $454);
      $qh=$455;
      var $456=$n;
      var $457=($456<<5);
      var $458=$n;
      var $459=($458<<1);
      var $460=((($459)+(2))|0);
      var $461=(($460)|0)==1;
      var $462=$461 ^ 1;
      var $463=$462 ^ 1;
      var $464=(($463)&1);
      var $465=($464);
      var $466=(($465)|0)!=0;
      if ($466) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $532 = 0;label = 83; break;
    case 73: 
      var $469=$n;
      var $470=($469<<1);
      var $471=((($470)+(2))|0);
      var $472=(($471)|0) > 1;
      var $473=$472 ^ 1;
      var $474=$473 ^ 1;
      var $475=(($474)&1);
      var $476=($475);
      var $477=(($476)|0)!=0;
      if ($477) { var $482 = 1;label = 75; break; } else { label = 74; break; }
    case 74: 
      _mpfr_assert_fail(((5249204)|0), 316, ((5249708)|0));
      var $479=(0);
      var $480=(($479)|0)!=0;
      var $482 = $480;label = 75; break;
    case 75: 
      var $482;
      var $483=(($482)&1);
      var $484=$n;
      var $485=($484<<1);
      var $486=((($485)+(2))|0);
      var $487=((($486)-(1))|0);
      $_limb=$487;
      var $488=$_limb;
      var $489=$n;
      var $490=($489<<1);
      var $491=((($490)+(2))|0);
      var $492=((($491)-(1))|0);
      var $493=(($488)|0)==(($492)|0);
      var $494=$493 ^ 1;
      var $495=$494 ^ 1;
      var $496=(($495)&1);
      var $497=($496);
      var $498=(($497)|0)!=0;
      if ($498) { var $503 = 1;label = 77; break; } else { label = 76; break; }
    case 76: 
      _mpfr_assert_fail(((5249204)|0), 316, ((5249212)|0));
      var $500=(0);
      var $501=(($500)|0)!=0;
      var $503 = $501;label = 77; break;
    case 77: 
      var $503;
      var $504=(($503)&1);
      label = 78; break;
    case 78: 
      var $506=$_limb;
      $__xr=$506;
      var $507=$__xr;
      var $508=(($507)>>>0) < 65536;
      if ($508) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $510=$__xr;
      var $511=(($510)>>>0) < 256;
      var $512=$511 ? 1 : 9;
      var $518 = $512;label = 81; break;
    case 80: 
      var $514=$__xr;
      var $515=(($514)>>>0) < 16777216;
      var $516=$515 ? 17 : 25;
      var $518 = $516;label = 81; break;
    case 81: 
      var $518;
      $__a=$518;
      var $519=$__a;
      var $520=(((33)-($519))|0);
      var $521=$__xr;
      var $522=$__a;
      var $523=$521 >>> (($522)>>>0);
      var $524=((5248192+$523)|0);
      var $525=HEAP8[($524)];
      var $526=(($525)&255);
      var $527=((($520)-($526))|0);
      $_b=$527;
      label = 82; break;
    case 82: 
      var $529=$_b;
      var $530=(((32)-($529))|0);
      var $532 = $530;label = 83; break;
    case 83: 
      var $532;
      var $533=((($457)-($532))|0);
      $p=$533;
      var $534=$qp3;
      var $535=$n;
      var $536=$p;
      var $537=$2;
      var $538=(($537)|0);
      var $539=HEAP32[(($538)>>2)];
      var $540=$5;
      var $541=(($540)|0)==0;
      var $542=(($541)&1);
      var $543=((($539)+($542))|0);
      var $544=$qh;
      var $545=((($543)-($544))|0);
      var $546=_mpfr_round_p($534, $535, $536, $545);
      var $547=(($546)|0)!=0;
      var $548=$547 ^ 1;
      var $549=$548 ^ 1;
      var $550=(($549)&1);
      var $551=($550);
      var $552=(($551)|0)!=0;
      if ($552) { label = 84; break; } else { label = 104; break; }
    case 84: 
      var $554=$qh;
      var $555=(($554)|0)==0;
      if ($555) { label = 85; break; } else { label = 90; break; }
    case 85: 
      label = 86; break;
    case 86: 
      var $558=$q0p;
      var $559=$qp3;
      var $560=(($559+4)|0);
      var $561=(($558)|0)!=(($560)|0);
      if ($561) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $563=$q0p;
      var $564=$563;
      var $565=$qp3;
      var $566=(($565+4)|0);
      var $567=$566;
      var $568=$q0size;
      var $569=($568<<2);
      assert($569 % 1 === 0);_memcpy($564, $567, $569);
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 91; break;
    case 90: 
      var $573=$q0p;
      var $574=$qp3;
      var $575=(($574+4)|0);
      var $576=$q0size;
      var $577=___gmpn_rshift($573, $575, $576, 1);
      var $578=$q0size;
      var $579=((($578)-(1))|0);
      var $580=$q0p;
      var $581=(($580+($579<<2))|0);
      var $582=HEAP32[(($581)>>2)];
      var $583=$582 ^ -2147483648;
      HEAP32[(($581)>>2)]=$583;
      label = 91; break;
    case 91: 
      var $585=$sh;
      var $586=1 << $585;
      var $587=((($586)-(1))|0);
      var $588=$587 ^ -1;
      var $589=$q0p;
      var $590=(($589)|0);
      var $591=HEAP32[(($590)>>2)];
      var $592=$591 & $588;
      HEAP32[(($590)>>2)]=$592;
      var $593=$5;
      var $594=(($593)|0)==0;
      if ($594) { label = 92; break; } else { label = 101; break; }
    case 92: 
      var $596=$qh;
      var $597=(($596)|0)==0;
      if ($597) { label = 93; break; } else { label = 97; break; }
    case 93: 
      var $599=$sh;
      var $600=(($599)|0) > 0;
      if ($600) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $602=$qp3;
      var $603=(($602+4)|0);
      var $604=HEAP32[(($603)>>2)];
      var $605=$sh;
      var $606=((($605)-(1))|0);
      var $607=$604 >>> (($606)>>>0);
      var $608=$607 & 1;
      $round_bit=$608;
      label = 96; break;
    case 95: 
      var $610=$qp3;
      var $611=(($610)|0);
      var $612=HEAP32[(($611)>>2)];
      var $613=$612 >>> 31;
      $round_bit=$613;
      label = 96; break;
    case 96: 
      label = 98; break;
    case 97: 
      var $616=$qp3;
      var $617=(($616+4)|0);
      var $618=HEAP32[(($617)>>2)];
      var $619=$sh;
      var $620=$618 >>> (($619)>>>0);
      var $621=$620 & 1;
      $round_bit=$621;
      label = 98; break;
    case 98: 
      var $623=$round_bit;
      var $624=(($623)|0)==0;
      if ($624) { label = 99; break; } else { label = 100; break; }
    case 99: 
      $inex=-1;
      label = 269; break;
    case 100: 
      label = 266; break;
    case 101: 
      var $628=$like_rndz;
      var $629=(($628)|0)==0;
      if ($629) { label = 102; break; } else { label = 103; break; }
    case 102: 
      label = 266; break;
    case 103: 
      $inex=-1;
      label = 269; break;
    case 104: 
      label = 105; break;
    case 105: 
      var $634=$5;
      var $635=(($634)|0)==0;
      if ($635) { label = 106; break; } else { var $640 = 0;label = 107; break; }
    case 106: 
      var $637=$sh;
      var $638=(($637)|0)==0;
      var $640 = $638;label = 107; break;
    case 107: 
      var $640;
      var $641=$640 ^ 1;
      var $642=$641 ^ 1;
      var $643=(($642)&1);
      var $644=($643);
      var $645=(($644)|0)!=0;
      if ($645) { label = 108; break; } else { label = 112; break; }
    case 108: 
      var $647=$q0size;
      var $648=((($647)+(1))|0);
      $qsize=$648;
      var $649=$qsize;
      var $650=($649<<2);
      var $651=(($650)>>>0) < 16384;
      var $652=$651 ^ 1;
      var $653=$652 ^ 1;
      var $654=(($653)&1);
      var $655=($654);
      var $656=(($655)|0)!=0;
      if ($656) { label = 109; break; } else { label = 110; break; }
    case 109: 
      var $658=$qsize;
      var $659=($658<<2);
      var $660=STACKTOP;STACKTOP = (STACKTOP + $659)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $666 = $660;label = 111; break;
    case 110: 
      var $662=$qsize;
      var $663=($662<<2);
      var $664=_mpfr_tmp_allocate($tmp_marker, $663);
      var $666 = $664;label = 111; break;
    case 111: 
      var $666;
      var $667=$666;
      $qp=$667;
      label = 113; break;
    case 112: 
      var $669=$q0size;
      $qsize=$669;
      var $670=$q0p;
      $qp=$670;
      label = 113; break;
    case 113: 
      var $672=$qsize;
      var $673=$qsize;
      var $674=((($672)+($673))|0);
      $qqsize=$674;
      var $675=$qqsize;
      var $676=($675<<2);
      var $677=(($676)>>>0) < 16384;
      var $678=$677 ^ 1;
      var $679=$678 ^ 1;
      var $680=(($679)&1);
      var $681=($680);
      var $682=(($681)|0)!=0;
      if ($682) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $684=$qqsize;
      var $685=($684<<2);
      var $686=STACKTOP;STACKTOP = (STACKTOP + $685)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $692 = $686;label = 116; break;
    case 115: 
      var $688=$qqsize;
      var $689=($688<<2);
      var $690=_mpfr_tmp_allocate($tmp_marker, $689);
      var $692 = $690;label = 116; break;
    case 116: 
      var $692;
      var $693=$692;
      $ap=$693;
      var $694=$qqsize;
      var $695=$usize;
      var $696=(($694)|0) > (($695)|0);
      var $697=$696 ^ 1;
      var $698=$697 ^ 1;
      var $699=(($698)&1);
      var $700=($699);
      var $701=(($700)|0)!=0;
      if ($701) { label = 117; break; } else { label = 125; break; }
    case 117: 
      var $703=$qqsize;
      var $704=$usize;
      var $705=((($703)-($704))|0);
      $k=$705;
      var $706=$ap;
      var $707=$706;
      var $708=$k;
      var $709=($708<<2);
      _memset($707, 0, $709);
      var $710=$extra_bit;
      var $711=(($710)|0)!=0;
      if ($711) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $713=$ap;
      var $714=$k;
      var $715=(($713+($714<<2))|0);
      var $716=$up;
      var $717=$usize;
      var $718=___gmpn_rshift($715, $716, $717, 1);
      var $719=$k;
      var $720=((($719)-(1))|0);
      var $721=$ap;
      var $722=(($721+($720<<2))|0);
      HEAP32[(($722)>>2)]=$718;
      label = 124; break;
    case 119: 
      label = 120; break;
    case 120: 
      var $725=$ap;
      var $726=$k;
      var $727=(($725+($726<<2))|0);
      var $728=$up;
      var $729=(($727)|0)!=(($728)|0);
      if ($729) { label = 121; break; } else { label = 122; break; }
    case 121: 
      var $731=$ap;
      var $732=$k;
      var $733=(($731+($732<<2))|0);
      var $734=$733;
      var $735=$up;
      var $736=$735;
      var $737=$usize;
      var $738=($737<<2);
      assert($738 % 1 === 0);_memcpy($734, $736, $738);
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      label = 135; break;
    case 125: 
      var $743=$usize;
      var $744=$qqsize;
      var $745=((($743)-($744))|0);
      $k=$745;
      var $746=$extra_bit;
      var $747=(($746)|0)!=0;
      if ($747) { label = 126; break; } else { label = 127; break; }
    case 126: 
      var $749=$ap;
      var $750=$up;
      var $751=$k;
      var $752=(($750+($751<<2))|0);
      var $753=$qqsize;
      var $754=___gmpn_rshift($749, $752, $753, 1);
      $sticky_u=$754;
      label = 132; break;
    case 127: 
      label = 128; break;
    case 128: 
      var $757=$ap;
      var $758=$up;
      var $759=$k;
      var $760=(($758+($759<<2))|0);
      var $761=(($757)|0)!=(($760)|0);
      if ($761) { label = 129; break; } else { label = 130; break; }
    case 129: 
      var $763=$ap;
      var $764=$763;
      var $765=$up;
      var $766=$k;
      var $767=(($765+($766<<2))|0);
      var $768=$767;
      var $769=$qqsize;
      var $770=($769<<2);
      assert($770 % 1 === 0);_memcpy($764, $768, $770);
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      var $774=$sticky_u;
      var $775=(($774)|0)!=0;
      if ($775) { var $782 = 1;label = 134; break; } else { label = 133; break; }
    case 133: 
      var $777=$up;
      var $778=$k;
      var $779=_mpfr_mpn_cmpzero($777, $778);
      var $780=(($779)|0)!=0;
      var $782 = $780;label = 134; break;
    case 134: 
      var $782;
      var $783=(($782)&1);
      $sticky_u=$783;
      label = 135; break;
    case 135: 
      var $785=$sticky_u;
      $low_u=$785;
      var $786=$vsize;
      var $787=$qsize;
      var $788=(($786)|0) >= (($787)|0);
      var $789=$788 ^ 1;
      var $790=$789 ^ 1;
      var $791=(($790)&1);
      var $792=($791);
      var $793=(($792)|0)!=0;
      if ($793) { label = 136; break; } else { label = 149; break; }
    case 136: 
      var $795=$vsize;
      var $796=$qsize;
      var $797=((($795)-($796))|0);
      $k=$797;
      var $798=$qp;
      var $799=$vp;
      var $800=(($798)|0)!=(($799)|0);
      if ($800) { label = 137; break; } else { label = 138; break; }
    case 137: 
      var $802=$vp;
      var $803=$k;
      var $804=(($802+($803<<2))|0);
      $bp=$804;
      label = 146; break;
    case 138: 
      var $806=$qsize;
      var $807=($806<<2);
      var $808=(($807)>>>0) < 16384;
      var $809=$808 ^ 1;
      var $810=$809 ^ 1;
      var $811=(($810)&1);
      var $812=($811);
      var $813=(($812)|0)!=0;
      if ($813) { label = 139; break; } else { label = 140; break; }
    case 139: 
      var $815=$qsize;
      var $816=($815<<2);
      var $817=STACKTOP;STACKTOP = (STACKTOP + $816)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $823 = $817;label = 141; break;
    case 140: 
      var $819=$qsize;
      var $820=($819<<2);
      var $821=_mpfr_tmp_allocate($tmp_marker, $820);
      var $823 = $821;label = 141; break;
    case 141: 
      var $823;
      var $824=$823;
      $bp=$824;
      label = 142; break;
    case 142: 
      var $826=$bp;
      var $827=$vp;
      var $828=(($826)|0)!=(($827)|0);
      if ($828) { label = 143; break; } else { label = 144; break; }
    case 143: 
      var $830=$bp;
      var $831=$830;
      var $832=$vp;
      var $833=$832;
      var $834=$vsize;
      var $835=($834<<2);
      assert($835 % 1 === 0);_memcpy($831, $833, $835);
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      label = 146; break;
    case 146: 
      var $839=$sticky_v;
      var $840=(($839)|0)!=0;
      if ($840) { var $847 = 1;label = 148; break; } else { label = 147; break; }
    case 147: 
      var $842=$vp;
      var $843=$k;
      var $844=_mpfr_mpn_cmpzero($842, $843);
      var $845=(($844)|0)!=0;
      var $847 = $845;label = 148; break;
    case 148: 
      var $847;
      var $848=(($847)&1);
      $sticky_v=$848;
      $k=0;
      label = 150; break;
    case 149: 
      var $850=$vp;
      $bp=$850;
      var $851=$qsize;
      var $852=$vsize;
      var $853=((($851)-($852))|0);
      $k=$853;
      label = 150; break;
    case 150: 
      var $855=$qp;
      var $856=$ap;
      var $857=$k;
      var $858=(($856+($857<<2))|0);
      var $859=$qqsize;
      var $860=$k;
      var $861=((($859)-($860))|0);
      var $862=$bp;
      var $863=$qsize;
      var $864=$k;
      var $865=((($863)-($864))|0);
      var $866=___gmpn_divrem($855, 0, $858, $861, $862, $865);
      $qh=$866;
      var $867=$qsize;
      $k=$867;
      var $868=$sticky_u;
      var $869=(($868)|0)!=0;
      if ($869) { var $876 = 1;label = 152; break; } else { label = 151; break; }
    case 151: 
      var $871=$ap;
      var $872=$k;
      var $873=_mpfr_mpn_cmpzero($871, $872);
      var $874=(($873)|0)!=0;
      var $876 = $874;label = 152; break;
    case 152: 
      var $876;
      var $877=(($876)&1);
      $sticky_u=$877;
      var $878=$sticky_u;
      var $879=$sticky_v;
      var $880=$878 | $879;
      $sticky=$880;
      var $881=$qsize;
      var $882=$q0size;
      var $883=(($881)|0)==(($882)|0);
      var $884=$883 ^ 1;
      var $885=$884 ^ 1;
      var $886=(($885)&1);
      var $887=($886);
      var $888=(($887)|0)!=0;
      if ($888) { label = 153; break; } else { label = 154; break; }
    case 153: 
      var $890=$qp;
      var $891=(($890)|0);
      var $892=HEAP32[(($891)>>2)];
      var $893=$sh;
      var $894=1 << $893;
      var $895=((($894)-(1))|0);
      var $896=$892 & $895;
      $sticky3=$896;
      var $897=$sh;
      $sh2=$897;
      label = 159; break;
    case 154: 
      label = 155; break;
    case 155: 
      var $900=$q0p;
      var $901=$qp;
      var $902=(($901+4)|0);
      var $903=(($900)|0)!=(($902)|0);
      if ($903) { label = 156; break; } else { label = 157; break; }
    case 156: 
      var $905=$q0p;
      var $906=$905;
      var $907=$qp;
      var $908=(($907+4)|0);
      var $909=$908;
      var $910=$q0size;
      var $911=($910<<2);
      assert($911 % 1 === 0);_memcpy($906, $909, $911);
      label = 157; break;
    case 157: 
      label = 158; break;
    case 158: 
      var $914=$qp;
      var $915=(($914)|0);
      var $916=HEAP32[(($915)>>2)];
      $sticky3=$916;
      $sh2=32;
      label = 159; break;
    case 159: 
      var $918=$sticky3;
      var $919=$qp;
      var $920=(($919)|0);
      var $921=HEAP32[(($920)>>2)];
      var $922=$921 ^ $918;
      HEAP32[(($920)>>2)]=$922;
      var $923=$sticky;
      var $924=(($923)|0)!=0;
      if ($924) { var $929 = 1;label = 161; break; } else { label = 160; break; }
    case 160: 
      var $926=$sticky3;
      var $927=(($926)|0)!=0;
      var $929 = $927;label = 161; break;
    case 161: 
      var $929;
      var $930=(($929)&1);
      $inex=$930;
      var $931=$vsize;
      var $932=$qsize;
      var $933=(($931)|0) <= (($932)|0);
      var $934=$933 ^ 1;
      var $935=$934 ^ 1;
      var $936=(($935)&1);
      var $937=($936);
      var $938=(($937)|0)!=0;
      if ($938) { label = 162; break; } else { label = 170; break; }
    case 162: 
      var $940=$5;
      var $941=(($940)|0)==0;
      var $942=$941 ^ 1;
      var $943=$942 ^ 1;
      var $944=(($943)&1);
      var $945=($944);
      var $946=(($945)|0)!=0;
      if ($946) { label = 163; break; } else { label = 164; break; }
    case 163: 
      var $948=$sticky3;
      var $949=$sh2;
      var $950=((($949)-(1))|0);
      var $951=1 << $950;
      var $952=$948 & $951;
      $round_bit=$952;
      var $953=$sticky3;
      var $954=$round_bit;
      var $955=$953 ^ $954;
      var $956=$sticky_u;
      var $957=$955 | $956;
      $sticky=$957;
      label = 169; break;
    case 164: 
      var $959=$like_rndz;
      var $960=(($959)|0)!=0;
      if ($960) { label = 166; break; } else { label = 165; break; }
    case 165: 
      var $962=$inex;
      var $963=(($962)|0)==0;
      if ($963) { label = 166; break; } else { label = 167; break; }
    case 166: 
      var $965=$inex;
      var $966=(($965)|0)==0;
      var $967=$966 ? 0 : 1;
      $sticky=$967;
      label = 168; break;
    case 167: 
      $sticky=1;
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      label = 245; break;
    case 170: 
      var $972=$inex;
      var $973=(($972)|0)==0;
      if ($973) { label = 171; break; } else { label = 172; break; }
    case 171: 
      label = 269; break;
    case 172: 
      var $976=$sticky3;
      $sticky3orig=$976;
      var $977=$5;
      var $978=(($977)|0)==0;
      if ($978) { label = 173; break; } else { label = 174; break; }
    case 173: 
      var $980=$sticky3;
      var $981=$sh2;
      var $982=((($981)-(1))|0);
      var $983=1 << $982;
      var $984=$980 & $983;
      $round_bit=$984;
      var $985=$sticky3;
      var $986=$round_bit;
      var $987=$985 ^ $986;
      $sticky3=$987;
      label = 174; break;
    case 174: 
      var $989=$sticky3;
      var $990=(($989)|0)!=0;
      if ($990) { label = 175; break; } else { label = 177; break; }
    case 175: 
      var $992=$sticky3;
      var $993=(($992)|0)!=1;
      if ($993) { label = 176; break; } else { label = 177; break; }
    case 176: 
      var $995=$sticky3;
      $sticky=$995;
      label = 245; break;
    case 177: 
      var $997=$vsize;
      var $998=($997<<2);
      var $999=(($998)>>>0) < 16384;
      var $1000=$999 ^ 1;
      var $1001=$1000 ^ 1;
      var $1002=(($1001)&1);
      var $1003=($1002);
      var $1004=(($1003)|0)!=0;
      if ($1004) { label = 178; break; } else { label = 179; break; }
    case 178: 
      var $1006=$vsize;
      var $1007=($1006<<2);
      var $1008=STACKTOP;STACKTOP = (STACKTOP + $1007)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1014 = $1008;label = 180; break;
    case 179: 
      var $1010=$vsize;
      var $1011=($1010<<2);
      var $1012=_mpfr_tmp_allocate($tmp_marker, $1011);
      var $1014 = $1012;label = 180; break;
    case 180: 
      var $1014;
      var $1015=$1014;
      $sp=$1015;
      var $1016=$vsize;
      var $1017=$qsize;
      var $1018=((($1016)-($1017))|0);
      $k=$1018;
      var $1019=$sticky3orig;
      var $1020=$qp;
      var $1021=(($1020)|0);
      var $1022=HEAP32[(($1021)>>2)];
      var $1023=$1022 ^ $1019;
      HEAP32[(($1021)>>2)]=$1023;
      var $1024=$qsize;
      var $1025=$k;
      var $1026=(($1024)|0) >= (($1025)|0);
      if ($1026) { label = 181; break; } else { label = 182; break; }
    case 181: 
      var $1028=$sp;
      var $1029=$qp;
      var $1030=$qsize;
      var $1031=$vp;
      var $1032=$k;
      var $1033=___gmpn_mul($1028, $1029, $1030, $1031, $1032);
      label = 183; break;
    case 182: 
      var $1035=$sp;
      var $1036=$vp;
      var $1037=$k;
      var $1038=$qp;
      var $1039=$qsize;
      var $1040=___gmpn_mul($1035, $1036, $1037, $1038, $1039);
      label = 183; break;
    case 183: 
      var $1042=$qh;
      var $1043=(($1042)|0)!=0;
      if ($1043) { label = 184; break; } else { label = 185; break; }
    case 184: 
      var $1045=$sp;
      var $1046=$qsize;
      var $1047=(($1045+($1046<<2))|0);
      var $1048=$sp;
      var $1049=$qsize;
      var $1050=(($1048+($1049<<2))|0);
      var $1051=$vp;
      var $1052=$k;
      var $1053=___gmpn_add_n($1047, $1050, $1051, $1052);
      $qh2=$1053;
      label = 186; break;
    case 185: 
      $qh2=0;
      label = 186; break;
    case 186: 
      var $1056=$sticky3orig;
      var $1057=$qp;
      var $1058=(($1057)|0);
      var $1059=HEAP32[(($1058)>>2)];
      var $1060=$1059 ^ $1056;
      HEAP32[(($1058)>>2)]=$1060;
      var $1061=$qh2;
      var $1062=(($1061)|0)!=0;
      if ($1062) { label = 187; break; } else { label = 188; break; }
    case 187: 
      var $1072 = 1;label = 189; break;
    case 188: 
      var $1065=$sp;
      var $1066=$k;
      var $1067=(($1065+($1066<<2))|0);
      var $1068=$ap;
      var $1069=$qsize;
      var $1070=___gmpn_cmp($1067, $1068, $1069);
      var $1072 = $1070;label = 189; break;
    case 189: 
      var $1072;
      $cmp_s_r=$1072;
      var $1073=$cmp_s_r;
      var $1074=(($1073)|0)==0;
      if ($1074) { label = 190; break; } else { label = 194; break; }
    case 190: 
      var $1076=$usize;
      var $1077=$qqsize;
      var $1078=(($1076)|0) >= (($1077)|0);
      if ($1078) { label = 191; break; } else { label = 192; break; }
    case 191: 
      var $1080=$sp;
      var $1081=$k;
      var $1082=$up;
      var $1083=$usize;
      var $1084=$qqsize;
      var $1085=((($1083)-($1084))|0);
      var $1086=$extra_bit;
      var $1087=_mpfr_mpn_cmp_aux($1080, $1081, $1082, $1085, $1086);
      var $1093 = $1087;label = 193; break;
    case 192: 
      var $1089=$sp;
      var $1090=$k;
      var $1091=_mpfr_mpn_cmpzero($1089, $1090);
      var $1093 = $1091;label = 193; break;
    case 193: 
      var $1093;
      $cmp_s_r=$1093;
      label = 194; break;
    case 194: 
      var $1095=$cmp_s_r;
      var $1096=(($1095)|0) <= 0;
      if ($1096) { label = 195; break; } else { label = 199; break; }
    case 195: 
      var $1098=$cmp_s_r;
      var $1099=(($1098)|0)==0;
      if ($1099) { label = 196; break; } else { label = 197; break; }
    case 196: 
      var $1101=$sticky3;
      var $1104 = $1101;label = 198; break;
    case 197: 
      var $1104 = 1;label = 198; break;
    case 198: 
      var $1104;
      $sticky=$1104;
      label = 245; break;
    case 199: 
      $cy=0;
      var $1106=$qh2;
      var $1107=(($1106)|0)!=0;
      if ($1107) { label = 200; break; } else { label = 201; break; }
    case 200: 
      $cmp_s_r=1;
      label = 220; break;
    case 201: 
      var $1110=$low_u;
      var $1111=(($1110)|0)!=0;
      if ($1111) { label = 202; break; } else { label = 216; break; }
    case 202: 
      var $1113=$usize;
      var $1114=$qqsize;
      var $1115=((($1113)-($1114))|0);
      $l4=$1115;
      var $1116=$l4;
      var $1117=$k;
      var $1118=(($1116)|0) > (($1117)|0);
      if ($1118) { label = 203; break; } else { label = 204; break; }
    case 203: 
      var $1120=$l4;
      var $1121=$k;
      var $1122=((($1120)-($1121))|0);
      var $1125 = $1122;label = 205; break;
    case 204: 
      var $1125 = 0;label = 205; break;
    case 205: 
      var $1125;
      $m=$1125;
      var $1126=$extra_bit;
      var $1127=(($1126)|0)!=0;
      if ($1127) { label = 206; break; } else { label = 207; break; }
    case 206: 
      var $1129=$m;
      var $1130=$up;
      var $1131=(($1130+($1129<<2))|0);
      var $1132=HEAP32[(($1131)>>2)];
      var $1133=$1132 & 1;
      var $1136 = $1133;label = 208; break;
    case 207: 
      var $1136 = 0;label = 208; break;
    case 208: 
      var $1136;
      $cy=$1136;
      var $1137=$l4;
      var $1138=$k;
      var $1139=(($1137)|0) >= (($1138)|0);
      if ($1139) { label = 209; break; } else { label = 212; break; }
    case 209: 
      var $1141=$cy;
      var $1142=(($1141)|0)!=0;
      if ($1142) { var $1149 = 1;label = 211; break; } else { label = 210; break; }
    case 210: 
      var $1144=$up;
      var $1145=$m;
      var $1146=_mpfr_mpn_cmpzero($1144, $1145);
      var $1147=(($1146)|0)!=0;
      var $1149 = $1147;label = 211; break;
    case 211: 
      var $1149;
      var $1150=(($1149)&1);
      $cy=$1150;
      var $1151=$cy;
      $low_u=$1151;
      var $1152=$sp;
      var $1153=$up;
      var $1154=$m;
      var $1155=(($1153+($1154<<2))|0);
      var $1156=$k;
      var $1157=$cy;
      var $1158=$extra_bit;
      var $1159=_mpfr_mpn_sub_aux($1152, $1155, $1156, $1157, $1158);
      $cy=$1159;
      label = 215; break;
    case 212: 
      $low_u=0;
      var $1161=$cy;
      var $1162=(($1161)|0)!=0;
      if ($1162) { label = 213; break; } else { label = 214; break; }
    case 213: 
      var $1164=$sp;
      var $1165=$k;
      var $1166=(($1164+($1165<<2))|0);
      var $1167=$l4;
      var $1168=(((-$1167))|0);
      var $1169=(($1166+($1168<<2))|0);
      var $1170=((($1169)-(4))|0);
      var $1171=$sp;
      var $1172=$k;
      var $1173=(($1171+($1172<<2))|0);
      var $1174=$l4;
      var $1175=(((-$1174))|0);
      var $1176=(($1173+($1175<<2))|0);
      var $1177=((($1176)-(4))|0);
      var $1178=___gmpn_sub_1($1170, $1177, 1, -2147483648);
      $cy=$1178;
      label = 214; break;
    case 214: 
      var $1180=$sp;
      var $1181=$k;
      var $1182=(($1180+($1181<<2))|0);
      var $1183=$l4;
      var $1184=(((-$1183))|0);
      var $1185=(($1182+($1184<<2))|0);
      var $1186=$up;
      var $1187=$l4;
      var $1188=$cy;
      var $1189=$extra_bit;
      var $1190=_mpfr_mpn_sub_aux($1185, $1186, $1187, $1188, $1189);
      $cy=$1190;
      label = 215; break;
    case 215: 
      label = 216; break;
    case 216: 
      var $1193=$sp;
      var $1194=$k;
      var $1195=(($1193+($1194<<2))|0);
      var $1196=$sp;
      var $1197=$k;
      var $1198=(($1196+($1197<<2))|0);
      var $1199=$qsize;
      var $1200=$cy;
      var $1201=___gmpn_sub_1($1195, $1198, $1199, $1200);
      $cy=$1201;
      var $1202=$sp;
      var $1203=$k;
      var $1204=(($1202+($1203<<2))|0);
      var $1205=$sp;
      var $1206=$k;
      var $1207=(($1205+($1206<<2))|0);
      var $1208=$ap;
      var $1209=$qsize;
      var $1210=___gmpn_sub_n($1204, $1207, $1208, $1209);
      var $1211=$cy;
      var $1212=((($1211)+($1210))|0);
      $cy=$1212;
      var $1213=$sp;
      var $1214=$vp;
      var $1215=$vsize;
      var $1216=___gmpn_cmp($1213, $1214, $1215);
      $cmp_s_r=$1216;
      var $1217=$cmp_s_r;
      var $1218=(($1217)|0)==0;
      if ($1218) { label = 217; break; } else { label = 219; break; }
    case 217: 
      var $1220=$low_u;
      var $1221=(($1220)|0)!=0;
      if ($1221) { label = 218; break; } else { label = 219; break; }
    case 218: 
      $cmp_s_r=1;
      label = 219; break;
    case 219: 
      label = 220; break;
    case 220: 
      var $1225=$cmp_s_r;
      var $1226=(($1225)|0) <= 0;
      if ($1226) { label = 221; break; } else { label = 232; break; }
    case 221: 
      var $1228=$sticky3;
      var $1229=(($1228)|0)==1;
      if ($1229) { label = 222; break; } else { label = 223; break; }
    case 222: 
      var $1231=$cmp_s_r;
      var $1232=(($1231)|0)!=0;
      var $1233=$1232 ? 1 : 0;
      $sticky=$1233;
      label = 245; break;
    case 223: 
      var $1235=$round_bit;
      var $1236=(($1235)|0)==0;
      if ($1236) { label = 224; break; } else { label = 231; break; }
    case 224: 
      var $1238=$cmp_s_r;
      var $1239=(($1238)|0)!=0;
      if ($1239) { var $1244 = 1;label = 226; break; } else { label = 225; break; }
    case 225: 
      var $1241=$sh;
      var $1242=(($1241)|0)!=0;
      var $1244 = $1242;label = 226; break;
    case 226: 
      var $1244;
      var $1245=$1244 ? -1 : 0;
      $inex=$1245;
      var $1246=$5;
      var $1247=(($1246)|0)==0;
      if ($1247) { label = 229; break; } else { label = 227; break; }
    case 227: 
      var $1249=$like_rndz;
      var $1250=(($1249)|0)!=0;
      if ($1250) { label = 230; break; } else { label = 228; break; }
    case 228: 
      var $1252=$inex;
      var $1253=(($1252)|0)!=0;
      if ($1253) { label = 229; break; } else { label = 230; break; }
    case 229: 
      $inex=1;
      label = 260; break;
    case 230: 
      label = 259; break;
    case 231: 
      var $1257=$cmp_s_r;
      $inex=$1257;
      label = 269; break;
    case 232: 
      var $1259=$5;
      var $1260=(($1259)|0)==0;
      if ($1260) { label = 233; break; } else { label = 238; break; }
    case 233: 
      var $1262=$sh;
      var $1263=(($1262)|0)==1;
      if ($1263) { label = 234; break; } else { label = 237; break; }
    case 234: 
      var $1265=$round_bit;
      var $1266=(($1265)|0)==0;
      if ($1266) { label = 235; break; } else { label = 236; break; }
    case 235: 
      $inex=-1;
      $sh=0;
      label = 258; break;
    case 236: 
      $inex=1;
      label = 260; break;
    case 237: 
      var $1270=$round_bit;
      var $1271=(($1270)|0)==0;
      var $1272=$1271 ? 1 : -1;
      $inex=$1272;
      label = 260; break;
    case 238: 
      var $1274=$like_rndz;
      var $1275=(($1274)|0)!=0;
      if ($1275) { label = 239; break; } else { label = 242; break; }
    case 239: 
      $inex=-1;
      var $1277=$sh;
      var $1278=(($1277)|0) > 0;
      if ($1278) { label = 240; break; } else { label = 241; break; }
    case 240: 
      label = 259; break;
    case 241: 
      label = 258; break;
    case 242: 
      $inex=1;
      var $1282=$sh;
      var $1283=(($1282)|0) > 0;
      if ($1283) { label = 243; break; } else { label = 244; break; }
    case 243: 
      label = 260; break;
    case 244: 
      label = 259; break;
    case 245: 
      var $1287=$like_rndz;
      var $1288=(($1287)|0)!=0;
      if ($1288) { label = 248; break; } else { label = 246; break; }
    case 246: 
      var $1290=$round_bit;
      var $1291=(($1290)|0)==0;
      if ($1291) { label = 247; break; } else { label = 251; break; }
    case 247: 
      var $1293=$sticky;
      var $1294=(($1293)|0)==0;
      if ($1294) { label = 248; break; } else { label = 251; break; }
    case 248: 
      var $1296=$round_bit;
      var $1297=(($1296)|0)==0;
      if ($1297) { label = 249; break; } else { var $1302 = 0;label = 250; break; }
    case 249: 
      var $1299=$sticky;
      var $1300=(($1299)|0)==0;
      var $1302 = $1300;label = 250; break;
    case 250: 
      var $1302;
      var $1303=$1302 ? 0 : -1;
      $inex=$1303;
      label = 269; break;
    case 251: 
      var $1305=$5;
      var $1306=(($1305)|0)==0;
      if ($1306) { label = 252; break; } else { label = 257; break; }
    case 252: 
      var $1308=$round_bit;
      var $1309=(($1308)|0)==0;
      if ($1309) { label = 253; break; } else { label = 254; break; }
    case 253: 
      $inex=-1;
      label = 269; break;
    case 254: 
      var $1312=$sticky;
      var $1313=(($1312)|0)!=0;
      if ($1313) { label = 255; break; } else { label = 256; break; }
    case 255: 
      label = 266; break;
    case 256: 
      label = 263; break;
    case 257: 
      label = 266; break;
    case 258: 
      var $1318=$q0p;
      var $1319=$q0p;
      var $1320=$q0size;
      var $1321=$sh;
      var $1322=1 << $1321;
      var $1323=___gmpn_sub_1($1318, $1319, $1320, $1322);
      var $1324=$qh;
      var $1325=((($1324)-($1323))|0);
      $qh=$1325;
      label = 259; break;
    case 259: 
      var $1327=$q0p;
      var $1328=$q0p;
      var $1329=$q0size;
      var $1330=$sh;
      var $1331=1 << $1330;
      var $1332=___gmpn_sub_1($1327, $1328, $1329, $1331);
      var $1333=$qh;
      var $1334=((($1333)-($1332))|0);
      $qh=$1334;
      label = 260; break;
    case 260: 
      var $1336=$qh;
      var $1337=(($1336)|0)!=0;
      if ($1337) { label = 261; break; } else { label = 262; break; }
    case 261: 
      var $1339=$qexp;
      var $1340=((($1339)+(1))|0);
      $qexp=$1340;
      var $1341=$q0size;
      var $1342=((($1341)-(1))|0);
      var $1343=$q0p;
      var $1344=(($1343+($1342<<2))|0);
      HEAP32[(($1344)>>2)]=-2147483648;
      label = 262; break;
    case 262: 
      label = 269; break;
    case 263: 
      var $1347=$q0p;
      var $1348=(($1347)|0);
      var $1349=HEAP32[(($1348)>>2)];
      var $1350=$sh;
      var $1351=1 << $1350;
      var $1352=$1349 & $1351;
      var $1353=(($1352)|0)!=0;
      var $1354=$1353 ? 1 : -1;
      $inex=$1354;
      var $1355=$inex;
      var $1356=(($1355)|0) < 0;
      if ($1356) { label = 264; break; } else { label = 265; break; }
    case 264: 
      label = 269; break;
    case 265: 
      label = 266; break;
    case 266: 
      $inex=1;
      var $1360=$q0p;
      var $1361=$q0p;
      var $1362=$q0size;
      var $1363=$sh;
      var $1364=1 << $1363;
      var $1365=___gmpn_add_1($1360, $1361, $1362, $1364);
      var $1366=(($1365)|0)!=0;
      if ($1366) { label = 267; break; } else { label = 268; break; }
    case 267: 
      var $1368=$qexp;
      var $1369=((($1368)+(1))|0);
      $qexp=$1369;
      var $1370=$q0size;
      var $1371=((($1370)-(1))|0);
      var $1372=$q0p;
      var $1373=(($1372+($1371<<2))|0);
      HEAP32[(($1373)>>2)]=-2147483648;
      label = 268; break;
    case 268: 
      label = 269; break;
    case 269: 
      var $1376=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($1376);
      var $1377=$qexp;
      var $1378=HEAP32[((5257656)>>2)];
      var $1379=(($1377)|0) > (($1378)|0);
      var $1380=$1379 ^ 1;
      var $1381=$1380 ^ 1;
      var $1382=(($1381)&1);
      var $1383=($1382);
      var $1384=(($1383)|0)!=0;
      if ($1384) { label = 270; break; } else { label = 271; break; }
    case 270: 
      var $1386=$2;
      var $1387=$5;
      var $1388=$sign_quotient;
      var $1389=_mpfr_overflow($1386, $1387, $1388);
      $1=$1389;
      label = 283; break;
    case 271: 
      var $1391=$qexp;
      var $1392=HEAP32[((5257652)>>2)];
      var $1393=(($1391)|0) < (($1392)|0);
      var $1394=$1393 ^ 1;
      var $1395=$1394 ^ 1;
      var $1396=(($1395)&1);
      var $1397=($1396);
      var $1398=(($1397)|0)!=0;
      if ($1398) { label = 272; break; } else { label = 278; break; }
    case 272: 
      var $1400=$5;
      var $1401=(($1400)|0)==0;
      if ($1401) { label = 273; break; } else { label = 277; break; }
    case 273: 
      var $1403=$qexp;
      var $1404=HEAP32[((5257652)>>2)];
      var $1405=((($1404)-(1))|0);
      var $1406=(($1403)|0) < (($1405)|0);
      if ($1406) { label = 276; break; } else { label = 274; break; }
    case 274: 
      var $1408=$inex;
      var $1409=(($1408)|0) >= 0;
      if ($1409) { label = 275; break; } else { label = 277; break; }
    case 275: 
      var $1411=$2;
      var $1412=_mpfr_powerof2_raw($1411);
      var $1413=(($1412)|0)!=0;
      if ($1413) { label = 276; break; } else { label = 277; break; }
    case 276: 
      $5=1;
      label = 277; break;
    case 277: 
      var $1416=$2;
      var $1417=$5;
      var $1418=$sign_quotient;
      var $1419=_mpfr_underflow($1416, $1417, $1418);
      $1=$1419;
      label = 283; break;
    case 278: 
      label = 279; break;
    case 279: 
      var $1422=$qexp;
      var $1423=$2;
      var $1424=(($1423+8)|0);
      HEAP32[(($1424)>>2)]=$1422;
      var $1425=$sign_quotient;
      var $1426=$inex;
      var $1427=Math.imul($1426,$1425);
      $inex=$1427;
      var $1428=$inex;
      var $1429=(($1428)|0)!=0;
      if ($1429) { label = 280; break; } else { label = 281; break; }
    case 280: 
      var $1431=HEAP32[((5257648)>>2)];
      var $1432=$1431 | 8;
      HEAP32[((5257648)>>2)]=$1432;
      var $1433=$inex;
      var $1436 = $1433;label = 282; break;
    case 281: 
      var $1436 = 0;label = 282; break;
    case 282: 
      var $1436;
      $1=$1436;
      label = 283; break;
    case 283: 
      var $1438=$1;
      STACKTOP = __stackBase__;
      return $1438;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_div["X"]=1;

function _mpfr_mpn_cmp_aux($ap, $an, $bp, $bn, $extra) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $cmp;
      var $k;
      var $bb;
      $1=$ap;
      $2=$an;
      $3=$bp;
      $4=$bn;
      $5=$extra;
      $cmp=0;
      var $6=$2;
      var $7=$4;
      var $8=(($6)|0) >= (($7)|0);
      if ($8) { label = 3; break; } else { label = 29; break; }
    case 3: 
      var $10=$2;
      var $11=$4;
      var $12=((($10)-($11))|0);
      $k=$12;
      label = 4; break;
    case 4: 
      var $14=$cmp;
      var $15=(($14)|0)==0;
      if ($15) { label = 5; break; } else { var $20 = 0;label = 6; break; }
    case 5: 
      var $17=$4;
      var $18=(($17)|0) > 0;
      var $20 = $18;label = 6; break;
    case 6: 
      var $20;
      if ($20) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $22=$4;
      var $23=((($22)-(1))|0);
      $4=$23;
      var $24=$5;
      var $25=(($24)|0)!=0;
      if ($25) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $27=$4;
      var $28=((($27)+(1))|0);
      var $29=$3;
      var $30=(($29+($28<<2))|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 << 31;
      var $33=$4;
      var $34=$3;
      var $35=(($34+($33<<2))|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=$36 >>> 1;
      var $38=$32 | $37;
      var $45 = $38;label = 10; break;
    case 9: 
      var $40=$4;
      var $41=$3;
      var $42=(($41+($40<<2))|0);
      var $43=HEAP32[(($42)>>2)];
      var $45 = $43;label = 10; break;
    case 10: 
      var $45;
      $bb=$45;
      var $46=$k;
      var $47=$4;
      var $48=((($46)+($47))|0);
      var $49=$1;
      var $50=(($49+($48<<2))|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$bb;
      var $53=(($51)>>>0) > (($52)>>>0);
      if ($53) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $66 = 1;label = 13; break;
    case 12: 
      var $56=$k;
      var $57=$4;
      var $58=((($56)+($57))|0);
      var $59=$1;
      var $60=(($59+($58<<2))|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$bb;
      var $63=(($61)>>>0) < (($62)>>>0);
      var $64=$63 ? -1 : 0;
      var $66 = $64;label = 13; break;
    case 13: 
      var $66;
      $cmp=$66;
      label = 4; break;
    case 14: 
      var $68=$5;
      var $69=(($68)|0)!=0;
      if ($69) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $71=$3;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=$73 << 31;
      var $77 = $74;label = 17; break;
    case 16: 
      var $77 = 0;label = 17; break;
    case 17: 
      var $77;
      $bb=$77;
      label = 18; break;
    case 18: 
      var $79=$cmp;
      var $80=(($79)|0)==0;
      if ($80) { label = 19; break; } else { var $85 = 0;label = 20; break; }
    case 19: 
      var $82=$k;
      var $83=(($82)|0) > 0;
      var $85 = $83;label = 20; break;
    case 20: 
      var $85;
      if ($85) { label = 21; break; } else { label = 25; break; }
    case 21: 
      var $87=$k;
      var $88=((($87)-(1))|0);
      $k=$88;
      var $89=$k;
      var $90=$1;
      var $91=(($90+($89<<2))|0);
      var $92=HEAP32[(($91)>>2)];
      var $93=$bb;
      var $94=(($92)>>>0) > (($93)>>>0);
      if ($94) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $105 = 1;label = 24; break;
    case 23: 
      var $97=$k;
      var $98=$1;
      var $99=(($98+($97<<2))|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=$bb;
      var $102=(($100)>>>0) < (($101)>>>0);
      var $103=$102 ? -1 : 0;
      var $105 = $103;label = 24; break;
    case 24: 
      var $105;
      $cmp=$105;
      $bb=0;
      label = 18; break;
    case 25: 
      var $107=$cmp;
      var $108=(($107)|0)==0;
      if ($108) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $110=$bb;
      var $111=(($110)|0)!=0;
      if ($111) { label = 27; break; } else { label = 28; break; }
    case 27: 
      $cmp=-1;
      label = 28; break;
    case 28: 
      label = 55; break;
    case 29: 
      var $115=$4;
      var $116=$2;
      var $117=((($115)-($116))|0);
      $k=$117;
      label = 30; break;
    case 30: 
      var $119=$cmp;
      var $120=(($119)|0)==0;
      if ($120) { label = 31; break; } else { var $125 = 0;label = 32; break; }
    case 31: 
      var $122=$2;
      var $123=(($122)|0) > 0;
      var $125 = $123;label = 32; break;
    case 32: 
      var $125;
      if ($125) { label = 33; break; } else { label = 42; break; }
    case 33: 
      var $127=$2;
      var $128=((($127)-(1))|0);
      $2=$128;
      var $129=$5;
      var $130=(($129)|0)!=0;
      if ($130) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $132=$k;
      var $133=$2;
      var $134=((($132)+($133))|0);
      var $135=((($134)+(1))|0);
      var $136=$3;
      var $137=(($136+($135<<2))|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$138 << 31;
      var $140=$k;
      var $141=$2;
      var $142=((($140)+($141))|0);
      var $143=$3;
      var $144=(($143+($142<<2))|0);
      var $145=HEAP32[(($144)>>2)];
      var $146=$145 >>> 1;
      var $147=$139 | $146;
      var $156 = $147;label = 36; break;
    case 35: 
      var $149=$k;
      var $150=$2;
      var $151=((($149)+($150))|0);
      var $152=$3;
      var $153=(($152+($151<<2))|0);
      var $154=HEAP32[(($153)>>2)];
      var $156 = $154;label = 36; break;
    case 36: 
      var $156;
      $bb=$156;
      var $157=$2;
      var $158=$1;
      var $159=(($158+($157<<2))|0);
      var $160=HEAP32[(($159)>>2)];
      var $161=$bb;
      var $162=(($160)>>>0) > (($161)>>>0);
      if ($162) { label = 37; break; } else { label = 38; break; }
    case 37: 
      $cmp=1;
      label = 41; break;
    case 38: 
      var $165=$2;
      var $166=$1;
      var $167=(($166+($165<<2))|0);
      var $168=HEAP32[(($167)>>2)];
      var $169=$bb;
      var $170=(($168)>>>0) < (($169)>>>0);
      if ($170) { label = 39; break; } else { label = 40; break; }
    case 39: 
      $cmp=-1;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 30; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $176=$cmp;
      var $177=(($176)|0)==0;
      if ($177) { label = 44; break; } else { var $182 = 0;label = 45; break; }
    case 44: 
      var $179=$k;
      var $180=(($179)|0) > 0;
      var $182 = $180;label = 45; break;
    case 45: 
      var $182;
      if ($182) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $184=$k;
      var $185=((($184)-(1))|0);
      $k=$185;
      var $186=$5;
      var $187=(($186)|0)!=0;
      if ($187) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $189=$k;
      var $190=((($189)+(1))|0);
      var $191=$3;
      var $192=(($191+($190<<2))|0);
      var $193=HEAP32[(($192)>>2)];
      var $194=$193 << 31;
      var $195=$k;
      var $196=$3;
      var $197=(($196+($195<<2))|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=$198 >>> 1;
      var $200=$194 | $199;
      var $207 = $200;label = 49; break;
    case 48: 
      var $202=$k;
      var $203=$3;
      var $204=(($203+($202<<2))|0);
      var $205=HEAP32[(($204)>>2)];
      var $207 = $205;label = 49; break;
    case 49: 
      var $207;
      $bb=$207;
      var $208=$bb;
      var $209=(($208)|0)!=0;
      var $210=$209 ? -1 : 0;
      $cmp=$210;
      label = 43; break;
    case 50: 
      var $212=$cmp;
      var $213=(($212)|0)==0;
      if ($213) { label = 51; break; } else { label = 54; break; }
    case 51: 
      var $215=$5;
      var $216=(($215)|0)!=0;
      if ($216) { label = 52; break; } else { label = 54; break; }
    case 52: 
      var $218=$3;
      var $219=(($218)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=$220 & 1;
      var $222=(($221)|0)!=0;
      if ($222) { label = 53; break; } else { label = 54; break; }
    case 53: 
      $cmp=-1;
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $226=$cmp;

      return $226;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_mpn_cmp_aux["X"]=1;

function _mpfr_mpn_sub_aux($ap, $bp, $n, $cy, $extra) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $bb;
      var $rp;
      $1=$ap;
      $2=$bp;
      $3=$n;
      $4=$cy;
      $5=$extra;
      label = 3; break;
    case 3: 
      var $7=$3;
      var $8=((($7)-(1))|0);
      $3=$8;
      var $9=(($7)|0)!=0;
      if ($9) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $11=$5;
      var $12=(($11)|0)!=0;
      if ($12) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$2;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$16 << 31;
      var $18=$2;
      var $19=(($18)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=$20 >>> 1;
      var $22=$17 | $21;
      var $28 = $22;label = 7; break;
    case 6: 
      var $24=$2;
      var $25=(($24)|0);
      var $26=HEAP32[(($25)>>2)];
      var $28 = $26;label = 7; break;
    case 7: 
      var $28;
      $bb=$28;
      var $29=$1;
      var $30=(($29)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$bb;
      var $33=((($31)-($32))|0);
      var $34=$4;
      var $35=((($33)-($34))|0);
      $rp=$35;
      var $36=$1;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$bb;
      var $40=(($38)>>>0) < (($39)>>>0);
      if ($40) { var $51 = 1;label = 11; break; } else { label = 8; break; }
    case 8: 
      var $42=$4;
      var $43=(($42)|0)!=0;
      if ($43) { label = 9; break; } else { var $49 = 0;label = 10; break; }
    case 9: 
      var $45=$rp;
      var $46=$45 ^ -1;
      var $47=(($46)|0)==0;
      var $49 = $47;label = 10; break;
    case 10: 
      var $49;
      var $51 = $49;label = 11; break;
    case 11: 
      var $51;
      var $52=$51 ? 1 : 0;
      $4=$52;
      var $53=$rp;
      var $54=$1;
      var $55=(($54)|0);
      HEAP32[(($55)>>2)]=$53;
      var $56=$1;
      var $57=(($56+4)|0);
      $1=$57;
      var $58=$2;
      var $59=(($58+4)|0);
      $2=$59;
      label = 3; break;
    case 12: 
      var $61=$4;

      return $61;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_mpn_sub_aux["X"]=1;

function _mpfr_mpn_cmpzero($ap, $an) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $2=$ap;
      $3=$an;
      label = 3; break;
    case 3: 
      var $5=$3;
      var $6=(($5)|0) > 0;
      if ($6) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $8=$3;
      var $9=((($8)-(1))|0);
      $3=$9;
      var $10=$2;
      var $11=(($10+($9<<2))|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=(($12)|0)!=0;
      var $14=$13 ^ 1;
      var $15=$14 ^ 1;
      var $16=(($15)&1);
      var $17=($16);
      var $18=(($17)|0)!=0;
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=1;
      label = 8; break;
    case 6: 
      label = 3; break;
    case 7: 
      $1=0;
      label = 8; break;
    case 8: 
      var $23=$1;

      return $23;
    default: assert(0, "bad label: " + label);
  }

}


function _mpfr_ceil_mul($e, $beta, $i) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1;
  var $2;
  var $3;
  var $p;
  var $t=__stackBase__;
  var $r;
  $1=$e;
  $2=$beta;
  $3=$i;
  var $4=$3;
  var $5=$2;
  var $6=((($5)-(2))|0);
  var $7=((5255696+($6<<5))|0);
  var $8=(($7+($4<<4))|0);
  $p=$8;
  var $9=(($t)|0);
  _mpfr_init2($9, 32);
  var $10=(($t)|0);
  var $11=$1;
  var $12=_mpfr_set_si_2exp($10, $11, 0, 2);
  var $13=(($t)|0);
  var $14=(($t)|0);
  var $15=$p;
  var $16=_mpfr_mul($13, $14, $15, 2);
  var $17=(($t)|0);
  var $18=_mpfr_get_si($17, 2);
  $r=$18;
  var $19=(($t)|0);
  _mpfr_clear($19);
  var $20=$r;
  STACKTOP = __stackBase__;
  return $20;
}


function _mpfr_get_str($s, $e, $b, $m, $x, $rnd) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 24)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $num_to_text;
      var $exact;
      var $exp;
      var $g;
      var $prec;
      var $err;
      var $a;
      var $exp_a=__stackBase__;
      var $result;
      var $xp;
      var $reste;
      var $nx;
      var $nx1;
      var $n;
      var $i;
      var $s0;
      var $neg;
      var $ret;
      var $loop;
      var $expo=(__stackBase__)+(4);
      var $tmp_marker=(__stackBase__)+(16);
      var $pow2;
      var $f;
      var $r;
      var $x1;
      var $nb;
      var $inexp=(__stackBase__)+(20);
      var $__xr;
      var $__a;
      var $_b;
      var $_limb;
      var $__xr1;
      var $__a2;
      var $_b3;
      var $_limb4;
      var $__xr5;
      var $__a6;
      var $x17;
      var $x18;
      $2=$s;
      $3=$e;
      $4=$b;
      $5=$m;
      $6=$x;
      $7=$rnd;
      var $8=$4;
      var $9=(($8)|0) < 2;
      if ($9) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $11=$4;
      var $12=(($11)|0) > 62;
      if ($12) { label = 4; break; } else { label = 5; break; }
    case 4: 
      $1=0;
      label = 197; break;
    case 5: 
      var $15=$4;
      var $16=(($15)|0) < 37;
      var $17=$16 ? (((5244992)|0)) : (((5244928)|0));
      $num_to_text=$17;
      var $18=$6;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      var $21=(($20)|0)==-2147483646;
      var $22=$21 ^ 1;
      var $23=$22 ^ 1;
      var $24=(($23)&1);
      var $25=($24);
      var $26=(($25)|0)!=0;
      if ($26) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $28=$2;
      var $29=(($28)|0)==0;
      if ($29) { label = 7; break; } else { label = 8; break; }
    case 7: 
      ___gmp_get_memory_functions(5248320, 5247208, 5248188);
      var $31=HEAP32[((5248320)>>2)];
      var $32=FUNCTION_TABLE[$31](6);
      $2=$32;
      label = 8; break;
    case 8: 
      var $34=$2;
      var $35=_strcpy($34, ((5248532)|0));
      var $36=$2;
      $1=$36;
      label = 197; break;
    case 9: 
      var $38=$6;
      var $39=(($38+4)|0);
      var $40=HEAP32[(($39)>>2)];
      var $41=(($40)|0) < 0;
      var $42=(($41)&1);
      $neg=$42;
      var $43=$6;
      var $44=(($43+8)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=(($45)|0)==-2147483645;
      var $47=$46 ^ 1;
      var $48=$47 ^ 1;
      var $49=(($48)&1);
      var $50=($49);
      var $51=(($50)|0)!=0;
      if ($51) { label = 10; break; } else { label = 13; break; }
    case 10: 
      var $53=$2;
      var $54=(($53)|0)==0;
      if ($54) { label = 11; break; } else { label = 12; break; }
    case 11: 
      ___gmp_get_memory_functions(5248320, 5247208, 5248188);
      var $56=HEAP32[((5248320)>>2)];
      var $57=$neg;
      var $58=((($57)+(6))|0);
      var $59=FUNCTION_TABLE[$56]($58);
      $2=$59;
      label = 12; break;
    case 12: 
      var $61=$2;
      var $62=$neg;
      var $63=(($62)|0)!=0;
      var $64=$63 ? (((5249444)|0)) : (((5249028)|0));
      var $65=_strcpy($61, $64);
      var $66=$2;
      $1=$66;
      label = 197; break;
    case 13: 
      var $68=HEAP32[((5257648)>>2)];
      var $69=(($expo)|0);
      HEAP32[(($69)>>2)]=$68;
      var $70=HEAP32[((5257652)>>2)];
      var $71=(($expo+4)|0);
      HEAP32[(($71)>>2)]=$70;
      var $72=HEAP32[((5257656)>>2)];
      var $73=(($expo+8)|0);
      HEAP32[(($73)>>2)]=$72;
      HEAP32[((5257652)>>2)]=-1073741823;
      HEAP32[((5257656)>>2)]=1073741823;
      var $74=$5;
      var $75=(($74)|0)==0;
      if ($75) { label = 14; break; } else { label = 20; break; }
    case 14: 
      var $77=$4;
      var $78=$4;
      var $79=((($78)-(1))|0);
      var $80=$77 & $79;
      var $81=(($80)|0)==0;
      if ($81) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $83=$6;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=((($85)-(1))|0);
      var $92 = $86;label = 17; break;
    case 16: 
      var $88=$6;
      var $89=(($88)|0);
      var $90=HEAP32[(($89)>>2)];
      var $92 = $90;label = 17; break;
    case 17: 
      var $92;
      var $93=$4;
      var $94=_mpfr_ceil_mul($92, $93, 1);
      var $95=((($94)+(1))|0);
      $5=$95;
      var $96=$5;
      var $97=(($96)>>>0) < 2;
      if ($97) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $5=2;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $101=$5;
      var $102=(($101)>>>0) >= 2;
      if ($102) { var $117 = 1;label = 24; break; } else { label = 21; break; }
    case 21: 
      var $104=$4;
      var $105=$4;
      var $106=((($105)-(1))|0);
      var $107=$104 & $106;
      var $108=(($107)|0)==0;
      var $109=(($108)&1);
      var $110=(($109)|0)==0;
      if ($110) { label = 22; break; } else { var $115 = 0;label = 23; break; }
    case 22: 
      var $112=$5;
      var $113=(($112)>>>0) >= 1;
      var $115 = $113;label = 23; break;
    case 23: 
      var $115;
      var $117 = $115;label = 24; break;
    case 24: 
      var $117;
      var $118=$117 ^ 1;
      var $119=$118 ^ 1;
      var $120=(($119)&1);
      var $121=($120);
      var $122=(($121)|0)!=0;
      if ($122) { var $127 = 1;label = 26; break; } else { label = 25; break; }
    case 25: 
      _mpfr_assert_fail(((5248764)|0), 2306, ((5248592)|0));
      var $124=(0);
      var $125=(($124)|0)!=0;
      var $127 = $125;label = 26; break;
    case 26: 
      var $127;
      var $128=(($127)&1);
      var $129=$6;
      var $130=(($129+8)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=(($131)|0)==-2147483647;
      if ($132) { label = 27; break; } else { label = 32; break; }
    case 27: 
      var $134=$2;
      var $135=(($134)|0)==0;
      if ($135) { label = 28; break; } else { label = 29; break; }
    case 28: 
      ___gmp_get_memory_functions(5248320, 5247208, 5248188);
      var $137=HEAP32[((5248320)>>2)];
      var $138=$neg;
      var $139=$5;
      var $140=((($138)+($139))|0);
      var $141=((($140)+(1))|0);
      var $142=FUNCTION_TABLE[$137]($141);
      $2=$142;
      label = 29; break;
    case 29: 
      var $144=$2;
      $s0=$144;
      var $145=$neg;
      var $146=(($145)|0)!=0;
      if ($146) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $148=$2;
      var $149=(($148+1)|0);
      $2=$149;
      HEAP8[($148)]=45;
      label = 31; break;
    case 31: 
      var $151=$2;
      var $152=$5;
      _memset($151, 48, $152);
      var $153=$5;
      var $154=$2;
      var $155=(($154+$153)|0);
      HEAP8[($155)]=0;
      var $156=$3;
      HEAP32[(($156)>>2)]=0;
      var $157=(($expo)|0);
      var $158=HEAP32[(($157)>>2)];
      HEAP32[((5257648)>>2)]=$158;
      var $159=(($expo+4)|0);
      var $160=HEAP32[(($159)>>2)];
      HEAP32[((5257652)>>2)]=$160;
      var $161=(($expo+8)|0);
      var $162=HEAP32[(($161)>>2)];
      HEAP32[((5257656)>>2)]=$162;
      var $163=$s0;
      $1=$163;
      label = 197; break;
    case 32: 
      var $165=$2;
      var $166=(($165)|0)==0;
      if ($166) { label = 33; break; } else { label = 34; break; }
    case 33: 
      ___gmp_get_memory_functions(5248320, 5247208, 5248188);
      var $168=HEAP32[((5248320)>>2)];
      var $169=$neg;
      var $170=$5;
      var $171=((($169)+($170))|0);
      var $172=((($171)+(1))|0);
      var $173=FUNCTION_TABLE[$168]($172);
      $2=$173;
      label = 34; break;
    case 34: 
      var $175=$2;
      $s0=$175;
      var $176=$neg;
      var $177=(($176)|0)!=0;
      if ($177) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $179=$2;
      var $180=(($179+1)|0);
      $2=$180;
      HEAP8[($179)]=45;
      label = 36; break;
    case 36: 
      var $182=$6;
      var $183=(($182+12)|0);
      var $184=HEAP32[(($183)>>2)];
      $xp=$184;
      var $185=$4;
      var $186=$4;
      var $187=((($186)-(1))|0);
      var $188=$185 & $187;
      var $189=(($188)|0)==0;
      if ($189) { label = 37; break; } else { label = 63; break; }
    case 37: 
      label = 38; break;
    case 38: 
      var $192=$4;
      $__xr=$192;
      var $193=$__xr;
      var $194=(($193)>>>0) < 65536;
      if ($194) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $196=$__xr;
      var $197=(($196)>>>0) < 256;
      var $198=$197 ? 1 : 9;
      var $204 = $198;label = 41; break;
    case 40: 
      var $200=$__xr;
      var $201=(($200)>>>0) < 16777216;
      var $202=$201 ? 17 : 25;
      var $204 = $202;label = 41; break;
    case 41: 
      var $204;
      $__a=$204;
      var $205=$__a;
      var $206=(((33)-($205))|0);
      var $207=$__xr;
      var $208=$__a;
      var $209=$207 >>> (($208)>>>0);
      var $210=((5248192+$209)|0);
      var $211=HEAP8[($210)];
      var $212=(($211)&255);
      var $213=((($206)-($212))|0);
      $pow2=$213;
      label = 42; break;
    case 42: 
      var $215=$pow2;
      var $216=(((32)-($215))|0);
      var $217=((($216)-(1))|0);
      $pow2=$217;
      var $218=$6;
      var $219=(($218+8)|0);
      var $220=HEAP32[(($219)>>2)];
      var $221=((($220)-(1))|0);
      var $222=$pow2;
      var $223=((((($221)|0))/((($222)|0)))&-1);
      $f=$223;
      var $224=$6;
      var $225=(($224+8)|0);
      var $226=HEAP32[(($225)>>2)];
      var $227=$f;
      var $228=$pow2;
      var $229=Math.imul($227,$228);
      var $230=((($226)-($229))|0);
      $r=$230;
      var $231=$r;
      var $232=(($231)|0) <= 0;
      if ($232) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $234=$f;
      var $235=((($234)-(1))|0);
      $f=$235;
      var $236=$pow2;
      var $237=$r;
      var $238=((($237)+($236))|0);
      $r=$238;
      label = 44; break;
    case 44: 
      var $240=$5;
      var $241=((($240)-(1))|0);
      var $242=$pow2;
      var $243=Math.imul($241,$242);
      var $244=$r;
      var $245=((($243)+($244))|0);
      $prec=$245;
      var $246=$prec;
      var $247=((($246)-(1))|0);
      var $248=((((($247)|0))/(32))&-1);
      var $249=((($248)+(1))|0);
      $n=$249;
      HEAP32[(($tmp_marker)>>2)]=0;
      var $250=$n;
      var $251=((($250)+(1))|0);
      var $252=($251<<2);
      var $253=(($252)>>>0) < 16384;
      var $254=$253 ^ 1;
      var $255=$254 ^ 1;
      var $256=(($255)&1);
      var $257=($256);
      var $258=(($257)|0)!=0;
      if ($258) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $260=$n;
      var $261=((($260)+(1))|0);
      var $262=($261<<2);
      var $263=STACKTOP;STACKTOP = (STACKTOP + $262)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $270 = $263;label = 47; break;
    case 46: 
      var $265=$n;
      var $266=((($265)+(1))|0);
      var $267=($266<<2);
      var $268=_mpfr_tmp_allocate($tmp_marker, $267);
      var $270 = $268;label = 47; break;
    case 47: 
      var $270;
      var $271=$270;
      $x1=$271;
      var $272=$n;
      var $273=($272<<5);
      var $274=$prec;
      var $275=((($273)-($274))|0);
      $nb=$275;
      var $276=$x1;
      var $277=$xp;
      var $278=$6;
      var $279=(($278)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=$6;
      var $282=(($281+8)|0);
      var $283=HEAP32[(($282)>>2)];
      var $284=(($283)|0)!=-2147483647;
      if ($284) { label = 48; break; } else { var $291 = 0;label = 49; break; }
    case 48: 
      var $286=$6;
      var $287=(($286+4)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=(($288)|0) < 0;
      var $291 = $289;label = 49; break;
    case 49: 
      var $291;
      var $292=(($291)&1);
      var $293=$prec;
      var $294=$7;
      var $295=_mpfr_round_raw($276, $277, $280, $292, $293, $294, $inexp);
      var $296=$n;
      var $297=$x1;
      var $298=(($297+($296<<2))|0);
      HEAP32[(($298)>>2)]=$295;
      var $299=(($295)|0)!=0;
      if ($299) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $301=$r;
      var $302=$pow2;
      var $303=(($301)|0)==(($302)|0);
      if ($303) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $305=$x1;
      var $306=$x1;
      var $307=$n;
      var $308=((($307)+(1))|0);
      var $309=$pow2;
      var $310=___gmpn_rshift($305, $306, $308, $309);
      var $311=$f;
      var $312=((($311)+(1))|0);
      $f=$312;
      label = 53; break;
    case 52: 
      var $314=$n;
      var $315=((($314)+(1))|0);
      $n=$315;
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $318=$nb;
      var $319=(($318)|0)!=0;
      if ($319) { label = 55; break; } else { label = 58; break; }
    case 55: 
      var $321=$x1;
      var $322=$x1;
      var $323=$n;
      var $324=$nb;
      var $325=___gmpn_rshift($321, $322, $323, $324);
      var $326=$n;
      var $327=((($326)-(1))|0);
      var $328=$x1;
      var $329=(($328+($327<<2))|0);
      var $330=HEAP32[(($329)>>2)];
      var $331=(($330)|0)==0;
      if ($331) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $333=$n;
      var $334=((($333)-(1))|0);
      $n=$334;
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $337=$2;
      var $338=$4;
      var $339=$x1;
      var $340=$n;
      var $341=___gmpn_get_str($337, $338, $339, $340);
      $i=0;
      label = 59; break;
    case 59: 
      var $343=$i;
      var $344=$5;
      var $345=(($343)>>>0) < (($344)>>>0);
      if ($345) { label = 60; break; } else { label = 62; break; }
    case 60: 
      var $347=$i;
      var $348=$2;
      var $349=(($348+$347)|0);
      var $350=HEAP8[($349)];
      var $351=(($350 << 24) >> 24);
      var $352=$num_to_text;
      var $353=(($352+$351)|0);
      var $354=HEAP8[($353)];
      var $355=$i;
      var $356=$2;
      var $357=(($356+$355)|0);
      HEAP8[($357)]=$354;
      label = 61; break;
    case 61: 
      var $359=$i;
      var $360=((($359)+(1))|0);
      $i=$360;
      label = 59; break;
    case 62: 
      var $362=$5;
      var $363=$2;
      var $364=(($363+$362)|0);
      HEAP8[($364)]=0;
      var $365=$f;
      var $366=((($365)+(1))|0);
      var $367=$3;
      HEAP32[(($367)>>2)]=$366;
      var $368=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($368);
      var $369=(($expo)|0);
      var $370=HEAP32[(($369)>>2)];
      HEAP32[((5257648)>>2)]=$370;
      var $371=(($expo+4)|0);
      var $372=HEAP32[(($371)>>2)];
      HEAP32[((5257652)>>2)]=$372;
      var $373=(($expo+8)|0);
      var $374=HEAP32[(($373)>>2)];
      HEAP32[((5257656)>>2)]=$374;
      var $375=$s0;
      $1=$375;
      label = 197; break;
    case 63: 
      var $377=$neg;
      var $378=(($377)|0)!=0;
      if ($378) { label = 64; break; } else { label = 71; break; }
    case 64: 
      var $380=$7;
      var $381=(($380)|0)==2;
      if ($381) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $392 = 3;label = 70; break;
    case 66: 
      var $384=$7;
      var $385=(($384)|0)==3;
      if ($385) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $390 = 2;label = 69; break;
    case 68: 
      var $388=$7;
      var $390 = $388;label = 69; break;
    case 69: 
      var $390;
      var $392 = $390;label = 70; break;
    case 70: 
      var $392;
      $7=$392;
      label = 71; break;
    case 71: 
      var $394=$6;
      var $395=(($394+8)|0);
      var $396=HEAP32[(($395)>>2)];
      var $397=((($396)-(1))|0);
      var $398=$4;
      var $399=_mpfr_ceil_mul($397, $398, 1);
      $g=$399;
      $exact=1;
      var $400=$5;
      var $401=$4;
      var $402=_mpfr_ceil_mul($400, $401, 0);
      var $403=((($402)+(1))|0);
      $prec=$403;
      var $404=$5;
      var $405=$g;
      var $406=(($404)|0) < (($405)|0);
      if ($406) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $408=$g;
      var $409=$5;
      var $410=((($408)-($409))|0);
      var $416 = $410;label = 74; break;
    case 73: 
      var $412=$5;
      var $413=$g;
      var $414=((($412)-($413))|0);
      var $416 = $414;label = 74; break;
    case 74: 
      var $416;
      $exp=$416;
      var $417=$prec;
      var $418=(($417)|0)==1;
      var $419=$418 ^ 1;
      var $420=$419 ^ 1;
      var $421=(($420)&1);
      var $422=($421);
      var $423=(($422)|0)!=0;
      if ($423) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $483 = 0;label = 86; break;
    case 76: 
      var $426=$prec;
      var $427=(($426)|0) > 1;
      var $428=$427 ^ 1;
      var $429=$428 ^ 1;
      var $430=(($429)&1);
      var $431=($430);
      var $432=(($431)|0)!=0;
      if ($432) { var $437 = 1;label = 78; break; } else { label = 77; break; }
    case 77: 
      _mpfr_assert_fail(((5248764)|0), 2408, ((5248520)|0));
      var $434=(0);
      var $435=(($434)|0)!=0;
      var $437 = $435;label = 78; break;
    case 78: 
      var $437;
      var $438=(($437)&1);
      var $439=$prec;
      var $440=((($439)-(1))|0);
      $_limb=$440;
      var $441=$_limb;
      var $442=$prec;
      var $443=((($442)-(1))|0);
      var $444=(($441)|0)==(($443)|0);
      var $445=$444 ^ 1;
      var $446=$445 ^ 1;
      var $447=(($446)&1);
      var $448=($447);
      var $449=(($448)|0)!=0;
      if ($449) { var $454 = 1;label = 80; break; } else { label = 79; break; }
    case 79: 
      _mpfr_assert_fail(((5248764)|0), 2408, ((5248496)|0));
      var $451=(0);
      var $452=(($451)|0)!=0;
      var $454 = $452;label = 80; break;
    case 80: 
      var $454;
      var $455=(($454)&1);
      label = 81; break;
    case 81: 
      var $457=$_limb;
      $__xr1=$457;
      var $458=$__xr1;
      var $459=(($458)>>>0) < 65536;
      if ($459) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $461=$__xr1;
      var $462=(($461)>>>0) < 256;
      var $463=$462 ? 1 : 9;
      var $469 = $463;label = 84; break;
    case 83: 
      var $465=$__xr1;
      var $466=(($465)>>>0) < 16777216;
      var $467=$466 ? 17 : 25;
      var $469 = $467;label = 84; break;
    case 84: 
      var $469;
      $__a2=$469;
      var $470=$__a2;
      var $471=(((33)-($470))|0);
      var $472=$__xr1;
      var $473=$__a2;
      var $474=$472 >>> (($473)>>>0);
      var $475=((5248192+$474)|0);
      var $476=HEAP8[($475)];
      var $477=(($476)&255);
      var $478=((($471)-($477))|0);
      $_b=$478;
      label = 85; break;
    case 85: 
      var $480=$_b;
      var $481=(((32)-($480))|0);
      var $483 = $481;label = 86; break;
    case 86: 
      var $483;
      var $484=$prec;
      var $485=((($484)+($483))|0);
      $prec=$485;
      var $486=$exp;
      var $487=(($486)|0)!=0;
      if ($487) { label = 87; break; } else { label = 100; break; }
    case 87: 
      var $489=$exp;
      var $490=(($489)|0)==1;
      var $491=$490 ^ 1;
      var $492=$491 ^ 1;
      var $493=(($492)&1);
      var $494=($493);
      var $495=(($494)|0)!=0;
      if ($495) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $555 = 0;label = 99; break;
    case 89: 
      var $498=$exp;
      var $499=(($498)|0) > 1;
      var $500=$499 ^ 1;
      var $501=$500 ^ 1;
      var $502=(($501)&1);
      var $503=($502);
      var $504=(($503)|0)!=0;
      if ($504) { var $509 = 1;label = 91; break; } else { label = 90; break; }
    case 90: 
      _mpfr_assert_fail(((5248764)|0), 2410, ((5248460)|0));
      var $506=(0);
      var $507=(($506)|0)!=0;
      var $509 = $507;label = 91; break;
    case 91: 
      var $509;
      var $510=(($509)&1);
      var $511=$exp;
      var $512=((($511)-(1))|0);
      $_limb4=$512;
      var $513=$_limb4;
      var $514=$exp;
      var $515=((($514)-(1))|0);
      var $516=(($513)|0)==(($515)|0);
      var $517=$516 ^ 1;
      var $518=$517 ^ 1;
      var $519=(($518)&1);
      var $520=($519);
      var $521=(($520)|0)!=0;
      if ($521) { var $526 = 1;label = 93; break; } else { label = 92; break; }
    case 92: 
      _mpfr_assert_fail(((5248764)|0), 2410, ((5248420)|0));
      var $523=(0);
      var $524=(($523)|0)!=0;
      var $526 = $524;label = 93; break;
    case 93: 
      var $526;
      var $527=(($526)&1);
      label = 94; break;
    case 94: 
      var $529=$_limb4;
      $__xr5=$529;
      var $530=$__xr5;
      var $531=(($530)>>>0) < 65536;
      if ($531) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $533=$__xr5;
      var $534=(($533)>>>0) < 256;
      var $535=$534 ? 1 : 9;
      var $541 = $535;label = 97; break;
    case 96: 
      var $537=$__xr5;
      var $538=(($537)>>>0) < 16777216;
      var $539=$538 ? 17 : 25;
      var $541 = $539;label = 97; break;
    case 97: 
      var $541;
      $__a6=$541;
      var $542=$__a6;
      var $543=(((33)-($542))|0);
      var $544=$__xr5;
      var $545=$__a6;
      var $546=$544 >>> (($545)>>>0);
      var $547=((5248192+$546)|0);
      var $548=HEAP8[($547)];
      var $549=(($548)&255);
      var $550=((($543)-($549))|0);
      $_b3=$550;
      label = 98; break;
    case 98: 
      var $552=$_b3;
      var $553=(((32)-($552))|0);
      var $555 = $553;label = 99; break;
    case 99: 
      var $555;
      var $556=((($555)*(3))&-1);
      var $557=$prec;
      var $558=((($557)+($556))|0);
      $prec=$558;
      label = 100; break;
    case 100: 
      $loop=32;
      label = 101; break;
    case 101: 
      HEAP32[(($tmp_marker)>>2)]=0;
      $exact=1;
      var $561=$prec;
      var $562=((($561)-(1))|0);
      var $563=((((($562)|0))/(32))&-1);
      var $564=((($563)+(1))|0);
      $n=$564;
      var $565=$n;
      var $566=($565<<2);
      var $567=(($566)>>>0) < 16384;
      var $568=$567 ^ 1;
      var $569=$568 ^ 1;
      var $570=(($569)&1);
      var $571=($570);
      var $572=(($571)|0)!=0;
      if ($572) { label = 102; break; } else { label = 103; break; }
    case 102: 
      var $574=$n;
      var $575=($574<<2);
      var $576=STACKTOP;STACKTOP = (STACKTOP + $575)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $582 = $576;label = 104; break;
    case 103: 
      var $578=$n;
      var $579=($578<<2);
      var $580=_mpfr_tmp_allocate($tmp_marker, $579);
      var $582 = $580;label = 104; break;
    case 104: 
      var $582;
      var $583=$582;
      $a=$583;
      var $584=$6;
      var $585=(($584)|0);
      var $586=HEAP32[(($585)>>2)];
      var $587=((($586)-(1))|0);
      var $588=((((($587)|0))/(32))&-1);
      var $589=((($588)+(1))|0);
      $nx=$589;
      var $590=$5;
      var $591=$g;
      var $592=(($590)|0)==(($591)|0);
      if ($592) { label = 105; break; } else { label = 119; break; }
    case 105: 
      var $594=$nx;
      var $595=$n;
      var $596=(($594)>>>0) > (($595)>>>0);
      if ($596) { label = 106; break; } else { label = 107; break; }
    case 106: 
      var $598=$xp;
      var $599=___gmpn_scan1($598, 0);
      var $600=$nx;
      var $601=$n;
      var $602=((($600)-($601))|0);
      var $603=($602<<5);
      var $604=(($599)>>>0) >= (($603)>>>0);
      var $605=(($604)&1);
      $exact=$605;
      label = 107; break;
    case 107: 
      var $607=$exact;
      var $608=(($607)|0)!=0;
      var $609=$608 ^ 1;
      var $610=(($609)&1);
      $err=$610;
      var $611=$n;
      var $612=$nx;
      var $613=(($611)>>>0) <= (($612)>>>0);
      if ($613) { label = 108; break; } else { label = 113; break; }
    case 108: 
      label = 109; break;
    case 109: 
      var $616=$a;
      var $617=$xp;
      var $618=$nx;
      var $619=(($617+($618<<2))|0);
      var $620=$n;
      var $621=(((-$620))|0);
      var $622=(($619+($621<<2))|0);
      var $623=(($616)|0)!=(($622)|0);
      if ($623) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $625=$a;
      var $626=$625;
      var $627=$xp;
      var $628=$nx;
      var $629=(($627+($628<<2))|0);
      var $630=$n;
      var $631=(((-$630))|0);
      var $632=(($629+($631<<2))|0);
      var $633=$632;
      var $634=$n;
      var $635=($634<<2);
      assert($635 % 1 === 0);_memcpy($626, $633, $635);
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      label = 118; break;
    case 113: 
      label = 114; break;
    case 114: 
      var $640=$a;
      var $641=$n;
      var $642=(($640+($641<<2))|0);
      var $643=$nx;
      var $644=(((-$643))|0);
      var $645=(($642+($644<<2))|0);
      var $646=$xp;
      var $647=(($645)|0)!=(($646)|0);
      if ($647) { label = 115; break; } else { label = 116; break; }
    case 115: 
      var $649=$a;
      var $650=$n;
      var $651=(($649+($650<<2))|0);
      var $652=$nx;
      var $653=(((-$652))|0);
      var $654=(($651+($653<<2))|0);
      var $655=$654;
      var $656=$xp;
      var $657=$656;
      var $658=$nx;
      var $659=($658<<2);
      assert($659 % 1 === 0);_memcpy($655, $657, $659);
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      var $662=$a;
      var $663=$662;
      var $664=$n;
      var $665=$nx;
      var $666=((($664)-($665))|0);
      var $667=($666<<2);
      _memset($663, 0, $667);
      label = 118; break;
    case 118: 
      var $669=$6;
      var $670=(($669+8)|0);
      var $671=HEAP32[(($670)>>2)];
      var $672=$n;
      var $673=($672<<5);
      var $674=((($671)-($673))|0);
      HEAP32[(($exp_a)>>2)]=$674;
      label = 184; break;
    case 119: 
      var $676=$5;
      var $677=$g;
      var $678=(($676)|0) > (($677)|0);
      if ($678) { label = 120; break; } else { label = 146; break; }
    case 120: 
      var $680=$a;
      var $681=$4;
      var $682=$exp;
      var $683=$n;
      var $684=_mpfr_mpn_exp($680, $exp_a, $681, $682, $683);
      $err=$684;
      var $685=$err;
      var $686=(($685)|0)==-1;
      var $687=(($686)&1);
      $exact=$687;
      var $688=$nx;
      var $689=$n;
      var $690=(($688)>>>0) >= (($689)>>>0);
      if ($690) { label = 121; break; } else { label = 122; break; }
    case 121: 
      var $692=$xp;
      var $693=$nx;
      var $694=(($692+($693<<2))|0);
      var $695=$n;
      var $696=(((-$695))|0);
      var $697=(($694+($696<<2))|0);
      var $701 = $697;label = 123; break;
    case 122: 
      var $699=$xp;
      var $701 = $699;label = 123; break;
    case 123: 
      var $701;
      $x17=$701;
      var $702=$nx;
      var $703=$n;
      var $704=(($702)>>>0) >= (($703)>>>0);
      if ($704) { label = 124; break; } else { label = 125; break; }
    case 124: 
      var $706=$n;
      var $710 = $706;label = 126; break;
    case 125: 
      var $708=$nx;
      var $710 = $708;label = 126; break;
    case 126: 
      var $710;
      $nx1=$710;
      var $711=$nx;
      var $712=$n;
      var $713=(($711)>>>0) > (($712)>>>0);
      if ($713) { label = 127; break; } else { label = 130; break; }
    case 127: 
      var $715=$exact;
      var $716=(($715)|0)!=0;
      if ($716) { label = 128; break; } else { var $726 = 0;label = 129; break; }
    case 128: 
      var $718=$xp;
      var $719=___gmpn_scan1($718, 0);
      var $720=$nx;
      var $721=$n;
      var $722=((($720)-($721))|0);
      var $723=($722<<5);
      var $724=(($719)>>>0) >= (($723)>>>0);
      var $726 = $724;label = 129; break;
    case 129: 
      var $726;
      var $727=(($726)&1);
      $exact=$727;
      label = 130; break;
    case 130: 
      var $729=$err;
      var $730=(($729)|0) <= 0;
      if ($730) { label = 131; break; } else { label = 132; break; }
    case 131: 
      var $736 = 2;label = 133; break;
    case 132: 
      var $733=$err;
      var $734=((($733)+(1))|0);
      var $736 = $734;label = 133; break;
    case 133: 
      var $736;
      $err=$736;
      var $737=$n;
      var $738=$nx1;
      var $739=((($737)+($738))|0);
      var $740=($739<<2);
      var $741=(($740)>>>0) < 16384;
      var $742=$741 ^ 1;
      var $743=$742 ^ 1;
      var $744=(($743)&1);
      var $745=($744);
      var $746=(($745)|0)!=0;
      if ($746) { label = 134; break; } else { label = 135; break; }
    case 134: 
      var $748=$n;
      var $749=$nx1;
      var $750=((($748)+($749))|0);
      var $751=($750<<2);
      var $752=STACKTOP;STACKTOP = (STACKTOP + $751)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $760 = $752;label = 136; break;
    case 135: 
      var $754=$n;
      var $755=$nx1;
      var $756=((($754)+($755))|0);
      var $757=($756<<2);
      var $758=_mpfr_tmp_allocate($tmp_marker, $757);
      var $760 = $758;label = 136; break;
    case 136: 
      var $760;
      var $761=$760;
      $result=$761;
      var $762=$result;
      var $763=$a;
      var $764=$n;
      var $765=$x17;
      var $766=$nx1;
      var $767=___gmpn_mul($762, $763, $764, $765, $766);
      var $768=$6;
      var $769=(($768+8)|0);
      var $770=HEAP32[(($769)>>2)];
      var $771=HEAP32[(($exp_a)>>2)];
      var $772=((($771)+($770))|0);
      HEAP32[(($exp_a)>>2)]=$772;
      var $773=$result;
      var $774=___gmpn_scan1($773, 0);
      var $775=$nx1;
      var $776=($775<<5);
      var $777=(($774)>>>0) < (($776)>>>0);
      if ($777) { label = 137; break; } else { label = 138; break; }
    case 137: 
      $exact=0;
      label = 138; break;
    case 138: 
      var $780=$n;
      var $781=$nx1;
      var $782=((($780)+($781))|0);
      var $783=((($782)-(1))|0);
      var $784=$result;
      var $785=(($784+($783<<2))|0);
      var $786=HEAP32[(($785)>>2)];
      var $787=$786 & -2147483648;
      var $788=(($787)|0)==0;
      if ($788) { label = 139; break; } else { label = 140; break; }
    case 139: 
      var $790=$a;
      var $791=$result;
      var $792=$nx1;
      var $793=(($791+($792<<2))|0);
      var $794=$n;
      var $795=___gmpn_lshift($790, $793, $794, 1);
      var $796=$nx1;
      var $797=((($796)-(1))|0);
      var $798=$result;
      var $799=(($798+($797<<2))|0);
      var $800=HEAP32[(($799)>>2)];
      var $801=$800 >>> 31;
      var $802=$a;
      var $803=(($802)|0);
      var $804=HEAP32[(($803)>>2)];
      var $805=$804 | $801;
      HEAP32[(($803)>>2)]=$805;
      var $806=HEAP32[(($exp_a)>>2)];
      var $807=((($806)-(1))|0);
      HEAP32[(($exp_a)>>2)]=$807;
      label = 145; break;
    case 140: 
      label = 141; break;
    case 141: 
      var $810=$a;
      var $811=$result;
      var $812=$nx1;
      var $813=(($811+($812<<2))|0);
      var $814=(($810)|0)!=(($813)|0);
      if ($814) { label = 142; break; } else { label = 143; break; }
    case 142: 
      var $816=$a;
      var $817=$816;
      var $818=$result;
      var $819=$nx1;
      var $820=(($818+($819<<2))|0);
      var $821=$820;
      var $822=$n;
      var $823=($822<<2);
      assert($823 % 1 === 0);_memcpy($817, $821, $823);
      label = 143; break;
    case 143: 
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      label = 183; break;
    case 146: 
      var $828=$a;
      var $829=$4;
      var $830=$exp;
      var $831=$n;
      var $832=_mpfr_mpn_exp($828, $exp_a, $829, $830, $831);
      $err=$832;
      var $833=$err;
      var $834=(($833)|0)==-1;
      var $835=(($834)&1);
      $exact=$835;
      var $836=$n;
      var $837=($836<<1);
      var $838=($837<<2);
      var $839=(($838)>>>0) < 16384;
      var $840=$839 ^ 1;
      var $841=$840 ^ 1;
      var $842=(($841)&1);
      var $843=($842);
      var $844=(($843)|0)!=0;
      if ($844) { label = 147; break; } else { label = 148; break; }
    case 147: 
      var $846=$n;
      var $847=($846<<1);
      var $848=($847<<2);
      var $849=STACKTOP;STACKTOP = (STACKTOP + $848)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $856 = $849;label = 149; break;
    case 148: 
      var $851=$n;
      var $852=($851<<1);
      var $853=($852<<2);
      var $854=_mpfr_tmp_allocate($tmp_marker, $853);
      var $856 = $854;label = 149; break;
    case 149: 
      var $856;
      var $857=$856;
      $x18=$857;
      var $858=$n;
      var $859=((($858)+(1))|0);
      var $860=($859<<2);
      var $861=(($860)>>>0) < 16384;
      var $862=$861 ^ 1;
      var $863=$862 ^ 1;
      var $864=(($863)&1);
      var $865=($864);
      var $866=(($865)|0)!=0;
      if ($866) { label = 150; break; } else { label = 151; break; }
    case 150: 
      var $868=$n;
      var $869=((($868)+(1))|0);
      var $870=($869<<2);
      var $871=STACKTOP;STACKTOP = (STACKTOP + $870)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $878 = $871;label = 152; break;
    case 151: 
      var $873=$n;
      var $874=((($873)+(1))|0);
      var $875=($874<<2);
      var $876=_mpfr_tmp_allocate($tmp_marker, $875);
      var $878 = $876;label = 152; break;
    case 152: 
      var $878;
      var $879=$878;
      $result=$879;
      var $880=$n;
      var $881=($880<<2);
      var $882=(($881)>>>0) < 16384;
      var $883=$882 ^ 1;
      var $884=$883 ^ 1;
      var $885=(($884)&1);
      var $886=($885);
      var $887=(($886)|0)!=0;
      if ($887) { label = 153; break; } else { label = 154; break; }
    case 153: 
      var $889=$n;
      var $890=($889<<2);
      var $891=STACKTOP;STACKTOP = (STACKTOP + $890)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $897 = $891;label = 155; break;
    case 154: 
      var $893=$n;
      var $894=($893<<2);
      var $895=_mpfr_tmp_allocate($tmp_marker, $894);
      var $897 = $895;label = 155; break;
    case 155: 
      var $897;
      var $898=$897;
      $reste=$898;
      var $899=$n;
      var $900=($899<<1);
      var $901=$nx;
      var $902=(($900)>>>0) <= (($901)>>>0);
      if ($902) { label = 156; break; } else { label = 161; break; }
    case 156: 
      label = 157; break;
    case 157: 
      var $905=$x18;
      var $906=$xp;
      var $907=$nx;
      var $908=(($906+($907<<2))|0);
      var $909=$n;
      var $910=($909<<1);
      var $911=(((-$910))|0);
      var $912=(($908+($911<<2))|0);
      var $913=(($905)|0)!=(($912)|0);
      if ($913) { label = 158; break; } else { label = 159; break; }
    case 158: 
      var $915=$x18;
      var $916=$915;
      var $917=$xp;
      var $918=$nx;
      var $919=(($917+($918<<2))|0);
      var $920=$n;
      var $921=($920<<1);
      var $922=(((-$921))|0);
      var $923=(($919+($922<<2))|0);
      var $924=$923;
      var $925=$n;
      var $926=($925<<1);
      var $927=($926<<2);
      assert($927 % 1 === 0);_memcpy($916, $924, $927);
      label = 159; break;
    case 159: 
      label = 160; break;
    case 160: 
      label = 166; break;
    case 161: 
      label = 162; break;
    case 162: 
      var $932=$x18;
      var $933=$n;
      var $934=($933<<1);
      var $935=(($932+($934<<2))|0);
      var $936=$nx;
      var $937=(((-$936))|0);
      var $938=(($935+($937<<2))|0);
      var $939=$xp;
      var $940=(($938)|0)!=(($939)|0);
      if ($940) { label = 163; break; } else { label = 164; break; }
    case 163: 
      var $942=$x18;
      var $943=$n;
      var $944=($943<<1);
      var $945=(($942+($944<<2))|0);
      var $946=$nx;
      var $947=(((-$946))|0);
      var $948=(($945+($947<<2))|0);
      var $949=$948;
      var $950=$xp;
      var $951=$950;
      var $952=$nx;
      var $953=($952<<2);
      assert($953 % 1 === 0);_memcpy($949, $951, $953);
      label = 164; break;
    case 164: 
      label = 165; break;
    case 165: 
      var $956=$x18;
      var $957=$956;
      var $958=$n;
      var $959=($958<<1);
      var $960=$nx;
      var $961=((($959)-($960))|0);
      var $962=($961<<2);
      _memset($957, 0, $962);
      label = 166; break;
    case 166: 
      var $964=$exact;
      var $965=(($964)|0)!=0;
      if ($965) { label = 167; break; } else { label = 170; break; }
    case 167: 
      var $967=$nx;
      var $968=$n;
      var $969=($968<<1);
      var $970=(($967)>>>0) > (($969)>>>0);
      if ($970) { label = 168; break; } else { label = 170; break; }
    case 168: 
      var $972=$xp;
      var $973=___gmpn_scan1($972, 0);
      var $974=$nx;
      var $975=$n;
      var $976=($975<<1);
      var $977=((($974)-($976))|0);
      var $978=($977<<5);
      var $979=(($973)>>>0) < (($978)>>>0);
      if ($979) { label = 169; break; } else { label = 170; break; }
    case 169: 
      $exact=0;
      label = 170; break;
    case 170: 
      var $982=$result;
      var $983=$reste;
      var $984=$x18;
      var $985=$n;
      var $986=($985<<1);
      var $987=$a;
      var $988=$n;
      ___gmpn_tdiv_qr($982, $983, 0, $984, $986, $987, $988);
      var $989=$6;
      var $990=(($989+8)|0);
      var $991=HEAP32[(($990)>>2)];
      var $992=HEAP32[(($exp_a)>>2)];
      var $993=((($991)-($992))|0);
      var $994=$n;
      var $995=($994<<1);
      var $996=($995<<5);
      var $997=((($993)-($996))|0);
      HEAP32[(($exp_a)>>2)]=$997;
      var $998=$exact;
      var $999=(($998)|0)!=0;
      if ($999) { label = 171; break; } else { label = 172; break; }
    case 171: 
      var $1001=$reste;
      var $1002=$n;
      var $1003=___gmpn_popcount($1001, $1002);
      var $1004=(($1003)|0)==0;
      var $1005=(($1004)&1);
      $exact=$1005;
      label = 172; break;
    case 172: 
      var $1007=$n;
      var $1008=$result;
      var $1009=(($1008+($1007<<2))|0);
      var $1010=HEAP32[(($1009)>>2)];
      var $1011=(($1010)|0)==1;
      if ($1011) { label = 173; break; } else { label = 174; break; }
    case 173: 
      var $1013=$a;
      var $1014=$result;
      var $1015=$n;
      var $1016=___gmpn_rshift($1013, $1014, $1015, 1);
      var $1017=$n;
      var $1018=((($1017)-(1))|0);
      var $1019=$a;
      var $1020=(($1019+($1018<<2))|0);
      var $1021=HEAP32[(($1020)>>2)];
      var $1022=$1021 | -2147483648;
      HEAP32[(($1020)>>2)]=$1022;
      var $1023=HEAP32[(($exp_a)>>2)];
      var $1024=((($1023)+(1))|0);
      HEAP32[(($exp_a)>>2)]=$1024;
      label = 179; break;
    case 174: 
      label = 175; break;
    case 175: 
      var $1027=$a;
      var $1028=$result;
      var $1029=(($1027)|0)!=(($1028)|0);
      if ($1029) { label = 176; break; } else { label = 177; break; }
    case 176: 
      var $1031=$a;
      var $1032=$1031;
      var $1033=$result;
      var $1034=$1033;
      var $1035=$n;
      var $1036=($1035<<2);
      assert($1036 % 1 === 0);_memcpy($1032, $1034, $1036);
      label = 177; break;
    case 177: 
      label = 178; break;
    case 178: 
      label = 179; break;
    case 179: 
      var $1040=$err;
      var $1041=(($1040)|0)==-1;
      if ($1041) { label = 180; break; } else { label = 181; break; }
    case 180: 
      var $1047 = 2;label = 182; break;
    case 181: 
      var $1044=$err;
      var $1045=((($1044)+(2))|0);
      var $1047 = $1045;label = 182; break;
    case 182: 
      var $1047;
      $err=$1047;
      label = 183; break;
    case 183: 
      label = 184; break;
    case 184: 
      var $1050=$exact;
      var $1051=(($1050)|0)!=0;
      if ($1051) { label = 185; break; } else { label = 186; break; }
    case 185: 
      $err=-1;
      label = 186; break;
    case 186: 
      var $1054=$2;
      var $1055=$3;
      var $1056=$a;
      var $1057=$n;
      var $1058=HEAP32[(($exp_a)>>2)];
      var $1059=$err;
      var $1060=$4;
      var $1061=$5;
      var $1062=$7;
      var $1063=_mpfr_get_str_aux($1054, $1055, $1056, $1057, $1058, $1059, $1060, $1061, $1062);
      $ret=$1063;
      var $1064=$ret;
      var $1065=(($1064)|0)==3;
      if ($1065) { label = 187; break; } else { label = 188; break; }
    case 187: 
      var $1067=$loop;
      var $1068=$prec;
      var $1069=((($1068)+($1067))|0);
      $prec=$1069;
      var $1070=$prec;
      var $1071=((((($1070)|0))/(2))&-1);
      $loop=$1071;
      label = 195; break;
    case 188: 
      var $1073=$ret;
      var $1074=(($1073)|0)==-3;
      if ($1074) { label = 189; break; } else { label = 193; break; }
    case 189: 
      var $1076=$5;
      var $1077=$g;
      var $1078=(($1076)|0) > (($1077)|0);
      if ($1078) { label = 190; break; } else { label = 191; break; }
    case 190: 
      var $1080=$g;
      var $1081=((($1080)+(1))|0);
      $g=$1081;
      var $1082=$exp;
      var $1083=((($1082)-(1))|0);
      $exp=$1083;
      label = 192; break;
    case 191: 
      var $1085=$g;
      var $1086=((($1085)+(1))|0);
      $g=$1086;
      var $1087=$exp;
      var $1088=((($1087)+(1))|0);
      $exp=$1088;
      label = 192; break;
    case 192: 
      label = 194; break;
    case 193: 
      label = 196; break;
    case 194: 
      label = 195; break;
    case 195: 
      var $1093=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($1093);
      label = 101; break;
    case 196: 
      var $1095=$g;
      var $1096=$3;
      var $1097=HEAP32[(($1096)>>2)];
      var $1098=((($1097)+($1095))|0);
      HEAP32[(($1096)>>2)]=$1098;
      var $1099=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($1099);
      var $1100=(($expo)|0);
      var $1101=HEAP32[(($1100)>>2)];
      HEAP32[((5257648)>>2)]=$1101;
      var $1102=(($expo+4)|0);
      var $1103=HEAP32[(($1102)>>2)];
      HEAP32[((5257652)>>2)]=$1103;
      var $1104=(($expo+8)|0);
      var $1105=HEAP32[(($1104)>>2)];
      HEAP32[((5257656)>>2)]=$1105;
      var $1106=$s0;
      $1=$1106;
      label = 197; break;
    case 197: 
      var $1108=$1;
      STACKTOP = __stackBase__;
      return $1108;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_get_str["X"]=1;

function _mpfr_get_str_aux($str, $exp, $r, $n, $f, $e, $b, $m, $rnd) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $num_to_text;
      var $dir=__stackBase__;
      var $ret;
      var $i0;
      var $j0;
      var $str1;
      var $size_s1;
      var $rnd1;
      var $i;
      var $exact;
      var $tmp_marker=(__stackBase__)+(4);
      $1=$str;
      $2=$exp;
      $3=$r;
      $4=$n;
      $5=$f;
      $6=$e;
      $7=$b;
      $8=$m;
      $9=$rnd;
      $ret=0;
      var $10=$6;
      var $11=(($10)|0) < 0;
      var $12=(($11)&1);
      $exact=$12;
      var $13=$5;
      var $14=(($13)|0) <= 0;
      var $15=$14 ^ 1;
      var $16=$15 ^ 1;
      var $17=(($16)&1);
      var $18=($17);
      var $19=(($18)|0)!=0;
      if ($19) { var $24 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      _mpfr_assert_fail(((5248764)|0), 92, ((5248384)|0));
      var $21=(0);
      var $22=(($21)|0)!=0;
      var $24 = $22;label = 4; break;
    case 4: 
      var $24;
      var $25=(($24)&1);
      var $26=$5;
      var $27=$4;
      var $28=(((-$27))|0);
      var $29=($28<<5);
      var $30=(($26)|0) > (($29)|0);
      var $31=$30 ^ 1;
      var $32=$31 ^ 1;
      var $33=(($32)&1);
      var $34=($33);
      var $35=(($34)|0)!=0;
      if ($35) { var $40 = 1;label = 6; break; } else { label = 5; break; }
    case 5: 
      _mpfr_assert_fail(((5248764)|0), 94, ((5249908)|0));
      var $37=(0);
      var $38=(($37)|0)!=0;
      var $40 = $38;label = 6; break;
    case 6: 
      var $40;
      var $41=(($40)&1);
      HEAP32[(($tmp_marker)>>2)]=0;
      var $42=$7;
      var $43=(($42)|0) < 37;
      var $44=$43 ? (((5244992)|0)) : (((5244928)|0));
      $num_to_text=$44;
      var $45=$exact;
      var $46=(($45)|0)!=0;
      if ($46) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $48=$3;
      var $49=$4;
      var $50=$4;
      var $51=($50<<5);
      var $52=$6;
      var $53=((($51)-($52))|0);
      var $54=$9;
      var $55=$4;
      var $56=($55<<5);
      var $57=$5;
      var $58=((($56)+($57))|0);
      var $59=_mpfr_can_round_raw($48, $49, 1, $53, 0, $54, $58);
      var $60=(($59)|0)!=0;
      if ($60) { label = 8; break; } else { label = 53; break; }
    case 8: 
      var $62=$5;
      var $63=(((-$62))|0);
      var $64=((((($63)|0))/(32))&-1);
      $i0=$64;
      var $65=$5;
      var $66=(((-$65))|0);
      var $67=((($66)|0))%(32);
      $j0=$67;
      var $68=$3;
      var $69=$i0;
      var $70=(($68+($69<<2))|0);
      var $71=$3;
      var $72=$4;
      var $73=($72<<5);
      var $74=$4;
      var $75=($74<<5);
      var $76=$5;
      var $77=((($75)+($76))|0);
      var $78=$9;
      var $79=_mpfr_round_raw($70, $71, $73, 0, $77, $78, $dir);
      $ret=$79;
      var $80=$ret;
      var $81=(($80)|0)!=0;
      if ($81) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $83=$j0;
      var $84=(($83)|0)!=0;
      if ($84) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $86=$j0;
      var $87=((($86)-(1))|0);
      var $88=-2147483648 >>> (($87)>>>0);
      var $89=$4;
      var $90=((($89)-(1))|0);
      var $91=$3;
      var $92=(($91+($90<<2))|0);
      HEAP32[(($92)>>2)]=$88;
      label = 12; break;
    case 11: 
      var $94=$ret;
      var $95=$4;
      var $96=((($95)-(1))|0);
      var $97=$3;
      var $98=(($97+($96<<2))|0);
      HEAP32[(($98)>>2)]=$94;
      var $99=$i0;
      var $100=((($99)-(1))|0);
      $i0=$100;
      var $101=$3;
      var $102=(($101+($100<<2))|0);
      HEAP32[(($102)>>2)]=0;
      label = 12; break;
    case 12: 
      label = 16; break;
    case 13: 
      var $105=$j0;
      var $106=(($105)|0)!=0;
      if ($106) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $108=$3;
      var $109=$i0;
      var $110=(($108+($109<<2))|0);
      var $111=$3;
      var $112=$i0;
      var $113=(($111+($112<<2))|0);
      var $114=$4;
      var $115=$i0;
      var $116=((($114)-($115))|0);
      var $117=$j0;
      var $118=___gmpn_rshift($110, $113, $116, $117);
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $121=$8;
      var $122=((($121)+(3))|0);
      var $123=(($122)>>>0) < 16384;
      var $124=$123 ^ 1;
      var $125=$124 ^ 1;
      var $126=(($125)&1);
      var $127=($126);
      var $128=(($127)|0)!=0;
      if ($128) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $130=$8;
      var $131=((($130)+(3))|0);
      var $132=STACKTOP;STACKTOP = (STACKTOP + $131)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $138 = $132;label = 19; break;
    case 18: 
      var $134=$8;
      var $135=((($134)+(3))|0);
      var $136=_mpfr_tmp_allocate($tmp_marker, $135);
      var $138 = $136;label = 19; break;
    case 19: 
      var $138;
      $str1=$138;
      var $139=$str1;
      var $140=$7;
      var $141=$3;
      var $142=$i0;
      var $143=(($141+($142<<2))|0);
      var $144=$4;
      var $145=$i0;
      var $146=((($144)-($145))|0);
      var $147=___gmpn_get_str($139, $140, $143, $146);
      $size_s1=$147;
      var $148=$size_s1;
      var $149=$8;
      var $150=(($148)>>>0) >= (($149)>>>0);
      var $151=$150 ^ 1;
      var $152=$151 ^ 1;
      var $153=(($152)&1);
      var $154=($153);
      var $155=(($154)|0)!=0;
      if ($155) { var $160 = 1;label = 21; break; } else { label = 20; break; }
    case 20: 
      _mpfr_assert_fail(((5248764)|0), 153, ((5249868)|0));
      var $157=(0);
      var $158=(($157)|0)!=0;
      var $160 = $158;label = 21; break;
    case 21: 
      var $160;
      var $161=(($160)&1);
      var $162=$size_s1;
      var $163=$8;
      var $164=((($162)-($163))|0);
      var $165=$2;
      HEAP32[(($165)>>2)]=$164;
      var $166=$size_s1;
      var $167=$8;
      var $168=((($167)+(1))|0);
      var $169=(($166)|0)==(($168)|0);
      if ($169) { label = 22; break; } else { label = 48; break; }
    case 22: 
      var $171=HEAP32[(($dir)>>2)];
      var $172=(($171)|0)!=0;
      if ($172) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $174=$size_s1;
      var $175=((($174)-(1))|0);
      var $176=$str1;
      var $177=(($176+$175)|0);
      var $178=HEAP8[($177)];
      var $179=(($178)&255);
      var $180=(($179)|0)!=0;
      if ($180) { label = 24; break; } else { label = 48; break; }
    case 24: 
      var $182=$9;
      $rnd1=$182;
      var $183=$9;
      var $184=(($183)|0)==0;
      if ($184) { label = 25; break; } else { label = 36; break; }
    case 25: 
      var $186=$size_s1;
      var $187=((($186)-(1))|0);
      var $188=$str1;
      var $189=(($188+$187)|0);
      var $190=HEAP8[($189)];
      var $191=(($190)&255);
      var $192=($191<<1);
      var $193=$7;
      var $194=(($192)|0)==(($193)|0);
      if ($194) { label = 26; break; } else { label = 31; break; }
    case 26: 
      var $196=HEAP32[(($dir)>>2)];
      var $197=(($196)|0)==0;
      if ($197) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $199=$exact;
      var $200=(($199)|0)!=0;
      if ($200) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $202=$size_s1;
      var $203=((($202)-(2))|0);
      var $204=$str1;
      var $205=(($204+$203)|0);
      var $206=HEAP8[($205)];
      var $207=(($206)&255);
      var $208=$207 & 1;
      var $209=(($208)|0)==0;
      var $210=$209 ? 3 : 2;
      $rnd1=$210;
      label = 30; break;
    case 29: 
      HEAP32[(($dir)>>2)]=-3;
      label = 55; break;
    case 30: 
      label = 35; break;
    case 31: 
      var $214=$size_s1;
      var $215=((($214)-(1))|0);
      var $216=$str1;
      var $217=(($216+$215)|0);
      var $218=HEAP8[($217)];
      var $219=(($218)&255);
      var $220=($219<<1);
      var $221=$7;
      var $222=(($220)|0) < (($221)|0);
      if ($222) { label = 32; break; } else { label = 33; break; }
    case 32: 
      $rnd1=3;
      label = 34; break;
    case 33: 
      $rnd1=2;
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $228=$rnd1;
      var $229=(($228)|0)==2;
      if ($229) { label = 38; break; } else { label = 37; break; }
    case 37: 
      var $231=$rnd1;
      var $232=(($231)|0)==4;
      if ($232) { label = 38; break; } else { label = 46; break; }
    case 38: 
      var $234=$size_s1;
      var $235=((($234)-(1))|0);
      var $236=$str1;
      var $237=(($236+$235)|0);
      var $238=HEAP8[($237)];
      var $239=(($238)&255);
      var $240=(($239)|0)!=0;
      if ($240) { label = 39; break; } else { label = 45; break; }
    case 39: 
      var $242=$size_s1;
      var $243=(($242)>>>0) >= 2;
      var $244=$243 ^ 1;
      var $245=$244 ^ 1;
      var $246=(($245)&1);
      var $247=($246);
      var $248=(($247)|0)!=0;
      if ($248) { var $253 = 1;label = 41; break; } else { label = 40; break; }
    case 40: 
      _mpfr_assert_fail(((5248764)|0), 206, ((5249692)|0));
      var $250=(0);
      var $251=(($250)|0)!=0;
      var $253 = $251;label = 41; break;
    case 41: 
      var $253;
      var $254=(($253)&1);
      var $255=$size_s1;
      var $256=((($255)-(2))|0);
      $i=$256;
      label = 42; break;
    case 42: 
      var $258=$i;
      var $259=$str1;
      var $260=(($259+$258)|0);
      var $261=HEAP8[($260)];
      var $262=(($261)&255);
      var $263=$7;
      var $264=((($263)-(1))|0);
      var $265=(($262)|0)==(($264)|0);
      if ($265) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $267=$i;
      var $268=((($267)-(1))|0);
      $i=$268;
      var $269=$str1;
      var $270=(($269+$267)|0);
      HEAP8[($270)]=0;
      label = 42; break;
    case 44: 
      var $272=$i;
      var $273=$str1;
      var $274=(($273+$272)|0);
      var $275=HEAP8[($274)];
      var $276=((($275)+(1))&255);
      HEAP8[($274)]=$276;
      label = 45; break;
    case 45: 
      HEAP32[(($dir)>>2)]=1;
      label = 47; break;
    case 46: 
      HEAP32[(($dir)>>2)]=-1;
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      $i=0;
      label = 49; break;
    case 49: 
      var $282=$i;
      var $283=$8;
      var $284=(($282)>>>0) < (($283)>>>0);
      if ($284) { label = 50; break; } else { label = 52; break; }
    case 50: 
      var $286=$i;
      var $287=$str1;
      var $288=(($287+$286)|0);
      var $289=HEAP8[($288)];
      var $290=(($289)&255);
      var $291=$num_to_text;
      var $292=(($291+$290)|0);
      var $293=HEAP8[($292)];
      var $294=$i;
      var $295=$1;
      var $296=(($295+$294)|0);
      HEAP8[($296)]=$293;
      label = 51; break;
    case 51: 
      var $298=$i;
      var $299=((($298)+(1))|0);
      $i=$299;
      label = 49; break;
    case 52: 
      var $301=$8;
      var $302=$1;
      var $303=(($302+$301)|0);
      HEAP8[($303)]=0;
      label = 54; break;
    case 53: 
      HEAP32[(($dir)>>2)]=3;
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $307=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($307);
      var $308=HEAP32[(($dir)>>2)];
      STACKTOP = __stackBase__;
      return $308;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_get_str_aux["X"]=1;

function _mpfr_mul_2si($y, $x, $n, $rnd_mode) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $inexact;
      var $exp;
      var $_dests;
      var $_srcs;
      var $_destp;
      var $_destprec;
      var $_srcprec;
      var $_sh;
      var $_sp;
      var $_rb;
      var $_sb;
      var $_ulp;
      var $_mask;
      var $_tmp;
      var $_n;
      var $_tmp1;
      var $_n2;
      $2=$y;
      $3=$x;
      $4=$n;
      $5=$rnd_mode;
      var $6=$3;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0) <= -2147483645;
      var $10=$9 ^ 1;
      var $11=$10 ^ 1;
      var $12=(($11)&1);
      var $13=($12);
      var $14=(($13)|0)!=0;
      if ($14) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=$2;
      var $17=$3;
      var $18=$5;
      var $19=$3;
      var $20=(($19+4)|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=_mpfr_set4($16, $17, $18, $21);
      $1=$22;
      label = 102; break;
    case 4: 
      var $24=$3;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      $exp=$26;
      var $27=$2;
      var $28=$3;
      var $29=(($27)|0)!=(($28)|0);
      var $30=$29 ^ 1;
      var $31=$30 ^ 1;
      var $32=(($31)&1);
      var $33=($32);
      var $34=(($33)|0)!=0;
      if ($34) { label = 5; break; } else { label = 77; break; }
    case 5: 
      var $36=$3;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$2;
      var $40=(($39+4)|0);
      HEAP32[(($40)>>2)]=$38;
      var $41=$2;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$3;
      var $45=(($44)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=(($43)|0)==(($46)|0);
      var $48=$47 ^ 1;
      var $49=$48 ^ 1;
      var $50=(($49)&1);
      var $51=($50);
      var $52=(($51)|0)!=0;
      if ($52) { label = 6; break; } else { label = 11; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $55=$2;
      var $56=(($55+12)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$3;
      var $59=(($58+12)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=(($57)|0)!=(($60)|0);
      if ($61) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $63=$2;
      var $64=(($63+12)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$65;
      var $67=$3;
      var $68=(($67+12)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=$69;
      var $71=$3;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=((($73)-(1))|0);
      var $75=((((($74)|0))/(32))&-1);
      var $76=((($75)+(1))|0);
      var $77=($76<<2);
      assert($77 % 1 === 0);_memcpy($66, $70, $77);
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      $inexact=0;
      label = 76; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $82=$3;
      var $83=(($82)|0);
      var $84=HEAP32[(($83)>>2)];
      $_srcprec=$84;
      var $85=$2;
      var $86=(($85)|0);
      var $87=HEAP32[(($86)>>2)];
      $_destprec=$87;
      var $88=$2;
      var $89=(($88+12)|0);
      var $90=HEAP32[(($89)>>2)];
      $_destp=$90;
      var $91=$_destprec;
      var $92=$_srcprec;
      var $93=(($91)|0) >= (($92)|0);
      var $94=$93 ^ 1;
      var $95=$94 ^ 1;
      var $96=(($95)&1);
      var $97=($96);
      var $98=(($97)|0)!=0;
      if ($98) { label = 13; break; } else { label = 18; break; }
    case 13: 
      var $100=$_srcprec;
      var $101=((($100)-(1))|0);
      var $102=((((($101)|0))/(32))&-1);
      var $103=((($102)+(1))|0);
      $_srcs=$103;
      var $104=$_destprec;
      var $105=((($104)-(1))|0);
      var $106=((((($105)|0))/(32))&-1);
      var $107=((($106)+(1))|0);
      var $108=$_srcs;
      var $109=((($107)-($108))|0);
      $_dests=$109;
      label = 14; break;
    case 14: 
      var $111=$_destp;
      var $112=$_dests;
      var $113=(($111+($112<<2))|0);
      var $114=$3;
      var $115=(($114+12)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=(($113)|0)!=(($116)|0);
      if ($117) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $119=$_destp;
      var $120=$_dests;
      var $121=(($119+($120<<2))|0);
      var $122=$121;
      var $123=$3;
      var $124=(($123+12)|0);
      var $125=HEAP32[(($124)>>2)];
      var $126=$125;
      var $127=$_srcs;
      var $128=($127<<2);
      assert($128 % 1 === 0);_memcpy($122, $126, $128);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $131=$_destp;
      var $132=$131;
      var $133=$_dests;
      var $134=($133<<2);
      _memset($132, 0, $134);
      $inexact=0;
      label = 74; break;
    case 18: 
      var $136=$_srcprec;
      var $137=((($136)-(1))|0);
      var $138=((((($137)|0))/(32))&-1);
      var $139=((($138)+(1))|0);
      $_srcs=$139;
      var $140=$_destprec;
      var $141=((($140)-(1))|0);
      var $142=((((($141)|0))/(32))&-1);
      var $143=((($142)+(1))|0);
      $_dests=$143;
      label = 19; break;
    case 19: 
      var $145=$_destprec;
      var $146=(((-$145))|0);
      var $147=((($146)>>>0))%(32);
      $_sh=$147;
      label = 20; break;
    case 20: 
      var $149=$3;
      var $150=(($149+12)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=$_srcs;
      var $153=(($151+($152<<2))|0);
      var $154=$_dests;
      var $155=(((-$154))|0);
      var $156=(($153+($155<<2))|0);
      $_sp=$156;
      var $157=$_sh;
      var $158=(($157)|0)!=0;
      var $159=$158 ^ 1;
      var $160=$159 ^ 1;
      var $161=(($160)&1);
      var $162=($161);
      var $163=(($162)|0)!=0;
      if ($163) { label = 21; break; } else { label = 32; break; }
    case 21: 
      var $165=$_sh;
      var $166=((($165)-(1))|0);
      var $167=1 << $166;
      $_mask=$167;
      var $168=$_sp;
      var $169=(($168)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=$_mask;
      var $172=$170 & $171;
      $_rb=$172;
      var $173=$_sp;
      var $174=(($173)|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=$_mask;
      var $177=((($176)-(1))|0);
      var $178=$175 & $177;
      $_sb=$178;
      var $179=$_sb;
      var $180=(($179)|0)==0;
      var $181=$180 ^ 1;
      var $182=$181 ^ 1;
      var $183=(($182)&1);
      var $184=($183);
      var $185=(($184)|0)!=0;
      if ($185) { label = 22; break; } else { label = 31; break; }
    case 22: 
      var $187=$5;
      var $188=(($187)|0)==0;
      if ($188) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $190=$_rb;
      var $191=(($190)|0)==0;
      if ($191) { label = 24; break; } else { label = 31; break; }
    case 24: 
      var $193=$_sp;
      $_tmp=$193;
      var $194=$_srcs;
      var $195=$_dests;
      var $196=((($194)-($195))|0);
      $_n=$196;
      label = 25; break;
    case 25: 
      var $198=$_n;
      var $199=(($198)|0)!=0;
      if ($199) { label = 26; break; } else { var $204 = 0;label = 27; break; }
    case 26: 
      var $201=$_sb;
      var $202=(($201)|0)==0;
      var $204 = $202;label = 27; break;
    case 27: 
      var $204;
      if ($204) { label = 28; break; } else { label = 30; break; }
    case 28: 
      var $206=$_tmp;
      var $207=((($206)-(4))|0);
      $_tmp=$207;
      var $208=HEAP32[(($207)>>2)];
      $_sb=$208;
      label = 29; break;
    case 29: 
      var $210=$_n;
      var $211=((($210)-(1))|0);
      $_n=$211;
      label = 25; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $214=$_mask;
      var $215=($214<<1);
      $_ulp=$215;
      label = 43; break;
    case 32: 
      var $217=$_sp;
      var $218=((($217)-(4))|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=$219 & -2147483648;
      $_rb=$220;
      var $221=$_sp;
      var $222=((($221)-(4))|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=$223 & 2147483647;
      $_sb=$224;
      var $225=$_sb;
      var $226=(($225)|0)==0;
      var $227=$226 ^ 1;
      var $228=$227 ^ 1;
      var $229=(($228)&1);
      var $230=($229);
      var $231=(($230)|0)!=0;
      if ($231) { label = 33; break; } else { label = 42; break; }
    case 33: 
      var $233=$5;
      var $234=(($233)|0)==0;
      if ($234) { label = 35; break; } else { label = 34; break; }
    case 34: 
      var $236=$_rb;
      var $237=(($236)|0)==0;
      if ($237) { label = 35; break; } else { label = 42; break; }
    case 35: 
      var $239=$_sp;
      var $240=((($239)-(4))|0);
      $_tmp1=$240;
      var $241=$_srcs;
      var $242=$_dests;
      var $243=((($241)-($242))|0);
      var $244=((($243)-(1))|0);
      $_n2=$244;
      label = 36; break;
    case 36: 
      var $246=$_n2;
      var $247=(($246)|0)!=0;
      if ($247) { label = 37; break; } else { var $252 = 0;label = 38; break; }
    case 37: 
      var $249=$_sb;
      var $250=(($249)|0)==0;
      var $252 = $250;label = 38; break;
    case 38: 
      var $252;
      if ($252) { label = 39; break; } else { label = 41; break; }
    case 39: 
      var $254=$_tmp1;
      var $255=((($254)-(4))|0);
      $_tmp1=$255;
      var $256=HEAP32[(($255)>>2)];
      $_sb=$256;
      label = 40; break;
    case 40: 
      var $258=$_n2;
      var $259=((($258)-(1))|0);
      $_n2=$259;
      label = 36; break;
    case 41: 
      label = 42; break;
    case 42: 
      $_ulp=1;
      label = 43; break;
    case 43: 
      var $263=$5;
      var $264=(($263)|0)==0;
      var $265=$264 ^ 1;
      var $266=$265 ^ 1;
      var $267=(($266)&1);
      var $268=($267);
      var $269=(($268)|0)!=0;
      if ($269) { label = 44; break; } else { label = 66; break; }
    case 44: 
      var $271=$_rb;
      var $272=(($271)|0)==0;
      if ($272) { label = 45; break; } else { label = 55; break; }
    case 45: 
      label = 46; break;
    case 46: 
      var $275=$_sb;
      var $276=$_rb;
      var $277=$275 | $276;
      var $278=(($277)|0)!=0;
      var $279=$278 ^ 1;
      var $280=$279 ^ 1;
      var $281=(($280)&1);
      var $282=($281);
      var $283=(($282)|0)!=0;
      if ($283) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $285=$3;
      var $286=(($285+4)|0);
      var $287=HEAP32[(($286)>>2)];
      var $288=(((-$287))|0);
      var $291 = $288;label = 49; break;
    case 48: 
      var $291 = 0;label = 49; break;
    case 49: 
      var $291;
      $inexact=$291;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $294=$_destp;
      var $295=$_sp;
      var $296=(($294)|0)!=(($295)|0);
      if ($296) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $298=$_destp;
      var $299=$298;
      var $300=$_sp;
      var $301=$300;
      var $302=$_dests;
      var $303=($302<<2);
      assert($303 % 1 === 0);_memcpy($299, $301, $303);
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $306=$_ulp;
      var $307=((($306)-(1))|0);
      var $308=$307 ^ -1;
      var $309=$_destp;
      var $310=(($309)|0);
      var $311=HEAP32[(($310)>>2)];
      var $312=$311 & $308;
      HEAP32[(($310)>>2)]=$312;
      label = 65; break;
    case 55: 
      var $314=$_sb;
      var $315=(($314)|0)==0;
      var $316=$315 ^ 1;
      var $317=$316 ^ 1;
      var $318=(($317)&1);
      var $319=($318);
      var $320=(($319)|0)!=0;
      if ($320) { label = 56; break; } else { label = 59; break; }
    case 56: 
      var $322=$_sp;
      var $323=(($322)|0);
      var $324=HEAP32[(($323)>>2)];
      var $325=$_ulp;
      var $326=$324 & $325;
      var $327=(($326)|0)==0;
      if ($327) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $329=$3;
      var $330=(($329+4)|0);
      var $331=HEAP32[(($330)>>2)];
      var $332=(((-$331))|0);
      $inexact=$332;
      label = 50; break;
    case 58: 
      label = 60; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $336=$3;
      var $337=(($336+4)|0);
      var $338=HEAP32[(($337)>>2)];
      $inexact=$338;
      label = 61; break;
    case 61: 
      var $340=$_destp;
      var $341=$_sp;
      var $342=$_dests;
      var $343=$_ulp;
      var $344=___gmpn_add_1($340, $341, $342, $343);
      var $345=(($344)|0)!=0;
      var $346=$345 ^ 1;
      var $347=$346 ^ 1;
      var $348=(($347)&1);
      var $349=($348);
      var $350=(($349)|0)!=0;
      if ($350) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $352=$_dests;
      var $353=((($352)-(1))|0);
      var $354=$_destp;
      var $355=(($354+($353<<2))|0);
      HEAP32[(($355)>>2)]=-2147483648;
      var $356=$exp;
      var $357=((($356)+(1))|0);
      $exp=$357;
      label = 63; break;
    case 63: 
      var $359=$_ulp;
      var $360=((($359)-(1))|0);
      var $361=$360 ^ -1;
      var $362=$_destp;
      var $363=(($362)|0);
      var $364=HEAP32[(($363)>>2)];
      var $365=$364 & $361;
      HEAP32[(($363)>>2)]=$365;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 73; break;
    case 66: 
      var $369=$5;
      var $370=(($369)|0)==1;
      if ($370) { var $381 = 1;label = 68; break; } else { label = 67; break; }
    case 67: 
      var $372=$5;
      var $373=$3;
      var $374=(($373+4)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=(($375)|0) < 0;
      var $377=(($376)&1);
      var $378=((($372)+($377))|0);
      var $379=(($378)|0)==3;
      var $381 = $379;label = 68; break;
    case 68: 
      var $381;
      var $382=$381 ^ 1;
      var $383=$382 ^ 1;
      var $384=(($383)&1);
      var $385=($384);
      var $386=(($385)|0)!=0;
      if ($386) { label = 69; break; } else { label = 70; break; }
    case 69: 
      label = 46; break;
    case 70: 
      var $389=$_sb;
      var $390=$_rb;
      var $391=$389 | $390;
      var $392=(($391)|0)==0;
      var $393=$392 ^ 1;
      var $394=$393 ^ 1;
      var $395=(($394)&1);
      var $396=($395);
      var $397=(($396)|0)!=0;
      if ($397) { label = 71; break; } else { label = 72; break; }
    case 71: 
      $inexact=0;
      label = 50; break;
    case 72: 
      label = 60; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 78; break;
    case 77: 
      $inexact=0;
      label = 78; break;
    case 78: 
      var $406=$4;
      var $407=(($406)|0) > 0;
      if ($407) { label = 79; break; } else { var $422 = 0;label = 82; break; }
    case 79: 
      var $409=HEAP32[((5257656)>>2)];
      var $410=$4;
      var $411=((($410)-(1073741823))|0);
      var $412=(($409)|0) < (($411)|0);
      if ($412) { var $420 = 1;label = 81; break; } else { label = 80; break; }
    case 80: 
      var $414=$exp;
      var $415=HEAP32[((5257656)>>2)];
      var $416=$4;
      var $417=((($415)-($416))|0);
      var $418=(($414)|0) > (($417)|0);
      var $420 = $418;label = 81; break;
    case 81: 
      var $420;
      var $422 = $420;label = 82; break;
    case 82: 
      var $422;
      var $423=$422 ^ 1;
      var $424=$423 ^ 1;
      var $425=(($424)&1);
      var $426=($425);
      var $427=(($426)|0)!=0;
      if ($427) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $429=$2;
      var $430=$5;
      var $431=$2;
      var $432=(($431+4)|0);
      var $433=HEAP32[(($432)>>2)];
      var $434=_mpfr_overflow($429, $430, $433);
      $1=$434;
      label = 102; break;
    case 84: 
      var $436=$4;
      var $437=(($436)|0) < 0;
      if ($437) { label = 85; break; } else { var $452 = 0;label = 88; break; }
    case 85: 
      var $439=HEAP32[((5257652)>>2)];
      var $440=$4;
      var $441=((($440)+(1073741823))|0);
      var $442=(($439)|0) > (($441)|0);
      if ($442) { var $450 = 1;label = 87; break; } else { label = 86; break; }
    case 86: 
      var $444=$exp;
      var $445=HEAP32[((5257652)>>2)];
      var $446=$4;
      var $447=((($445)-($446))|0);
      var $448=(($444)|0) < (($447)|0);
      var $450 = $448;label = 87; break;
    case 87: 
      var $450;
      var $452 = $450;label = 88; break;
    case 88: 
      var $452;
      var $453=$452 ^ 1;
      var $454=$453 ^ 1;
      var $455=(($454)&1);
      var $456=($455);
      var $457=(($456)|0)!=0;
      if ($457) { label = 89; break; } else { label = 96; break; }
    case 89: 
      var $459=$5;
      var $460=(($459)|0)==0;
      if ($460) { label = 90; break; } else { label = 95; break; }
    case 90: 
      var $462=HEAP32[((5257652)>>2)];
      var $463=$4;
      var $464=((($463)+(1))|0);
      var $465=((($464)+(1073741823))|0);
      var $466=(($462)|0) > (($465)|0);
      if ($466) { label = 94; break; } else { label = 91; break; }
    case 91: 
      var $468=$exp;
      var $469=HEAP32[((5257652)>>2)];
      var $470=$4;
      var $471=((($470)+(1))|0);
      var $472=((($469)-($471))|0);
      var $473=(($468)|0) < (($472)|0);
      if ($473) { label = 94; break; } else { label = 92; break; }
    case 92: 
      var $475=$inexact;
      var $476=(($475)|0) >= 0;
      if ($476) { label = 93; break; } else { label = 95; break; }
    case 93: 
      var $478=$2;
      var $479=_mpfr_powerof2_raw($478);
      var $480=(($479)|0)!=0;
      if ($480) { label = 94; break; } else { label = 95; break; }
    case 94: 
      $5=1;
      label = 95; break;
    case 95: 
      var $483=$2;
      var $484=$5;
      var $485=$2;
      var $486=(($485+4)|0);
      var $487=HEAP32[(($486)>>2)];
      var $488=_mpfr_underflow($483, $484, $487);
      $1=$488;
      label = 102; break;
    case 96: 
      label = 97; break;
    case 97: 
      var $491=$exp;
      var $492=$4;
      var $493=((($491)+($492))|0);
      var $494=$2;
      var $495=(($494+8)|0);
      HEAP32[(($495)>>2)]=$493;
      label = 98; break;
    case 98: 
      var $497=$inexact;
      var $498=(($497)|0)!=0;
      if ($498) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $500=HEAP32[((5257648)>>2)];
      var $501=$500 | 8;
      HEAP32[((5257648)>>2)]=$501;
      var $502=$inexact;
      var $505 = $502;label = 101; break;
    case 100: 
      var $505 = 0;label = 101; break;
    case 101: 
      var $505;
      $1=$505;
      label = 102; break;
    case 102: 
      var $507=$1;

      return $507;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_mul_2si["X"]=1;

function _mpfr_mul($a, $b, $c, $rnd_mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 36)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $sign;
      var $inexact;
      var $ax;
      var $ax2;
      var $tmp;
      var $b1;
      var $bq;
      var $cq;
      var $bn;
      var $cn;
      var $tn;
      var $k;
      var $threshold;
      var $tmp_marker=__stackBase__;
      var $z;
      var $zn;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $t;
      var $__x01;
      var $__x12;
      var $__x23;
      var $__x34;
      var $__ul5;
      var $__vl6;
      var $__uh7;
      var $__vh8;
      var $__u9;
      var $__v10;
      var $__x011;
      var $__x112;
      var $__x213;
      var $__x314;
      var $__ul15;
      var $__vl16;
      var $__uh17;
      var $__vh18;
      var $__u19;
      var $__v20;
      var $__x;
      var $t1;
      var $t2;
      var $t3;
      var $__x021;
      var $__x122;
      var $__x223;
      var $__x324;
      var $__ul25;
      var $__vl26;
      var $__uh27;
      var $__vh28;
      var $__u29;
      var $__v30;
      var $__x031;
      var $__x132;
      var $__x233;
      var $__x334;
      var $__ul35;
      var $__vl36;
      var $__uh37;
      var $__vh38;
      var $__u39;
      var $__v40;
      var $__x41;
      var $__x042;
      var $__x143;
      var $__x244;
      var $__x345;
      var $__ul46;
      var $__vl47;
      var $__uh48;
      var $__vh49;
      var $__u50;
      var $__v51;
      var $__x052;
      var $__x153;
      var $__x254;
      var $__x355;
      var $__ul56;
      var $__vl57;
      var $__uh58;
      var $__vh59;
      var $__u60;
      var $__v61;
      var $__x62;
      var $__x63;
      var $bp;
      var $cp;
      var $n;
      var $p;
      var $b_tmp=(__stackBase__)+(4);
      var $c_tmp=(__stackBase__)+(20);
      var $_b;
      var $_limb;
      var $__xr;
      var $__a;
      var $_b64;
      var $_limb65;
      var $__xr66;
      var $__a67;
      var $_dests;
      var $_srcs;
      var $_destp;
      var $_destprec;
      var $_srcprec;
      var $_sh;
      var $_sp;
      var $_rb;
      var $_sb;
      var $_ulp;
      var $_mask;
      var $_tmp;
      var $_n;
      var $_tmp68;
      var $_n69;
      $2=$a;
      $3=$b;
      $4=$c;
      $5=$rnd_mode;
      var $6=$3;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0) <= -2147483645;
      var $10=$9 ^ 1;
      var $11=$10 ^ 1;
      var $12=(($11)&1);
      var $13=($12);
      var $14=(($13)|0)!=0;
      if ($14) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $16=$4;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|0) <= -2147483645;
      var $20=$19 ^ 1;
      var $21=$20 ^ 1;
      var $22=(($21)&1);
      var $23=($22);
      var $24=(($23)|0)!=0;
      if ($24) { label = 4; break; } else { label = 16; break; }
    case 4: 
      var $26=$3;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0)==-2147483646;
      if ($29) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $31=$4;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|0)==-2147483646;
      if ($34) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $36=$2;
      var $37=(($36+8)|0);
      HEAP32[(($37)>>2)]=-2147483646;
      var $38=HEAP32[((5257648)>>2)];
      var $39=$38 | 4;
      HEAP32[((5257648)>>2)]=$39;
      $1=0;
      label = 237; break;
    case 7: 
      var $41=$3;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$4;
      var $45=(($44+4)|0);
      var $46=HEAP32[(($45)>>2)];
      var $47=Math.imul($43,$46);
      $sign=$47;
      var $48=$3;
      var $49=(($48+8)|0);
      var $50=HEAP32[(($49)>>2)];
      var $51=(($50)|0)==-2147483645;
      if ($51) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $53=$4;
      var $54=(($53+8)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55)|0)==-2147483647;
      if ($56) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $58=$sign;
      var $59=$2;
      var $60=(($59+4)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$2;
      var $62=(($61+8)|0);
      HEAP32[(($62)>>2)]=-2147483645;
      $1=0;
      label = 237; break;
    case 10: 
      var $64=$2;
      var $65=(($64+8)|0);
      HEAP32[(($65)>>2)]=-2147483646;
      var $66=HEAP32[((5257648)>>2)];
      var $67=$66 | 4;
      HEAP32[((5257648)>>2)]=$67;
      $1=0;
      label = 237; break;
    case 11: 
      var $69=$4;
      var $70=(($69+8)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($71)|0)==-2147483645;
      if ($72) { label = 12; break; } else { label = 15; break; }
    case 12: 
      var $74=$3;
      var $75=(($74+8)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=(($76)|0)==-2147483647;
      if ($77) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $79=$sign;
      var $80=$2;
      var $81=(($80+4)|0);
      HEAP32[(($81)>>2)]=$79;
      var $82=$2;
      var $83=(($82+8)|0);
      HEAP32[(($83)>>2)]=-2147483645;
      $1=0;
      label = 237; break;
    case 14: 
      var $85=$2;
      var $86=(($85+8)|0);
      HEAP32[(($86)>>2)]=-2147483646;
      var $87=HEAP32[((5257648)>>2)];
      var $88=$87 | 4;
      HEAP32[((5257648)>>2)]=$88;
      $1=0;
      label = 237; break;
    case 15: 
      var $90=$sign;
      var $91=$2;
      var $92=(($91+4)|0);
      HEAP32[(($92)>>2)]=$90;
      var $93=$2;
      var $94=(($93+8)|0);
      HEAP32[(($94)>>2)]=-2147483647;
      $1=0;
      label = 237; break;
    case 16: 
      var $96=$3;
      var $97=(($96+4)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$4;
      var $100=(($99+4)|0);
      var $101=HEAP32[(($100)>>2)];
      var $102=Math.imul($98,$101);
      $sign=$102;
      var $103=$3;
      var $104=(($103+8)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$4;
      var $107=(($106+8)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($105)+($108))|0);
      $ax=$109;
      var $110=$3;
      var $111=(($110)|0);
      var $112=HEAP32[(($111)>>2)];
      $bq=$112;
      var $113=$4;
      var $114=(($113)|0);
      var $115=HEAP32[(($114)>>2)];
      $cq=$115;
      var $116=$bq;
      var $117=$cq;
      var $118=((($116)+($117))|0);
      var $119=(($118)>>>0) <= 2147483647;
      var $120=$119 ^ 1;
      var $121=$120 ^ 1;
      var $122=(($121)&1);
      var $123=($122);
      var $124=(($123)|0)!=0;
      if ($124) { var $129 = 1;label = 18; break; } else { label = 17; break; }
    case 17: 
      _mpfr_assert_fail(((5248412)|0), 295, ((5249340)|0));
      var $126=(0);
      var $127=(($126)|0)!=0;
      var $129 = $127;label = 18; break;
    case 18: 
      var $129;
      var $130=(($129)&1);
      var $131=$bq;
      var $132=((($131)-(1))|0);
      var $133=((((($132)|0))/(32))&-1);
      var $134=((($133)+(1))|0);
      $bn=$134;
      var $135=$cq;
      var $136=((($135)-(1))|0);
      var $137=((((($136)|0))/(32))&-1);
      var $138=((($137)+(1))|0);
      $cn=$138;
      var $139=$bn;
      var $140=$cn;
      var $141=((($139)+($140))|0);
      $k=$141;
      var $142=$bq;
      var $143=$cq;
      var $144=((($142)+($143))|0);
      var $145=((($144)-(1))|0);
      var $146=((((($145)|0))/(32))&-1);
      var $147=((($146)+(1))|0);
      $tn=$147;
      HEAP32[(($tmp_marker)>>2)]=0;
      var $148=$k;
      var $149=($148<<2);
      var $150=(($149)>>>0) < 16384;
      var $151=$150 ^ 1;
      var $152=$151 ^ 1;
      var $153=(($152)&1);
      var $154=($153);
      var $155=(($154)|0)!=0;
      if ($155) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $157=$k;
      var $158=($157<<2);
      var $159=STACKTOP;STACKTOP = (STACKTOP + $158)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $165 = $159;label = 21; break;
    case 20: 
      var $161=$k;
      var $162=($161<<2);
      var $163=_mpfr_tmp_allocate($tmp_marker, $162);
      var $165 = $163;label = 21; break;
    case 21: 
      var $165;
      var $166=$165;
      $tmp=$166;
      var $167=$bn;
      var $168=$cn;
      var $169=(($167)|0) < (($168)|0);
      var $170=$169 ^ 1;
      var $171=$170 ^ 1;
      var $172=(($171)&1);
      var $173=($172);
      var $174=(($173)|0)!=0;
      if ($174) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $176=$3;
      $z=$176;
      var $177=$bn;
      $zn=$177;
      var $178=$4;
      $3=$178;
      var $179=$cn;
      $bn=$179;
      var $180=$z;
      $4=$180;
      var $181=$zn;
      $cn=$181;
      label = 23; break;
    case 23: 
      var $183=$bn;
      var $184=(($183)|0) <= 2;
      var $185=$184 ^ 1;
      var $186=$185 ^ 1;
      var $187=(($186)&1);
      var $188=($187);
      var $189=(($188)|0)!=0;
      if ($189) { label = 24; break; } else { label = 69; break; }
    case 24: 
      var $191=$bn;
      var $192=(($191)|0)==1;
      if ($192) { label = 25; break; } else { label = 30; break; }
    case 25: 
      label = 26; break;
    case 26: 
      var $195=$3;
      var $196=(($195+12)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=(($197)|0);
      var $199=HEAP32[(($198)>>2)];
      $__u=$199;
      var $200=$4;
      var $201=(($200+12)|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=(($202)|0);
      var $204=HEAP32[(($203)>>2)];
      $__v=$204;
      var $205=$__u;
      var $206=$205 & 65535;
      $__ul=$206;
      var $207=$__u;
      var $208=$207 >>> 16;
      $__uh=$208;
      var $209=$__v;
      var $210=$209 & 65535;
      $__vl=$210;
      var $211=$__v;
      var $212=$211 >>> 16;
      $__vh=$212;
      var $213=$__ul;
      var $214=$__vl;
      var $215=Math.imul($213,$214);
      $__x0=$215;
      var $216=$__ul;
      var $217=$__vh;
      var $218=Math.imul($216,$217);
      $__x1=$218;
      var $219=$__uh;
      var $220=$__vl;
      var $221=Math.imul($219,$220);
      $__x2=$221;
      var $222=$__uh;
      var $223=$__vh;
      var $224=Math.imul($222,$223);
      $__x3=$224;
      var $225=$__x0;
      var $226=$225 >>> 16;
      var $227=$__x1;
      var $228=((($227)+($226))|0);
      $__x1=$228;
      var $229=$__x2;
      var $230=$__x1;
      var $231=((($230)+($229))|0);
      $__x1=$231;
      var $232=$__x1;
      var $233=$__x2;
      var $234=(($232)>>>0) < (($233)>>>0);
      if ($234) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $236=$__x3;
      var $237=((($236)+(65536))|0);
      $__x3=$237;
      label = 28; break;
    case 28: 
      var $239=$__x3;
      var $240=$__x1;
      var $241=$240 >>> 16;
      var $242=((($239)+($241))|0);
      var $243=$tmp;
      var $244=(($243+4)|0);
      HEAP32[(($244)>>2)]=$242;
      var $245=$__x1;
      var $246=$245 << 16;
      var $247=$__x0;
      var $248=$247 & 65535;
      var $249=((($246)+($248))|0);
      var $250=$tmp;
      var $251=(($250)|0);
      HEAP32[(($251)>>2)]=$249;
      label = 29; break;
    case 29: 
      var $253=$tmp;
      var $254=(($253+4)|0);
      var $255=HEAP32[(($254)>>2)];
      $b1=$255;
      label = 66; break;
    case 30: 
      var $257=$cn;
      var $258=(($257)|0)==1;
      var $259=$258 ^ 1;
      var $260=$259 ^ 1;
      var $261=(($260)&1);
      var $262=($261);
      var $263=(($262)|0)!=0;
      if ($263) { label = 31; break; } else { label = 42; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $266=$3;
      var $267=(($266+12)|0);
      var $268=HEAP32[(($267)>>2)];
      var $269=(($268)|0);
      var $270=HEAP32[(($269)>>2)];
      $__u9=$270;
      var $271=$4;
      var $272=(($271+12)|0);
      var $273=HEAP32[(($272)>>2)];
      var $274=(($273)|0);
      var $275=HEAP32[(($274)>>2)];
      $__v10=$275;
      var $276=$__u9;
      var $277=$276 & 65535;
      $__ul5=$277;
      var $278=$__u9;
      var $279=$278 >>> 16;
      $__uh7=$279;
      var $280=$__v10;
      var $281=$280 & 65535;
      $__vl6=$281;
      var $282=$__v10;
      var $283=$282 >>> 16;
      $__vh8=$283;
      var $284=$__ul5;
      var $285=$__vl6;
      var $286=Math.imul($284,$285);
      $__x01=$286;
      var $287=$__ul5;
      var $288=$__vh8;
      var $289=Math.imul($287,$288);
      $__x12=$289;
      var $290=$__uh7;
      var $291=$__vl6;
      var $292=Math.imul($290,$291);
      $__x23=$292;
      var $293=$__uh7;
      var $294=$__vh8;
      var $295=Math.imul($293,$294);
      $__x34=$295;
      var $296=$__x01;
      var $297=$296 >>> 16;
      var $298=$__x12;
      var $299=((($298)+($297))|0);
      $__x12=$299;
      var $300=$__x23;
      var $301=$__x12;
      var $302=((($301)+($300))|0);
      $__x12=$302;
      var $303=$__x12;
      var $304=$__x23;
      var $305=(($303)>>>0) < (($304)>>>0);
      if ($305) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $307=$__x34;
      var $308=((($307)+(65536))|0);
      $__x34=$308;
      label = 34; break;
    case 34: 
      var $310=$__x34;
      var $311=$__x12;
      var $312=$311 >>> 16;
      var $313=((($310)+($312))|0);
      var $314=$tmp;
      var $315=(($314+4)|0);
      HEAP32[(($315)>>2)]=$313;
      var $316=$__x12;
      var $317=$316 << 16;
      var $318=$__x01;
      var $319=$318 & 65535;
      var $320=((($317)+($319))|0);
      var $321=$tmp;
      var $322=(($321)|0);
      HEAP32[(($322)>>2)]=$320;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $325=$3;
      var $326=(($325+12)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=(($327+4)|0);
      var $329=HEAP32[(($328)>>2)];
      $__u19=$329;
      var $330=$4;
      var $331=(($330+12)|0);
      var $332=HEAP32[(($331)>>2)];
      var $333=(($332)|0);
      var $334=HEAP32[(($333)>>2)];
      $__v20=$334;
      var $335=$__u19;
      var $336=$335 & 65535;
      $__ul15=$336;
      var $337=$__u19;
      var $338=$337 >>> 16;
      $__uh17=$338;
      var $339=$__v20;
      var $340=$339 & 65535;
      $__vl16=$340;
      var $341=$__v20;
      var $342=$341 >>> 16;
      $__vh18=$342;
      var $343=$__ul15;
      var $344=$__vl16;
      var $345=Math.imul($343,$344);
      $__x011=$345;
      var $346=$__ul15;
      var $347=$__vh18;
      var $348=Math.imul($346,$347);
      $__x112=$348;
      var $349=$__uh17;
      var $350=$__vl16;
      var $351=Math.imul($349,$350);
      $__x213=$351;
      var $352=$__uh17;
      var $353=$__vh18;
      var $354=Math.imul($352,$353);
      $__x314=$354;
      var $355=$__x011;
      var $356=$355 >>> 16;
      var $357=$__x112;
      var $358=((($357)+($356))|0);
      $__x112=$358;
      var $359=$__x213;
      var $360=$__x112;
      var $361=((($360)+($359))|0);
      $__x112=$361;
      var $362=$__x112;
      var $363=$__x213;
      var $364=(($362)>>>0) < (($363)>>>0);
      if ($364) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $366=$__x314;
      var $367=((($366)+(65536))|0);
      $__x314=$367;
      label = 38; break;
    case 38: 
      var $369=$__x314;
      var $370=$__x112;
      var $371=$370 >>> 16;
      var $372=((($369)+($371))|0);
      var $373=$tmp;
      var $374=(($373+8)|0);
      HEAP32[(($374)>>2)]=$372;
      var $375=$__x112;
      var $376=$375 << 16;
      var $377=$__x011;
      var $378=$377 & 65535;
      var $379=((($376)+($378))|0);
      $t=$379;
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $382=$tmp;
      var $383=(($382+4)|0);
      var $384=HEAP32[(($383)>>2)];
      var $385=$t;
      var $386=((($384)+($385))|0);
      $__x=$386;
      var $387=$tmp;
      var $388=(($387+8)|0);
      var $389=HEAP32[(($388)>>2)];
      var $390=(($389)|0);
      var $391=$__x;
      var $392=$tmp;
      var $393=(($392+4)|0);
      var $394=HEAP32[(($393)>>2)];
      var $395=(($391)>>>0) < (($394)>>>0);
      var $396=(($395)&1);
      var $397=((($390)+($396))|0);
      var $398=$tmp;
      var $399=(($398+8)|0);
      HEAP32[(($399)>>2)]=$397;
      var $400=$__x;
      var $401=$tmp;
      var $402=(($401+4)|0);
      HEAP32[(($402)>>2)]=$400;
      label = 41; break;
    case 41: 
      var $404=$tmp;
      var $405=(($404+8)|0);
      var $406=HEAP32[(($405)>>2)];
      $b1=$406;
      label = 65; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $409=$3;
      var $410=(($409+12)|0);
      var $411=HEAP32[(($410)>>2)];
      var $412=(($411)|0);
      var $413=HEAP32[(($412)>>2)];
      $__u29=$413;
      var $414=$4;
      var $415=(($414+12)|0);
      var $416=HEAP32[(($415)>>2)];
      var $417=(($416)|0);
      var $418=HEAP32[(($417)>>2)];
      $__v30=$418;
      var $419=$__u29;
      var $420=$419 & 65535;
      $__ul25=$420;
      var $421=$__u29;
      var $422=$421 >>> 16;
      $__uh27=$422;
      var $423=$__v30;
      var $424=$423 & 65535;
      $__vl26=$424;
      var $425=$__v30;
      var $426=$425 >>> 16;
      $__vh28=$426;
      var $427=$__ul25;
      var $428=$__vl26;
      var $429=Math.imul($427,$428);
      $__x021=$429;
      var $430=$__ul25;
      var $431=$__vh28;
      var $432=Math.imul($430,$431);
      $__x122=$432;
      var $433=$__uh27;
      var $434=$__vl26;
      var $435=Math.imul($433,$434);
      $__x223=$435;
      var $436=$__uh27;
      var $437=$__vh28;
      var $438=Math.imul($436,$437);
      $__x324=$438;
      var $439=$__x021;
      var $440=$439 >>> 16;
      var $441=$__x122;
      var $442=((($441)+($440))|0);
      $__x122=$442;
      var $443=$__x223;
      var $444=$__x122;
      var $445=((($444)+($443))|0);
      $__x122=$445;
      var $446=$__x122;
      var $447=$__x223;
      var $448=(($446)>>>0) < (($447)>>>0);
      if ($448) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $450=$__x324;
      var $451=((($450)+(65536))|0);
      $__x324=$451;
      label = 45; break;
    case 45: 
      var $453=$__x324;
      var $454=$__x122;
      var $455=$454 >>> 16;
      var $456=((($453)+($455))|0);
      var $457=$tmp;
      var $458=(($457+4)|0);
      HEAP32[(($458)>>2)]=$456;
      var $459=$__x122;
      var $460=$459 << 16;
      var $461=$__x021;
      var $462=$461 & 65535;
      var $463=((($460)+($462))|0);
      var $464=$tmp;
      var $465=(($464)|0);
      HEAP32[(($465)>>2)]=$463;
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $468=$3;
      var $469=(($468+12)|0);
      var $470=HEAP32[(($469)>>2)];
      var $471=(($470+4)|0);
      var $472=HEAP32[(($471)>>2)];
      $__u39=$472;
      var $473=$4;
      var $474=(($473+12)|0);
      var $475=HEAP32[(($474)>>2)];
      var $476=(($475)|0);
      var $477=HEAP32[(($476)>>2)];
      $__v40=$477;
      var $478=$__u39;
      var $479=$478 & 65535;
      $__ul35=$479;
      var $480=$__u39;
      var $481=$480 >>> 16;
      $__uh37=$481;
      var $482=$__v40;
      var $483=$482 & 65535;
      $__vl36=$483;
      var $484=$__v40;
      var $485=$484 >>> 16;
      $__vh38=$485;
      var $486=$__ul35;
      var $487=$__vl36;
      var $488=Math.imul($486,$487);
      $__x031=$488;
      var $489=$__ul35;
      var $490=$__vh38;
      var $491=Math.imul($489,$490);
      $__x132=$491;
      var $492=$__uh37;
      var $493=$__vl36;
      var $494=Math.imul($492,$493);
      $__x233=$494;
      var $495=$__uh37;
      var $496=$__vh38;
      var $497=Math.imul($495,$496);
      $__x334=$497;
      var $498=$__x031;
      var $499=$498 >>> 16;
      var $500=$__x132;
      var $501=((($500)+($499))|0);
      $__x132=$501;
      var $502=$__x233;
      var $503=$__x132;
      var $504=((($503)+($502))|0);
      $__x132=$504;
      var $505=$__x132;
      var $506=$__x233;
      var $507=(($505)>>>0) < (($506)>>>0);
      if ($507) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $509=$__x334;
      var $510=((($509)+(65536))|0);
      $__x334=$510;
      label = 49; break;
    case 49: 
      var $512=$__x334;
      var $513=$__x132;
      var $514=$513 >>> 16;
      var $515=((($512)+($514))|0);
      var $516=$tmp;
      var $517=(($516+8)|0);
      HEAP32[(($517)>>2)]=$515;
      var $518=$__x132;
      var $519=$518 << 16;
      var $520=$__x031;
      var $521=$520 & 65535;
      var $522=((($519)+($521))|0);
      $t1=$522;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $525=$tmp;
      var $526=(($525+4)|0);
      var $527=HEAP32[(($526)>>2)];
      var $528=$t1;
      var $529=((($527)+($528))|0);
      $__x41=$529;
      var $530=$tmp;
      var $531=(($530+8)|0);
      var $532=HEAP32[(($531)>>2)];
      var $533=(($532)|0);
      var $534=$__x41;
      var $535=$tmp;
      var $536=(($535+4)|0);
      var $537=HEAP32[(($536)>>2)];
      var $538=(($534)>>>0) < (($537)>>>0);
      var $539=(($538)&1);
      var $540=((($533)+($539))|0);
      var $541=$tmp;
      var $542=(($541+8)|0);
      HEAP32[(($542)>>2)]=$540;
      var $543=$__x41;
      var $544=$tmp;
      var $545=(($544+4)|0);
      HEAP32[(($545)>>2)]=$543;
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $548=$3;
      var $549=(($548+12)|0);
      var $550=HEAP32[(($549)>>2)];
      var $551=(($550)|0);
      var $552=HEAP32[(($551)>>2)];
      $__u50=$552;
      var $553=$4;
      var $554=(($553+12)|0);
      var $555=HEAP32[(($554)>>2)];
      var $556=(($555+4)|0);
      var $557=HEAP32[(($556)>>2)];
      $__v51=$557;
      var $558=$__u50;
      var $559=$558 & 65535;
      $__ul46=$559;
      var $560=$__u50;
      var $561=$560 >>> 16;
      $__uh48=$561;
      var $562=$__v51;
      var $563=$562 & 65535;
      $__vl47=$563;
      var $564=$__v51;
      var $565=$564 >>> 16;
      $__vh49=$565;
      var $566=$__ul46;
      var $567=$__vl47;
      var $568=Math.imul($566,$567);
      $__x042=$568;
      var $569=$__ul46;
      var $570=$__vh49;
      var $571=Math.imul($569,$570);
      $__x143=$571;
      var $572=$__uh48;
      var $573=$__vl47;
      var $574=Math.imul($572,$573);
      $__x244=$574;
      var $575=$__uh48;
      var $576=$__vh49;
      var $577=Math.imul($575,$576);
      $__x345=$577;
      var $578=$__x042;
      var $579=$578 >>> 16;
      var $580=$__x143;
      var $581=((($580)+($579))|0);
      $__x143=$581;
      var $582=$__x244;
      var $583=$__x143;
      var $584=((($583)+($582))|0);
      $__x143=$584;
      var $585=$__x143;
      var $586=$__x244;
      var $587=(($585)>>>0) < (($586)>>>0);
      if ($587) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $589=$__x345;
      var $590=((($589)+(65536))|0);
      $__x345=$590;
      label = 55; break;
    case 55: 
      var $592=$__x345;
      var $593=$__x143;
      var $594=$593 >>> 16;
      var $595=((($592)+($594))|0);
      $t1=$595;
      var $596=$__x143;
      var $597=$596 << 16;
      var $598=$__x042;
      var $599=$598 & 65535;
      var $600=((($597)+($599))|0);
      $t2=$600;
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $603=$3;
      var $604=(($603+12)|0);
      var $605=HEAP32[(($604)>>2)];
      var $606=(($605+4)|0);
      var $607=HEAP32[(($606)>>2)];
      $__u60=$607;
      var $608=$4;
      var $609=(($608+12)|0);
      var $610=HEAP32[(($609)>>2)];
      var $611=(($610+4)|0);
      var $612=HEAP32[(($611)>>2)];
      $__v61=$612;
      var $613=$__u60;
      var $614=$613 & 65535;
      $__ul56=$614;
      var $615=$__u60;
      var $616=$615 >>> 16;
      $__uh58=$616;
      var $617=$__v61;
      var $618=$617 & 65535;
      $__vl57=$618;
      var $619=$__v61;
      var $620=$619 >>> 16;
      $__vh59=$620;
      var $621=$__ul56;
      var $622=$__vl57;
      var $623=Math.imul($621,$622);
      $__x052=$623;
      var $624=$__ul56;
      var $625=$__vh59;
      var $626=Math.imul($624,$625);
      $__x153=$626;
      var $627=$__uh58;
      var $628=$__vl57;
      var $629=Math.imul($627,$628);
      $__x254=$629;
      var $630=$__uh58;
      var $631=$__vh59;
      var $632=Math.imul($630,$631);
      $__x355=$632;
      var $633=$__x052;
      var $634=$633 >>> 16;
      var $635=$__x153;
      var $636=((($635)+($634))|0);
      $__x153=$636;
      var $637=$__x254;
      var $638=$__x153;
      var $639=((($638)+($637))|0);
      $__x153=$639;
      var $640=$__x153;
      var $641=$__x254;
      var $642=(($640)>>>0) < (($641)>>>0);
      if ($642) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $644=$__x355;
      var $645=((($644)+(65536))|0);
      $__x355=$645;
      label = 59; break;
    case 59: 
      var $647=$__x355;
      var $648=$__x153;
      var $649=$648 >>> 16;
      var $650=((($647)+($649))|0);
      var $651=$tmp;
      var $652=(($651+12)|0);
      HEAP32[(($652)>>2)]=$650;
      var $653=$__x153;
      var $654=$653 << 16;
      var $655=$__x052;
      var $656=$655 & 65535;
      var $657=((($654)+($656))|0);
      $t3=$657;
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $660=$t1;
      var $661=$t3;
      var $662=((($660)+($661))|0);
      $__x62=$662;
      var $663=$tmp;
      var $664=(($663+12)|0);
      var $665=HEAP32[(($664)>>2)];
      var $666=(($665)|0);
      var $667=$__x62;
      var $668=$t1;
      var $669=(($667)>>>0) < (($668)>>>0);
      var $670=(($669)&1);
      var $671=((($666)+($670))|0);
      var $672=$tmp;
      var $673=(($672+12)|0);
      HEAP32[(($673)>>2)]=$671;
      var $674=$__x62;
      $t1=$674;
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $677=$tmp;
      var $678=(($677+4)|0);
      var $679=HEAP32[(($678)>>2)];
      var $680=$t2;
      var $681=((($679)+($680))|0);
      $__x63=$681;
      var $682=$tmp;
      var $683=(($682+8)|0);
      var $684=HEAP32[(($683)>>2)];
      var $685=$t1;
      var $686=((($684)+($685))|0);
      var $687=$__x63;
      var $688=$tmp;
      var $689=(($688+4)|0);
      var $690=HEAP32[(($689)>>2)];
      var $691=(($687)>>>0) < (($690)>>>0);
      var $692=(($691)&1);
      var $693=((($686)+($692))|0);
      var $694=$tmp;
      var $695=(($694+8)|0);
      HEAP32[(($695)>>2)]=$693;
      var $696=$__x63;
      var $697=$tmp;
      var $698=(($697+4)|0);
      HEAP32[(($698)>>2)]=$696;
      label = 64; break;
    case 64: 
      var $700=$tmp;
      var $701=(($700+8)|0);
      var $702=HEAP32[(($701)>>2)];
      var $703=$t1;
      var $704=(($702)>>>0) < (($703)>>>0);
      var $705=(($704)&1);
      var $706=$tmp;
      var $707=(($706+12)|0);
      var $708=HEAP32[(($707)>>2)];
      var $709=((($708)+($705))|0);
      HEAP32[(($707)>>2)]=$709;
      var $710=$tmp;
      var $711=(($710+12)|0);
      var $712=HEAP32[(($711)>>2)];
      $b1=$712;
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $715=$b1;
      var $716=$715 >>> 31;
      $b1=$716;
      var $717=$k;
      var $718=$tn;
      var $719=((($717)-($718))|0);
      var $720=$tmp;
      var $721=(($720+($719<<2))|0);
      $tmp=$721;
      var $722=$b1;
      var $723=(($722)|0)==0;
      var $724=$723 ^ 1;
      var $725=$724 ^ 1;
      var $726=(($725)&1);
      var $727=($726);
      var $728=(($727)|0)!=0;
      if ($728) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $730=$tmp;
      var $731=$tmp;
      var $732=$tn;
      var $733=___gmpn_lshift($730, $731, $732, 1);
      label = 68; break;
    case 68: 
      label = 160; break;
    case 69: 
      var $736=$bn;
      var $737=$3;
      var $738=$4;
      var $739=(($737)|0)!=(($738)|0);
      var $740=$739 ? 8 : 20;
      $threshold=$740;
      var $741=(($736)|0) > (($740)|0);
      var $742=$741 ^ 1;
      var $743=$742 ^ 1;
      var $744=(($743)&1);
      var $745=($744);
      var $746=(($745)|0)!=0;
      if ($746) { label = 70; break; } else { label = 155; break; }
    case 70: 
      var $748=$3;
      var $749=(($748+12)|0);
      var $750=HEAP32[(($749)>>2)];
      $bp=$750;
      var $751=$4;
      var $752=(($751+12)|0);
      var $753=HEAP32[(($752)>>2)];
      $cp=$753;
      var $754=$threshold;
      var $755=(($754)|0) >= 1;
      var $756=$755 ^ 1;
      var $757=$756 ^ 1;
      var $758=(($757)&1);
      var $759=($758);
      var $760=(($759)|0)!=0;
      if ($760) { var $765 = 1;label = 72; break; } else { label = 71; break; }
    case 71: 
      _mpfr_assert_fail(((5248412)|0), 372, ((5249012)|0));
      var $762=(0);
      var $763=(($762)|0)!=0;
      var $765 = $763;label = 72; break;
    case 72: 
      var $765;
      var $766=(($765)&1);
      var $767=$bp;
      var $768=(($767)|0);
      var $769=HEAP32[(($768)>>2)];
      var $770=(($769)|0)==0;
      if ($770) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $772=$bp;
      var $773=(($772+4)|0);
      var $774=HEAP32[(($773)>>2)];
      var $775=(($774)|0)==0;
      if ($775) { var $789 = 1;label = 77; break; } else { label = 74; break; }
    case 74: 
      var $777=$cp;
      var $778=(($777)|0);
      var $779=HEAP32[(($778)>>2)];
      var $780=(($779)|0)==0;
      if ($780) { label = 75; break; } else { var $787 = 0;label = 76; break; }
    case 75: 
      var $782=$cp;
      var $783=(($782+4)|0);
      var $784=HEAP32[(($783)>>2)];
      var $785=(($784)|0)==0;
      var $787 = $785;label = 76; break;
    case 76: 
      var $787;
      var $789 = $787;label = 77; break;
    case 77: 
      var $789;
      var $790=$789 ^ 1;
      var $791=$790 ^ 1;
      var $792=(($791)&1);
      var $793=($792);
      var $794=(($793)|0)!=0;
      if ($794) { label = 78; break; } else { label = 87; break; }
    case 78: 
      var $796=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($796);
      label = 79; break;
    case 79: 
      var $798=$bp;
      var $799=HEAP32[(($798)>>2)];
      var $800=(($799)|0)==0;
      if ($800) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $802=$bp;
      var $803=(($802+4)|0);
      $bp=$803;
      var $804=$bn;
      var $805=((($804)-(1))|0);
      $bn=$805;
      label = 79; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $808=$cp;
      var $809=HEAP32[(($808)>>2)];
      var $810=(($809)|0)==0;
      if ($810) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $812=$cp;
      var $813=(($812+4)|0);
      $cp=$813;
      var $814=$cn;
      var $815=((($814)-(1))|0);
      $cn=$815;
      label = 82; break;
    case 84: 
      var $817=$3;
      var $818=(($817+4)|0);
      var $819=HEAP32[(($818)>>2)];
      var $820=(($b_tmp)|0);
      var $821=(($820+4)|0);
      HEAP32[(($821)>>2)]=$819;
      var $822=$3;
      var $823=(($822+8)|0);
      var $824=HEAP32[(($823)>>2)];
      var $825=(($b_tmp)|0);
      var $826=(($825+8)|0);
      HEAP32[(($826)>>2)]=$824;
      var $827=$bn;
      var $828=($827<<5);
      var $829=(($b_tmp)|0);
      var $830=(($829)|0);
      HEAP32[(($830)>>2)]=$828;
      var $831=$bp;
      var $832=(($b_tmp)|0);
      var $833=(($832+12)|0);
      HEAP32[(($833)>>2)]=$831;
      var $834=$3;
      var $835=$4;
      var $836=(($834)|0)!=(($835)|0);
      if ($836) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $838=$4;
      var $839=(($838+4)|0);
      var $840=HEAP32[(($839)>>2)];
      var $841=(($c_tmp)|0);
      var $842=(($841+4)|0);
      HEAP32[(($842)>>2)]=$840;
      var $843=$4;
      var $844=(($843+8)|0);
      var $845=HEAP32[(($844)>>2)];
      var $846=(($c_tmp)|0);
      var $847=(($846+8)|0);
      HEAP32[(($847)>>2)]=$845;
      var $848=$cn;
      var $849=($848<<5);
      var $850=(($c_tmp)|0);
      var $851=(($850)|0);
      HEAP32[(($851)>>2)]=$849;
      var $852=$cp;
      var $853=(($c_tmp)|0);
      var $854=(($853+12)|0);
      HEAP32[(($854)>>2)]=$852;
      var $855=$2;
      var $856=(($b_tmp)|0);
      var $857=(($c_tmp)|0);
      var $858=$5;
      var $859=_mpfr_mul($855, $856, $857, $858);
      $1=$859;
      label = 237; break;
    case 86: 
      var $861=$2;
      var $862=(($b_tmp)|0);
      var $863=(($b_tmp)|0);
      var $864=$5;
      var $865=_mpfr_mul($861, $862, $863, $864);
      $1=$865;
      label = 237; break;
    case 87: 
      var $867=$2;
      var $868=(($867)|0);
      var $869=HEAP32[(($868)>>2)];
      var $870=((($869)-(1))|0);
      var $871=((((($870)|0))/(32))&-1);
      var $872=((($871)+(1))|0);
      var $873=((($872)+(1))|0);
      $n=$873;
      var $874=$n;
      var $875=$cn;
      var $876=(($874)|0) < (($875)|0);
      if ($876) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $878=$n;
      var $882 = $878;label = 90; break;
    case 89: 
      var $880=$cn;
      var $882 = $880;label = 90; break;
    case 90: 
      var $882;
      $n=$882;
      var $883=$n;
      var $884=($883<<5);
      var $885=$n;
      var $886=((($885)+(2))|0);
      var $887=(($886)|0)==1;
      var $888=$887 ^ 1;
      var $889=$888 ^ 1;
      var $890=(($889)&1);
      var $891=($890);
      var $892=(($891)|0)!=0;
      if ($892) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $955 = 0;label = 102; break;
    case 92: 
      var $895=$n;
      var $896=((($895)+(2))|0);
      var $897=(($896)|0) > 1;
      var $898=$897 ^ 1;
      var $899=$898 ^ 1;
      var $900=(($899)&1);
      var $901=($900);
      var $902=(($901)|0)!=0;
      if ($902) { var $907 = 1;label = 94; break; } else { label = 93; break; }
    case 93: 
      _mpfr_assert_fail(((5248412)|0), 423, ((5248712)|0));
      var $904=(0);
      var $905=(($904)|0)!=0;
      var $907 = $905;label = 94; break;
    case 94: 
      var $907;
      var $908=(($907)&1);
      var $909=$n;
      var $910=((($909)+(2))|0);
      var $911=((($910)-(1))|0);
      $_limb=$911;
      var $912=$_limb;
      var $913=$n;
      var $914=((($913)+(2))|0);
      var $915=((($914)-(1))|0);
      var $916=(($912)|0)==(($915)|0);
      var $917=$916 ^ 1;
      var $918=$917 ^ 1;
      var $919=(($918)&1);
      var $920=($919);
      var $921=(($920)|0)!=0;
      if ($921) { var $926 = 1;label = 96; break; } else { label = 95; break; }
    case 95: 
      _mpfr_assert_fail(((5248412)|0), 423, ((5248552)|0));
      var $923=(0);
      var $924=(($923)|0)!=0;
      var $926 = $924;label = 96; break;
    case 96: 
      var $926;
      var $927=(($926)&1);
      label = 97; break;
    case 97: 
      var $929=$_limb;
      $__xr=$929;
      var $930=$__xr;
      var $931=(($930)>>>0) < 65536;
      if ($931) { label = 98; break; } else { label = 99; break; }
    case 98: 
      var $933=$__xr;
      var $934=(($933)>>>0) < 256;
      var $935=$934 ? 1 : 9;
      var $941 = $935;label = 100; break;
    case 99: 
      var $937=$__xr;
      var $938=(($937)>>>0) < 16777216;
      var $939=$938 ? 17 : 25;
      var $941 = $939;label = 100; break;
    case 100: 
      var $941;
      $__a=$941;
      var $942=$__a;
      var $943=(((33)-($942))|0);
      var $944=$__xr;
      var $945=$__a;
      var $946=$944 >>> (($945)>>>0);
      var $947=((5248192+$946)|0);
      var $948=HEAP8[($947)];
      var $949=(($948)&255);
      var $950=((($943)-($949))|0);
      $_b=$950;
      label = 101; break;
    case 101: 
      var $952=$_b;
      var $953=(((32)-($952))|0);
      var $955 = $953;label = 102; break;
    case 102: 
      var $955;
      var $956=((($884)-($955))|0);
      $p=$956;
      var $957=$bn;
      var $958=$n;
      var $959=((($957)-($958))|0);
      var $960=$bp;
      var $961=(($960+($959<<2))|0);
      $bp=$961;
      var $962=$cn;
      var $963=$n;
      var $964=((($962)-($963))|0);
      var $965=$cp;
      var $966=(($965+($964<<2))|0);
      $cp=$966;
      var $967=$2;
      var $968=(($967)|0);
      var $969=HEAP32[(($968)>>2)];
      var $970=$p;
      var $971=((($970)-(5))|0);
      var $972=(($969)|0) > (($971)|0);
      var $973=$972 ^ 1;
      var $974=$973 ^ 1;
      var $975=(($974)&1);
      var $976=($975);
      var $977=(($976)|0)!=0;
      if ($977) { label = 103; break; } else { label = 147; break; }
    case 103: 
      var $979=$2;
      var $980=(($979)|0);
      var $981=HEAP32[(($980)>>2)];
      var $982=$p;
      var $983=((($982)-(5))|0);
      var $984=((($983)+(32))|0);
      var $985=(($981)|0) > (($984)|0);
      if ($985) { var $992 = 1;label = 105; break; } else { label = 104; break; }
    case 104: 
      var $987=$bn;
      var $988=$threshold;
      var $989=((($988)+(1))|0);
      var $990=(($987)|0) <= (($989)|0);
      var $992 = $990;label = 105; break;
    case 105: 
      var $992;
      var $993=$992 ^ 1;
      var $994=$993 ^ 1;
      var $995=(($994)&1);
      var $996=($995);
      var $997=(($996)|0)!=0;
      if ($997) { label = 106; break; } else { label = 107; break; }
    case 106: 
      label = 156; break;
    case 107: 
      var $1000=$bn;
      var $1001=$n;
      var $1002=(($1000)|0) > (($1001)|0);
      if ($1002) { label = 108; break; } else { label = 109; break; }
    case 108: 
      var $1004=$bp;
      var $1005=((($1004)-(4))|0);
      $bp=$1005;
      label = 117; break;
    case 109: 
      var $1007=$n;
      var $1008=((($1007)+(1))|0);
      var $1009=($1008<<2);
      var $1010=(($1009)>>>0) < 16384;
      var $1011=$1010 ^ 1;
      var $1012=$1011 ^ 1;
      var $1013=(($1012)&1);
      var $1014=($1013);
      var $1015=(($1014)|0)!=0;
      if ($1015) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $1017=$n;
      var $1018=((($1017)+(1))|0);
      var $1019=($1018<<2);
      var $1020=STACKTOP;STACKTOP = (STACKTOP + $1019)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1027 = $1020;label = 112; break;
    case 111: 
      var $1022=$n;
      var $1023=((($1022)+(1))|0);
      var $1024=($1023<<2);
      var $1025=_mpfr_tmp_allocate($tmp_marker, $1024);
      var $1027 = $1025;label = 112; break;
    case 112: 
      var $1027;
      var $1028=$1027;
      $bp=$1028;
      var $1029=$bp;
      var $1030=(($1029)|0);
      HEAP32[(($1030)>>2)]=0;
      label = 113; break;
    case 113: 
      var $1032=$bp;
      var $1033=(($1032+4)|0);
      var $1034=$3;
      var $1035=(($1034+12)|0);
      var $1036=HEAP32[(($1035)>>2)];
      var $1037=$bn;
      var $1038=(($1036+($1037<<2))|0);
      var $1039=$n;
      var $1040=(((-$1039))|0);
      var $1041=(($1038+($1040<<2))|0);
      var $1042=(($1033)|0)!=(($1041)|0);
      if ($1042) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $1044=$bp;
      var $1045=(($1044+4)|0);
      var $1046=$1045;
      var $1047=$3;
      var $1048=(($1047+12)|0);
      var $1049=HEAP32[(($1048)>>2)];
      var $1050=$bn;
      var $1051=(($1049+($1050<<2))|0);
      var $1052=$n;
      var $1053=(((-$1052))|0);
      var $1054=(($1051+($1053<<2))|0);
      var $1055=$1054;
      var $1056=$n;
      var $1057=($1056<<2);
      assert($1057 % 1 === 0);_memcpy($1046, $1055, $1057);
      label = 115; break;
    case 115: 
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      var $1061=$3;
      var $1062=$4;
      var $1063=(($1061)|0)!=(($1062)|0);
      if ($1063) { label = 118; break; } else { label = 129; break; }
    case 118: 
      var $1065=$cn;
      var $1066=$n;
      var $1067=(($1065)|0) > (($1066)|0);
      if ($1067) { label = 119; break; } else { label = 120; break; }
    case 119: 
      var $1069=$cp;
      var $1070=((($1069)-(4))|0);
      $cp=$1070;
      label = 128; break;
    case 120: 
      var $1072=$n;
      var $1073=((($1072)+(1))|0);
      var $1074=($1073<<2);
      var $1075=(($1074)>>>0) < 16384;
      var $1076=$1075 ^ 1;
      var $1077=$1076 ^ 1;
      var $1078=(($1077)&1);
      var $1079=($1078);
      var $1080=(($1079)|0)!=0;
      if ($1080) { label = 121; break; } else { label = 122; break; }
    case 121: 
      var $1082=$n;
      var $1083=((($1082)+(1))|0);
      var $1084=($1083<<2);
      var $1085=STACKTOP;STACKTOP = (STACKTOP + $1084)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1092 = $1085;label = 123; break;
    case 122: 
      var $1087=$n;
      var $1088=((($1087)+(1))|0);
      var $1089=($1088<<2);
      var $1090=_mpfr_tmp_allocate($tmp_marker, $1089);
      var $1092 = $1090;label = 123; break;
    case 123: 
      var $1092;
      var $1093=$1092;
      $cp=$1093;
      var $1094=$cp;
      var $1095=(($1094)|0);
      HEAP32[(($1095)>>2)]=0;
      label = 124; break;
    case 124: 
      var $1097=$cp;
      var $1098=(($1097+4)|0);
      var $1099=$4;
      var $1100=(($1099+12)|0);
      var $1101=HEAP32[(($1100)>>2)];
      var $1102=$cn;
      var $1103=(($1101+($1102<<2))|0);
      var $1104=$n;
      var $1105=(((-$1104))|0);
      var $1106=(($1103+($1105<<2))|0);
      var $1107=(($1098)|0)!=(($1106)|0);
      if ($1107) { label = 125; break; } else { label = 126; break; }
    case 125: 
      var $1109=$cp;
      var $1110=(($1109+4)|0);
      var $1111=$1110;
      var $1112=$4;
      var $1113=(($1112+12)|0);
      var $1114=HEAP32[(($1113)>>2)];
      var $1115=$cn;
      var $1116=(($1114+($1115<<2))|0);
      var $1117=$n;
      var $1118=(((-$1117))|0);
      var $1119=(($1116+($1118<<2))|0);
      var $1120=$1119;
      var $1121=$n;
      var $1122=($1121<<2);
      assert($1122 % 1 === 0);_memcpy($1111, $1120, $1122);
      label = 126; break;
    case 126: 
      label = 127; break;
    case 127: 
      label = 128; break;
    case 128: 
      label = 129; break;
    case 129: 
      var $1127=$n;
      var $1128=((($1127)+(1))|0);
      $n=$1128;
      var $1129=$n;
      var $1130=($1129<<5);
      var $1131=$n;
      var $1132=((($1131)+(2))|0);
      var $1133=(($1132)|0)==1;
      var $1134=$1133 ^ 1;
      var $1135=$1134 ^ 1;
      var $1136=(($1135)&1);
      var $1137=($1136);
      var $1138=(($1137)|0)!=0;
      if ($1138) { label = 130; break; } else { label = 131; break; }
    case 130: 
      var $1201 = 0;label = 141; break;
    case 131: 
      var $1141=$n;
      var $1142=((($1141)+(2))|0);
      var $1143=(($1142)|0) > 1;
      var $1144=$1143 ^ 1;
      var $1145=$1144 ^ 1;
      var $1146=(($1145)&1);
      var $1147=($1146);
      var $1148=(($1147)|0)!=0;
      if ($1148) { var $1153 = 1;label = 133; break; } else { label = 132; break; }
    case 132: 
      _mpfr_assert_fail(((5248412)|0), 463, ((5248712)|0));
      var $1150=(0);
      var $1151=(($1150)|0)!=0;
      var $1153 = $1151;label = 133; break;
    case 133: 
      var $1153;
      var $1154=(($1153)&1);
      var $1155=$n;
      var $1156=((($1155)+(2))|0);
      var $1157=((($1156)-(1))|0);
      $_limb65=$1157;
      var $1158=$_limb65;
      var $1159=$n;
      var $1160=((($1159)+(2))|0);
      var $1161=((($1160)-(1))|0);
      var $1162=(($1158)|0)==(($1161)|0);
      var $1163=$1162 ^ 1;
      var $1164=$1163 ^ 1;
      var $1165=(($1164)&1);
      var $1166=($1165);
      var $1167=(($1166)|0)!=0;
      if ($1167) { var $1172 = 1;label = 135; break; } else { label = 134; break; }
    case 134: 
      _mpfr_assert_fail(((5248412)|0), 463, ((5248552)|0));
      var $1169=(0);
      var $1170=(($1169)|0)!=0;
      var $1172 = $1170;label = 135; break;
    case 135: 
      var $1172;
      var $1173=(($1172)&1);
      label = 136; break;
    case 136: 
      var $1175=$_limb65;
      $__xr66=$1175;
      var $1176=$__xr66;
      var $1177=(($1176)>>>0) < 65536;
      if ($1177) { label = 137; break; } else { label = 138; break; }
    case 137: 
      var $1179=$__xr66;
      var $1180=(($1179)>>>0) < 256;
      var $1181=$1180 ? 1 : 9;
      var $1187 = $1181;label = 139; break;
    case 138: 
      var $1183=$__xr66;
      var $1184=(($1183)>>>0) < 16777216;
      var $1185=$1184 ? 17 : 25;
      var $1187 = $1185;label = 139; break;
    case 139: 
      var $1187;
      $__a67=$1187;
      var $1188=$__a67;
      var $1189=(((33)-($1188))|0);
      var $1190=$__xr66;
      var $1191=$__a67;
      var $1192=$1190 >>> (($1191)>>>0);
      var $1193=((5248192+$1192)|0);
      var $1194=HEAP8[($1193)];
      var $1195=(($1194)&255);
      var $1196=((($1189)-($1195))|0);
      $_b64=$1196;
      label = 140; break;
    case 140: 
      var $1198=$_b64;
      var $1199=(((32)-($1198))|0);
      var $1201 = $1199;label = 141; break;
    case 141: 
      var $1201;
      var $1202=((($1130)-($1201))|0);
      $p=$1202;
      var $1203=$k;
      var $1204=$n;
      var $1205=($1204<<1);
      var $1206=(($1203)|0) < (($1205)|0);
      var $1207=$1206 ^ 1;
      var $1208=$1207 ^ 1;
      var $1209=(($1208)&1);
      var $1210=($1209);
      var $1211=(($1210)|0)!=0;
      if ($1211) { label = 142; break; } else { label = 146; break; }
    case 142: 
      var $1213=$n;
      var $1214=($1213<<1);
      var $1215=($1214<<2);
      var $1216=(($1215)>>>0) < 16384;
      var $1217=$1216 ^ 1;
      var $1218=$1217 ^ 1;
      var $1219=(($1218)&1);
      var $1220=($1219);
      var $1221=(($1220)|0)!=0;
      if ($1221) { label = 143; break; } else { label = 144; break; }
    case 143: 
      var $1223=$n;
      var $1224=($1223<<1);
      var $1225=($1224<<2);
      var $1226=STACKTOP;STACKTOP = (STACKTOP + $1225)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1233 = $1226;label = 145; break;
    case 144: 
      var $1228=$n;
      var $1229=($1228<<1);
      var $1230=($1229<<2);
      var $1231=_mpfr_tmp_allocate($tmp_marker, $1230);
      var $1233 = $1231;label = 145; break;
    case 145: 
      var $1233;
      var $1234=$1233;
      $tmp=$1234;
      var $1235=$n;
      var $1236=($1235<<1);
      var $1237=$k;
      var $1238=((($1236)-($1237))|0);
      var $1239=$tmp;
      var $1240=(($1239+($1238<<2))|0);
      $tmp=$1240;
      label = 146; break;
    case 146: 
      label = 147; break;
    case 147: 
      var $1243=$3;
      var $1244=$4;
      var $1245=(($1243)|0)!=(($1244)|0);
      if ($1245) { label = 148; break; } else { label = 149; break; }
    case 148: 
      var $1247=$tmp;
      var $1248=$k;
      var $1249=(($1247+($1248<<2))|0);
      var $1250=$n;
      var $1251=($1250<<1);
      var $1252=(((-$1251))|0);
      var $1253=(($1249+($1252<<2))|0);
      var $1254=$bp;
      var $1255=$cp;
      var $1256=$n;
      _mpfr_mulhigh_n($1253, $1254, $1255, $1256);
      label = 150; break;
    case 149: 
      var $1258=$tmp;
      var $1259=$k;
      var $1260=(($1258+($1259<<2))|0);
      var $1261=$n;
      var $1262=($1261<<1);
      var $1263=(((-$1262))|0);
      var $1264=(($1260+($1263<<2))|0);
      var $1265=$bp;
      var $1266=$n;
      _mpfr_sqrhigh_n($1264, $1265, $1266);
      label = 150; break;
    case 150: 
      var $1268=$k;
      var $1269=((($1268)-(1))|0);
      var $1270=$tmp;
      var $1271=(($1270+($1269<<2))|0);
      var $1272=HEAP32[(($1271)>>2)];
      var $1273=$1272 >>> 31;
      $b1=$1273;
      var $1274=$b1;
      var $1275=(($1274)|0)==0;
      var $1276=$1275 ^ 1;
      var $1277=$1276 ^ 1;
      var $1278=(($1277)&1);
      var $1279=($1278);
      var $1280=(($1279)|0)!=0;
      if ($1280) { label = 151; break; } else { label = 152; break; }
    case 151: 
      var $1282=$tmp;
      var $1283=$k;
      var $1284=(($1282+($1283<<2))|0);
      var $1285=$n;
      var $1286=(((-$1285))|0);
      var $1287=(($1284+($1286<<2))|0);
      var $1288=((($1287)-(4))|0);
      var $1289=$tmp;
      var $1290=$k;
      var $1291=(($1289+($1290<<2))|0);
      var $1292=$n;
      var $1293=(((-$1292))|0);
      var $1294=(($1291+($1293<<2))|0);
      var $1295=((($1294)-(4))|0);
      var $1296=$n;
      var $1297=((($1296)+(1))|0);
      var $1298=___gmpn_lshift($1288, $1295, $1297, 1);
      label = 152; break;
    case 152: 
      var $1300=$k;
      var $1301=$tn;
      var $1302=((($1300)-($1301))|0);
      var $1303=$tmp;
      var $1304=(($1303+($1302<<2))|0);
      $tmp=$1304;
      var $1305=$tmp;
      var $1306=$tn;
      var $1307=$p;
      var $1308=$b1;
      var $1309=((($1307)+($1308))|0);
      var $1310=((($1309)-(1))|0);
      var $1311=$2;
      var $1312=(($1311)|0);
      var $1313=HEAP32[(($1312)>>2)];
      var $1314=$5;
      var $1315=(($1314)|0)==0;
      var $1316=(($1315)&1);
      var $1317=((($1313)+($1316))|0);
      var $1318=_mpfr_round_p($1305, $1306, $1310, $1317);
      var $1319=(($1318)|0)!=0;
      var $1320=$1319 ^ 1;
      var $1321=$1320 ^ 1;
      var $1322=$1321 ^ 1;
      var $1323=(($1322)&1);
      var $1324=($1323);
      var $1325=(($1324)|0)!=0;
      if ($1325) { label = 153; break; } else { label = 154; break; }
    case 153: 
      var $1327=$k;
      var $1328=$tn;
      var $1329=((($1327)-($1328))|0);
      var $1330=$tmp;
      var $1331=(((-$1329))|0);
      var $1332=(($1330+($1331<<2))|0);
      $tmp=$1332;
      label = 156; break;
    case 154: 
      label = 159; break;
    case 155: 
      label = 156; break;
    case 156: 
      var $1336=$tmp;
      var $1337=$3;
      var $1338=(($1337+12)|0);
      var $1339=HEAP32[(($1338)>>2)];
      var $1340=$bn;
      var $1341=$4;
      var $1342=(($1341+12)|0);
      var $1343=HEAP32[(($1342)>>2)];
      var $1344=$cn;
      var $1345=___gmpn_mul($1336, $1339, $1340, $1343, $1344);
      $b1=$1345;
      var $1346=$b1;
      var $1347=$1346 >>> 31;
      $b1=$1347;
      var $1348=$k;
      var $1349=$tn;
      var $1350=((($1348)-($1349))|0);
      var $1351=$tmp;
      var $1352=(($1351+($1350<<2))|0);
      $tmp=$1352;
      var $1353=$b1;
      var $1354=(($1353)|0)==0;
      var $1355=$1354 ^ 1;
      var $1356=$1355 ^ 1;
      var $1357=(($1356)&1);
      var $1358=($1357);
      var $1359=(($1358)|0)!=0;
      if ($1359) { label = 157; break; } else { label = 158; break; }
    case 157: 
      var $1361=$tmp;
      var $1362=$tmp;
      var $1363=$tn;
      var $1364=___gmpn_lshift($1361, $1362, $1363, 1);
      label = 158; break;
    case 158: 
      label = 159; break;
    case 159: 
      label = 160; break;
    case 160: 
      var $1368=$ax;
      var $1369=$b1;
      var $1370=((($1369)-(1))|0);
      var $1371=((($1368)+($1370))|0);
      $ax2=$1371;
      label = 161; break;
    case 161: 
      var $1373=$bq;
      var $1374=$cq;
      var $1375=((($1373)+($1374))|0);
      $_srcprec=$1375;
      var $1376=$2;
      var $1377=(($1376)|0);
      var $1378=HEAP32[(($1377)>>2)];
      $_destprec=$1378;
      var $1379=$2;
      var $1380=(($1379+12)|0);
      var $1381=HEAP32[(($1380)>>2)];
      $_destp=$1381;
      var $1382=$_destprec;
      var $1383=$_srcprec;
      var $1384=(($1382)|0) >= (($1383)|0);
      var $1385=$1384 ^ 1;
      var $1386=$1385 ^ 1;
      var $1387=(($1386)&1);
      var $1388=($1387);
      var $1389=(($1388)|0)!=0;
      if ($1389) { label = 162; break; } else { label = 167; break; }
    case 162: 
      var $1391=$_srcprec;
      var $1392=((($1391)-(1))|0);
      var $1393=((((($1392)|0))/(32))&-1);
      var $1394=((($1393)+(1))|0);
      $_srcs=$1394;
      var $1395=$_destprec;
      var $1396=((($1395)-(1))|0);
      var $1397=((((($1396)|0))/(32))&-1);
      var $1398=((($1397)+(1))|0);
      var $1399=$_srcs;
      var $1400=((($1398)-($1399))|0);
      $_dests=$1400;
      label = 163; break;
    case 163: 
      var $1402=$_destp;
      var $1403=$_dests;
      var $1404=(($1402+($1403<<2))|0);
      var $1405=$tmp;
      var $1406=(($1404)|0)!=(($1405)|0);
      if ($1406) { label = 164; break; } else { label = 165; break; }
    case 164: 
      var $1408=$_destp;
      var $1409=$_dests;
      var $1410=(($1408+($1409<<2))|0);
      var $1411=$1410;
      var $1412=$tmp;
      var $1413=$1412;
      var $1414=$_srcs;
      var $1415=($1414<<2);
      assert($1415 % 1 === 0);_memcpy($1411, $1413, $1415);
      label = 165; break;
    case 165: 
      label = 166; break;
    case 166: 
      var $1418=$_destp;
      var $1419=$1418;
      var $1420=$_dests;
      var $1421=($1420<<2);
      _memset($1419, 0, $1421);
      $inexact=0;
      label = 223; break;
    case 167: 
      var $1423=$_srcprec;
      var $1424=((($1423)-(1))|0);
      var $1425=((((($1424)|0))/(32))&-1);
      var $1426=((($1425)+(1))|0);
      $_srcs=$1426;
      var $1427=$_destprec;
      var $1428=((($1427)-(1))|0);
      var $1429=((((($1428)|0))/(32))&-1);
      var $1430=((($1429)+(1))|0);
      $_dests=$1430;
      label = 168; break;
    case 168: 
      var $1432=$_destprec;
      var $1433=(((-$1432))|0);
      var $1434=((($1433)>>>0))%(32);
      $_sh=$1434;
      label = 169; break;
    case 169: 
      var $1436=$tmp;
      var $1437=$_srcs;
      var $1438=(($1436+($1437<<2))|0);
      var $1439=$_dests;
      var $1440=(((-$1439))|0);
      var $1441=(($1438+($1440<<2))|0);
      $_sp=$1441;
      var $1442=$_sh;
      var $1443=(($1442)|0)!=0;
      var $1444=$1443 ^ 1;
      var $1445=$1444 ^ 1;
      var $1446=(($1445)&1);
      var $1447=($1446);
      var $1448=(($1447)|0)!=0;
      if ($1448) { label = 170; break; } else { label = 181; break; }
    case 170: 
      var $1450=$_sh;
      var $1451=((($1450)-(1))|0);
      var $1452=1 << $1451;
      $_mask=$1452;
      var $1453=$_sp;
      var $1454=(($1453)|0);
      var $1455=HEAP32[(($1454)>>2)];
      var $1456=$_mask;
      var $1457=$1455 & $1456;
      $_rb=$1457;
      var $1458=$_sp;
      var $1459=(($1458)|0);
      var $1460=HEAP32[(($1459)>>2)];
      var $1461=$_mask;
      var $1462=((($1461)-(1))|0);
      var $1463=$1460 & $1462;
      $_sb=$1463;
      var $1464=$_sb;
      var $1465=(($1464)|0)==0;
      var $1466=$1465 ^ 1;
      var $1467=$1466 ^ 1;
      var $1468=(($1467)&1);
      var $1469=($1468);
      var $1470=(($1469)|0)!=0;
      if ($1470) { label = 171; break; } else { label = 180; break; }
    case 171: 
      var $1472=$5;
      var $1473=(($1472)|0)==0;
      if ($1473) { label = 173; break; } else { label = 172; break; }
    case 172: 
      var $1475=$_rb;
      var $1476=(($1475)|0)==0;
      if ($1476) { label = 173; break; } else { label = 180; break; }
    case 173: 
      var $1478=$_sp;
      $_tmp=$1478;
      var $1479=$_srcs;
      var $1480=$_dests;
      var $1481=((($1479)-($1480))|0);
      $_n=$1481;
      label = 174; break;
    case 174: 
      var $1483=$_n;
      var $1484=(($1483)|0)!=0;
      if ($1484) { label = 175; break; } else { var $1489 = 0;label = 176; break; }
    case 175: 
      var $1486=$_sb;
      var $1487=(($1486)|0)==0;
      var $1489 = $1487;label = 176; break;
    case 176: 
      var $1489;
      if ($1489) { label = 177; break; } else { label = 179; break; }
    case 177: 
      var $1491=$_tmp;
      var $1492=((($1491)-(4))|0);
      $_tmp=$1492;
      var $1493=HEAP32[(($1492)>>2)];
      $_sb=$1493;
      label = 178; break;
    case 178: 
      var $1495=$_n;
      var $1496=((($1495)-(1))|0);
      $_n=$1496;
      label = 174; break;
    case 179: 
      label = 180; break;
    case 180: 
      var $1499=$_mask;
      var $1500=($1499<<1);
      $_ulp=$1500;
      label = 192; break;
    case 181: 
      var $1502=$_sp;
      var $1503=((($1502)-(4))|0);
      var $1504=HEAP32[(($1503)>>2)];
      var $1505=$1504 & -2147483648;
      $_rb=$1505;
      var $1506=$_sp;
      var $1507=((($1506)-(4))|0);
      var $1508=HEAP32[(($1507)>>2)];
      var $1509=$1508 & 2147483647;
      $_sb=$1509;
      var $1510=$_sb;
      var $1511=(($1510)|0)==0;
      var $1512=$1511 ^ 1;
      var $1513=$1512 ^ 1;
      var $1514=(($1513)&1);
      var $1515=($1514);
      var $1516=(($1515)|0)!=0;
      if ($1516) { label = 182; break; } else { label = 191; break; }
    case 182: 
      var $1518=$5;
      var $1519=(($1518)|0)==0;
      if ($1519) { label = 184; break; } else { label = 183; break; }
    case 183: 
      var $1521=$_rb;
      var $1522=(($1521)|0)==0;
      if ($1522) { label = 184; break; } else { label = 191; break; }
    case 184: 
      var $1524=$_sp;
      var $1525=((($1524)-(4))|0);
      $_tmp68=$1525;
      var $1526=$_srcs;
      var $1527=$_dests;
      var $1528=((($1526)-($1527))|0);
      var $1529=((($1528)-(1))|0);
      $_n69=$1529;
      label = 185; break;
    case 185: 
      var $1531=$_n69;
      var $1532=(($1531)|0)!=0;
      if ($1532) { label = 186; break; } else { var $1537 = 0;label = 187; break; }
    case 186: 
      var $1534=$_sb;
      var $1535=(($1534)|0)==0;
      var $1537 = $1535;label = 187; break;
    case 187: 
      var $1537;
      if ($1537) { label = 188; break; } else { label = 190; break; }
    case 188: 
      var $1539=$_tmp68;
      var $1540=((($1539)-(4))|0);
      $_tmp68=$1540;
      var $1541=HEAP32[(($1540)>>2)];
      $_sb=$1541;
      label = 189; break;
    case 189: 
      var $1543=$_n69;
      var $1544=((($1543)-(1))|0);
      $_n69=$1544;
      label = 185; break;
    case 190: 
      label = 191; break;
    case 191: 
      $_ulp=1;
      label = 192; break;
    case 192: 
      var $1548=$5;
      var $1549=(($1548)|0)==0;
      var $1550=$1549 ^ 1;
      var $1551=$1550 ^ 1;
      var $1552=(($1551)&1);
      var $1553=($1552);
      var $1554=(($1553)|0)!=0;
      if ($1554) { label = 193; break; } else { label = 215; break; }
    case 193: 
      var $1556=$_rb;
      var $1557=(($1556)|0)==0;
      if ($1557) { label = 194; break; } else { label = 204; break; }
    case 194: 
      label = 195; break;
    case 195: 
      var $1560=$_sb;
      var $1561=$_rb;
      var $1562=$1560 | $1561;
      var $1563=(($1562)|0)!=0;
      var $1564=$1563 ^ 1;
      var $1565=$1564 ^ 1;
      var $1566=(($1565)&1);
      var $1567=($1566);
      var $1568=(($1567)|0)!=0;
      if ($1568) { label = 196; break; } else { label = 197; break; }
    case 196: 
      var $1570=$sign;
      var $1571=(((-$1570))|0);
      var $1574 = $1571;label = 198; break;
    case 197: 
      var $1574 = 0;label = 198; break;
    case 198: 
      var $1574;
      $inexact=$1574;
      label = 199; break;
    case 199: 
      label = 200; break;
    case 200: 
      var $1577=$_destp;
      var $1578=$_sp;
      var $1579=(($1577)|0)!=(($1578)|0);
      if ($1579) { label = 201; break; } else { label = 202; break; }
    case 201: 
      var $1581=$_destp;
      var $1582=$1581;
      var $1583=$_sp;
      var $1584=$1583;
      var $1585=$_dests;
      var $1586=($1585<<2);
      assert($1586 % 1 === 0);_memcpy($1582, $1584, $1586);
      label = 202; break;
    case 202: 
      label = 203; break;
    case 203: 
      var $1589=$_ulp;
      var $1590=((($1589)-(1))|0);
      var $1591=$1590 ^ -1;
      var $1592=$_destp;
      var $1593=(($1592)|0);
      var $1594=HEAP32[(($1593)>>2)];
      var $1595=$1594 & $1591;
      HEAP32[(($1593)>>2)]=$1595;
      label = 214; break;
    case 204: 
      var $1597=$_sb;
      var $1598=(($1597)|0)==0;
      var $1599=$1598 ^ 1;
      var $1600=$1599 ^ 1;
      var $1601=(($1600)&1);
      var $1602=($1601);
      var $1603=(($1602)|0)!=0;
      if ($1603) { label = 205; break; } else { label = 208; break; }
    case 205: 
      var $1605=$_sp;
      var $1606=(($1605)|0);
      var $1607=HEAP32[(($1606)>>2)];
      var $1608=$_ulp;
      var $1609=$1607 & $1608;
      var $1610=(($1609)|0)==0;
      if ($1610) { label = 206; break; } else { label = 207; break; }
    case 206: 
      var $1612=$sign;
      var $1613=(((-$1612))|0);
      $inexact=$1613;
      label = 199; break;
    case 207: 
      label = 209; break;
    case 208: 
      label = 209; break;
    case 209: 
      var $1617=$sign;
      $inexact=$1617;
      label = 210; break;
    case 210: 
      var $1619=$_destp;
      var $1620=$_sp;
      var $1621=$_dests;
      var $1622=$_ulp;
      var $1623=___gmpn_add_1($1619, $1620, $1621, $1622);
      var $1624=(($1623)|0)!=0;
      var $1625=$1624 ^ 1;
      var $1626=$1625 ^ 1;
      var $1627=(($1626)&1);
      var $1628=($1627);
      var $1629=(($1628)|0)!=0;
      if ($1629) { label = 211; break; } else { label = 212; break; }
    case 211: 
      var $1631=$_dests;
      var $1632=((($1631)-(1))|0);
      var $1633=$_destp;
      var $1634=(($1633+($1632<<2))|0);
      HEAP32[(($1634)>>2)]=-2147483648;
      var $1635=$ax2;
      var $1636=((($1635)+(1))|0);
      $ax2=$1636;
      label = 212; break;
    case 212: 
      var $1638=$_ulp;
      var $1639=((($1638)-(1))|0);
      var $1640=$1639 ^ -1;
      var $1641=$_destp;
      var $1642=(($1641)|0);
      var $1643=HEAP32[(($1642)>>2)];
      var $1644=$1643 & $1640;
      HEAP32[(($1642)>>2)]=$1644;
      label = 213; break;
    case 213: 
      label = 214; break;
    case 214: 
      label = 222; break;
    case 215: 
      var $1648=$5;
      var $1649=(($1648)|0)==1;
      if ($1649) { var $1658 = 1;label = 217; break; } else { label = 216; break; }
    case 216: 
      var $1651=$5;
      var $1652=$sign;
      var $1653=(($1652)|0) < 0;
      var $1654=(($1653)&1);
      var $1655=((($1651)+($1654))|0);
      var $1656=(($1655)|0)==3;
      var $1658 = $1656;label = 217; break;
    case 217: 
      var $1658;
      var $1659=$1658 ^ 1;
      var $1660=$1659 ^ 1;
      var $1661=(($1660)&1);
      var $1662=($1661);
      var $1663=(($1662)|0)!=0;
      if ($1663) { label = 218; break; } else { label = 219; break; }
    case 218: 
      label = 195; break;
    case 219: 
      var $1666=$_sb;
      var $1667=$_rb;
      var $1668=$1666 | $1667;
      var $1669=(($1668)|0)==0;
      var $1670=$1669 ^ 1;
      var $1671=$1670 ^ 1;
      var $1672=(($1671)&1);
      var $1673=($1672);
      var $1674=(($1673)|0)!=0;
      if ($1674) { label = 220; break; } else { label = 221; break; }
    case 220: 
      $inexact=0;
      label = 199; break;
    case 221: 
      label = 209; break;
    case 222: 
      label = 223; break;
    case 223: 
      label = 224; break;
    case 224: 
      var $1680=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($1680);
      var $1681=$ax2;
      var $1682=$2;
      var $1683=(($1682+8)|0);
      HEAP32[(($1683)>>2)]=$1681;
      var $1684=$sign;
      var $1685=$2;
      var $1686=(($1685+4)|0);
      HEAP32[(($1686)>>2)]=$1684;
      var $1687=$ax2;
      var $1688=HEAP32[((5257656)>>2)];
      var $1689=(($1687)|0) > (($1688)|0);
      var $1690=$1689 ^ 1;
      var $1691=$1690 ^ 1;
      var $1692=(($1691)&1);
      var $1693=($1692);
      var $1694=(($1693)|0)!=0;
      if ($1694) { label = 225; break; } else { label = 226; break; }
    case 225: 
      var $1696=$2;
      var $1697=$5;
      var $1698=$sign;
      var $1699=_mpfr_overflow($1696, $1697, $1698);
      $1=$1699;
      label = 237; break;
    case 226: 
      var $1701=$ax2;
      var $1702=HEAP32[((5257652)>>2)];
      var $1703=(($1701)|0) < (($1702)|0);
      var $1704=$1703 ^ 1;
      var $1705=$1704 ^ 1;
      var $1706=(($1705)&1);
      var $1707=($1706);
      var $1708=(($1707)|0)!=0;
      if ($1708) { label = 227; break; } else { label = 233; break; }
    case 227: 
      var $1710=$5;
      var $1711=(($1710)|0)==0;
      if ($1711) { label = 228; break; } else { label = 232; break; }
    case 228: 
      var $1713=$ax;
      var $1714=$b1;
      var $1715=((($1713)+($1714))|0);
      var $1716=HEAP32[((5257652)>>2)];
      var $1717=(($1715)|0) < (($1716)|0);
      if ($1717) { label = 231; break; } else { label = 229; break; }
    case 229: 
      var $1719=$3;
      var $1720=_mpfr_powerof2_raw($1719);
      var $1721=(($1720)|0)!=0;
      if ($1721) { label = 230; break; } else { label = 232; break; }
    case 230: 
      var $1723=$4;
      var $1724=_mpfr_powerof2_raw($1723);
      var $1725=(($1724)|0)!=0;
      if ($1725) { label = 231; break; } else { label = 232; break; }
    case 231: 
      $5=1;
      label = 232; break;
    case 232: 
      var $1728=$2;
      var $1729=$5;
      var $1730=$sign;
      var $1731=_mpfr_underflow($1728, $1729, $1730);
      $1=$1731;
      label = 237; break;
    case 233: 
      var $1733=$inexact;
      var $1734=(($1733)|0)!=0;
      if ($1734) { label = 234; break; } else { label = 235; break; }
    case 234: 
      var $1736=HEAP32[((5257648)>>2)];
      var $1737=$1736 | 8;
      HEAP32[((5257648)>>2)]=$1737;
      var $1738=$inexact;
      var $1741 = $1738;label = 236; break;
    case 235: 
      var $1741 = 0;label = 236; break;
    case 236: 
      var $1741;
      $1=$1741;
      label = 237; break;
    case 237: 
      var $1743=$1;
      STACKTOP = __stackBase__;
      return $1743;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_mul["X"]=1;

function _mpfr_mul_ui($y, $x, $u, $rnd_mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $yp;
      var $xn;
      var $cnt;
      var $inexact;
      var $tmp_marker=__stackBase__;
      var $_b;
      var $_limb;
      var $__xr;
      var $__a;
      var $__xr1;
      var $__a2;
      var $_dests;
      var $_srcs;
      var $_destp;
      var $_destprec;
      var $_srcprec;
      var $_sh;
      var $_sp;
      var $_rb;
      var $_sb;
      var $_ulp;
      var $_mask;
      var $_tmp;
      var $_n;
      var $_tmp3;
      var $_n4;
      $2=$y;
      $3=$x;
      $4=$u;
      $5=$rnd_mode;
      var $6=$3;
      var $7=(($6+8)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(($8)|0) <= -2147483645;
      var $10=$9 ^ 1;
      var $11=$10 ^ 1;
      var $12=(($11)&1);
      var $13=($12);
      var $14=(($13)|0)!=0;
      if ($14) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $16=$3;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=(($18)|0)==-2147483646;
      if ($19) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $21=$2;
      var $22=(($21+8)|0);
      HEAP32[(($22)>>2)]=-2147483646;
      var $23=HEAP32[((5257648)>>2)];
      var $24=$23 | 4;
      HEAP32[((5257648)>>2)]=$24;
      $1=0;
      label = 112; break;
    case 5: 
      var $26=$3;
      var $27=(($26+8)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=(($28)|0)==-2147483645;
      if ($29) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $31=$4;
      var $32=(($31)|0)!=0;
      if ($32) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $34=$2;
      var $35=(($34+8)|0);
      HEAP32[(($35)>>2)]=-2147483645;
      var $36=$3;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$2;
      var $40=(($39+4)|0);
      HEAP32[(($40)>>2)]=$38;
      $1=0;
      label = 112; break;
    case 8: 
      var $42=$2;
      var $43=(($42+8)|0);
      HEAP32[(($43)>>2)]=-2147483646;
      var $44=HEAP32[((5257648)>>2)];
      var $45=$44 | 4;
      HEAP32[((5257648)>>2)]=$45;
      $1=0;
      label = 112; break;
    case 9: 
      var $47=$2;
      var $48=(($47+8)|0);
      HEAP32[(($48)>>2)]=-2147483647;
      var $49=$3;
      var $50=(($49+4)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$2;
      var $53=(($52+4)|0);
      HEAP32[(($53)>>2)]=$51;
      $1=0;
      label = 112; break;
    case 10: 
      var $55=$4;
      var $56=(($55)>>>0) <= 1;
      var $57=$56 ^ 1;
      var $58=$57 ^ 1;
      var $59=(($58)&1);
      var $60=($59);
      var $61=(($60)|0)!=0;
      if ($61) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $63=$4;
      var $64=(($63)>>>0) < 1;
      if ($64) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $66=$2;
      var $67=(($66+8)|0);
      HEAP32[(($67)>>2)]=-2147483647;
      var $68=$3;
      var $69=(($68+4)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$2;
      var $72=(($71+4)|0);
      HEAP32[(($72)>>2)]=$70;
      $1=0;
      label = 112; break;
    case 13: 
      var $74=$2;
      var $75=$3;
      var $76=$5;
      var $77=$3;
      var $78=(($77+4)|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=_mpfr_set4($74, $75, $76, $79);
      $1=$80;
      label = 112; break;
    case 14: 
      var $82=$4;
      var $83=$4;
      var $84=((($83)-(1))|0);
      var $85=$82 & $84;
      var $86=(($85)|0)==0;
      var $87=$86 ^ 1;
      var $88=$87 ^ 1;
      var $89=(($88)&1);
      var $90=($89);
      var $91=(($90)|0)!=0;
      if ($91) { label = 15; break; } else { label = 28; break; }
    case 15: 
      var $93=$2;
      var $94=$3;
      var $95=$4;
      var $96=(($95)|0)==1;
      var $97=$96 ^ 1;
      var $98=$97 ^ 1;
      var $99=(($98)&1);
      var $100=($99);
      var $101=(($100)|0)!=0;
      if ($101) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $161 = 0;label = 27; break;
    case 17: 
      var $104=$4;
      var $105=(($104)>>>0) > 1;
      var $106=$105 ^ 1;
      var $107=$106 ^ 1;
      var $108=(($107)&1);
      var $109=($108);
      var $110=(($109)|0)!=0;
      if ($110) { var $115 = 1;label = 19; break; } else { label = 18; break; }
    case 18: 
      _mpfr_assert_fail(((5248392)|0), 76, ((5249324)|0));
      var $112=(0);
      var $113=(($112)|0)!=0;
      var $115 = $113;label = 19; break;
    case 19: 
      var $115;
      var $116=(($115)&1);
      var $117=$4;
      var $118=((($117)-(1))|0);
      $_limb=$118;
      var $119=$_limb;
      var $120=$4;
      var $121=((($120)-(1))|0);
      var $122=(($119)|0)==(($121)|0);
      var $123=$122 ^ 1;
      var $124=$123 ^ 1;
      var $125=(($124)&1);
      var $126=($125);
      var $127=(($126)|0)!=0;
      if ($127) { var $132 = 1;label = 21; break; } else { label = 20; break; }
    case 20: 
      _mpfr_assert_fail(((5248392)|0), 76, ((5248992)|0));
      var $129=(0);
      var $130=(($129)|0)!=0;
      var $132 = $130;label = 21; break;
    case 21: 
      var $132;
      var $133=(($132)&1);
      label = 22; break;
    case 22: 
      var $135=$_limb;
      $__xr=$135;
      var $136=$__xr;
      var $137=(($136)>>>0) < 65536;
      if ($137) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $139=$__xr;
      var $140=(($139)>>>0) < 256;
      var $141=$140 ? 1 : 9;
      var $147 = $141;label = 25; break;
    case 24: 
      var $143=$__xr;
      var $144=(($143)>>>0) < 16777216;
      var $145=$144 ? 17 : 25;
      var $147 = $145;label = 25; break;
    case 25: 
      var $147;
      $__a=$147;
      var $148=$__a;
      var $149=(((33)-($148))|0);
      var $150=$__xr;
      var $151=$__a;
      var $152=$150 >>> (($151)>>>0);
      var $153=((5248192+$152)|0);
      var $154=HEAP8[($153)];
      var $155=(($154)&255);
      var $156=((($149)-($155))|0);
      $_b=$156;
      label = 26; break;
    case 26: 
      var $158=$_b;
      var $159=(((32)-($158))|0);
      var $161 = $159;label = 27; break;
    case 27: 
      var $161;
      var $162=$5;
      var $163=_mpfr_mul_2si($93, $94, $161, $162);
      $1=$163;
      label = 112; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $167=$2;
      var $168=(($167+12)|0);
      var $169=HEAP32[(($168)>>2)];
      $yp=$169;
      var $170=$3;
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=((($172)-(1))|0);
      var $174=((((($173)|0))/(32))&-1);
      var $175=((($174)+(1))|0);
      $xn=$175;
      HEAP32[(($tmp_marker)>>2)]=0;
      var $176=$xn;
      var $177=((($176)+(1))|0);
      var $178=($177<<2);
      var $179=(($178)>>>0) < 16384;
      var $180=$179 ^ 1;
      var $181=$180 ^ 1;
      var $182=(($181)&1);
      var $183=($182);
      var $184=(($183)|0)!=0;
      if ($184) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $186=$xn;
      var $187=((($186)+(1))|0);
      var $188=($187<<2);
      var $189=STACKTOP;STACKTOP = (STACKTOP + $188)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $196 = $189;label = 33; break;
    case 32: 
      var $191=$xn;
      var $192=((($191)+(1))|0);
      var $193=($192<<2);
      var $194=_mpfr_tmp_allocate($tmp_marker, $193);
      var $196 = $194;label = 33; break;
    case 33: 
      var $196;
      var $197=$196;
      $yp=$197;
      var $198=$4;
      var $199=$4;
      var $200=(($198)|0)==(($199)|0);
      var $201=$200 ^ 1;
      var $202=$201 ^ 1;
      var $203=(($202)&1);
      var $204=($203);
      var $205=(($204)|0)!=0;
      if ($205) { var $210 = 1;label = 35; break; } else { label = 34; break; }
    case 34: 
      _mpfr_assert_fail(((5248392)|0), 85, ((5248692)|0));
      var $207=(0);
      var $208=(($207)|0)!=0;
      var $210 = $208;label = 35; break;
    case 35: 
      var $210;
      var $211=(($210)&1);
      var $212=$yp;
      var $213=$3;
      var $214=(($213+12)|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=$xn;
      var $217=$4;
      var $218=___gmpn_mul_1($212, $215, $216, $217);
      var $219=$xn;
      var $220=$yp;
      var $221=(($220+($219<<2))|0);
      HEAP32[(($221)>>2)]=$218;
      var $222=$xn;
      var $223=$yp;
      var $224=(($223+($222<<2))|0);
      var $225=HEAP32[(($224)>>2)];
      var $226=$225 & -2147483648;
      var $227=(($226)|0)==0;
      var $228=$227 ^ 1;
      var $229=$228 ^ 1;
      var $230=(($229)&1);
      var $231=($230);
      var $232=(($231)|0)!=0;
      if ($232) { label = 36; break; } else { label = 42; break; }
    case 36: 
      label = 37; break;
    case 37: 
      var $235=$xn;
      var $236=$yp;
      var $237=(($236+($235<<2))|0);
      var $238=HEAP32[(($237)>>2)];
      $__xr1=$238;
      var $239=$__xr1;
      var $240=(($239)>>>0) < 65536;
      if ($240) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $242=$__xr1;
      var $243=(($242)>>>0) < 256;
      var $244=$243 ? 1 : 9;
      var $250 = $244;label = 40; break;
    case 39: 
      var $246=$__xr1;
      var $247=(($246)>>>0) < 16777216;
      var $248=$247 ? 17 : 25;
      var $250 = $248;label = 40; break;
    case 40: 
      var $250;
      $__a2=$250;
      var $251=$__a2;
      var $252=(((33)-($251))|0);
      var $253=$__xr1;
      var $254=$__a2;
      var $255=$253 >>> (($254)>>>0);
      var $256=((5248192+$255)|0);
      var $257=HEAP8[($256)];
      var $258=(($257)&255);
      var $259=((($252)-($258))|0);
      $cnt=$259;
      label = 41; break;
    case 41: 
      var $261=$yp;
      var $262=$yp;
      var $263=$xn;
      var $264=((($263)+(1))|0);
      var $265=$cnt;
      var $266=___gmpn_lshift($261, $262, $264, $265);
      label = 43; break;
    case 42: 
      $cnt=0;
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $270=$xn;
      var $271=((($270)+(1))|0);
      var $272=($271<<5);
      $_srcprec=$272;
      var $273=$2;
      var $274=(($273)|0);
      var $275=HEAP32[(($274)>>2)];
      $_destprec=$275;
      var $276=$2;
      var $277=(($276+12)|0);
      var $278=HEAP32[(($277)>>2)];
      $_destp=$278;
      var $279=$_destprec;
      var $280=$_srcprec;
      var $281=(($279)|0) >= (($280)|0);
      var $282=$281 ^ 1;
      var $283=$282 ^ 1;
      var $284=(($283)&1);
      var $285=($284);
      var $286=(($285)|0)!=0;
      if ($286) { label = 45; break; } else { label = 50; break; }
    case 45: 
      var $288=$_srcprec;
      var $289=((($288)-(1))|0);
      var $290=((((($289)|0))/(32))&-1);
      var $291=((($290)+(1))|0);
      $_srcs=$291;
      var $292=$_destprec;
      var $293=((($292)-(1))|0);
      var $294=((((($293)|0))/(32))&-1);
      var $295=((($294)+(1))|0);
      var $296=$_srcs;
      var $297=((($295)-($296))|0);
      $_dests=$297;
      label = 46; break;
    case 46: 
      var $299=$_destp;
      var $300=$_dests;
      var $301=(($299+($300<<2))|0);
      var $302=$yp;
      var $303=(($301)|0)!=(($302)|0);
      if ($303) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $305=$_destp;
      var $306=$_dests;
      var $307=(($305+($306<<2))|0);
      var $308=$307;
      var $309=$yp;
      var $310=$309;
      var $311=$_srcs;
      var $312=($311<<2);
      assert($312 % 1 === 0);_memcpy($308, $310, $312);
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $315=$_destp;
      var $316=$315;
      var $317=$_dests;
      var $318=($317<<2);
      _memset($316, 0, $318);
      $inexact=0;
      label = 106; break;
    case 50: 
      var $320=$_srcprec;
      var $321=((($320)-(1))|0);
      var $322=((((($321)|0))/(32))&-1);
      var $323=((($322)+(1))|0);
      $_srcs=$323;
      var $324=$_destprec;
      var $325=((($324)-(1))|0);
      var $326=((((($325)|0))/(32))&-1);
      var $327=((($326)+(1))|0);
      $_dests=$327;
      label = 51; break;
    case 51: 
      var $329=$_destprec;
      var $330=(((-$329))|0);
      var $331=((($330)>>>0))%(32);
      $_sh=$331;
      label = 52; break;
    case 52: 
      var $333=$yp;
      var $334=$_srcs;
      var $335=(($333+($334<<2))|0);
      var $336=$_dests;
      var $337=(((-$336))|0);
      var $338=(($335+($337<<2))|0);
      $_sp=$338;
      var $339=$_sh;
      var $340=(($339)|0)!=0;
      var $341=$340 ^ 1;
      var $342=$341 ^ 1;
      var $343=(($342)&1);
      var $344=($343);
      var $345=(($344)|0)!=0;
      if ($345) { label = 53; break; } else { label = 64; break; }
    case 53: 
      var $347=$_sh;
      var $348=((($347)-(1))|0);
      var $349=1 << $348;
      $_mask=$349;
      var $350=$_sp;
      var $351=(($350)|0);
      var $352=HEAP32[(($351)>>2)];
      var $353=$_mask;
      var $354=$352 & $353;
      $_rb=$354;
      var $355=$_sp;
      var $356=(($355)|0);
      var $357=HEAP32[(($356)>>2)];
      var $358=$_mask;
      var $359=((($358)-(1))|0);
      var $360=$357 & $359;
      $_sb=$360;
      var $361=$_sb;
      var $362=(($361)|0)==0;
      var $363=$362 ^ 1;
      var $364=$363 ^ 1;
      var $365=(($364)&1);
      var $366=($365);
      var $367=(($366)|0)!=0;
      if ($367) { label = 54; break; } else { label = 63; break; }
    case 54: 
      var $369=$5;
      var $370=(($369)|0)==0;
      if ($370) { label = 56; break; } else { label = 55; break; }
    case 55: 
      var $372=$_rb;
      var $373=(($372)|0)==0;
      if ($373) { label = 56; break; } else { label = 63; break; }
    case 56: 
      var $375=$_sp;
      $_tmp=$375;
      var $376=$_srcs;
      var $377=$_dests;
      var $378=((($376)-($377))|0);
      $_n=$378;
      label = 57; break;
    case 57: 
      var $380=$_n;
      var $381=(($380)|0)!=0;
      if ($381) { label = 58; break; } else { var $386 = 0;label = 59; break; }
    case 58: 
      var $383=$_sb;
      var $384=(($383)|0)==0;
      var $386 = $384;label = 59; break;
    case 59: 
      var $386;
      if ($386) { label = 60; break; } else { label = 62; break; }
    case 60: 
      var $388=$_tmp;
      var $389=((($388)-(4))|0);
      $_tmp=$389;
      var $390=HEAP32[(($389)>>2)];
      $_sb=$390;
      label = 61; break;
    case 61: 
      var $392=$_n;
      var $393=((($392)-(1))|0);
      $_n=$393;
      label = 57; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $396=$_mask;
      var $397=($396<<1);
      $_ulp=$397;
      label = 75; break;
    case 64: 
      var $399=$_sp;
      var $400=((($399)-(4))|0);
      var $401=HEAP32[(($400)>>2)];
      var $402=$401 & -2147483648;
      $_rb=$402;
      var $403=$_sp;
      var $404=((($403)-(4))|0);
      var $405=HEAP32[(($404)>>2)];
      var $406=$405 & 2147483647;
      $_sb=$406;
      var $407=$_sb;
      var $408=(($407)|0)==0;
      var $409=$408 ^ 1;
      var $410=$409 ^ 1;
      var $411=(($410)&1);
      var $412=($411);
      var $413=(($412)|0)!=0;
      if ($413) { label = 65; break; } else { label = 74; break; }
    case 65: 
      var $415=$5;
      var $416=(($415)|0)==0;
      if ($416) { label = 67; break; } else { label = 66; break; }
    case 66: 
      var $418=$_rb;
      var $419=(($418)|0)==0;
      if ($419) { label = 67; break; } else { label = 74; break; }
    case 67: 
      var $421=$_sp;
      var $422=((($421)-(4))|0);
      $_tmp3=$422;
      var $423=$_srcs;
      var $424=$_dests;
      var $425=((($423)-($424))|0);
      var $426=((($425)-(1))|0);
      $_n4=$426;
      label = 68; break;
    case 68: 
      var $428=$_n4;
      var $429=(($428)|0)!=0;
      if ($429) { label = 69; break; } else { var $434 = 0;label = 70; break; }
    case 69: 
      var $431=$_sb;
      var $432=(($431)|0)==0;
      var $434 = $432;label = 70; break;
    case 70: 
      var $434;
      if ($434) { label = 71; break; } else { label = 73; break; }
    case 71: 
      var $436=$_tmp3;
      var $437=((($436)-(4))|0);
      $_tmp3=$437;
      var $438=HEAP32[(($437)>>2)];
      $_sb=$438;
      label = 72; break;
    case 72: 
      var $440=$_n4;
      var $441=((($440)-(1))|0);
      $_n4=$441;
      label = 68; break;
    case 73: 
      label = 74; break;
    case 74: 
      $_ulp=1;
      label = 75; break;
    case 75: 
      var $445=$5;
      var $446=(($445)|0)==0;
      var $447=$446 ^ 1;
      var $448=$447 ^ 1;
      var $449=(($448)&1);
      var $450=($449);
      var $451=(($450)|0)!=0;
      if ($451) { label = 76; break; } else { label = 98; break; }
    case 76: 
      var $453=$_rb;
      var $454=(($453)|0)==0;
      if ($454) { label = 77; break; } else { label = 87; break; }
    case 77: 
      label = 78; break;
    case 78: 
      var $457=$_sb;
      var $458=$_rb;
      var $459=$457 | $458;
      var $460=(($459)|0)!=0;
      var $461=$460 ^ 1;
      var $462=$461 ^ 1;
      var $463=(($462)&1);
      var $464=($463);
      var $465=(($464)|0)!=0;
      if ($465) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $467=$3;
      var $468=(($467+4)|0);
      var $469=HEAP32[(($468)>>2)];
      var $470=(((-$469))|0);
      var $473 = $470;label = 81; break;
    case 80: 
      var $473 = 0;label = 81; break;
    case 81: 
      var $473;
      $inexact=$473;
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $476=$_destp;
      var $477=$_sp;
      var $478=(($476)|0)!=(($477)|0);
      if ($478) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $480=$_destp;
      var $481=$480;
      var $482=$_sp;
      var $483=$482;
      var $484=$_dests;
      var $485=($484<<2);
      assert($485 % 1 === 0);_memcpy($481, $483, $485);
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $488=$_ulp;
      var $489=((($488)-(1))|0);
      var $490=$489 ^ -1;
      var $491=$_destp;
      var $492=(($491)|0);
      var $493=HEAP32[(($492)>>2)];
      var $494=$493 & $490;
      HEAP32[(($492)>>2)]=$494;
      label = 97; break;
    case 87: 
      var $496=$_sb;
      var $497=(($496)|0)==0;
      var $498=$497 ^ 1;
      var $499=$498 ^ 1;
      var $500=(($499)&1);
      var $501=($500);
      var $502=(($501)|0)!=0;
      if ($502) { label = 88; break; } else { label = 91; break; }
    case 88: 
      var $504=$_sp;
      var $505=(($504)|0);
      var $506=HEAP32[(($505)>>2)];
      var $507=$_ulp;
      var $508=$506 & $507;
      var $509=(($508)|0)==0;
      if ($509) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $511=$3;
      var $512=(($511+4)|0);
      var $513=HEAP32[(($512)>>2)];
      var $514=(((-$513))|0);
      $inexact=$514;
      label = 82; break;
    case 90: 
      label = 92; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $518=$3;
      var $519=(($518+4)|0);
      var $520=HEAP32[(($519)>>2)];
      $inexact=$520;
      label = 93; break;
    case 93: 
      var $522=$_destp;
      var $523=$_sp;
      var $524=$_dests;
      var $525=$_ulp;
      var $526=___gmpn_add_1($522, $523, $524, $525);
      var $527=(($526)|0)!=0;
      var $528=$527 ^ 1;
      var $529=$528 ^ 1;
      var $530=(($529)&1);
      var $531=($530);
      var $532=(($531)|0)!=0;
      if ($532) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $534=$_dests;
      var $535=((($534)-(1))|0);
      var $536=$_destp;
      var $537=(($536+($535<<2))|0);
      HEAP32[(($537)>>2)]=-2147483648;
      var $538=$cnt;
      var $539=((($538)-(1))|0);
      $cnt=$539;
      label = 95; break;
    case 95: 
      var $541=$_ulp;
      var $542=((($541)-(1))|0);
      var $543=$542 ^ -1;
      var $544=$_destp;
      var $545=(($544)|0);
      var $546=HEAP32[(($545)>>2)];
      var $547=$546 & $543;
      HEAP32[(($545)>>2)]=$547;
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      label = 105; break;
    case 98: 
      var $551=$5;
      var $552=(($551)|0)==1;
      if ($552) { var $563 = 1;label = 100; break; } else { label = 99; break; }
    case 99: 
      var $554=$5;
      var $555=$3;
      var $556=(($555+4)|0);
      var $557=HEAP32[(($556)>>2)];
      var $558=(($557)|0) < 0;
      var $559=(($558)&1);
      var $560=((($554)+($559))|0);
      var $561=(($560)|0)==3;
      var $563 = $561;label = 100; break;
    case 100: 
      var $563;
      var $564=$563 ^ 1;
      var $565=$564 ^ 1;
      var $566=(($565)&1);
      var $567=($566);
      var $568=(($567)|0)!=0;
      if ($568) { label = 101; break; } else { label = 102; break; }
    case 101: 
      label = 78; break;
    case 102: 
      var $571=$_sb;
      var $572=$_rb;
      var $573=$571 | $572;
      var $574=(($573)|0)==0;
      var $575=$574 ^ 1;
      var $576=$575 ^ 1;
      var $577=(($576)&1);
      var $578=($577);
      var $579=(($578)|0)!=0;
      if ($579) { label = 103; break; } else { label = 104; break; }
    case 103: 
      $inexact=0;
      label = 82; break;
    case 104: 
      label = 92; break;
    case 105: 
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      var $585=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($585);
      var $586=$cnt;
      var $587=(((32)-($586))|0);
      $cnt=$587;
      var $588=HEAP32[((5257656)>>2)];
      var $589=$cnt;
      var $590=((($589)-(1073741823))|0);
      var $591=(($588)|0) < (($590)|0);
      if ($591) { var $601 = 1;label = 109; break; } else { label = 108; break; }
    case 108: 
      var $593=$3;
      var $594=(($593+8)|0);
      var $595=HEAP32[(($594)>>2)];
      var $596=HEAP32[((5257656)>>2)];
      var $597=$cnt;
      var $598=((($596)-($597))|0);
      var $599=(($595)|0) > (($598)|0);
      var $601 = $599;label = 109; break;
    case 109: 
      var $601;
      var $602=$601 ^ 1;
      var $603=$602 ^ 1;
      var $604=(($603)&1);
      var $605=($604);
      var $606=(($605)|0)!=0;
      if ($606) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $608=$2;
      var $609=$5;
      var $610=$3;
      var $611=(($610+4)|0);
      var $612=HEAP32[(($611)>>2)];
      var $613=_mpfr_overflow($608, $609, $612);
      $1=$613;
      label = 112; break;
    case 111: 
      var $615=$3;
      var $616=(($615+8)|0);
      var $617=HEAP32[(($616)>>2)];
      var $618=$cnt;
      var $619=((($617)+($618))|0);
      var $620=$2;
      var $621=(($620+8)|0);
      HEAP32[(($621)>>2)]=$619;
      var $622=$3;
      var $623=(($622+4)|0);
      var $624=HEAP32[(($623)>>2)];
      var $625=$2;
      var $626=(($625+4)|0);
      HEAP32[(($626)>>2)]=$624;
      var $627=$inexact;
      $1=$627;
      label = 112; break;
    case 112: 
      var $629=$1;
      STACKTOP = __stackBase__;
      return $629;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_mul_ui["X"]=1;
// WARNING: content after a branch in a label, line: 12358
// WARNING: content after a branch in a label, line: 12395
// WARNING: content after a branch in a label, line: 12425

function _mpfr_nexttozero($x) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $xn;
      var $sh;
      var $xp;
      var $exp;
      var $i;
      $1=$x;
      var $2=$1;
      var $3=(($2+8)|0);
      var $4=HEAP32[(($3)>>2)];
      var $5=(($4)|0)==-2147483645;
      var $6=$5 ^ 1;
      var $7=$6 ^ 1;
      var $8=(($7)&1);
      var $9=($8);
      var $10=(($9)|0)!=0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$1;
      var $13=HEAP32[((5257656)>>2)];
      _mpfr_setmax($12, $13);
      label = 19; break;
    case 4: 
      var $15=$1;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0)==-2147483647;
      var $19=$18 ^ 1;
      var $20=$19 ^ 1;
      var $21=(($20)&1);
      var $22=($21);
      var $23=(($22)|0)!=0;
      if ($23) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $25=$1;
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=(((-$27))|0);
      var $29=$1;
      var $30=(($29+4)|0);
      HEAP32[(($30)>>2)]=$28;
      var $31=$1;
      var $32=HEAP32[((5257652)>>2)];
      _mpfr_setmin($31, $32);
      label = 18; break;
    case 6: 
      var $34=$1;
      var $35=(($34)|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)-(1))|0);
      var $38=((((($37)|0))/(32))&-1);
      var $39=((($38)+(1))|0);
      $xn=$39;
      label = 7; break;
    case 7: 
      var $41=$1;
      var $42=(($41)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(((-$43))|0);
      var $45=((($44)>>>0))%(32);
      $sh=$45;
      label = 8; break;
    case 8: 
      var $47=$1;
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      $xp=$49;
      var $50=$xp;
      var $51=$xp;
      var $52=$xn;
      var $53=$sh;
      var $54=1 << $53;
      var $55=___gmpn_sub_1($50, $51, $52, $54);
      var $56=$xn;
      var $57=((($56)-(1))|0);
      var $58=$xp;
      var $59=(($58+($57<<2))|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$60 & -2147483648;
      var $62=(($61)|0)==0;
      var $63=$62 ^ 1;
      var $64=$63 ^ 1;
      var $65=(($64)&1);
      var $66=($65);
      var $67=(($66)|0)!=0;
      if ($67) { label = 9; break; } else { label = 17; break; }
    case 9: 
      var $69=$1;
      var $70=(($69+8)|0);
      var $71=HEAP32[(($70)>>2)];
      $exp=$71;
      var $72=$exp;
      var $73=HEAP32[((5257652)>>2)];
      var $74=(($72)|0)==(($73)|0);
      var $75=$74 ^ 1;
      var $76=$75 ^ 1;
      var $77=(($76)&1);
      var $78=($77);
      var $79=(($78)|0)!=0;
      if ($79) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $81=$1;
      var $82=(($81+8)|0);
      HEAP32[(($82)>>2)]=-2147483647;
      label = 16; break;
    case 11: 
      var $84=$exp;
      var $85=((($84)-(1))|0);
      var $86=$1;
      var $87=(($86+8)|0);
      HEAP32[(($87)>>2)]=$85;
      var $88=$sh;
      var $89=-1 << $88;
      var $90=$xp;
      var $91=(($90)|0);
      HEAP32[(($91)>>2)]=$89;
      $i=1;
      label = 12; break;
    case 12: 
      var $93=$i;
      var $94=$xn;
      var $95=(($93)|0) < (($94)|0);
      if ($95) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $97=$i;
      var $98=$xp;
      var $99=(($98+($97<<2))|0);
      HEAP32[(($99)>>2)]=-1;
      label = 14; break;
    case 14: 
      var $101=$i;
      var $102=((($101)+(1))|0);
      $i=$102;
      label = 12; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_nexttozero["X"]=1;

function ___gmpfr_out_str($stream, $base, $n_digits, $op, $rnd_mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $s;
      var $s0;
      var $l;
      var $e=__stackBase__;
      var $err;
      var $r;
      var $r1;
      var $r2;
      var $r3;
      $2=$stream;
      $3=$base;
      $4=$n_digits;
      $5=$op;
      $6=$rnd_mode;
      var $7=$3;
      var $8=(($7)|0) >= 2;
      if ($8) { label = 3; break; } else { var $13 = 0;label = 4; break; }
    case 3: 
      var $10=$3;
      var $11=(($10)|0) <= 62;
      var $13 = $11;label = 4; break;
    case 4: 
      var $13;
      var $14=$13 ^ 1;
      var $15=$14 ^ 1;
      var $16=(($15)&1);
      var $17=($16);
      var $18=(($17)|0)!=0;
      if ($18) { var $23 = 1;label = 6; break; } else { label = 5; break; }
    case 5: 
      _mpfr_assert_fail(((5249936)|0), 44, ((5249884)|0));
      var $20=(0);
      var $21=(($20)|0)!=0;
      var $23 = $21;label = 6; break;
    case 6: 
      var $23;
      var $24=(($23)&1);
      var $25=$2;
      var $26=(($25)|0)==0;
      if ($26) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $28=HEAP32[((_stdout)>>2)];
      $2=$28;
      label = 8; break;
    case 8: 
      var $30=$5;
      var $31=(($30+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|0) <= -2147483645;
      var $34=$33 ^ 1;
      var $35=$34 ^ 1;
      var $36=(($35)&1);
      var $37=($36);
      var $38=(($37)|0)!=0;
      if ($38) { label = 9; break; } else { label = 28; break; }
    case 9: 
      var $40=$5;
      var $41=(($40+8)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=(($42)|0)==-2147483646;
      if ($43) { label = 10; break; } else { label = 15; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $46=$2;
      var $47=_fprintf($46, ((5249300)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $r=$47;
      var $48=$r;
      var $49=(($48)|0) < 0;
      if ($49) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $54 = 0;label = 14; break;
    case 13: 
      var $52=$r;
      var $54 = $52;label = 14; break;
    case 14: 
      var $54;
      $1=$54;
      label = 44; break;
    case 15: 
      var $57=$5;
      var $58=(($57+8)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=(($59)|0)==-2147483645;
      if ($60) { label = 16; break; } else { label = 21; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $63=$2;
      var $64=$5;
      var $65=(($64+4)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=(($66)|0) > 0;
      var $68=$67 ? (((5248976)|0)) : (((5248684)|0));
      var $69=_fprintf($63, $68, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $r1=$69;
      var $70=$r1;
      var $71=(($70)|0) < 0;
      if ($71) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $76 = 0;label = 20; break;
    case 19: 
      var $74=$r1;
      var $76 = $74;label = 20; break;
    case 20: 
      var $76;
      $1=$76;
      label = 44; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $80=$2;
      var $81=$5;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83)|0) > 0;
      var $85=$84 ? (((5248548)|0)) : (((5248516)|0));
      var $86=_fprintf($80, $85, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=0,tempInt));
      $r2=$86;
      var $87=$r2;
      var $88=(($87)|0) < 0;
      if ($88) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $93 = 0;label = 25; break;
    case 24: 
      var $91=$r2;
      var $93 = $91;label = 25; break;
    case 25: 
      var $93;
      $1=$93;
      label = 44; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $98=$3;
      var $99=$4;
      var $100=$5;
      var $101=$6;
      var $102=_mpfr_get_str(0, $e, $98, $99, $100, $101);
      $s=$102;
      var $103=$s;
      $s0=$103;
      var $104=$s;
      var $105=_strlen($104);
      var $106=((($105)+(1))|0);
      $l=$106;
      var $107=$s;
      var $108=HEAP8[($107)];
      var $109=(($108 << 24) >> 24);
      var $110=(($109)|0)==45;
      if ($110) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $112=$s;
      var $113=(($112+1)|0);
      $s=$113;
      var $114=HEAP8[($112)];
      var $115=(($114 << 24) >> 24);
      var $116=$2;
      var $117=_fputc($115, $116);
      var $118=(($117)|0)==-1;
      if ($118) { var $143 = 1;label = 33; break; } else { label = 30; break; }
    case 30: 
      var $120=$s;
      var $121=(($120+1)|0);
      $s=$121;
      var $122=HEAP8[($120)];
      var $123=(($122 << 24) >> 24);
      var $124=$2;
      var $125=_fputc($123, $124);
      var $126=(($125)|0)==-1;
      if ($126) { var $143 = 1;label = 33; break; } else { label = 31; break; }
    case 31: 
      var $128=_localeconv();
      var $129=(($128)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($130)|0);
      var $132=HEAP8[($131)];
      var $133=(($132)&255);
      var $134=$2;
      var $135=_fputc($133, $134);
      var $136=(($135)|0)==-1;
      if ($136) { var $143 = 1;label = 33; break; } else { label = 32; break; }
    case 32: 
      var $138=$s;
      var $139=$2;
      var $140=_fputs($138, $139);
      var $141=(($140)|0)==-1;
      var $143 = $141;label = 33; break;
    case 33: 
      var $143;
      var $144=(($143)&1);
      $err=$144;
      ___gmp_get_memory_functions(5248320, 5247208, 5248188);
      var $145=HEAP32[((5248188)>>2)];
      var $146=$s0;
      var $147=$l;
      FUNCTION_TABLE[$145]($146, $147);
      var $148=$err;
      var $149=(($148)|0)!=0;
      var $150=$149 ^ 1;
      var $151=$150 ^ 1;
      var $152=(($151)&1);
      var $153=($152);
      var $154=(($153)|0)!=0;
      if ($154) { label = 34; break; } else { label = 35; break; }
    case 34: 
      $1=0;
      label = 44; break;
    case 35: 
      var $157=HEAP32[(($e)>>2)];
      var $158=((($157)-(1))|0);
      HEAP32[(($e)>>2)]=$158;
      var $159=HEAP32[(($e)>>2)];
      var $160=(($159)|0)!=0;
      if ($160) { label = 36; break; } else { label = 43; break; }
    case 36: 
      var $162=HEAP32[(($e)>>2)];
      var $163=(($162)|0) >= -2147483648;
      var $164=$163 ^ 1;
      var $165=$164 ^ 1;
      var $166=(($165)&1);
      var $167=($166);
      var $168=(($167)|0)!=0;
      if ($168) { var $173 = 1;label = 38; break; } else { label = 37; break; }
    case 37: 
      _mpfr_assert_fail(((5249936)|0), 87, ((5248472)|0));
      var $170=(0);
      var $171=(($170)|0)!=0;
      var $173 = $171;label = 38; break;
    case 38: 
      var $173;
      var $174=(($173)&1);
      var $175=HEAP32[(($e)>>2)];
      var $176=(($175)|0) <= 2147483647;
      var $177=$176 ^ 1;
      var $178=$177 ^ 1;
      var $179=(($178)&1);
      var $180=($179);
      var $181=(($180)|0)!=0;
      if ($181) { var $186 = 1;label = 40; break; } else { label = 39; break; }
    case 39: 
      _mpfr_assert_fail(((5249936)|0), 88, ((5248440)|0));
      var $183=(0);
      var $184=(($183)|0)!=0;
      var $186 = $184;label = 40; break;
    case 40: 
      var $186;
      var $187=(($186)&1);
      var $188=$2;
      var $189=$3;
      var $190=(($189)|0) <= 10;
      var $191=$190 ? (((5248404)|0)) : (((5249928)|0));
      var $192=HEAP32[(($e)>>2)];
      var $193=_fprintf($188, $191, (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$192,tempInt));
      $r3=$193;
      var $194=$r3;
      var $195=(($194)|0) < 0;
      var $196=$195 ^ 1;
      var $197=$196 ^ 1;
      var $198=(($197)&1);
      var $199=($198);
      var $200=(($199)|0)!=0;
      if ($200) { label = 41; break; } else { label = 42; break; }
    case 41: 
      $1=0;
      label = 44; break;
    case 42: 
      var $203=$r3;
      var $204=$l;
      var $205=((($204)+($203))|0);
      $l=$205;
      label = 43; break;
    case 43: 
      var $207=$l;
      $1=$207;
      label = 44; break;
    case 44: 
      var $209=$1;
      STACKTOP = __stackBase__;
      return $209;
    default: assert(0, "bad label: " + label);
  }

}
___gmpfr_out_str["X"]=1;

function _mpfr_round_raw($yp, $xp, $xprec, $neg, $yprec, $rnd_mode, $inexp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $xsize;
      var $nw;
      var $himask;
      var $lomask;
      var $sb;
      var $rw;
      var $carry;
      var $k;
      var $rbmask;
      $2=$yp;
      $3=$xp;
      $4=$xprec;
      $5=$neg;
      $6=$yprec;
      $7=$rnd_mode;
      $8=$inexp;
      var $9=$4;
      var $10=((($9)-(1))|0);
      var $11=((((($10)|0))/(32))&-1);
      var $12=((($11)+(1))|0);
      $xsize=$12;
      var $13=$6;
      var $14=((((($13)|0))/(32))&-1);
      $nw=$14;
      var $15=$6;
      var $16=$15 & 31;
      $rw=$16;
      var $17=$4;
      var $18=$6;
      var $19=(($17)|0) <= (($18)|0);
      var $20=$19 ^ 1;
      var $21=$20 ^ 1;
      var $22=(($21)&1);
      var $23=($22);
      var $24=(($23)|0)!=0;
      if ($24) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $26=$rw;
      var $27=(($26)|0)!=0;
      var $28=$27 ^ 1;
      var $29=$28 ^ 1;
      var $30=(($29)&1);
      var $31=($30);
      var $32=(($31)|0)!=0;
      if ($32) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $34=$nw;
      var $35=((($34)+(1))|0);
      $nw=$35;
      label = 5; break;
    case 5: 
      var $37=$8;
      HEAP32[(($37)>>2)]=0;
      var $38=$2;
      var $39=$nw;
      var $40=$xsize;
      var $41=((($39)-($40))|0);
      var $42=(($38+($41<<2))|0);
      var $43=$42;
      var $44=$3;
      var $45=$44;
      var $46=$xsize;
      var $47=($46<<2);
      _memmove($43, $45, $47, 4, 0);
      var $48=$2;
      var $49=$48;
      var $50=$nw;
      var $51=$xsize;
      var $52=((($50)-($51))|0);
      var $53=($52<<2);
      _memset($49, 0, $53);
      $1=0;
      label = 50; break;
    case 6: 
      var $55=$xsize;
      var $56=$nw;
      var $57=((($55)-($56))|0);
      var $58=((($57)-(1))|0);
      $k=$58;
      var $59=$rw;
      var $60=(($59)|0)!=0;
      var $61=$60 ^ 1;
      var $62=$61 ^ 1;
      var $63=(($62)&1);
      var $64=($63);
      var $65=(($64)|0)!=0;
      if ($65) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $67=$nw;
      var $68=((($67)+(1))|0);
      $nw=$68;
      var $69=$rw;
      var $70=(((32)-($69))|0);
      var $71=1 << $70;
      var $72=((($71)-(1))|0);
      $lomask=$72;
      var $73=$lomask;
      var $74=$73 ^ -1;
      $himask=$74;
      label = 9; break;
    case 8: 
      $lomask=-1;
      $himask=-1;
      label = 9; break;
    case 9: 
      var $77=$k;
      var $78=$3;
      var $79=(($78+($77<<2))|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$lomask;
      var $82=$80 & $81;
      $sb=$82;
      var $83=$7;
      var $84=(($83)|0)==0;
      var $85=$84 ^ 1;
      var $86=$85 ^ 1;
      var $87=(($86)&1);
      var $88=($87);
      var $89=(($88)|0)!=0;
      if ($89) { label = 10; break; } else { label = 27; break; }
    case 10: 
      var $91=$rw;
      var $92=(((31)-($91))|0);
      var $93=1 << $92;
      $rbmask=$93;
      var $94=$sb;
      var $95=$rbmask;
      var $96=$94 & $95;
      var $97=(($96)|0)!=0;
      if ($97) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $99=$rbmask;
      var $100=$99 ^ -1;
      var $101=$sb;
      var $102=$101 & $100;
      $sb=$102;
      label = 13; break;
    case 12: 
      label = 30; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $106=$sb;
      var $107=(($106)|0)==0;
      var $108=$107 ^ 1;
      var $109=$108 ^ 1;
      var $110=(($109)&1);
      var $111=($110);
      var $112=(($111)|0)!=0;
      if ($112) { label = 15; break; } else { var $117 = 0;label = 16; break; }
    case 15: 
      var $114=$k;
      var $115=(($114)|0) > 0;
      var $117 = $115;label = 16; break;
    case 16: 
      var $117;
      if ($117) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $119=$k;
      var $120=((($119)-(1))|0);
      $k=$120;
      var $121=$3;
      var $122=(($121+($120<<2))|0);
      var $123=HEAP32[(($122)>>2)];
      $sb=$123;
      label = 14; break;
    case 18: 
      var $125=$sb;
      var $126=(($125)|0)==0;
      var $127=$126 ^ 1;
      var $128=$127 ^ 1;
      var $129=(($128)&1);
      var $130=($129);
      var $131=(($130)|0)!=0;
      if ($131) { label = 19; break; } else { label = 22; break; }
    case 19: 
      var $133=$xsize;
      var $134=$nw;
      var $135=((($133)-($134))|0);
      var $136=$3;
      var $137=(($136+($135<<2))|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$himask;
      var $140=$himask;
      var $141=$140 << 1;
      var $142=$139 ^ $141;
      var $143=$138 & $142;
      $sb=$143;
      var $144=$sb;
      var $145=(($144)|0)==0;
      if ($145) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $147=$5;
      var $148=($147<<2);
      var $149=((($148)-(2))|0);
      var $150=$8;
      HEAP32[(($150)>>2)]=$149;
      var $151=$2;
      var $152=$151;
      var $153=$3;
      var $154=$xsize;
      var $155=(($153+($154<<2))|0);
      var $156=$nw;
      var $157=(((-$156))|0);
      var $158=(($155+($157<<2))|0);
      var $159=$158;
      var $160=$nw;
      var $161=($160<<2);
      _memmove($152, $159, $161, 4, 0);
      var $162=$himask;
      var $163=$2;
      var $164=(($163)|0);
      var $165=HEAP32[(($164)>>2)];
      var $166=$165 & $162;
      HEAP32[(($164)>>2)]=$166;
      $1=0;
      label = 50; break;
    case 21: 
      var $168=$5;
      var $169=($168<<2);
      var $170=(((2)-($169))|0);
      var $171=$8;
      HEAP32[(($171)>>2)]=$170;
      label = 23; break;
    case 22: 
      var $173=$5;
      var $174=($173<<1);
      var $175=(((1)-($174))|0);
      var $176=$8;
      HEAP32[(($176)>>2)]=$175;
      label = 23; break;
    case 23: 
      var $178=$2;
      var $179=$3;
      var $180=$xsize;
      var $181=(($179+($180<<2))|0);
      var $182=$nw;
      var $183=(((-$182))|0);
      var $184=(($181+($183<<2))|0);
      var $185=$nw;
      var $186=$rw;
      var $187=(($186)|0)!=0;
      if ($187) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $189=$rw;
      var $190=(((32)-($189))|0);
      var $191=1 << $190;
      var $194 = $191;label = 26; break;
    case 25: 
      var $194 = 1;label = 26; break;
    case 26: 
      var $194;
      var $195=___gmpn_add_1($178, $184, $185, $194);
      $carry=$195;
      var $196=$himask;
      var $197=$2;
      var $198=(($197)|0);
      var $199=HEAP32[(($198)>>2)];
      var $200=$199 & $196;
      HEAP32[(($198)>>2)]=$200;
      var $201=$carry;
      $1=$201;
      label = 50; break;
    case 27: 
      var $203=$7;
      var $204=(($203)|0)==1;
      if ($204) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $206=$7;
      var $207=$5;
      var $208=((($206)+($207))|0);
      var $209=(($208)|0)==3;
      if ($209) { label = 29; break; } else { label = 39; break; }
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $213=$sb;
      var $214=(($213)|0)==0;
      var $215=$214 ^ 1;
      var $216=$215 ^ 1;
      var $217=(($216)&1);
      var $218=($217);
      var $219=(($218)|0)!=0;
      if ($219) { label = 32; break; } else { var $224 = 0;label = 33; break; }
    case 32: 
      var $221=$k;
      var $222=(($221)|0) > 0;
      var $224 = $222;label = 33; break;
    case 33: 
      var $224;
      if ($224) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $226=$k;
      var $227=((($226)-(1))|0);
      $k=$227;
      var $228=$3;
      var $229=(($228+($227<<2))|0);
      var $230=HEAP32[(($229)>>2)];
      $sb=$230;
      label = 31; break;
    case 35: 
      var $232=$sb;
      var $233=(($232)|0)==0;
      var $234=$233 ^ 1;
      var $235=$234 ^ 1;
      var $236=(($235)&1);
      var $237=($236);
      var $238=(($237)|0)!=0;
      if ($238) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $245 = 0;label = 38; break;
    case 37: 
      var $241=$5;
      var $242=($241<<1);
      var $243=((($242)-(1))|0);
      var $245 = $243;label = 38; break;
    case 38: 
      var $245;
      var $246=$8;
      HEAP32[(($246)>>2)]=$245;
      var $247=$2;
      var $248=$247;
      var $249=$3;
      var $250=$xsize;
      var $251=(($249+($250<<2))|0);
      var $252=$nw;
      var $253=(((-$252))|0);
      var $254=(($251+($253<<2))|0);
      var $255=$254;
      var $256=$nw;
      var $257=($256<<2);
      _memmove($248, $255, $257, 4, 0);
      var $258=$himask;
      var $259=$2;
      var $260=(($259)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=$261 & $258;
      HEAP32[(($260)>>2)]=$262;
      $1=0;
      label = 50; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $265=$sb;
      var $266=(($265)|0)==0;
      var $267=$266 ^ 1;
      var $268=$267 ^ 1;
      var $269=(($268)&1);
      var $270=($269);
      var $271=(($270)|0)!=0;
      if ($271) { label = 41; break; } else { var $276 = 0;label = 42; break; }
    case 41: 
      var $273=$k;
      var $274=(($273)|0) > 0;
      var $276 = $274;label = 42; break;
    case 42: 
      var $276;
      if ($276) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $278=$k;
      var $279=((($278)-(1))|0);
      $k=$279;
      var $280=$3;
      var $281=(($280+($279<<2))|0);
      var $282=HEAP32[(($281)>>2)];
      $sb=$282;
      label = 40; break;
    case 44: 
      var $284=$sb;
      var $285=(($284)|0)==0;
      var $286=$285 ^ 1;
      var $287=$286 ^ 1;
      var $288=(($287)&1);
      var $289=($288);
      var $290=(($289)|0)!=0;
      if ($290) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $292=$8;
      HEAP32[(($292)>>2)]=0;
      var $293=$2;
      var $294=$293;
      var $295=$3;
      var $296=$xsize;
      var $297=(($295+($296<<2))|0);
      var $298=$nw;
      var $299=(((-$298))|0);
      var $300=(($297+($299<<2))|0);
      var $301=$300;
      var $302=$nw;
      var $303=($302<<2);
      _memmove($294, $301, $303, 4, 0);
      var $304=$himask;
      var $305=$2;
      var $306=(($305)|0);
      var $307=HEAP32[(($306)>>2)];
      var $308=$307 & $304;
      HEAP32[(($306)>>2)]=$308;
      $1=0;
      label = 50; break;
    case 46: 
      var $310=$5;
      var $311=($310<<1);
      var $312=(((1)-($311))|0);
      var $313=$8;
      HEAP32[(($313)>>2)]=$312;
      var $314=$2;
      var $315=$3;
      var $316=$xsize;
      var $317=(($315+($316<<2))|0);
      var $318=$nw;
      var $319=(((-$318))|0);
      var $320=(($317+($319<<2))|0);
      var $321=$nw;
      var $322=$rw;
      var $323=(($322)|0)!=0;
      if ($323) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $325=$rw;
      var $326=(((32)-($325))|0);
      var $327=1 << $326;
      var $330 = $327;label = 49; break;
    case 48: 
      var $330 = 1;label = 49; break;
    case 49: 
      var $330;
      var $331=___gmpn_add_1($314, $320, $321, $330);
      $carry=$331;
      var $332=$himask;
      var $333=$2;
      var $334=(($333)|0);
      var $335=HEAP32[(($334)>>2)];
      var $336=$335 & $332;
      HEAP32[(($334)>>2)]=$336;
      var $337=$carry;
      $1=$337;
      label = 50; break;
    case 50: 
      var $339=$1;

      return $339;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_round_raw["X"]=1;

function _mpfr_round_raw_2($xp, $xprec, $neg, $yprec, $rnd_mode) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $xsize;
      var $nw;
      var $himask;
      var $lomask;
      var $sb;
      var $rw;
      var $inexp;
      var $k;
      var $rbmask;
      $2=$xp;
      $3=$xprec;
      $4=$neg;
      $5=$yprec;
      $6=$rnd_mode;
      var $7=$3;
      var $8=$5;
      var $9=(($7)|0) <= (($8)|0);
      if ($9) { label = 5; break; } else { label = 3; break; }
    case 3: 
      var $11=$6;
      var $12=(($11)|0)==1;
      if ($12) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $14=$6;
      var $15=$4;
      var $16=((($14)+($15))|0);
      var $17=(($16)|0)==3;
      if ($17) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 48; break;
    case 6: 
      var $20=$3;
      var $21=((($20)-(1))|0);
      var $22=((((($21)|0))/(32))&-1);
      var $23=((($22)+(1))|0);
      $xsize=$23;
      var $24=$5;
      var $25=((((($24)|0))/(32))&-1);
      $nw=$25;
      var $26=$5;
      var $27=$26 & 31;
      $rw=$27;
      var $28=$3;
      var $29=$5;
      var $30=(($28)|0) <= (($29)|0);
      var $31=$30 ^ 1;
      var $32=$31 ^ 1;
      var $33=(($32)&1);
      var $34=($33);
      var $35=(($34)|0)!=0;
      if ($35) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $37=$rw;
      var $38=(($37)|0)!=0;
      var $39=$38 ^ 1;
      var $40=$39 ^ 1;
      var $41=(($40)&1);
      var $42=($41);
      var $43=(($42)|0)!=0;
      if ($43) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $45=$nw;
      var $46=((($45)+(1))|0);
      $nw=$46;
      label = 9; break;
    case 9: 
      $1=0;
      label = 48; break;
    case 10: 
      var $49=$6;
      var $50=(($49)|0)==1;
      if ($50) { label = 47; break; } else { label = 11; break; }
    case 11: 
      var $52=$6;
      var $53=$4;
      var $54=((($52)+($53))|0);
      var $55=(($54)|0)==3;
      if ($55) { label = 47; break; } else { label = 12; break; }
    case 12: 
      var $57=$xsize;
      var $58=$nw;
      var $59=((($57)-($58))|0);
      var $60=((($59)-(1))|0);
      $k=$60;
      var $61=$rw;
      var $62=(($61)|0)!=0;
      var $63=$62 ^ 1;
      var $64=$63 ^ 1;
      var $65=(($64)&1);
      var $66=($65);
      var $67=(($66)|0)!=0;
      if ($67) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $69=$nw;
      var $70=((($69)+(1))|0);
      $nw=$70;
      var $71=$rw;
      var $72=(((32)-($71))|0);
      var $73=1 << $72;
      var $74=((($73)-(1))|0);
      $lomask=$74;
      var $75=$lomask;
      var $76=$75 ^ -1;
      $himask=$76;
      label = 15; break;
    case 14: 
      $lomask=-1;
      $himask=-1;
      label = 15; break;
    case 15: 
      var $79=$k;
      var $80=$2;
      var $81=(($80+($79<<2))|0);
      var $82=HEAP32[(($81)>>2)];
      var $83=$lomask;
      var $84=$82 & $83;
      $sb=$84;
      var $85=$6;
      var $86=(($85)|0)==0;
      var $87=$86 ^ 1;
      var $88=$87 ^ 1;
      var $89=(($88)&1);
      var $90=($89);
      var $91=(($90)|0)!=0;
      if ($91) { label = 16; break; } else { label = 30; break; }
    case 16: 
      var $93=$rw;
      var $94=(((31)-($93))|0);
      var $95=1 << $94;
      $rbmask=$95;
      var $96=$sb;
      var $97=$rbmask;
      var $98=$96 & $97;
      var $99=(($98)|0)!=0;
      if ($99) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $101=$rbmask;
      var $102=$101 ^ -1;
      var $103=$sb;
      var $104=$103 & $102;
      $sb=$104;
      label = 19; break;
    case 18: 
      label = 33; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $108=$sb;
      var $109=(($108)|0)==0;
      var $110=$109 ^ 1;
      var $111=$110 ^ 1;
      var $112=(($111)&1);
      var $113=($112);
      var $114=(($113)|0)!=0;
      if ($114) { label = 21; break; } else { var $119 = 0;label = 22; break; }
    case 21: 
      var $116=$k;
      var $117=(($116)|0) > 0;
      var $119 = $117;label = 22; break;
    case 22: 
      var $119;
      if ($119) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $121=$k;
      var $122=((($121)-(1))|0);
      $k=$122;
      var $123=$2;
      var $124=(($123+($122<<2))|0);
      var $125=HEAP32[(($124)>>2)];
      $sb=$125;
      label = 20; break;
    case 24: 
      var $127=$sb;
      var $128=(($127)|0)==0;
      var $129=$128 ^ 1;
      var $130=$129 ^ 1;
      var $131=(($130)&1);
      var $132=($131);
      var $133=(($132)|0)!=0;
      if ($133) { label = 25; break; } else { label = 28; break; }
    case 25: 
      var $135=$xsize;
      var $136=$nw;
      var $137=((($135)-($136))|0);
      var $138=$2;
      var $139=(($138+($137<<2))|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=$himask;
      var $142=$himask;
      var $143=$142 << 1;
      var $144=$141 ^ $143;
      var $145=$140 & $144;
      $sb=$145;
      var $146=$sb;
      var $147=(($146)|0)==0;
      if ($147) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $1=0;
      label = 48; break;
    case 27: 
      label = 29; break;
    case 28: 
      label = 29; break;
    case 29: 
      $1=1;
      label = 48; break;
    case 30: 
      var $153=$6;
      var $154=(($153)|0)==1;
      if ($154) { label = 32; break; } else { label = 31; break; }
    case 31: 
      var $156=$6;
      var $157=$4;
      var $158=((($156)+($157))|0);
      var $159=(($158)|0)==3;
      if ($159) { label = 32; break; } else { label = 39; break; }
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $163=$sb;
      var $164=(($163)|0)==0;
      var $165=$164 ^ 1;
      var $166=$165 ^ 1;
      var $167=(($166)&1);
      var $168=($167);
      var $169=(($168)|0)!=0;
      if ($169) { label = 35; break; } else { var $174 = 0;label = 36; break; }
    case 35: 
      var $171=$k;
      var $172=(($171)|0) > 0;
      var $174 = $172;label = 36; break;
    case 36: 
      var $174;
      if ($174) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $176=$k;
      var $177=((($176)-(1))|0);
      $k=$177;
      var $178=$2;
      var $179=(($178+($177<<2))|0);
      var $180=HEAP32[(($179)>>2)];
      $sb=$180;
      label = 34; break;
    case 38: 
      $1=0;
      label = 48; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $184=$sb;
      var $185=(($184)|0)==0;
      var $186=$185 ^ 1;
      var $187=$186 ^ 1;
      var $188=(($187)&1);
      var $189=($188);
      var $190=(($189)|0)!=0;
      if ($190) { label = 41; break; } else { var $195 = 0;label = 42; break; }
    case 41: 
      var $192=$k;
      var $193=(($192)|0) > 0;
      var $195 = $193;label = 42; break;
    case 42: 
      var $195;
      if ($195) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $197=$k;
      var $198=((($197)-(1))|0);
      $k=$198;
      var $199=$2;
      var $200=(($199+($198<<2))|0);
      var $201=HEAP32[(($200)>>2)];
      $sb=$201;
      label = 40; break;
    case 44: 
      var $203=$sb;
      var $204=(($203)|0)==0;
      var $205=$204 ^ 1;
      var $206=$205 ^ 1;
      var $207=(($206)&1);
      var $208=($207);
      var $209=(($208)|0)!=0;
      if ($209) { label = 45; break; } else { label = 46; break; }
    case 45: 
      $1=0;
      label = 48; break;
    case 46: 
      $1=1;
      label = 48; break;
    case 47: 
      $1=0;
      label = 48; break;
    case 48: 
      var $214=$1;

      return $214;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_round_raw_2["X"]=1;

function _mpfr_can_round_raw($bp, $bn, $neg, $err0, $rnd1, $rnd2, $prec) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $err;
      var $k;
      var $k1;
      var $tn;
      var $s;
      var $s1;
      var $cc;
      var $cc2;
      var $tmp;
      var $tmp_marker=__stackBase__;
      $2=$bp;
      $3=$bn;
      $4=$neg;
      $5=$err0;
      $6=$rnd1;
      $7=$rnd2;
      $8=$prec;
      var $9=$5;
      var $10=(($9)|0) < 0;
      if ($10) { var $16 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $12=$5;
      var $13=$8;
      var $14=(($12)>>>0) <= (($13)>>>0);
      var $16 = $14;label = 4; break;
    case 4: 
      var $16;
      var $17=$16 ^ 1;
      var $18=$17 ^ 1;
      var $19=(($18)&1);
      var $20=($19);
      var $21=(($20)|0)!=0;
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 37; break;
    case 6: 
      var $24=$8;
      var $25=$3;
      var $26=($25<<5);
      var $27=(($24)|0) > (($26)|0);
      var $28=$27 ^ 1;
      var $29=$28 ^ 1;
      var $30=(($29)&1);
      var $31=($30);
      var $32=(($31)|0)!=0;
      if ($32) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $34=$7;
      var $35=(($34)|0)==0;
      if ($35) { label = 8; break; } else { var $42 = 0;label = 9; break; }
    case 8: 
      var $37=$5;
      var $38=((($37)-(2))|0);
      var $39=$8;
      var $40=(($38)>>>0) >= (($39)>>>0);
      var $42 = $40;label = 9; break;
    case 9: 
      var $42;
      var $43=(($42)&1);
      $1=$43;
      label = 37; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $46=$4;
      var $47=(($46)|0) < 0;
      var $48=(($47)&1);
      $4=$48;
      var $49=$5;
      var $50=$3;
      var $51=($50<<5);
      var $52=(($49)>>>0) > (($51)>>>0);
      if ($52) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $54=$3;
      var $55=($54<<5);
      var $59 = $55;label = 14; break;
    case 13: 
      var $57=$5;
      var $59 = $57;label = 14; break;
    case 14: 
      var $59;
      $err=$59;
      var $60=$err;
      var $61=((($60)-(1))|0);
      var $62=((((($61)|0))/(32))&-1);
      $k=$62;
      label = 15; break;
    case 15: 
      var $64=$err;
      var $65=(((-$64))|0);
      var $66=((($65)>>>0))%(32);
      $s=$66;
      label = 16; break;
    case 16: 
      var $68=$8;
      var $69=((($68)-(1))|0);
      var $70=((((($69)|0))/(32))&-1);
      $k1=$70;
      label = 17; break;
    case 17: 
      var $72=$8;
      var $73=(((-$72))|0);
      var $74=((($73)>>>0))%(32);
      $s1=$74;
      label = 18; break;
    case 18: 
      var $76=$k1;
      var $77=$k;
      var $78=((($77)-($76))|0);
      $k=$78;
      var $79=$k1;
      var $80=$3;
      var $81=((($80)-($79))|0);
      $3=$81;
      var $82=$k1;
      var $83=($82<<5);
      var $84=$8;
      var $85=((($84)-($83))|0);
      $8=$85;
      HEAP32[(($tmp_marker)>>2)]=0;
      var $86=$3;
      $tn=$86;
      var $87=$k;
      var $88=((($87)+(1))|0);
      $k=$88;
      var $89=$tn;
      var $90=($89<<2);
      var $91=(($90)>>>0) < 16384;
      var $92=$91 ^ 1;
      var $93=$92 ^ 1;
      var $94=(($93)&1);
      var $95=($94);
      var $96=(($95)|0)!=0;
      if ($96) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $98=$tn;
      var $99=($98<<2);
      var $100=STACKTOP;STACKTOP = (STACKTOP + $99)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $106 = $100;label = 21; break;
    case 20: 
      var $102=$tn;
      var $103=($102<<2);
      var $104=_mpfr_tmp_allocate($tmp_marker, $103);
      var $106 = $104;label = 21; break;
    case 21: 
      var $106;
      var $107=$106;
      $tmp=$107;
      var $108=$3;
      var $109=$k;
      var $110=(($108)|0) > (($109)|0);
      if ($110) { label = 22; break; } else { label = 27; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $113=$tmp;
      var $114=$2;
      var $115=(($113)|0)!=(($114)|0);
      if ($115) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $117=$tmp;
      var $118=$117;
      var $119=$2;
      var $120=$119;
      var $121=$3;
      var $122=$k;
      var $123=((($121)-($122))|0);
      var $124=($123<<2);
      assert($124 % 1 === 0);_memcpy($118, $120, $124);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $128=$6;
      var $129=$4;
      var $130=((($128)+($129))|0);
      var $131=(($130)|0)==3;
      if ($131) { label = 28; break; } else { label = 29; break; }
    case 28: 
      $6=1;
      label = 29; break;
    case 29: 
      var $134=$6;
      if ((($134)|0)==1) {
        label = 30; break;
      }
      else if ((($134)|0)==0) {
        label = 31; break;
      }
      else {
      label = 32; break;
      }
      
    case 30: 
      var $136=$3;
      var $137=((($136)-(1))|0);
      var $138=$2;
      var $139=(($138+($137<<2))|0);
      var $140=HEAP32[(($139)>>2)];
      var $141=$s1;
      var $142=$140 >>> (($141)>>>0);
      var $143=$142 & 1;
      $cc=$143;
      var $144=$2;
      var $145=$3;
      var $146=($145<<5);
      var $147=$4;
      var $148=$8;
      var $149=$7;
      var $150=_mpfr_round_raw_2($144, $146, $147, $148, $149);
      var $151=$cc;
      var $152=$151 ^ $150;
      $cc=$152;
      var $153=$tmp;
      var $154=$3;
      var $155=(($153+($154<<2))|0);
      var $156=$k;
      var $157=(((-$156))|0);
      var $158=(($155+($157<<2))|0);
      var $159=$2;
      var $160=$3;
      var $161=(($159+($160<<2))|0);
      var $162=$k;
      var $163=(((-$162))|0);
      var $164=(($161+($163<<2))|0);
      var $165=$k;
      var $166=$s;
      var $167=1 << $166;
      var $168=___gmpn_add_1($158, $164, $165, $167);
      $cc2=$168;
      label = 33; break;
    case 31: 
      var $170=$tmp;
      var $171=$3;
      var $172=(($170+($171<<2))|0);
      var $173=$k;
      var $174=(((-$173))|0);
      var $175=(($172+($174<<2))|0);
      var $176=$2;
      var $177=$3;
      var $178=(($176+($177<<2))|0);
      var $179=$k;
      var $180=(((-$179))|0);
      var $181=(($178+($180<<2))|0);
      var $182=$k;
      var $183=$s;
      var $184=1 << $183;
      var $185=___gmpn_add_1($175, $181, $182, $184);
      $cc=$185;
      var $186=$3;
      var $187=((($186)-(1))|0);
      var $188=$tmp;
      var $189=(($188+($187<<2))|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=$s1;
      var $192=$190 >>> (($191)>>>0);
      var $193=$192 & 1;
      $cc=$193;
      var $194=$tmp;
      var $195=$3;
      var $196=($195<<5);
      var $197=$4;
      var $198=$8;
      var $199=$7;
      var $200=_mpfr_round_raw_2($194, $196, $197, $198, $199);
      var $201=$cc;
      var $202=$201 ^ $200;
      $cc=$202;
      var $203=$tmp;
      var $204=$3;
      var $205=(($203+($204<<2))|0);
      var $206=$k;
      var $207=(((-$206))|0);
      var $208=(($205+($207<<2))|0);
      var $209=$2;
      var $210=$3;
      var $211=(($209+($210<<2))|0);
      var $212=$k;
      var $213=(((-$212))|0);
      var $214=(($211+($213<<2))|0);
      var $215=$k;
      var $216=$s;
      var $217=1 << $216;
      var $218=___gmpn_sub_1($208, $214, $215, $217);
      $cc2=$218;
      label = 33; break;
    case 32: 
      var $220=$3;
      var $221=((($220)-(1))|0);
      var $222=$2;
      var $223=(($222+($221<<2))|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=$s1;
      var $226=$224 >>> (($225)>>>0);
      var $227=$226 & 1;
      $cc=$227;
      var $228=$2;
      var $229=$3;
      var $230=($229<<5);
      var $231=$4;
      var $232=$8;
      var $233=$7;
      var $234=_mpfr_round_raw_2($228, $230, $231, $232, $233);
      var $235=$cc;
      var $236=$235 ^ $234;
      $cc=$236;
      var $237=$tmp;
      var $238=$3;
      var $239=(($237+($238<<2))|0);
      var $240=$k;
      var $241=(((-$240))|0);
      var $242=(($239+($241<<2))|0);
      var $243=$2;
      var $244=$3;
      var $245=(($243+($244<<2))|0);
      var $246=$k;
      var $247=(((-$246))|0);
      var $248=(($245+($247<<2))|0);
      var $249=$k;
      var $250=$s;
      var $251=1 << $250;
      var $252=___gmpn_sub_1($242, $248, $249, $251);
      $cc2=$252;
      label = 33; break;
    case 33: 
      var $254=$cc2;
      var $255=(($254)|0)!=0;
      if ($255) { label = 34; break; } else { label = 36; break; }
    case 34: 
      var $257=$cc;
      var $258=(($257)|0)!=0;
      if ($258) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $260=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($260);
      $1=0;
      label = 37; break;
    case 36: 
      var $262=$3;
      var $263=((($262)-(1))|0);
      var $264=$tmp;
      var $265=(($264+($263<<2))|0);
      var $266=HEAP32[(($265)>>2)];
      var $267=$s1;
      var $268=$266 >>> (($267)>>>0);
      var $269=$268 & 1;
      $cc2=$269;
      var $270=$tmp;
      var $271=$3;
      var $272=($271<<5);
      var $273=$4;
      var $274=$8;
      var $275=$7;
      var $276=_mpfr_round_raw_2($270, $272, $273, $274, $275);
      var $277=$cc2;
      var $278=$277 ^ $276;
      $cc2=$278;
      var $279=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($279);
      var $280=$cc;
      var $281=$cc2;
      var $282=(($280)|0)==(($281)|0);
      var $283=(($282)&1);
      $1=$283;
      label = 37; break;
    case 37: 
      var $285=$1;
      STACKTOP = __stackBase__;
      return $285;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_can_round_raw["X"]=1;

function _mpfr_setmax($x, $e) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $xn;
      var $i;
      var $sh;
      var $xp;
      $1=$x;
      $2=$e;
      var $3=$2;
      var $4=$1;
      var $5=(($4+8)|0);
      HEAP32[(($5)>>2)]=$3;
      var $6=$1;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=((($8)-(1))|0);
      var $10=((((($9)|0))/(32))&-1);
      var $11=((($10)+(1))|0);
      $xn=$11;
      var $12=$xn;
      var $13=($12<<5);
      var $14=$1;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=((($13)-($16))|0);
      $sh=$17;
      var $18=$1;
      var $19=(($18+12)|0);
      var $20=HEAP32[(($19)>>2)];
      $xp=$20;
      var $21=$sh;
      var $22=-1 << $21;
      var $23=$xp;
      var $24=(($23)|0);
      HEAP32[(($24)>>2)]=$22;
      $i=1;
      label = 3; break;
    case 3: 
      var $26=$i;
      var $27=$xn;
      var $28=(($26)|0) < (($27)|0);
      if ($28) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $30=$i;
      var $31=$xp;
      var $32=(($31+($30<<2))|0);
      HEAP32[(($32)>>2)]=-1;
      label = 5; break;
    case 5: 
      var $34=$i;
      var $35=((($34)+(1))|0);
      $i=$35;
      label = 3; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_setmax["X"]=1;

function _mpfr_set4($a, $b, $rnd_mode, $signb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $inex;
      var $_dests;
      var $_srcs;
      var $_destp;
      var $_destprec;
      var $_srcprec;
      var $_sh;
      var $_sp;
      var $_rb;
      var $_sb;
      var $_ulp;
      var $_mask;
      var $_tmp;
      var $_n;
      var $_tmp1;
      var $_n2;
      $2=$a;
      $3=$b;
      $4=$rnd_mode;
      $5=$signb;
      var $6=$5;
      var $7=$2;
      var $8=(($7+4)|0);
      HEAP32[(($8)>>2)]=$6;
      var $9=$3;
      var $10=(($9+8)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=$2;
      var $13=(($12+8)|0);
      HEAP32[(($13)>>2)]=$11;
      var $14=$3;
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0) <= -2147483645;
      var $18=$17 ^ 1;
      var $19=$18 ^ 1;
      var $20=(($19)&1);
      var $21=($20);
      var $22=(($21)|0)!=0;
      if ($22) { label = 3; break; } else { label = 6; break; }
    case 3: 
      var $24=$3;
      var $25=(($24+8)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0)==-2147483646;
      if ($27) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $29=HEAP32[((5257648)>>2)];
      var $30=$29 | 4;
      HEAP32[((5257648)>>2)]=$30;
      $1=0;
      label = 82; break;
    case 5: 
      $1=0;
      label = 82; break;
    case 6: 
      var $33=$3;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$2;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=(($35)|0)==(($38)|0);
      var $40=$39 ^ 1;
      var $41=$40 ^ 1;
      var $42=(($41)&1);
      var $43=($42);
      var $44=(($43)|0)!=0;
      if ($44) { label = 7; break; } else { label = 12; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $47=$2;
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$3;
      var $51=(($50+12)|0);
      var $52=HEAP32[(($51)>>2)];
      var $53=(($49)|0)!=(($52)|0);
      if ($53) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $55=$2;
      var $56=(($55+12)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$57;
      var $59=$3;
      var $60=(($59+12)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$61;
      var $63=$3;
      var $64=(($63)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=((($65)-(1))|0);
      var $67=((((($66)|0))/(32))&-1);
      var $68=((($67)+(1))|0);
      var $69=($68<<2);
      assert($69 % 1 === 0);_memcpy($58, $62, $69);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      $1=0;
      label = 82; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $74=$3;
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      $_srcprec=$76;
      var $77=$2;
      var $78=(($77)|0);
      var $79=HEAP32[(($78)>>2)];
      $_destprec=$79;
      var $80=$2;
      var $81=(($80+12)|0);
      var $82=HEAP32[(($81)>>2)];
      $_destp=$82;
      var $83=$_destprec;
      var $84=$_srcprec;
      var $85=(($83)|0) >= (($84)|0);
      var $86=$85 ^ 1;
      var $87=$86 ^ 1;
      var $88=(($87)&1);
      var $89=($88);
      var $90=(($89)|0)!=0;
      if ($90) { label = 14; break; } else { label = 19; break; }
    case 14: 
      var $92=$_srcprec;
      var $93=((($92)-(1))|0);
      var $94=((((($93)|0))/(32))&-1);
      var $95=((($94)+(1))|0);
      $_srcs=$95;
      var $96=$_destprec;
      var $97=((($96)-(1))|0);
      var $98=((((($97)|0))/(32))&-1);
      var $99=((($98)+(1))|0);
      var $100=$_srcs;
      var $101=((($99)-($100))|0);
      $_dests=$101;
      label = 15; break;
    case 15: 
      var $103=$_destp;
      var $104=$_dests;
      var $105=(($103+($104<<2))|0);
      var $106=$3;
      var $107=(($106+12)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($105)|0)!=(($108)|0);
      if ($109) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $111=$_destp;
      var $112=$_dests;
      var $113=(($111+($112<<2))|0);
      var $114=$113;
      var $115=$3;
      var $116=(($115+12)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$117;
      var $119=$_srcs;
      var $120=($119<<2);
      assert($120 % 1 === 0);_memcpy($114, $118, $120);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $123=$_destp;
      var $124=$123;
      var $125=$_dests;
      var $126=($125<<2);
      _memset($124, 0, $126);
      $inex=0;
      label = 77; break;
    case 19: 
      var $128=$_srcprec;
      var $129=((($128)-(1))|0);
      var $130=((((($129)|0))/(32))&-1);
      var $131=((($130)+(1))|0);
      $_srcs=$131;
      var $132=$_destprec;
      var $133=((($132)-(1))|0);
      var $134=((((($133)|0))/(32))&-1);
      var $135=((($134)+(1))|0);
      $_dests=$135;
      label = 20; break;
    case 20: 
      var $137=$_destprec;
      var $138=(((-$137))|0);
      var $139=((($138)>>>0))%(32);
      $_sh=$139;
      label = 21; break;
    case 21: 
      var $141=$3;
      var $142=(($141+12)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=$_srcs;
      var $145=(($143+($144<<2))|0);
      var $146=$_dests;
      var $147=(((-$146))|0);
      var $148=(($145+($147<<2))|0);
      $_sp=$148;
      var $149=$_sh;
      var $150=(($149)|0)!=0;
      var $151=$150 ^ 1;
      var $152=$151 ^ 1;
      var $153=(($152)&1);
      var $154=($153);
      var $155=(($154)|0)!=0;
      if ($155) { label = 22; break; } else { label = 33; break; }
    case 22: 
      var $157=$_sh;
      var $158=((($157)-(1))|0);
      var $159=1 << $158;
      $_mask=$159;
      var $160=$_sp;
      var $161=(($160)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=$_mask;
      var $164=$162 & $163;
      $_rb=$164;
      var $165=$_sp;
      var $166=(($165)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=$_mask;
      var $169=((($168)-(1))|0);
      var $170=$167 & $169;
      $_sb=$170;
      var $171=$_sb;
      var $172=(($171)|0)==0;
      var $173=$172 ^ 1;
      var $174=$173 ^ 1;
      var $175=(($174)&1);
      var $176=($175);
      var $177=(($176)|0)!=0;
      if ($177) { label = 23; break; } else { label = 32; break; }
    case 23: 
      var $179=$4;
      var $180=(($179)|0)==0;
      if ($180) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $182=$_rb;
      var $183=(($182)|0)==0;
      if ($183) { label = 25; break; } else { label = 32; break; }
    case 25: 
      var $185=$_sp;
      $_tmp=$185;
      var $186=$_srcs;
      var $187=$_dests;
      var $188=((($186)-($187))|0);
      $_n=$188;
      label = 26; break;
    case 26: 
      var $190=$_n;
      var $191=(($190)|0)!=0;
      if ($191) { label = 27; break; } else { var $196 = 0;label = 28; break; }
    case 27: 
      var $193=$_sb;
      var $194=(($193)|0)==0;
      var $196 = $194;label = 28; break;
    case 28: 
      var $196;
      if ($196) { label = 29; break; } else { label = 31; break; }
    case 29: 
      var $198=$_tmp;
      var $199=((($198)-(4))|0);
      $_tmp=$199;
      var $200=HEAP32[(($199)>>2)];
      $_sb=$200;
      label = 30; break;
    case 30: 
      var $202=$_n;
      var $203=((($202)-(1))|0);
      $_n=$203;
      label = 26; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $206=$_mask;
      var $207=($206<<1);
      $_ulp=$207;
      label = 44; break;
    case 33: 
      var $209=$_sp;
      var $210=((($209)-(4))|0);
      var $211=HEAP32[(($210)>>2)];
      var $212=$211 & -2147483648;
      $_rb=$212;
      var $213=$_sp;
      var $214=((($213)-(4))|0);
      var $215=HEAP32[(($214)>>2)];
      var $216=$215 & 2147483647;
      $_sb=$216;
      var $217=$_sb;
      var $218=(($217)|0)==0;
      var $219=$218 ^ 1;
      var $220=$219 ^ 1;
      var $221=(($220)&1);
      var $222=($221);
      var $223=(($222)|0)!=0;
      if ($223) { label = 34; break; } else { label = 43; break; }
    case 34: 
      var $225=$4;
      var $226=(($225)|0)==0;
      if ($226) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $228=$_rb;
      var $229=(($228)|0)==0;
      if ($229) { label = 36; break; } else { label = 43; break; }
    case 36: 
      var $231=$_sp;
      var $232=((($231)-(4))|0);
      $_tmp1=$232;
      var $233=$_srcs;
      var $234=$_dests;
      var $235=((($233)-($234))|0);
      var $236=((($235)-(1))|0);
      $_n2=$236;
      label = 37; break;
    case 37: 
      var $238=$_n2;
      var $239=(($238)|0)!=0;
      if ($239) { label = 38; break; } else { var $244 = 0;label = 39; break; }
    case 38: 
      var $241=$_sb;
      var $242=(($241)|0)==0;
      var $244 = $242;label = 39; break;
    case 39: 
      var $244;
      if ($244) { label = 40; break; } else { label = 42; break; }
    case 40: 
      var $246=$_tmp1;
      var $247=((($246)-(4))|0);
      $_tmp1=$247;
      var $248=HEAP32[(($247)>>2)];
      $_sb=$248;
      label = 41; break;
    case 41: 
      var $250=$_n2;
      var $251=((($250)-(1))|0);
      $_n2=$251;
      label = 37; break;
    case 42: 
      label = 43; break;
    case 43: 
      $_ulp=1;
      label = 44; break;
    case 44: 
      var $255=$4;
      var $256=(($255)|0)==0;
      var $257=$256 ^ 1;
      var $258=$257 ^ 1;
      var $259=(($258)&1);
      var $260=($259);
      var $261=(($260)|0)!=0;
      if ($261) { label = 45; break; } else { label = 69; break; }
    case 45: 
      var $263=$_rb;
      var $264=(($263)|0)==0;
      if ($264) { label = 46; break; } else { label = 56; break; }
    case 46: 
      label = 47; break;
    case 47: 
      var $267=$_sb;
      var $268=$_rb;
      var $269=$267 | $268;
      var $270=(($269)|0)!=0;
      var $271=$270 ^ 1;
      var $272=$271 ^ 1;
      var $273=(($272)&1);
      var $274=($273);
      var $275=(($274)|0)!=0;
      if ($275) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $277=$5;
      var $278=(((-$277))|0);
      var $281 = $278;label = 50; break;
    case 49: 
      var $281 = 0;label = 50; break;
    case 50: 
      var $281;
      $inex=$281;
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $284=$_destp;
      var $285=$_sp;
      var $286=(($284)|0)!=(($285)|0);
      if ($286) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $288=$_destp;
      var $289=$288;
      var $290=$_sp;
      var $291=$290;
      var $292=$_dests;
      var $293=($292<<2);
      assert($293 % 1 === 0);_memcpy($289, $291, $293);
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $296=$_ulp;
      var $297=((($296)-(1))|0);
      var $298=$297 ^ -1;
      var $299=$_destp;
      var $300=(($299)|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=$301 & $298;
      HEAP32[(($300)>>2)]=$302;
      label = 68; break;
    case 56: 
      var $304=$_sb;
      var $305=(($304)|0)==0;
      var $306=$305 ^ 1;
      var $307=$306 ^ 1;
      var $308=(($307)&1);
      var $309=($308);
      var $310=(($309)|0)!=0;
      if ($310) { label = 57; break; } else { label = 60; break; }
    case 57: 
      var $312=$_sp;
      var $313=(($312)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$_ulp;
      var $316=$314 & $315;
      var $317=(($316)|0)==0;
      if ($317) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $319=$5;
      var $320=(((-$319))|0);
      $inex=$320;
      label = 51; break;
    case 59: 
      label = 61; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $324=$5;
      $inex=$324;
      label = 62; break;
    case 62: 
      var $326=$_destp;
      var $327=$_sp;
      var $328=$_dests;
      var $329=$_ulp;
      var $330=___gmpn_add_1($326, $327, $328, $329);
      var $331=(($330)|0)!=0;
      var $332=$331 ^ 1;
      var $333=$332 ^ 1;
      var $334=(($333)&1);
      var $335=($334);
      var $336=(($335)|0)!=0;
      if ($336) { label = 63; break; } else { label = 66; break; }
    case 63: 
      var $338=$_dests;
      var $339=((($338)-(1))|0);
      var $340=$_destp;
      var $341=(($340+($339<<2))|0);
      HEAP32[(($341)>>2)]=-2147483648;
      var $342=$2;
      var $343=(($342+8)|0);
      var $344=HEAP32[(($343)>>2)];
      var $345=((($344)+(1))|0);
      HEAP32[(($343)>>2)]=$345;
      var $346=HEAP32[((5257656)>>2)];
      var $347=(($345)|0) > (($346)|0);
      var $348=$347 ^ 1;
      var $349=$348 ^ 1;
      var $350=(($349)&1);
      var $351=($350);
      var $352=(($351)|0)!=0;
      if ($352) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $354=$2;
      var $355=$4;
      var $356=$5;
      var $357=_mpfr_overflow($354, $355, $356);
      $1=$357;
      label = 82; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $360=$_ulp;
      var $361=((($360)-(1))|0);
      var $362=$361 ^ -1;
      var $363=$_destp;
      var $364=(($363)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=$365 & $362;
      HEAP32[(($364)>>2)]=$366;
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 76; break;
    case 69: 
      var $370=$4;
      var $371=(($370)|0)==1;
      if ($371) { var $380 = 1;label = 71; break; } else { label = 70; break; }
    case 70: 
      var $373=$4;
      var $374=$5;
      var $375=(($374)|0) < 0;
      var $376=(($375)&1);
      var $377=((($373)+($376))|0);
      var $378=(($377)|0)==3;
      var $380 = $378;label = 71; break;
    case 71: 
      var $380;
      var $381=$380 ^ 1;
      var $382=$381 ^ 1;
      var $383=(($382)&1);
      var $384=($383);
      var $385=(($384)|0)!=0;
      if ($385) { label = 72; break; } else { label = 73; break; }
    case 72: 
      label = 47; break;
    case 73: 
      var $388=$_sb;
      var $389=$_rb;
      var $390=$388 | $389;
      var $391=(($390)|0)==0;
      var $392=$391 ^ 1;
      var $393=$392 ^ 1;
      var $394=(($393)&1);
      var $395=($394);
      var $396=(($395)|0)!=0;
      if ($396) { label = 74; break; } else { label = 75; break; }
    case 74: 
      $inex=0;
      label = 51; break;
    case 75: 
      label = 61; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $402=$inex;
      var $403=(($402)|0)!=0;
      if ($403) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $405=HEAP32[((5257648)>>2)];
      var $406=$405 | 8;
      HEAP32[((5257648)>>2)]=$406;
      var $407=$inex;
      var $410 = $407;label = 81; break;
    case 80: 
      var $410 = 0;label = 81; break;
    case 81: 
      var $410;
      $1=$410;
      label = 82; break;
    case 82: 
      var $412=$1;

      return $412;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_set4["X"]=1;

function _mpfr_setmin($x, $e) {
  var label = 0;


  var $1;
  var $2;
  var $xn;
  var $xp;
  $1=$x;
  $2=$e;
  var $3=$2;
  var $4=$1;
  var $5=(($4+8)|0);
  HEAP32[(($5)>>2)]=$3;
  var $6=$1;
  var $7=(($6)|0);
  var $8=HEAP32[(($7)>>2)];
  var $9=((($8)-(1))|0);
  var $10=((((($9)|0))/(32))&-1);
  $xn=$10;
  var $11=$1;
  var $12=(($11+12)|0);
  var $13=HEAP32[(($12)>>2)];
  $xp=$13;
  var $14=$xn;
  var $15=$xp;
  var $16=(($15+($14<<2))|0);
  HEAP32[(($16)>>2)]=-2147483648;
  var $17=$xp;
  var $18=$17;
  var $19=$xn;
  var $20=($19<<2);
  _memset($18, 0, $20);

  return;
}


function _mpfr_set_d($r, $d, $rnd_mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 60)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3=__stackBase__;
      var $4;
      var $signd;
      var $inexact;
      var $cnt;
      var $i;
      var $k;
      var $tmp=(__stackBase__)+(8);
      var $tmpmant=(__stackBase__)+(24);
      var $expo=(__stackBase__)+(32);
      var $poszero=(__stackBase__)+(44);
      var $negzero=(__stackBase__)+(52);
      var $__xr;
      var $__a;
      $2=$r;
      (HEAPF64[(tempDoublePtr)>>3]=$d,HEAP32[(($3)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      $4=$rnd_mode;
      var $5=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $6=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $7=$5 != $6;
      var $8=$7 ^ 1;
      var $9=$8 ^ 1;
      var $10=(($9)&1);
      var $11=($10);
      var $12=(($11)|0)!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=$2;
      var $15=(($14+8)|0);
      HEAP32[(($15)>>2)]=-2147483646;
      var $16=HEAP32[((5257648)>>2)];
      var $17=$16 | 4;
      HEAP32[((5257648)>>2)]=$17;
      $1=0;
      label = 55; break;
    case 4: 
      var $19=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $20=$19 == 0;
      var $21=$20 ^ 1;
      var $22=$21 ^ 1;
      var $23=(($22)&1);
      var $24=($23);
      var $25=(($24)|0)!=0;
      if ($25) { label = 5; break; } else { label = 12; break; }
    case 5: 
      var $27=$2;
      var $28=(($27+8)|0);
      HEAP32[(($28)>>2)]=-2147483647;
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($poszero)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($poszero)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      (HEAPF64[(tempDoublePtr)>>3]=0,HEAP32[(($negzero)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($negzero)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $29=$3;
      var $30=$poszero;
      var $31=_memcmp($29, $30, 8);
      var $32=(($31)|0)==0;
      if ($32) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $34=$2;
      var $35=(($34+4)|0);
      HEAP32[(($35)>>2)]=1;
      label = 11; break;
    case 7: 
      var $37=$3;
      var $38=$negzero;
      var $39=_memcmp($37, $38, 8);
      var $40=(($39)|0)==0;
      if ($40) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $42=$2;
      var $43=(($42+4)|0);
      HEAP32[(($43)>>2)]=-1;
      label = 10; break;
    case 9: 
      var $45=$2;
      var $46=(($45+4)|0);
      HEAP32[(($46)>>2)]=1;
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      $1=0;
      label = 55; break;
    case 12: 
      var $50=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $51=$50 > 1.7976931348623157e+308;
      if ($51) { var $56 = 1;label = 14; break; } else { label = 13; break; }
    case 13: 
      var $53=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $54=$53 < -1.7976931348623157e+308;
      var $56 = $54;label = 14; break;
    case 14: 
      var $56;
      var $57=$56 ^ 1;
      var $58=$57 ^ 1;
      var $59=(($58)&1);
      var $60=($59);
      var $61=(($60)|0)!=0;
      if ($61) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $63=$2;
      var $64=(($63+8)|0);
      HEAP32[(($64)>>2)]=-2147483645;
      var $65=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $66=$65 > 0;
      if ($66) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $68=$2;
      var $69=(($68+4)|0);
      HEAP32[(($69)>>2)]=1;
      label = 18; break;
    case 17: 
      var $71=$2;
      var $72=(($71+4)|0);
      HEAP32[(($72)>>2)]=-1;
      label = 18; break;
    case 18: 
      $1=0;
      label = 55; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $77=HEAP32[((5257648)>>2)];
      var $78=(($expo)|0);
      HEAP32[(($78)>>2)]=$77;
      var $79=HEAP32[((5257652)>>2)];
      var $80=(($expo+4)|0);
      HEAP32[(($80)>>2)]=$79;
      var $81=HEAP32[((5257656)>>2)];
      var $82=(($expo+8)|0);
      HEAP32[(($82)>>2)]=$81;
      HEAP32[((5257652)>>2)]=-1073741823;
      HEAP32[((5257656)>>2)]=1073741823;
      var $83=(($tmpmant)|0);
      var $84=(($tmp)|0);
      var $85=(($84+12)|0);
      HEAP32[(($85)>>2)]=$83;
      var $86=(($tmp)|0);
      var $87=(($86)|0);
      HEAP32[(($87)>>2)]=53;
      var $88=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $89=$88 < 0;
      var $90=$89 ? -1 : 1;
      $signd=$90;
      var $91=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $92=$91 >= 0;
      if ($92) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $94=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $99 = $94;label = 24; break;
    case 23: 
      var $96=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $97=(-$96);
      var $99 = $97;label = 24; break;
    case 24: 
      var $99;
      (HEAPF64[(tempDoublePtr)>>3]=$99,HEAP32[(($3)>>2)]=HEAP32[((tempDoublePtr)>>2)],HEAP32[((($3)+(4))>>2)]=HEAP32[(((tempDoublePtr)+(4))>>2)]);
      var $100=(($tmpmant)|0);
      var $101=(HEAP32[((tempDoublePtr)>>2)]=HEAP32[(($3)>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[((($3)+(4))>>2)],HEAPF64[(tempDoublePtr)>>3]);
      var $102=___gmpfr_extract_double($100, $101);
      var $103=(($tmp)|0);
      var $104=(($103+8)|0);
      HEAP32[(($104)>>2)]=$102;
      $i=2;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $107=$i;
      var $108=((($107)-(1))|0);
      var $109=(($tmpmant+($108<<2))|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=(($110)|0)!=0;
      if ($111) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 29; break;
    case 28: 
      var $114=$i;
      var $115=((($114)-(1))|0);
      $i=$115;
      label = 26; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $118=$i;
      var $119=(((2)-($118))|0);
      $k=$119;
      label = 31; break;
    case 31: 
      var $121=$i;
      var $122=((($121)-(1))|0);
      var $123=(($tmpmant+($122<<2))|0);
      var $124=HEAP32[(($123)>>2)];
      $__xr=$124;
      var $125=$__xr;
      var $126=(($125)>>>0) < 65536;
      if ($126) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $128=$__xr;
      var $129=(($128)>>>0) < 256;
      var $130=$129 ? 1 : 9;
      var $136 = $130;label = 34; break;
    case 33: 
      var $132=$__xr;
      var $133=(($132)>>>0) < 16777216;
      var $134=$133 ? 17 : 25;
      var $136 = $134;label = 34; break;
    case 34: 
      var $136;
      $__a=$136;
      var $137=$__a;
      var $138=(((33)-($137))|0);
      var $139=$__xr;
      var $140=$__a;
      var $141=$139 >>> (($140)>>>0);
      var $142=((5248192+$141)|0);
      var $143=HEAP8[($142)];
      var $144=(($143)&255);
      var $145=((($138)-($144))|0);
      $cnt=$145;
      label = 35; break;
    case 35: 
      var $147=$cnt;
      var $148=(($147)|0)!=0;
      var $149=$148 ^ 1;
      var $150=$149 ^ 1;
      var $151=(($150)&1);
      var $152=($151);
      var $153=(($152)|0)!=0;
      if ($153) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $155=(($tmpmant)|0);
      var $156=$k;
      var $157=(($155+($156<<2))|0);
      var $158=(($tmpmant)|0);
      var $159=$i;
      var $160=$cnt;
      var $161=___gmpn_lshift($157, $158, $159, $160);
      label = 44; break;
    case 37: 
      var $163=$k;
      var $164=(($163)|0)!=0;
      if ($164) { label = 38; break; } else { label = 43; break; }
    case 38: 
      label = 39; break;
    case 39: 
      var $167=(($tmpmant)|0);
      var $168=$k;
      var $169=(($167+($168<<2))|0);
      var $170=(($tmpmant)|0);
      var $171=(($169)|0)!=(($170)|0);
      if ($171) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $173=(($tmpmant)|0);
      var $174=$k;
      var $175=(($173+($174<<2))|0);
      var $176=$175;
      var $177=$tmpmant;
      var $178=$i;
      var $179=($178<<2);
      assert($179 % 1 === 0);_memcpy($176, $177, $179);
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $184=$k;
      var $185=(($184)|0)!=0;
      var $186=$185 ^ 1;
      var $187=$186 ^ 1;
      var $188=(($187)&1);
      var $189=($188);
      var $190=(($189)|0)!=0;
      if ($190) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $192=$tmpmant;
      var $193=$k;
      var $194=($193<<2);
      _memset($192, 0, $194);
      label = 46; break;
    case 46: 
      var $196=$cnt;
      var $197=$k;
      var $198=($197<<5);
      var $199=((($196)+($198))|0);
      var $200=(($tmp)|0);
      var $201=(($200+8)|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=((($202)-($199))|0);
      HEAP32[(($201)>>2)]=$203;
      var $204=$2;
      var $205=(($tmp)|0);
      var $206=$4;
      var $207=$signd;
      var $208=_mpfr_set4($204, $205, $206, $207);
      $inexact=$208;
      var $209=(($expo)|0);
      var $210=HEAP32[(($209)>>2)];
      HEAP32[((5257648)>>2)]=$210;
      var $211=(($expo+4)|0);
      var $212=HEAP32[(($211)>>2)];
      HEAP32[((5257652)>>2)]=$212;
      var $213=(($expo+8)|0);
      var $214=HEAP32[(($213)>>2)];
      HEAP32[((5257656)>>2)]=$214;
      var $215=$2;
      var $216=(($215+8)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=HEAP32[((5257652)>>2)];
      var $219=(($217)|0) >= (($218)|0);
      if ($219) { label = 47; break; } else { var $227 = 0;label = 48; break; }
    case 47: 
      var $221=$2;
      var $222=(($221+8)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=HEAP32[((5257656)>>2)];
      var $225=(($223)|0) <= (($224)|0);
      var $227 = $225;label = 48; break;
    case 48: 
      var $227;
      var $228=$227 ^ 1;
      var $229=$228 ^ 1;
      var $230=(($229)&1);
      var $231=($230);
      var $232=(($231)|0)!=0;
      if ($232) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $234=$inexact;
      var $235=(($234)|0)!=0;
      if ($235) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $237=HEAP32[((5257648)>>2)];
      var $238=$237 | 8;
      HEAP32[((5257648)>>2)]=$238;
      var $239=$inexact;
      var $242 = $239;label = 52; break;
    case 51: 
      var $242 = 0;label = 52; break;
    case 52: 
      var $242;
      var $249 = $242;label = 54; break;
    case 53: 
      var $244=$2;
      var $245=$inexact;
      var $246=$4;
      var $247=_mpfr_check_range($244, $245, $246);
      var $249 = $247;label = 54; break;
    case 54: 
      var $249;
      $1=$249;
      label = 55; break;
    case 55: 
      var $251=$1;
      STACKTOP = __stackBase__;
      return $251;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_set_d["X"]=1;

function ___gmpfr_extract_double($rp, $d) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $exp;
      var $manl;
      var $manh;
      $1=$rp;
      $2=$d;
      $exp=0;
      var $3=$2;
      var $4=$3 >= 1;
      if ($4) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $6=$2;
      var $7=($6)*(0.5);
      var $8=$2;
      var $9=$7 != $8;
      var $10=$9 ^ 1;
      var $11=$10 ^ 1;
      var $12=(($11)&1);
      var $13=($12);
      var $14=(($13)|0)!=0;
      if ($14) { var $19 = 1;label = 5; break; } else { label = 4; break; }
    case 4: 
      _mpfr_assert_fail(((5249332)|0), 93, ((5249792)|0));
      var $16=(0);
      var $17=(($16)|0)!=0;
      var $19 = $17;label = 5; break;
    case 5: 
      var $19;
      var $20=(($19)&1);
      label = 6; break;
    case 6: 
      var $22=$2;
      var $23=$22 >= 32768;
      if ($23) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $25=$2;
      var $26=($25)*(0.0000152587890625);
      $2=$26;
      var $27=$exp;
      var $28=((($27)+(16))|0);
      $exp=$28;
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $31=$2;
      var $32=$31 >= 1;
      if ($32) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $34=$2;
      var $35=($34)*(0.5);
      $2=$35;
      var $36=$exp;
      var $37=((($36)+(1))|0);
      $exp=$37;
      label = 9; break;
    case 11: 
      label = 21; break;
    case 12: 
      var $40=$2;
      var $41=$40 < 0.5;
      if ($41) { label = 13; break; } else { label = 20; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $44=$2;
      var $45=$44 < 0.0000152587890625;
      if ($45) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $47=$2;
      var $48=($47)*(65536);
      $2=$48;
      var $49=$exp;
      var $50=((($49)-(16))|0);
      $exp=$50;
      label = 14; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $53=$2;
      var $54=$53 < 0.5;
      if ($54) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $56=$2;
      var $57=($56)*(2);
      $2=$57;
      var $58=$exp;
      var $59=((($58)-(1))|0);
      $exp=$59;
      label = 17; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $63=$2;
      var $64=($63)*(4294967296);
      $2=$64;
      var $65=$2;
      var $66=($65>=0 ? Math.floor($65) : Math.ceil($65));
      $manh=$66;
      var $67=$2;
      var $68=$manh;
      var $69=(($68)>>>0);
      var $70=($67)-($69);
      var $71=($70)*(4294967296);
      var $72=($71>=0 ? Math.floor($71) : Math.ceil($71));
      $manl=$72;
      var $73=$manh;
      var $74=$1;
      var $75=(($74+4)|0);
      HEAP32[(($75)>>2)]=$73;
      var $76=$manl;
      var $77=$1;
      var $78=(($77)|0);
      HEAP32[(($78)>>2)]=$76;
      var $79=$exp;

      return $79;
    default: assert(0, "bad label: " + label);
  }

}
___gmpfr_extract_double["X"]=1;

function _mpfr_sub1($a, $b, $c, $rnd_mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $sign;
      var $diff_exp;
      var $cancel=__stackBase__;
      var $cancel1;
      var $cancel2;
      var $an;
      var $bn;
      var $cn;
      var $cn0;
      var $ap;
      var $bp;
      var $cp;
      var $carry;
      var $bb;
      var $cc;
      var $inexact;
      var $shift_b;
      var $shift_c;
      var $add_exp;
      var $cmp_low;
      var $sh;
      var $k;
      var $tmp_marker=(__stackBase__)+(4);
      var $t;
      var $_dests;
      var $_srcs;
      var $_destp;
      var $_destprec;
      var $_srcprec;
      var $_sh;
      var $_sp;
      var $_rb;
      var $_sb;
      var $_ulp;
      var $_mask;
      var $_tmp;
      var $_n;
      var $_tmp1;
      var $_n2;
      var $ap2;
      var $borrow;
      var $half;
      var $exp_a;
      var $exp_b;
      $2=$a;
      $3=$b;
      $4=$c;
      $5=$rnd_mode;
      $add_exp=0;
      $cmp_low=0;
      HEAP32[(($tmp_marker)>>2)]=0;
      var $6=$2;
      var $7=(($6+12)|0);
      var $8=HEAP32[(($7)>>2)];
      $ap=$8;
      var $9=$2;
      var $10=(($9)|0);
      var $11=HEAP32[(($10)>>2)];
      var $12=((($11)-(1))|0);
      var $13=((((($12)|0))/(32))&-1);
      var $14=((($13)+(1))|0);
      $an=$14;
      var $15=$3;
      var $16=$4;
      var $17=_mpfr_cmp2($15, $16, $cancel);
      $sign=$17;
      var $18=$sign;
      var $19=(($18)|0)==0;
      var $20=$19 ^ 1;
      var $21=$20 ^ 1;
      var $22=(($21)&1);
      var $23=($22);
      var $24=(($23)|0)!=0;
      if ($24) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $26=$5;
      var $27=(($26)|0)==3;
      if ($27) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $29=$2;
      var $30=(($29+4)|0);
      HEAP32[(($30)>>2)]=-1;
      label = 6; break;
    case 5: 
      var $32=$2;
      var $33=(($32+4)|0);
      HEAP32[(($33)>>2)]=1;
      label = 6; break;
    case 6: 
      var $35=$2;
      var $36=(($35+8)|0);
      HEAP32[(($36)>>2)]=-2147483647;
      $1=0;
      label = 277; break;
    case 7: 
      var $38=$sign;
      var $39=(($38)|0) < 0;
      if ($39) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $41=$3;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=(((-$43))|0);
      var $45=$2;
      var $46=(($45+4)|0);
      HEAP32[(($46)>>2)]=$44;
      var $47=$3;
      $t=$47;
      var $48=$4;
      $3=$48;
      var $49=$t;
      $4=$49;
      label = 10; break;
    case 9: 
      var $51=$3;
      var $52=(($51+4)|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$2;
      var $55=(($54+4)|0);
      HEAP32[(($55)>>2)]=$53;
      label = 10; break;
    case 10: 
      var $57=$4;
      var $58=(($57+8)|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$3;
      var $61=(($60+8)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$2;
      var $64=(($63)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=$3;
      var $67=(($66)|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=(($65)|0) > (($68)|0);
      if ($69) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $71=$2;
      var $72=(($71)|0);
      var $73=HEAP32[(($72)>>2)];
      var $79 = $73;label = 13; break;
    case 12: 
      var $75=$3;
      var $76=(($75)|0);
      var $77=HEAP32[(($76)>>2)];
      var $79 = $77;label = 13; break;
    case 13: 
      var $79;
      var $80=((($62)-($79))|0);
      var $81=((($80)-(2))|0);
      var $82=(($59)|0) <= (($81)|0);
      var $83=$82 ^ 1;
      var $84=$83 ^ 1;
      var $85=(($84)&1);
      var $86=($85);
      var $87=(($86)|0)!=0;
      if ($87) { label = 14; break; } else { label = 97; break; }
    case 14: 
      var $89=$3;
      var $90=(($89+8)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$2;
      var $93=(($92+8)|0);
      HEAP32[(($93)>>2)]=$91;
      label = 15; break;
    case 15: 
      var $95=$3;
      var $96=(($95)|0);
      var $97=HEAP32[(($96)>>2)];
      $_srcprec=$97;
      var $98=$2;
      var $99=(($98)|0);
      var $100=HEAP32[(($99)>>2)];
      $_destprec=$100;
      var $101=$2;
      var $102=(($101+12)|0);
      var $103=HEAP32[(($102)>>2)];
      $_destp=$103;
      var $104=$_destprec;
      var $105=$_srcprec;
      var $106=(($104)|0) >= (($105)|0);
      var $107=$106 ^ 1;
      var $108=$107 ^ 1;
      var $109=(($108)&1);
      var $110=($109);
      var $111=(($110)|0)!=0;
      if ($111) { label = 16; break; } else { label = 21; break; }
    case 16: 
      var $113=$_srcprec;
      var $114=((($113)-(1))|0);
      var $115=((((($114)|0))/(32))&-1);
      var $116=((($115)+(1))|0);
      $_srcs=$116;
      var $117=$_destprec;
      var $118=((($117)-(1))|0);
      var $119=((((($118)|0))/(32))&-1);
      var $120=((($119)+(1))|0);
      var $121=$_srcs;
      var $122=((($120)-($121))|0);
      $_dests=$122;
      label = 17; break;
    case 17: 
      var $124=$_destp;
      var $125=$_dests;
      var $126=(($124+($125<<2))|0);
      var $127=$3;
      var $128=(($127+12)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($126)|0)!=(($129)|0);
      if ($130) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $132=$_destp;
      var $133=$_dests;
      var $134=(($132+($133<<2))|0);
      var $135=$134;
      var $136=$3;
      var $137=(($136+12)|0);
      var $138=HEAP32[(($137)>>2)];
      var $139=$138;
      var $140=$_srcs;
      var $141=($140<<2);
      assert($141 % 1 === 0);_memcpy($135, $139, $141);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $144=$_destp;
      var $145=$144;
      var $146=$_dests;
      var $147=($146<<2);
      _memset($145, 0, $147);
      $inexact=0;
      label = 79; break;
    case 21: 
      var $149=$_srcprec;
      var $150=((($149)-(1))|0);
      var $151=((((($150)|0))/(32))&-1);
      var $152=((($151)+(1))|0);
      $_srcs=$152;
      var $153=$_destprec;
      var $154=((($153)-(1))|0);
      var $155=((((($154)|0))/(32))&-1);
      var $156=((($155)+(1))|0);
      $_dests=$156;
      label = 22; break;
    case 22: 
      var $158=$_destprec;
      var $159=(((-$158))|0);
      var $160=((($159)>>>0))%(32);
      $_sh=$160;
      label = 23; break;
    case 23: 
      var $162=$3;
      var $163=(($162+12)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=$_srcs;
      var $166=(($164+($165<<2))|0);
      var $167=$_dests;
      var $168=(((-$167))|0);
      var $169=(($166+($168<<2))|0);
      $_sp=$169;
      var $170=$_sh;
      var $171=(($170)|0)!=0;
      var $172=$171 ^ 1;
      var $173=$172 ^ 1;
      var $174=(($173)&1);
      var $175=($174);
      var $176=(($175)|0)!=0;
      if ($176) { label = 24; break; } else { label = 35; break; }
    case 24: 
      var $178=$_sh;
      var $179=((($178)-(1))|0);
      var $180=1 << $179;
      $_mask=$180;
      var $181=$_sp;
      var $182=(($181)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$_mask;
      var $185=$183 & $184;
      $_rb=$185;
      var $186=$_sp;
      var $187=(($186)|0);
      var $188=HEAP32[(($187)>>2)];
      var $189=$_mask;
      var $190=((($189)-(1))|0);
      var $191=$188 & $190;
      $_sb=$191;
      var $192=$_sb;
      var $193=(($192)|0)==0;
      var $194=$193 ^ 1;
      var $195=$194 ^ 1;
      var $196=(($195)&1);
      var $197=($196);
      var $198=(($197)|0)!=0;
      if ($198) { label = 25; break; } else { label = 34; break; }
    case 25: 
      var $200=$5;
      var $201=(($200)|0)==0;
      if ($201) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $203=$_rb;
      var $204=(($203)|0)==0;
      if ($204) { label = 27; break; } else { label = 34; break; }
    case 27: 
      var $206=$_sp;
      $_tmp=$206;
      var $207=$_srcs;
      var $208=$_dests;
      var $209=((($207)-($208))|0);
      $_n=$209;
      label = 28; break;
    case 28: 
      var $211=$_n;
      var $212=(($211)|0)!=0;
      if ($212) { label = 29; break; } else { var $217 = 0;label = 30; break; }
    case 29: 
      var $214=$_sb;
      var $215=(($214)|0)==0;
      var $217 = $215;label = 30; break;
    case 30: 
      var $217;
      if ($217) { label = 31; break; } else { label = 33; break; }
    case 31: 
      var $219=$_tmp;
      var $220=((($219)-(4))|0);
      $_tmp=$220;
      var $221=HEAP32[(($220)>>2)];
      $_sb=$221;
      label = 32; break;
    case 32: 
      var $223=$_n;
      var $224=((($223)-(1))|0);
      $_n=$224;
      label = 28; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $227=$_mask;
      var $228=($227<<1);
      $_ulp=$228;
      label = 46; break;
    case 35: 
      var $230=$_sp;
      var $231=((($230)-(4))|0);
      var $232=HEAP32[(($231)>>2)];
      var $233=$232 & -2147483648;
      $_rb=$233;
      var $234=$_sp;
      var $235=((($234)-(4))|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=$236 & 2147483647;
      $_sb=$237;
      var $238=$_sb;
      var $239=(($238)|0)==0;
      var $240=$239 ^ 1;
      var $241=$240 ^ 1;
      var $242=(($241)&1);
      var $243=($242);
      var $244=(($243)|0)!=0;
      if ($244) { label = 36; break; } else { label = 45; break; }
    case 36: 
      var $246=$5;
      var $247=(($246)|0)==0;
      if ($247) { label = 38; break; } else { label = 37; break; }
    case 37: 
      var $249=$_rb;
      var $250=(($249)|0)==0;
      if ($250) { label = 38; break; } else { label = 45; break; }
    case 38: 
      var $252=$_sp;
      var $253=((($252)-(4))|0);
      $_tmp1=$253;
      var $254=$_srcs;
      var $255=$_dests;
      var $256=((($254)-($255))|0);
      var $257=((($256)-(1))|0);
      $_n2=$257;
      label = 39; break;
    case 39: 
      var $259=$_n2;
      var $260=(($259)|0)!=0;
      if ($260) { label = 40; break; } else { var $265 = 0;label = 41; break; }
    case 40: 
      var $262=$_sb;
      var $263=(($262)|0)==0;
      var $265 = $263;label = 41; break;
    case 41: 
      var $265;
      if ($265) { label = 42; break; } else { label = 44; break; }
    case 42: 
      var $267=$_tmp1;
      var $268=((($267)-(4))|0);
      $_tmp1=$268;
      var $269=HEAP32[(($268)>>2)];
      $_sb=$269;
      label = 43; break;
    case 43: 
      var $271=$_n2;
      var $272=((($271)-(1))|0);
      $_n2=$272;
      label = 39; break;
    case 44: 
      label = 45; break;
    case 45: 
      $_ulp=1;
      label = 46; break;
    case 46: 
      var $276=$5;
      var $277=(($276)|0)==0;
      var $278=$277 ^ 1;
      var $279=$278 ^ 1;
      var $280=(($279)&1);
      var $281=($280);
      var $282=(($281)|0)!=0;
      if ($282) { label = 47; break; } else { label = 71; break; }
    case 47: 
      var $284=$_rb;
      var $285=(($284)|0)==0;
      if ($285) { label = 48; break; } else { label = 58; break; }
    case 48: 
      label = 49; break;
    case 49: 
      var $288=$_sb;
      var $289=$_rb;
      var $290=$288 | $289;
      var $291=(($290)|0)!=0;
      var $292=$291 ^ 1;
      var $293=$292 ^ 1;
      var $294=(($293)&1);
      var $295=($294);
      var $296=(($295)|0)!=0;
      if ($296) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $298=$2;
      var $299=(($298+4)|0);
      var $300=HEAP32[(($299)>>2)];
      var $301=(((-$300))|0);
      var $304 = $301;label = 52; break;
    case 51: 
      var $304 = 0;label = 52; break;
    case 52: 
      var $304;
      $inexact=$304;
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $307=$_destp;
      var $308=$_sp;
      var $309=(($307)|0)!=(($308)|0);
      if ($309) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $311=$_destp;
      var $312=$311;
      var $313=$_sp;
      var $314=$313;
      var $315=$_dests;
      var $316=($315<<2);
      assert($316 % 1 === 0);_memcpy($312, $314, $316);
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $319=$_ulp;
      var $320=((($319)-(1))|0);
      var $321=$320 ^ -1;
      var $322=$_destp;
      var $323=(($322)|0);
      var $324=HEAP32[(($323)>>2)];
      var $325=$324 & $321;
      HEAP32[(($323)>>2)]=$325;
      label = 70; break;
    case 58: 
      var $327=$_sb;
      var $328=(($327)|0)==0;
      var $329=$328 ^ 1;
      var $330=$329 ^ 1;
      var $331=(($330)&1);
      var $332=($331);
      var $333=(($332)|0)!=0;
      if ($333) { label = 59; break; } else { label = 62; break; }
    case 59: 
      var $335=$_sp;
      var $336=(($335)|0);
      var $337=HEAP32[(($336)>>2)];
      var $338=$_ulp;
      var $339=$337 & $338;
      var $340=(($339)|0)==0;
      if ($340) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $342=$2;
      var $343=(($342+4)|0);
      var $344=HEAP32[(($343)>>2)];
      var $345=((($344)*(-2))&-1);
      $inexact=$345;
      label = 53; break;
    case 61: 
      var $347=$2;
      var $348=(($347+4)|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=($349<<1);
      $inexact=$350;
      label = 64; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $353=$2;
      var $354=(($353+4)|0);
      var $355=HEAP32[(($354)>>2)];
      $inexact=$355;
      label = 64; break;
    case 64: 
      var $357=$_destp;
      var $358=$_sp;
      var $359=$_dests;
      var $360=$_ulp;
      var $361=___gmpn_add_1($357, $358, $359, $360);
      var $362=(($361)|0)!=0;
      var $363=$362 ^ 1;
      var $364=$363 ^ 1;
      var $365=(($364)&1);
      var $366=($365);
      var $367=(($366)|0)!=0;
      if ($367) { label = 65; break; } else { label = 68; break; }
    case 65: 
      var $369=$_dests;
      var $370=((($369)-(1))|0);
      var $371=$_destp;
      var $372=(($371+($370<<2))|0);
      HEAP32[(($372)>>2)]=-2147483648;
      var $373=$2;
      var $374=(($373+8)|0);
      var $375=HEAP32[(($374)>>2)];
      var $376=((($375)+(1))|0);
      HEAP32[(($374)>>2)]=$376;
      var $377=HEAP32[((5257656)>>2)];
      var $378=(($376)|0) > (($377)|0);
      var $379=$378 ^ 1;
      var $380=$379 ^ 1;
      var $381=(($380)&1);
      var $382=($381);
      var $383=(($382)|0)!=0;
      if ($383) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $385=$2;
      var $386=$5;
      var $387=$2;
      var $388=(($387+4)|0);
      var $389=HEAP32[(($388)>>2)];
      var $390=_mpfr_overflow($385, $386, $389);
      $inexact=$390;
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $393=$_ulp;
      var $394=((($393)-(1))|0);
      var $395=$394 ^ -1;
      var $396=$_destp;
      var $397=(($396)|0);
      var $398=HEAP32[(($397)>>2)];
      var $399=$398 & $395;
      HEAP32[(($397)>>2)]=$399;
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 78; break;
    case 71: 
      var $403=$5;
      var $404=(($403)|0)==1;
      if ($404) { var $415 = 1;label = 73; break; } else { label = 72; break; }
    case 72: 
      var $406=$5;
      var $407=$2;
      var $408=(($407+4)|0);
      var $409=HEAP32[(($408)>>2)];
      var $410=(($409)|0) < 0;
      var $411=(($410)&1);
      var $412=((($406)+($411))|0);
      var $413=(($412)|0)==3;
      var $415 = $413;label = 73; break;
    case 73: 
      var $415;
      var $416=$415 ^ 1;
      var $417=$416 ^ 1;
      var $418=(($417)&1);
      var $419=($418);
      var $420=(($419)|0)!=0;
      if ($420) { label = 74; break; } else { label = 75; break; }
    case 74: 
      label = 49; break;
    case 75: 
      var $423=$_sb;
      var $424=$_rb;
      var $425=$423 | $424;
      var $426=(($425)|0)==0;
      var $427=$426 ^ 1;
      var $428=$427 ^ 1;
      var $429=(($428)&1);
      var $430=($429);
      var $431=(($430)|0)!=0;
      if ($431) { label = 76; break; } else { label = 77; break; }
    case 76: 
      $inexact=0;
      label = 53; break;
    case 77: 
      label = 63; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $437=$inexact;
      var $438=(($437)|0)==0;
      if ($438) { label = 81; break; } else { label = 91; break; }
    case 81: 
      var $440=$5;
      var $441=(($440)|0)==1;
      if ($441) { label = 83; break; } else { label = 82; break; }
    case 82: 
      var $443=$5;
      var $444=$2;
      var $445=(($444+4)|0);
      var $446=HEAP32[(($445)>>2)];
      var $447=(($446)|0) < 0;
      var $448=(($447)&1);
      var $449=((($443)+($448))|0);
      var $450=(($449)|0)==3;
      if ($450) { label = 83; break; } else { label = 87; break; }
    case 83: 
      var $452=$2;
      _mpfr_nexttozero($452);
      var $453=$2;
      var $454=(($453+4)|0);
      var $455=HEAP32[(($454)>>2)];
      var $456=(((-$455))|0);
      var $457=(($456)|0)!=0;
      if ($457) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $459=HEAP32[((5257648)>>2)];
      var $460=$459 | 8;
      HEAP32[((5257648)>>2)]=$460;
      var $461=$2;
      var $462=(($461+4)|0);
      var $463=HEAP32[(($462)>>2)];
      var $464=(((-$463))|0);
      var $467 = $464;label = 86; break;
    case 85: 
      var $467 = 0;label = 86; break;
    case 86: 
      var $467;
      $1=$467;
      label = 277; break;
    case 87: 
      var $469=$2;
      var $470=(($469+4)|0);
      var $471=HEAP32[(($470)>>2)];
      var $472=(($471)|0)!=0;
      if ($472) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $474=HEAP32[((5257648)>>2)];
      var $475=$474 | 8;
      HEAP32[((5257648)>>2)]=$475;
      var $476=$2;
      var $477=(($476+4)|0);
      var $478=HEAP32[(($477)>>2)];
      var $481 = $478;label = 90; break;
    case 89: 
      var $481 = 0;label = 90; break;
    case 90: 
      var $481;
      $1=$481;
      label = 277; break;
    case 91: 
      var $483=$inexact;
      var $484=$2;
      var $485=(($484+4)|0);
      var $486=HEAP32[(($485)>>2)];
      var $487=($486<<1);
      var $488=(($483)|0)==(($487)|0);
      var $489=$488 ^ 1;
      var $490=$489 ^ 1;
      var $491=(($490)&1);
      var $492=($491);
      var $493=(($492)|0)!=0;
      if ($493) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $495=$2;
      _mpfr_nexttozero($495);
      var $496=$2;
      var $497=(($496+4)|0);
      var $498=HEAP32[(($497)>>2)];
      var $499=(((-$498))|0);
      $inexact=$499;
      label = 93; break;
    case 93: 
      var $501=$inexact;
      var $502=(($501)|0)!=0;
      if ($502) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $504=HEAP32[((5257648)>>2)];
      var $505=$504 | 8;
      HEAP32[((5257648)>>2)]=$505;
      var $506=$inexact;
      var $509 = $506;label = 96; break;
    case 95: 
      var $509 = 0;label = 96; break;
    case 96: 
      var $509;
      $1=$509;
      label = 277; break;
    case 97: 
      var $511=$3;
      var $512=(($511+8)|0);
      var $513=HEAP32[(($512)>>2)];
      var $514=$4;
      var $515=(($514+8)|0);
      var $516=HEAP32[(($515)>>2)];
      var $517=((($513)-($516))|0);
      $diff_exp=$517;
      var $518=$3;
      var $519=(($518)|0);
      var $520=HEAP32[(($519)>>2)];
      var $521=((($520)-(1))|0);
      var $522=((((($521)|0))/(32))&-1);
      var $523=((($522)+(1))|0);
      $bn=$523;
      label = 98; break;
    case 98: 
      var $525=HEAP32[(($cancel)>>2)];
      var $526=(((-$525))|0);
      var $527=((($526)>>>0))%(32);
      $shift_b=$527;
      label = 99; break;
    case 99: 
      var $529=HEAP32[(($cancel)>>2)];
      var $530=$shift_b;
      var $531=((($529)+($530))|0);
      var $532=((((($531)|0))/(32))&-1);
      $cancel1=$532;
      var $533=$shift_b;
      var $534=(($533)|0)==0;
      var $535=$534 ^ 1;
      var $536=$535 ^ 1;
      var $537=(($536)&1);
      var $538=($537);
      var $539=(($538)|0)!=0;
      if ($539) { label = 100; break; } else { label = 110; break; }
    case 100: 
      var $541=$3;
      var $542=(($541+12)|0);
      var $543=HEAP32[(($542)>>2)];
      $bp=$543;
      var $544=$ap;
      var $545=$bp;
      var $546=(($544)|0)==(($545)|0);
      var $547=$546 ^ 1;
      var $548=$547 ^ 1;
      var $549=(($548)&1);
      var $550=($549);
      var $551=(($550)|0)!=0;
      if ($551) { label = 101; break; } else { label = 109; break; }
    case 101: 
      var $553=$bn;
      var $554=($553<<2);
      var $555=(($554)>>>0) < 16384;
      var $556=$555 ^ 1;
      var $557=$556 ^ 1;
      var $558=(($557)&1);
      var $559=($558);
      var $560=(($559)|0)!=0;
      if ($560) { label = 102; break; } else { label = 103; break; }
    case 102: 
      var $562=$bn;
      var $563=($562<<2);
      var $564=STACKTOP;STACKTOP = (STACKTOP + $563)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $570 = $564;label = 104; break;
    case 103: 
      var $566=$bn;
      var $567=($566<<2);
      var $568=_mpfr_tmp_allocate($tmp_marker, $567);
      var $570 = $568;label = 104; break;
    case 104: 
      var $570;
      var $571=$570;
      $bp=$571;
      label = 105; break;
    case 105: 
      var $573=$bp;
      var $574=$ap;
      var $575=(($573)|0)!=(($574)|0);
      if ($575) { label = 106; break; } else { label = 107; break; }
    case 106: 
      var $577=$bp;
      var $578=$577;
      var $579=$ap;
      var $580=$579;
      var $581=$bn;
      var $582=($581<<2);
      assert($582 % 1 === 0);_memcpy($578, $580, $582);
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      label = 114; break;
    case 110: 
      var $587=$bn;
      var $588=((($587)+(1))|0);
      var $589=($588<<2);
      var $590=(($589)>>>0) < 16384;
      var $591=$590 ^ 1;
      var $592=$591 ^ 1;
      var $593=(($592)&1);
      var $594=($593);
      var $595=(($594)|0)!=0;
      if ($595) { label = 111; break; } else { label = 112; break; }
    case 111: 
      var $597=$bn;
      var $598=((($597)+(1))|0);
      var $599=($598<<2);
      var $600=STACKTOP;STACKTOP = (STACKTOP + $599)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $607 = $600;label = 113; break;
    case 112: 
      var $602=$bn;
      var $603=((($602)+(1))|0);
      var $604=($603<<2);
      var $605=_mpfr_tmp_allocate($tmp_marker, $604);
      var $607 = $605;label = 113; break;
    case 113: 
      var $607;
      var $608=$607;
      $bp=$608;
      var $609=$bp;
      var $610=(($609+4)|0);
      var $611=$3;
      var $612=(($611+12)|0);
      var $613=HEAP32[(($612)>>2)];
      var $614=$bn;
      var $615=((($614)+(1))|0);
      $bn=$615;
      var $616=$shift_b;
      var $617=___gmpn_rshift($610, $613, $614, $616);
      var $618=$bp;
      var $619=(($618)|0);
      HEAP32[(($619)>>2)]=$617;
      label = 114; break;
    case 114: 
      var $621=$4;
      var $622=(($621)|0);
      var $623=HEAP32[(($622)>>2)];
      var $624=((($623)-(1))|0);
      var $625=((((($624)|0))/(32))&-1);
      var $626=((($625)+(1))|0);
      $cn=$626;
      var $627=$diff_exp;
      var $628=HEAP32[(($cancel)>>2)];
      var $629=((($627)-($628))|0);
      var $630=((($629)>>>0))%(32);
      $shift_c=$630;
      var $631=$shift_c;
      var $632=(($631)|0)==0;
      var $633=$632 ^ 1;
      var $634=$633 ^ 1;
      var $635=(($634)&1);
      var $636=($635);
      var $637=(($636)|0)!=0;
      if ($637) { label = 115; break; } else { label = 125; break; }
    case 115: 
      var $639=$4;
      var $640=(($639+12)|0);
      var $641=HEAP32[(($640)>>2)];
      $cp=$641;
      var $642=$ap;
      var $643=$cp;
      var $644=(($642)|0)==(($643)|0);
      if ($644) { label = 116; break; } else { label = 124; break; }
    case 116: 
      var $646=$cn;
      var $647=($646<<2);
      var $648=(($647)>>>0) < 16384;
      var $649=$648 ^ 1;
      var $650=$649 ^ 1;
      var $651=(($650)&1);
      var $652=($651);
      var $653=(($652)|0)!=0;
      if ($653) { label = 117; break; } else { label = 118; break; }
    case 117: 
      var $655=$cn;
      var $656=($655<<2);
      var $657=STACKTOP;STACKTOP = (STACKTOP + $656)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $663 = $657;label = 119; break;
    case 118: 
      var $659=$cn;
      var $660=($659<<2);
      var $661=_mpfr_tmp_allocate($tmp_marker, $660);
      var $663 = $661;label = 119; break;
    case 119: 
      var $663;
      var $664=$663;
      $cp=$664;
      label = 120; break;
    case 120: 
      var $666=$cp;
      var $667=$ap;
      var $668=(($666)|0)!=(($667)|0);
      if ($668) { label = 121; break; } else { label = 122; break; }
    case 121: 
      var $670=$cp;
      var $671=$670;
      var $672=$ap;
      var $673=$672;
      var $674=$cn;
      var $675=($674<<2);
      assert($675 % 1 === 0);_memcpy($671, $673, $675);
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      label = 129; break;
    case 125: 
      var $680=$cn;
      var $681=((($680)+(1))|0);
      var $682=($681<<2);
      var $683=(($682)>>>0) < 16384;
      var $684=$683 ^ 1;
      var $685=$684 ^ 1;
      var $686=(($685)&1);
      var $687=($686);
      var $688=(($687)|0)!=0;
      if ($688) { label = 126; break; } else { label = 127; break; }
    case 126: 
      var $690=$cn;
      var $691=((($690)+(1))|0);
      var $692=($691<<2);
      var $693=STACKTOP;STACKTOP = (STACKTOP + $692)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $700 = $693;label = 128; break;
    case 127: 
      var $695=$cn;
      var $696=((($695)+(1))|0);
      var $697=($696<<2);
      var $698=_mpfr_tmp_allocate($tmp_marker, $697);
      var $700 = $698;label = 128; break;
    case 128: 
      var $700;
      var $701=$700;
      $cp=$701;
      var $702=$cp;
      var $703=(($702+4)|0);
      var $704=$4;
      var $705=(($704+12)|0);
      var $706=HEAP32[(($705)>>2)];
      var $707=$cn;
      var $708=((($707)+(1))|0);
      $cn=$708;
      var $709=$shift_c;
      var $710=___gmpn_rshift($703, $706, $707, $709);
      var $711=$cp;
      var $712=(($711)|0);
      HEAP32[(($712)>>2)]=$710;
      label = 129; break;
    case 129: 
      var $714=HEAP32[(($cancel)>>2)];
      var $715=$diff_exp;
      var $716=(($714)>>>0) >= (($715)>>>0);
      if ($716) { label = 130; break; } else { label = 131; break; }
    case 130: 
      var $718=HEAP32[(($cancel)>>2)];
      var $719=$diff_exp;
      var $720=((($718)-($719))|0);
      var $721=((($720)+(31))|0);
      var $722=Math.floor(((($721)>>>0))/(32));
      $cancel2=$722;
      label = 132; break;
    case 131: 
      var $724=$diff_exp;
      var $725=HEAP32[(($cancel)>>2)];
      var $726=((($724)-($725))|0);
      var $727=Math.floor(((($726)>>>0))/(32));
      var $728=(((-$727))|0);
      $cancel2=$728;
      label = 132; break;
    case 132: 
      var $730=$an;
      var $731=$cancel1;
      var $732=((($730)+($731))|0);
      var $733=$bn;
      var $734=(($732)|0) <= (($733)|0);
      var $735=$734 ^ 1;
      var $736=$735 ^ 1;
      var $737=(($736)&1);
      var $738=($737);
      var $739=(($738)|0)!=0;
      if ($739) { label = 133; break; } else { label = 138; break; }
    case 133: 
      label = 134; break;
    case 134: 
      var $742=$ap;
      var $743=$bp;
      var $744=$bn;
      var $745=(($743+($744<<2))|0);
      var $746=$an;
      var $747=$cancel1;
      var $748=((($746)+($747))|0);
      var $749=(((-$748))|0);
      var $750=(($745+($749<<2))|0);
      var $751=(($742)|0)!=(($750)|0);
      if ($751) { label = 135; break; } else { label = 136; break; }
    case 135: 
      var $753=$ap;
      var $754=$753;
      var $755=$bp;
      var $756=$bn;
      var $757=(($755+($756<<2))|0);
      var $758=$an;
      var $759=$cancel1;
      var $760=((($758)+($759))|0);
      var $761=(((-$760))|0);
      var $762=(($757+($761<<2))|0);
      var $763=$762;
      var $764=$an;
      var $765=($764<<2);
      assert($765 % 1 === 0);_memcpy($754, $763, $765);
      label = 136; break;
    case 136: 
      label = 137; break;
    case 137: 
      label = 146; break;
    case 138: 
      var $769=$cancel1;
      var $770=$bn;
      var $771=(($769)|0) < (($770)|0);
      if ($771) { label = 139; break; } else { label = 144; break; }
    case 139: 
      var $773=$ap;
      var $774=$773;
      var $775=$an;
      var $776=$cancel1;
      var $777=((($775)+($776))|0);
      var $778=$bn;
      var $779=((($777)-($778))|0);
      var $780=($779<<2);
      _memset($774, 0, $780);
      label = 140; break;
    case 140: 
      var $782=$ap;
      var $783=$an;
      var $784=$cancel1;
      var $785=((($783)+($784))|0);
      var $786=$bn;
      var $787=((($785)-($786))|0);
      var $788=(($782+($787<<2))|0);
      var $789=$bp;
      var $790=(($788)|0)!=(($789)|0);
      if ($790) { label = 141; break; } else { label = 142; break; }
    case 141: 
      var $792=$ap;
      var $793=$an;
      var $794=$cancel1;
      var $795=((($793)+($794))|0);
      var $796=$bn;
      var $797=((($795)-($796))|0);
      var $798=(($792+($797<<2))|0);
      var $799=$798;
      var $800=$bp;
      var $801=$800;
      var $802=$bn;
      var $803=$cancel1;
      var $804=((($802)-($803))|0);
      var $805=($804<<2);
      assert($805 % 1 === 0);_memcpy($799, $801, $805);
      label = 142; break;
    case 142: 
      label = 143; break;
    case 143: 
      label = 145; break;
    case 144: 
      var $809=$ap;
      var $810=$809;
      var $811=$an;
      var $812=($811<<2);
      _memset($810, 0, $812);
      label = 145; break;
    case 145: 
      label = 146; break;
    case 146: 
      var $815=$an;
      var $816=$cancel2;
      var $817=((($815)+($816))|0);
      var $818=(($817)|0) > 0;
      var $819=$818 ^ 1;
      var $820=$819 ^ 1;
      var $821=(($820)&1);
      var $822=($821);
      var $823=(($822)|0)!=0;
      if ($823) { label = 147; break; } else { label = 159; break; }
    case 147: 
      var $825=$cancel2;
      var $826=(($825)|0) >= 0;
      if ($826) { label = 148; break; } else { label = 154; break; }
    case 148: 
      var $828=$an;
      var $829=$cancel2;
      var $830=((($828)+($829))|0);
      var $831=$cn;
      var $832=(($830)|0) <= (($831)|0);
      if ($832) { label = 149; break; } else { label = 150; break; }
    case 149: 
      var $834=$ap;
      var $835=$ap;
      var $836=$cp;
      var $837=$cn;
      var $838=(($836+($837<<2))|0);
      var $839=$an;
      var $840=$cancel2;
      var $841=((($839)+($840))|0);
      var $842=(((-$841))|0);
      var $843=(($838+($842<<2))|0);
      var $844=$an;
      var $845=___gmpn_sub_n($834, $835, $843, $844);
      label = 153; break;
    case 150: 
      var $847=$ap;
      var $848=$an;
      var $849=(($847+($848<<2))|0);
      var $850=$cancel2;
      var $851=$cn;
      var $852=((($850)-($851))|0);
      var $853=(($849+($852<<2))|0);
      $ap2=$853;
      var $854=$cn;
      var $855=$cancel2;
      var $856=(($854)|0) > (($855)|0);
      if ($856) { label = 151; break; } else { label = 152; break; }
    case 151: 
      var $858=$ap2;
      var $859=$ap2;
      var $860=$cp;
      var $861=$cn;
      var $862=$cancel2;
      var $863=((($861)-($862))|0);
      var $864=___gmpn_sub_n($858, $859, $860, $863);
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      label = 158; break;
    case 154: 
      var $868=$an;
      var $869=$cancel2;
      var $870=((($868)+($869))|0);
      var $871=$cn;
      var $872=(($870)|0) <= (($871)|0);
      if ($872) { label = 155; break; } else { label = 156; break; }
    case 155: 
      var $874=$ap;
      var $875=$ap;
      var $876=$cp;
      var $877=$cn;
      var $878=(($876+($877<<2))|0);
      var $879=$an;
      var $880=$cancel2;
      var $881=((($879)+($880))|0);
      var $882=(((-$881))|0);
      var $883=(($878+($882<<2))|0);
      var $884=$an;
      var $885=$cancel2;
      var $886=((($884)+($885))|0);
      var $887=___gmpn_sub_n($874, $875, $883, $886);
      $borrow=$887;
      label = 157; break;
    case 156: 
      var $889=$ap;
      var $890=$an;
      var $891=(($889+($890<<2))|0);
      var $892=$cancel2;
      var $893=(($891+($892<<2))|0);
      var $894=$cn;
      var $895=(((-$894))|0);
      var $896=(($893+($895<<2))|0);
      $ap2=$896;
      var $897=$ap2;
      var $898=$ap2;
      var $899=$cp;
      var $900=$cn;
      var $901=___gmpn_sub_n($897, $898, $899, $900);
      $borrow=$901;
      label = 157; break;
    case 157: 
      var $903=$ap;
      var $904=$an;
      var $905=(($903+($904<<2))|0);
      var $906=$cancel2;
      var $907=(($905+($906<<2))|0);
      $ap2=$907;
      var $908=$ap2;
      var $909=$ap2;
      var $910=$cancel2;
      var $911=(((-$910))|0);
      var $912=$borrow;
      var $913=___gmpn_sub_1($908, $909, $911, $912);
      label = 158; break;
    case 158: 
      label = 159; break;
    case 159: 
      var $916=$an;
      var $917=($916<<5);
      var $918=$2;
      var $919=(($918)|0);
      var $920=HEAP32[(($919)>>2)];
      var $921=((($917)-($920))|0);
      $sh=$921;
      var $922=$ap;
      var $923=(($922)|0);
      var $924=HEAP32[(($923)>>2)];
      var $925=$sh;
      var $926=1 << $925;
      var $927=((($926)-(1))|0);
      var $928=$924 & $927;
      $carry=$928;
      var $929=$carry;
      var $930=$ap;
      var $931=(($930)|0);
      var $932=HEAP32[(($931)>>2)];
      var $933=((($932)-($929))|0);
      HEAP32[(($931)>>2)]=$933;
      var $934=$5;
      var $935=(($934)|0)==0;
      var $936=$935 ^ 1;
      var $937=$936 ^ 1;
      var $938=(($937)&1);
      var $939=($938);
      var $940=(($939)|0)!=0;
      if ($940) { label = 160; break; } else { label = 169; break; }
    case 160: 
      var $942=$sh;
      var $943=(($942)|0)!=0;
      var $944=$943 ^ 1;
      var $945=$944 ^ 1;
      var $946=(($945)&1);
      var $947=($946);
      var $948=(($947)|0)!=0;
      if ($948) { label = 161; break; } else { label = 168; break; }
    case 161: 
      var $950=$carry;
      var $951=$sh;
      var $952=((($951)-(1))|0);
      var $953=1 << $952;
      var $954=(($950)>>>0) > (($953)>>>0);
      if ($954) { label = 162; break; } else { label = 163; break; }
    case 162: 
      label = 253; break;
    case 163: 
      var $957=$carry;
      var $958=0 < (($957)>>>0);
      if ($958) { label = 164; break; } else { label = 166; break; }
    case 164: 
      var $960=$carry;
      var $961=$sh;
      var $962=((($961)-(1))|0);
      var $963=1 << $962;
      var $964=(($960)>>>0) < (($963)>>>0);
      if ($964) { label = 165; break; } else { label = 166; break; }
    case 165: 
      $inexact=-1;
      label = 256; break;
    case 166: 
      label = 167; break;
    case 167: 
      var $968=$carry;
      var $969=(($968)|0)==0;
      var $970=$969 ? 0 : 2;
      $cmp_low=$970;
      label = 168; break;
    case 168: 
      label = 176; break;
    case 169: 
      var $973=$5;
      var $974=$2;
      var $975=(($974+4)|0);
      var $976=HEAP32[(($975)>>2)];
      var $977=(($976)|0) < 0;
      var $978=(($977)&1);
      var $979=((($973)+($978))|0);
      var $980=(($979)|0)==3;
      if ($980) { label = 170; break; } else { label = 171; break; }
    case 170: 
      $5=1;
      label = 171; break;
    case 171: 
      var $983=$carry;
      var $984=(($983)|0)!=0;
      if ($984) { label = 172; break; } else { label = 175; break; }
    case 172: 
      var $986=$5;
      var $987=(($986)|0)==1;
      if ($987) { label = 173; break; } else { label = 174; break; }
    case 173: 
      $inexact=-1;
      label = 256; break;
    case 174: 
      label = 253; break;
    case 175: 
      label = 176; break;
    case 176: 
      var $992=$an;
      var $993=$cancel1;
      var $994=((($992)+($993))|0);
      var $995=$bn;
      var $996=((($995)-($994))|0);
      $bn=$996;
      var $997=$cn;
      $cn0=$997;
      var $998=$an;
      var $999=$cancel2;
      var $1000=((($998)+($999))|0);
      var $1001=$cn;
      var $1002=((($1001)-($1000))|0);
      $cn=$1002;
      $k=0;
      label = 177; break;
    case 177: 
      var $1004=$bn;
      var $1005=(($1004)|0) > 0;
      if ($1005) { var $1010 = 1;label = 179; break; } else { label = 178; break; }
    case 178: 
      var $1007=$cn;
      var $1008=(($1007)|0) > 0;
      var $1010 = $1008;label = 179; break;
    case 179: 
      var $1010;
      if ($1010) { label = 180; break; } else { label = 242; break; }
    case 180: 
      var $1012=$bn;
      var $1013=(($1012)|0) > 0;
      if ($1013) { label = 181; break; } else { label = 182; break; }
    case 181: 
      var $1015=$bn;
      var $1016=((($1015)-(1))|0);
      $bn=$1016;
      var $1017=$bp;
      var $1018=(($1017+($1016<<2))|0);
      var $1019=HEAP32[(($1018)>>2)];
      var $1022 = $1019;label = 183; break;
    case 182: 
      var $1022 = 0;label = 183; break;
    case 183: 
      var $1022;
      $bb=$1022;
      var $1023=$cn;
      var $1024=(($1023)|0) > 0;
      if ($1024) { label = 184; break; } else { label = 186; break; }
    case 184: 
      var $1026=$cn;
      var $1027=((($1026)-(1))|0);
      $cn=$1027;
      var $1028=$cn0;
      var $1029=(($1026)|0) <= (($1028)|0);
      if ($1029) { label = 185; break; } else { label = 186; break; }
    case 185: 
      var $1031=$cn;
      var $1032=$cp;
      var $1033=(($1032+($1031<<2))|0);
      var $1034=HEAP32[(($1033)>>2)];
      $cc=$1034;
      label = 187; break;
    case 186: 
      $cc=0;
      label = 187; break;
    case 187: 
      var $1037=$cmp_low;
      var $1038=(($1037)|0)==0;
      if ($1038) { label = 188; break; } else { label = 192; break; }
    case 188: 
      var $1040=$bb;
      var $1041=$cc;
      var $1042=(($1040)>>>0) < (($1041)>>>0);
      if ($1042) { label = 189; break; } else { label = 190; break; }
    case 189: 
      var $1044=$k;
      var $1045=((($1044)-(2))|0);
      var $1052 = $1045;label = 191; break;
    case 190: 
      var $1047=$bb;
      var $1048=$cc;
      var $1049=(($1047)>>>0) > (($1048)>>>0);
      var $1050=$1049 ? 1 : 0;
      var $1052 = $1050;label = 191; break;
    case 191: 
      var $1052;
      $cmp_low=$1052;
      label = 192; break;
    case 192: 
      var $1054=$5;
      var $1055=(($1054)|0)==0;
      if ($1055) { label = 193; break; } else { label = 209; break; }
    case 193: 
      var $1057=$sh;
      var $1058=(($1057)|0)==0;
      if ($1058) { label = 194; break; } else { label = 209; break; }
    case 194: 
      var $1060=$k;
      var $1061=(($1060)|0)==0;
      if ($1061) { label = 195; break; } else { label = 209; break; }
    case 195: 
      $half=-2147483648;
      var $1063=$cmp_low;
      var $1064=(($1063)|0) < 0;
      if ($1064) { label = 196; break; } else { label = 200; break; }
    case 196: 
      var $1066=$cc;
      var $1067=$half;
      var $1068=(($1066)>>>0) >= (($1067)>>>0);
      if ($1068) { label = 197; break; } else { label = 198; break; }
    case 197: 
      var $1070=$half;
      var $1071=$cc;
      var $1072=((($1071)-($1070))|0);
      $cc=$1072;
      label = 199; break;
    case 198: 
      var $1074=$half;
      var $1075=$bb;
      var $1076=((($1075)+($1074))|0);
      $bb=$1076;
      label = 199; break;
    case 199: 
      label = 208; break;
    case 200: 
      var $1079=$cmp_low;
      var $1080=(($1079)|0) >= 0;
      if ($1080) { label = 201; break; } else { label = 207; break; }
    case 201: 
      var $1082=$cc;
      var $1083=$half;
      var $1084=(($1082)>>>0) < (($1083)>>>0);
      if ($1084) { label = 202; break; } else { label = 203; break; }
    case 202: 
      var $1086=$half;
      var $1087=$cc;
      var $1088=((($1087)+($1086))|0);
      $cc=$1088;
      label = 204; break;
    case 203: 
      var $1090=$half;
      var $1091=$bb;
      var $1092=((($1091)-($1090))|0);
      $bb=$1092;
      label = 204; break;
    case 204: 
      var $1094=$cmp_low;
      var $1095=(($1094)|0) > 0;
      if ($1095) { label = 205; break; } else { label = 206; break; }
    case 205: 
      $cmp_low=2;
      label = 206; break;
    case 206: 
      label = 207; break;
    case 207: 
      label = 208; break;
    case 208: 
      label = 209; break;
    case 209: 
      var $1101=$cmp_low;
      var $1102=(($1101)|0) < 0;
      if ($1102) { label = 210; break; } else { label = 224; break; }
    case 210: 
      var $1104=$5;
      var $1105=(($1104)|0)==1;
      if ($1105) { label = 211; break; } else { label = 212; break; }
    case 211: 
      label = 252; break;
    case 212: 
      var $1108=$5;
      var $1109=(($1108)|0)!=0;
      if ($1109) { label = 213; break; } else { label = 214; break; }
    case 213: 
      $inexact=1;
      label = 256; break;
    case 214: 
      var $1112=$bb;
      var $1113=$cc;
      var $1114=(($1112)>>>0) > (($1113)>>>0);
      if ($1114) { label = 217; break; } else { label = 215; break; }
    case 215: 
      var $1116=$sh;
      var $1117=(($1116)|0) > 0;
      if ($1117) { label = 217; break; } else { label = 216; break; }
    case 216: 
      var $1119=$cmp_low;
      var $1120=(($1119)|0)==-1;
      if ($1120) { label = 217; break; } else { label = 218; break; }
    case 217: 
      $inexact=1;
      label = 256; break;
    case 218: 
      var $1123=$bb;
      var $1124=$cc;
      var $1125=(($1123)>>>0) < (($1124)>>>0);
      if ($1125) { label = 219; break; } else { label = 220; break; }
    case 219: 
      label = 252; break;
    case 220: 
      label = 221; break;
    case 221: 
      label = 222; break;
    case 222: 
      label = 223; break;
    case 223: 
      label = 240; break;
    case 224: 
      var $1132=$cmp_low;
      var $1133=(($1132)|0) > 0;
      if ($1133) { label = 225; break; } else { label = 239; break; }
    case 225: 
      var $1135=$5;
      var $1136=(($1135)|0)==1;
      if ($1136) { label = 226; break; } else { label = 227; break; }
    case 226: 
      $inexact=-1;
      label = 256; break;
    case 227: 
      var $1139=$5;
      var $1140=(($1139)|0)!=0;
      if ($1140) { label = 228; break; } else { label = 229; break; }
    case 228: 
      label = 253; break;
    case 229: 
      var $1143=$bb;
      var $1144=$cc;
      var $1145=(($1143)>>>0) > (($1144)>>>0);
      if ($1145) { label = 230; break; } else { label = 233; break; }
    case 230: 
      var $1147=$cmp_low;
      var $1148=(($1147)|0)==2;
      if ($1148) { label = 231; break; } else { label = 232; break; }
    case 231: 
      label = 253; break;
    case 232: 
      $inexact=-1;
      label = 256; break;
    case 233: 
      var $1152=$bb;
      var $1153=$cc;
      var $1154=(($1152)>>>0) < (($1153)>>>0);
      if ($1154) { label = 234; break; } else { label = 235; break; }
    case 234: 
      $inexact=-1;
      label = 256; break;
    case 235: 
      label = 236; break;
    case 236: 
      label = 237; break;
    case 237: 
      label = 238; break;
    case 238: 
      label = 239; break;
    case 239: 
      label = 240; break;
    case 240: 
      label = 241; break;
    case 241: 
      $k=1;
      label = 177; break;
    case 242: 
      var $1164=$5;
      var $1165=(($1164)|0)==0;
      if ($1165) { label = 243; break; } else { label = 250; break; }
    case 243: 
      var $1167=$cmp_low;
      var $1168=(($1167)|0)!=0;
      if ($1168) { label = 244; break; } else { label = 250; break; }
    case 244: 
      var $1170=$ap;
      var $1171=(($1170)|0);
      var $1172=HEAP32[(($1171)>>2)];
      var $1173=$sh;
      var $1174=$1172 >>> (($1173)>>>0);
      var $1175=$1174 & 1;
      var $1176=(($1175)|0)!=0;
      if ($1176) { label = 245; break; } else { label = 248; break; }
    case 245: 
      var $1178=$cmp_low;
      var $1179=(($1178)|0) < 0;
      if ($1179) { label = 246; break; } else { label = 247; break; }
    case 246: 
      label = 252; break;
    case 247: 
      label = 253; break;
    case 248: 
      var $1183=$cmp_low;
      var $1184=(($1183)|0) > 0;
      var $1185=$1184 ? -1 : 1;
      $inexact=$1185;
      label = 249; break;
    case 249: 
      label = 251; break;
    case 250: 
      $inexact=0;
      label = 251; break;
    case 251: 
      label = 256; break;
    case 252: 
      var $1190=$ap;
      var $1191=$ap;
      var $1192=$an;
      var $1193=$sh;
      var $1194=1 << $1193;
      var $1195=___gmpn_sub_1($1190, $1191, $1192, $1194);
      $inexact=-1;
      label = 259; break;
    case 253: 
      var $1197=$ap;
      var $1198=$ap;
      var $1199=$an;
      var $1200=$sh;
      var $1201=1 << $1200;
      var $1202=___gmpn_add_1($1197, $1198, $1199, $1201);
      var $1203=(($1202)|0)!=0;
      var $1204=$1203 ^ 1;
      var $1205=$1204 ^ 1;
      var $1206=(($1205)&1);
      var $1207=($1206);
      var $1208=(($1207)|0)!=0;
      if ($1208) { label = 254; break; } else { label = 255; break; }
    case 254: 
      var $1210=$an;
      var $1211=((($1210)-(1))|0);
      var $1212=$ap;
      var $1213=(($1212+($1211<<2))|0);
      HEAP32[(($1213)>>2)]=-2147483648;
      $add_exp=1;
      label = 255; break;
    case 255: 
      $inexact=1;
      label = 256; break;
    case 256: 
      var $1216=$an;
      var $1217=((($1216)-(1))|0);
      var $1218=$ap;
      var $1219=(($1218+($1217<<2))|0);
      var $1220=HEAP32[(($1219)>>2)];
      var $1221=$1220 >>> 31;
      var $1222=(($1221)|0)==0;
      var $1223=$1222 ^ 1;
      var $1224=$1223 ^ 1;
      var $1225=(($1224)&1);
      var $1226=($1225);
      var $1227=(($1226)|0)!=0;
      if ($1227) { label = 257; break; } else { label = 258; break; }
    case 257: 
      var $1229=$an;
      var $1230=((($1229)-(1))|0);
      var $1231=$ap;
      var $1232=(($1231+($1230<<2))|0);
      HEAP32[(($1232)>>2)]=-2147483648;
      $add_exp=1;
      label = 258; break;
    case 258: 
      label = 259; break;
    case 259: 
      var $1235=HEAP32[(($cancel)>>2)];
      var $1236=(($1235)|0)!=0;
      var $1237=$1236 ^ 1;
      var $1238=$1237 ^ 1;
      var $1239=(($1238)&1);
      var $1240=($1239);
      var $1241=(($1240)|0)!=0;
      if ($1241) { label = 260; break; } else { label = 268; break; }
    case 260: 
      var $1243=$add_exp;
      var $1244=HEAP32[(($cancel)>>2)];
      var $1245=((($1244)-($1243))|0);
      HEAP32[(($cancel)>>2)]=$1245;
      var $1246=$3;
      var $1247=(($1246+8)|0);
      var $1248=HEAP32[(($1247)>>2)];
      var $1249=HEAP32[(($cancel)>>2)];
      var $1250=((($1248)-($1249))|0);
      $exp_a=$1250;
      var $1251=$exp_a;
      var $1252=HEAP32[((5257652)>>2)];
      var $1253=(($1251)|0) < (($1252)|0);
      var $1254=$1253 ^ 1;
      var $1255=$1254 ^ 1;
      var $1256=(($1255)&1);
      var $1257=($1256);
      var $1258=(($1257)|0)!=0;
      if ($1258) { label = 261; break; } else { label = 267; break; }
    case 261: 
      var $1260=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($1260);
      var $1261=$5;
      var $1262=(($1261)|0)==0;
      if ($1262) { label = 262; break; } else { label = 266; break; }
    case 262: 
      var $1264=$exp_a;
      var $1265=HEAP32[((5257652)>>2)];
      var $1266=((($1265)-(1))|0);
      var $1267=(($1264)|0) < (($1266)|0);
      if ($1267) { label = 265; break; } else { label = 263; break; }
    case 263: 
      var $1269=$inexact;
      var $1270=(($1269)|0) >= 0;
      if ($1270) { label = 264; break; } else { label = 266; break; }
    case 264: 
      var $1272=$2;
      var $1273=_mpfr_powerof2_raw($1272);
      var $1274=(($1273)|0)!=0;
      if ($1274) { label = 265; break; } else { label = 266; break; }
    case 265: 
      $5=1;
      label = 266; break;
    case 266: 
      var $1277=$2;
      var $1278=$5;
      var $1279=$2;
      var $1280=(($1279+4)|0);
      var $1281=HEAP32[(($1280)>>2)];
      var $1282=_mpfr_underflow($1277, $1278, $1281);
      $1=$1282;
      label = 277; break;
    case 267: 
      var $1284=$exp_a;
      var $1285=$2;
      var $1286=(($1285+8)|0);
      HEAP32[(($1286)>>2)]=$1284;
      label = 273; break;
    case 268: 
      var $1288=$3;
      var $1289=(($1288+8)|0);
      var $1290=HEAP32[(($1289)>>2)];
      $exp_b=$1290;
      var $1291=$add_exp;
      var $1292=(($1291)|0)!=0;
      if ($1292) { label = 269; break; } else { var $1298 = 0;label = 270; break; }
    case 269: 
      var $1294=$exp_b;
      var $1295=HEAP32[((5257656)>>2)];
      var $1296=(($1294)|0)==(($1295)|0);
      var $1298 = $1296;label = 270; break;
    case 270: 
      var $1298;
      var $1299=$1298 ^ 1;
      var $1300=$1299 ^ 1;
      var $1301=(($1300)&1);
      var $1302=($1301);
      var $1303=(($1302)|0)!=0;
      if ($1303) { label = 271; break; } else { label = 272; break; }
    case 271: 
      var $1305=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($1305);
      var $1306=$2;
      var $1307=$5;
      var $1308=$2;
      var $1309=(($1308+4)|0);
      var $1310=HEAP32[(($1309)>>2)];
      var $1311=_mpfr_overflow($1306, $1307, $1310);
      $1=$1311;
      label = 277; break;
    case 272: 
      var $1313=$exp_b;
      var $1314=$add_exp;
      var $1315=((($1313)+($1314))|0);
      var $1316=$2;
      var $1317=(($1316+8)|0);
      HEAP32[(($1317)>>2)]=$1315;
      label = 273; break;
    case 273: 
      var $1319=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($1319);
      var $1320=$inexact;
      var $1321=$2;
      var $1322=(($1321+4)|0);
      var $1323=HEAP32[(($1322)>>2)];
      var $1324=Math.imul($1320,$1323);
      var $1325=(($1324)|0)!=0;
      if ($1325) { label = 274; break; } else { label = 275; break; }
    case 274: 
      var $1327=HEAP32[((5257648)>>2)];
      var $1328=$1327 | 8;
      HEAP32[((5257648)>>2)]=$1328;
      var $1329=$inexact;
      var $1330=$2;
      var $1331=(($1330+4)|0);
      var $1332=HEAP32[(($1331)>>2)];
      var $1333=Math.imul($1329,$1332);
      var $1336 = $1333;label = 276; break;
    case 275: 
      var $1336 = 0;label = 276; break;
    case 276: 
      var $1336;
      $1=$1336;
      label = 277; break;
    case 277: 
      var $1338=$1;
      STACKTOP = __stackBase__;
      return $1338;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_sub1["X"]=1;

function _mpfr_rint($r, $u, $rnd_mode) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $sign;
      var $rnd_away;
      var $exp;
      var $rp;
      var $rm;
      var $up;
      var $rp1;
      var $un;
      var $rn;
      var $ui;
      var $sh;
      var $idiff;
      var $uflags;
      var $uj;
      var $a;
      var $b;
      var $i;
      var $i2;
      var $uj3;
      var $rj;
      var $ush;
      var $a4;
      var $b5;
      var $i6;
      $2=$r;
      $3=$u;
      $4=$rnd_mode;
      var $5=$3;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=(($7)|0) <= -2147483645;
      var $9=$8 ^ 1;
      var $10=$9 ^ 1;
      var $11=(($10)&1);
      var $12=($11);
      var $13=(($12)|0)!=0;
      if ($13) { label = 3; break; } else { label = 8; break; }
    case 3: 
      var $15=$3;
      var $16=(($15+8)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($17)|0)==-2147483646;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$2;
      var $21=(($20+8)|0);
      HEAP32[(($21)>>2)]=-2147483646;
      var $22=HEAP32[((5257648)>>2)];
      var $23=$22 | 4;
      HEAP32[((5257648)>>2)]=$23;
      $1=0;
      label = 154; break;
    case 5: 
      var $25=$3;
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      var $28=$2;
      var $29=(($28+4)|0);
      HEAP32[(($29)>>2)]=$27;
      var $30=$3;
      var $31=(($30+8)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=(($32)|0)==-2147483645;
      if ($33) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $35=$2;
      var $36=(($35+8)|0);
      HEAP32[(($36)>>2)]=-2147483645;
      $1=0;
      label = 154; break;
    case 7: 
      var $38=$2;
      var $39=(($38+8)|0);
      HEAP32[(($39)>>2)]=-2147483647;
      $1=0;
      label = 154; break;
    case 8: 
      var $41=$3;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$2;
      var $45=(($44+4)|0);
      HEAP32[(($45)>>2)]=$43;
      var $46=$3;
      var $47=(($46+4)|0);
      var $48=HEAP32[(($47)>>2)];
      $sign=$48;
      var $49=$3;
      var $50=(($49+8)|0);
      var $51=HEAP32[(($50)>>2)];
      $exp=$51;
      var $52=$4;
      var $53=(($52)|0)==3;
      if ($53) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $55=$sign;
      var $56=(($55)|0) < 0;
      var $57=(($56)&1);
      var $78 = $57;label = 17; break;
    case 10: 
      var $59=$4;
      var $60=(($59)|0)==2;
      if ($60) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $62=$sign;
      var $63=(($62)|0) > 0;
      var $64=(($63)&1);
      var $76 = $64;label = 16; break;
    case 12: 
      var $66=$4;
      var $67=(($66)|0)==1;
      if ($67) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $74 = 0;label = 15; break;
    case 14: 
      var $70=$4;
      var $71=(($70)|0)==4;
      var $72=$71 ? 1 : -1;
      var $74 = $72;label = 15; break;
    case 15: 
      var $74;
      var $76 = $74;label = 16; break;
    case 16: 
      var $76;
      var $78 = $76;label = 17; break;
    case 17: 
      var $78;
      $rnd_away=$78;
      var $79=$exp;
      var $80=(($79)|0) <= 0;
      var $81=$80 ^ 1;
      var $82=$81 ^ 1;
      var $83=(($82)&1);
      var $84=($83);
      var $85=(($84)|0)!=0;
      if ($85) { label = 18; break; } else { label = 35; break; }
    case 18: 
      var $87=$rnd_away;
      var $88=(($87)|0)!=0;
      if ($88) { label = 19; break; } else { label = 29; break; }
    case 19: 
      var $90=$rnd_away;
      var $91=(($90)|0) > 0;
      if ($91) { label = 23; break; } else { label = 20; break; }
    case 20: 
      var $93=$exp;
      var $94=(($93)|0)==0;
      if ($94) { label = 21; break; } else { label = 29; break; }
    case 21: 
      var $96=$4;
      var $97=(($96)|0)==-1;
      if ($97) { label = 23; break; } else { label = 22; break; }
    case 22: 
      var $99=$3;
      var $100=_mpfr_powerof2_raw($99);
      var $101=(($100)|0)!=0;
      if ($101) { label = 29; break; } else { label = 23; break; }
    case 23: 
      var $103=$2;
      var $104=(($103+12)|0);
      var $105=HEAP32[(($104)>>2)];
      $rp=$105;
      var $106=$2;
      var $107=(($106)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($108)-(1))|0);
      var $110=((((($109)|0))/(32))&-1);
      $rm=$110;
      var $111=$rm;
      var $112=$rp;
      var $113=(($112+($111<<2))|0);
      HEAP32[(($113)>>2)]=-2147483648;
      var $114=$rp;
      var $115=$114;
      var $116=$rm;
      var $117=($116<<2);
      _memset($115, 0, $117);
      var $118=$2;
      var $119=(($118+8)|0);
      HEAP32[(($119)>>2)]=1;
      var $120=$sign;
      var $121=(($120)|0) > 0;
      if ($121) { label = 24; break; } else { label = 25; break; }
    case 24: 
      if (1) { label = 26; break; } else { label = 27; break; }
    case 25: 
      if (1) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $125=HEAP32[((5257648)>>2)];
      var $126=$125 | 8;
      HEAP32[((5257648)>>2)]=$126;
      var $127=$sign;
      var $128=(($127)|0) > 0;
      var $129=$128 ? 2 : -2;
      var $132 = $129;label = 28; break;
    case 27: 
      var $132 = 0;label = 28; break;
    case 28: 
      var $132;
      $1=$132;
      label = 154; break;
    case 29: 
      var $134=$2;
      var $135=(($134+8)|0);
      HEAP32[(($135)>>2)]=-2147483647;
      var $136=$sign;
      var $137=(($136)|0) > 0;
      if ($137) { label = 30; break; } else { label = 31; break; }
    case 30: 
      if (1) { label = 32; break; } else { label = 33; break; }
    case 31: 
      if (1) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $141=HEAP32[((5257648)>>2)];
      var $142=$141 | 8;
      HEAP32[((5257648)>>2)]=$142;
      var $143=$sign;
      var $144=(($143)|0) > 0;
      var $145=$144 ? -2 : 2;
      var $148 = $145;label = 34; break;
    case 33: 
      var $148 = 0;label = 34; break;
    case 34: 
      var $148;
      $1=$148;
      label = 154; break;
    case 35: 
      var $150=$3;
      var $151=(($150+12)|0);
      var $152=HEAP32[(($151)>>2)];
      $up=$152;
      var $153=$2;
      var $154=(($153+12)|0);
      var $155=HEAP32[(($154)>>2)];
      $rp1=$155;
      var $156=$3;
      var $157=(($156)|0);
      var $158=HEAP32[(($157)>>2)];
      var $159=((($158)-(1))|0);
      var $160=((((($159)|0))/(32))&-1);
      var $161=((($160)+(1))|0);
      $un=$161;
      var $162=$2;
      var $163=(($162)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=((($164)-(1))|0);
      var $166=((((($165)|0))/(32))&-1);
      var $167=((($166)+(1))|0);
      $rn=$167;
      label = 36; break;
    case 36: 
      var $169=$2;
      var $170=(($169)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(((-$171))|0);
      var $173=((($172)>>>0))%(32);
      $sh=$173;
      label = 37; break;
    case 37: 
      var $175=$exp;
      var $176=$2;
      var $177=(($176+8)|0);
      HEAP32[(($177)>>2)]=$175;
      var $178=$exp;
      var $179=((($178)-(1))|0);
      var $180=((((($179)|0))/(32))&-1);
      var $181=$un;
      var $182=(($180)|0) >= (($181)|0);
      if ($182) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $184=$un;
      $ui=$184;
      $idiff=0;
      $uflags=0;
      label = 49; break;
    case 39: 
      var $186=$exp;
      var $187=((($186)-(1))|0);
      var $188=((((($187)|0))/(32))&-1);
      var $189=((($188)+(1))|0);
      $ui=$189;
      var $190=$un;
      var $191=$ui;
      var $192=((($190)-($191))|0);
      $uj=$192;
      var $193=$exp;
      var $194=((($193)|0))%(32);
      $idiff=$194;
      var $195=$idiff;
      var $196=(($195)|0)==0;
      if ($196) { var $206 = 1;label = 41; break; } else { label = 40; break; }
    case 40: 
      var $198=$uj;
      var $199=$up;
      var $200=(($199+($198<<2))|0);
      var $201=HEAP32[(($200)>>2)];
      var $202=$idiff;
      var $203=$201 << $202;
      var $204=(($203)|0)==0;
      var $206 = $204;label = 41; break;
    case 41: 
      var $206;
      var $207=$206 ? 0 : 2;
      $uflags=$207;
      var $208=$uflags;
      var $209=(($208)|0)==0;
      if ($209) { label = 42; break; } else { label = 48; break; }
    case 42: 
      label = 43; break;
    case 43: 
      var $212=$uj;
      var $213=(($212)|0) > 0;
      if ($213) { label = 44; break; } else { label = 47; break; }
    case 44: 
      var $215=$uj;
      var $216=((($215)-(1))|0);
      $uj=$216;
      var $217=$up;
      var $218=(($217+($216<<2))|0);
      var $219=HEAP32[(($218)>>2)];
      var $220=(($219)|0)!=0;
      if ($220) { label = 45; break; } else { label = 46; break; }
    case 45: 
      $uflags=2;
      label = 47; break;
    case 46: 
      label = 43; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $226=$ui;
      var $227=$rn;
      var $228=(($226)|0) > (($227)|0);
      if ($228) { label = 50; break; } else { label = 89; break; }
    case 50: 
      label = 51; break;
    case 51: 
      var $231=$rp1;
      var $232=$up;
      var $233=$un;
      var $234=$rn;
      var $235=((($233)-($234))|0);
      var $236=(($232+($235<<2))|0);
      var $237=(($231)|0)!=(($236)|0);
      if ($237) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $239=$rp1;
      var $240=$239;
      var $241=$up;
      var $242=$un;
      var $243=$rn;
      var $244=((($242)-($243))|0);
      var $245=(($241+($244<<2))|0);
      var $246=$245;
      var $247=$rn;
      var $248=($247<<2);
      assert($248 % 1 === 0);_memcpy($240, $246, $248);
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $251=$rnd_away;
      var $252=(($251)|0) < 0;
      if ($252) { label = 55; break; } else { label = 76; break; }
    case 55: 
      var $254=$4;
      var $255=(($254)|0)==0;
      if ($255) { label = 56; break; } else { label = 69; break; }
    case 56: 
      var $257=$rp1;
      var $258=(($257)|0);
      var $259=HEAP32[(($258)>>2)];
      var $260=$sh;
      var $261=1 << $260;
      var $262=$259 & $261;
      var $263=(($262)|0)==0;
      if ($263) { label = 57; break; } else { label = 69; break; }
    case 57: 
      var $265=$sh;
      var $266=(($265)|0)!=0;
      if ($266) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $268=$rp1;
      var $269=(($268)|0);
      var $270=HEAP32[(($269)>>2)];
      var $271=$sh;
      var $272=1 << $271;
      var $273=((($272)-(1))|0);
      var $274=$270 & $273;
      $a=$274;
      var $275=$sh;
      var $276=((($275)-(1))|0);
      var $277=1 << $276;
      $b=$277;
      label = 60; break;
    case 59: 
      var $279=$un;
      var $280=$rn;
      var $281=((($279)-($280))|0);
      var $282=((($281)-(1))|0);
      var $283=$up;
      var $284=(($283+($282<<2))|0);
      var $285=HEAP32[(($284)>>2)];
      $a=$285;
      $b=-2147483648;
      label = 60; break;
    case 60: 
      var $287=$a;
      var $288=$b;
      var $289=(($287)>>>0) > (($288)>>>0);
      var $290=(($289)&1);
      $rnd_away=$290;
      var $291=$a;
      var $292=$b;
      var $293=(($291)|0)==(($292)|0);
      if ($293) { label = 61; break; } else { label = 68; break; }
    case 61: 
      var $295=$un;
      var $296=$rn;
      var $297=((($295)-($296))|0);
      var $298=((($297)-(1))|0);
      var $299=$sh;
      var $300=(($299)|0)==0;
      var $301=(($300)&1);
      var $302=((($298)-($301))|0);
      $i=$302;
      label = 62; break;
    case 62: 
      var $304=$i;
      var $305=(($304)|0) >= 0;
      if ($305) { label = 63; break; } else { label = 67; break; }
    case 63: 
      var $307=$i;
      var $308=$up;
      var $309=(($308+($307<<2))|0);
      var $310=HEAP32[(($309)>>2)];
      var $311=(($310)|0)!=0;
      if ($311) { label = 64; break; } else { label = 65; break; }
    case 64: 
      $rnd_away=1;
      label = 67; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $315=$i;
      var $316=((($315)-(1))|0);
      $i=$316;
      label = 62; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 75; break;
    case 69: 
      var $320=$sh;
      var $321=(($320)|0)!=0;
      if ($321) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $323=$rp1;
      var $324=(($323)|0);
      var $325=HEAP32[(($324)>>2)];
      var $326=$sh;
      var $327=((($326)-(1))|0);
      var $328=1 << $327;
      var $329=$325 & $328;
      var $330=(($329)|0)!=0;
      if ($330) { var $347 = 1;label = 74; break; } else { label = 71; break; }
    case 71: 
      var $332=$sh;
      var $333=(($332)|0)==0;
      if ($333) { label = 72; break; } else { var $345 = 0;label = 73; break; }
    case 72: 
      var $335=$un;
      var $336=$rn;
      var $337=((($335)-($336))|0);
      var $338=((($337)-(1))|0);
      var $339=$up;
      var $340=(($339+($338<<2))|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=$341 & -2147483648;
      var $343=(($342)|0)!=0;
      var $345 = $343;label = 73; break;
    case 73: 
      var $345;
      var $347 = $345;label = 74; break;
    case 74: 
      var $347;
      var $348=(($347)&1);
      $rnd_away=$348;
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      var $351=$uflags;
      var $352=(($351)|0)==0;
      if ($352) { label = 77; break; } else { label = 88; break; }
    case 77: 
      var $354=$sh;
      var $355=(($354)|0)!=0;
      if ($355) { label = 78; break; } else { label = 80; break; }
    case 78: 
      var $357=$rp1;
      var $358=(($357)|0);
      var $359=HEAP32[(($358)>>2)];
      var $360=$sh;
      var $361=(((32)-($360))|0);
      var $362=$359 << $361;
      var $363=(($362)|0)!=0;
      if ($363) { label = 79; break; } else { label = 80; break; }
    case 79: 
      $uflags=1;
      label = 87; break;
    case 80: 
      var $366=$un;
      var $367=$rn;
      var $368=((($366)-($367))|0);
      var $369=((($368)-(1))|0);
      $i2=$369;
      label = 81; break;
    case 81: 
      var $371=$i2;
      var $372=(($371)|0) >= 0;
      if ($372) { label = 82; break; } else { label = 86; break; }
    case 82: 
      var $374=$i2;
      var $375=$up;
      var $376=(($375+($374<<2))|0);
      var $377=HEAP32[(($376)>>2)];
      var $378=(($377)|0)!=0;
      if ($378) { label = 83; break; } else { label = 84; break; }
    case 83: 
      $uflags=1;
      label = 86; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $382=$i2;
      var $383=((($382)-(1))|0);
      $i2=$383;
      label = 81; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 132; break;
    case 89: 
      var $388=$un;
      var $389=$ui;
      var $390=((($388)-($389))|0);
      $uj3=$390;
      var $391=$rn;
      var $392=$ui;
      var $393=((($391)-($392))|0);
      $rj=$393;
      var $394=$rp1;
      var $395=$up;
      var $396=(($394)|0)!=(($395)|0);
      var $397=$396 ^ 1;
      var $398=$397 ^ 1;
      var $399=(($398)&1);
      var $400=($399);
      var $401=(($400)|0)!=0;
      if ($401) { label = 90; break; } else { label = 95; break; }
    case 90: 
      label = 91; break;
    case 91: 
      var $404=$rp1;
      var $405=$rj;
      var $406=(($404+($405<<2))|0);
      var $407=$up;
      var $408=$uj3;
      var $409=(($407+($408<<2))|0);
      var $410=(($406)|0)!=(($409)|0);
      if ($410) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $412=$rp1;
      var $413=$rj;
      var $414=(($412+($413<<2))|0);
      var $415=$414;
      var $416=$up;
      var $417=$uj3;
      var $418=(($416+($417<<2))|0);
      var $419=$418;
      var $420=$ui;
      var $421=($420<<2);
      assert($421 % 1 === 0);_memcpy($415, $419, $421);
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $425=$rj;
      var $426=$rp1;
      var $427=(($426+($425<<2))|0);
      $rp1=$427;
      var $428=$ui;
      $rn=$428;
      var $429=$idiff;
      var $430=(($429)|0)==0;
      if ($430) { label = 96; break; } else { label = 97; break; }
    case 96: 
      var $436 = 0;label = 98; break;
    case 97: 
      var $433=$idiff;
      var $434=(((32)-($433))|0);
      var $436 = $434;label = 98; break;
    case 98: 
      var $436;
      $ush=$436;
      var $437=$rj;
      var $438=(($437)|0)==0;
      if ($438) { label = 99; break; } else { label = 104; break; }
    case 99: 
      var $440=$ush;
      var $441=$sh;
      var $442=(($440)|0) < (($441)|0);
      if ($442) { label = 100; break; } else { label = 104; break; }
    case 100: 
      var $444=$uflags;
      var $445=(($444)|0)==0;
      if ($445) { label = 101; break; } else { label = 103; break; }
    case 101: 
      var $447=$rp1;
      var $448=(($447)|0);
      var $449=HEAP32[(($448)>>2)];
      var $450=$sh;
      var $451=1 << $450;
      var $452=$ush;
      var $453=1 << $452;
      var $454=((($451)-($453))|0);
      var $455=$449 & $454;
      var $456=(($455)|0)!=0;
      if ($456) { label = 102; break; } else { label = 103; break; }
    case 102: 
      $uflags=1;
      label = 103; break;
    case 103: 
      label = 105; break;
    case 104: 
      var $460=$ush;
      $sh=$460;
      label = 105; break;
    case 105: 
      var $462=$rnd_away;
      var $463=(($462)|0) < 0;
      if ($463) { label = 106; break; } else { label = 131; break; }
    case 106: 
      var $465=$uj3;
      var $466=(($465)|0)==0;
      if ($466) { label = 107; break; } else { label = 109; break; }
    case 107: 
      var $468=$sh;
      var $469=(($468)|0)==0;
      if ($469) { label = 108; break; } else { label = 109; break; }
    case 108: 
      $rnd_away=0;
      label = 130; break;
    case 109: 
      var $472=$4;
      var $473=(($472)|0)==0;
      if ($473) { label = 110; break; } else { label = 123; break; }
    case 110: 
      var $475=$rp1;
      var $476=(($475)|0);
      var $477=HEAP32[(($476)>>2)];
      var $478=$sh;
      var $479=1 << $478;
      var $480=$477 & $479;
      var $481=(($480)|0)==0;
      if ($481) { label = 111; break; } else { label = 123; break; }
    case 111: 
      var $483=$sh;
      var $484=(($483)|0)!=0;
      if ($484) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $486=$rp1;
      var $487=(($486)|0);
      var $488=HEAP32[(($487)>>2)];
      var $489=$sh;
      var $490=1 << $489;
      var $491=((($490)-(1))|0);
      var $492=$488 & $491;
      $a4=$492;
      var $493=$sh;
      var $494=((($493)-(1))|0);
      var $495=1 << $494;
      $b5=$495;
      label = 114; break;
    case 113: 
      var $497=$uj3;
      var $498=((($497)-(1))|0);
      var $499=$up;
      var $500=(($499+($498<<2))|0);
      var $501=HEAP32[(($500)>>2)];
      $a4=$501;
      $b5=-2147483648;
      label = 114; break;
    case 114: 
      var $503=$a4;
      var $504=$b5;
      var $505=(($503)>>>0) > (($504)>>>0);
      var $506=(($505)&1);
      $rnd_away=$506;
      var $507=$a4;
      var $508=$b5;
      var $509=(($507)|0)==(($508)|0);
      if ($509) { label = 115; break; } else { label = 122; break; }
    case 115: 
      var $511=$uj3;
      var $512=((($511)-(1))|0);
      var $513=$sh;
      var $514=(($513)|0)==0;
      var $515=(($514)&1);
      var $516=((($512)-($515))|0);
      $i6=$516;
      label = 116; break;
    case 116: 
      var $518=$i6;
      var $519=(($518)|0) >= 0;
      if ($519) { label = 117; break; } else { label = 121; break; }
    case 117: 
      var $521=$i6;
      var $522=$up;
      var $523=(($522+($521<<2))|0);
      var $524=HEAP32[(($523)>>2)];
      var $525=(($524)|0)!=0;
      if ($525) { label = 118; break; } else { label = 119; break; }
    case 118: 
      $rnd_away=1;
      label = 121; break;
    case 119: 
      label = 120; break;
    case 120: 
      var $529=$i6;
      var $530=((($529)-(1))|0);
      $i6=$530;
      label = 116; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 129; break;
    case 123: 
      var $534=$sh;
      var $535=(($534)|0)!=0;
      if ($535) { label = 124; break; } else { label = 125; break; }
    case 124: 
      var $537=$rp1;
      var $538=(($537)|0);
      var $539=HEAP32[(($538)>>2)];
      var $540=$sh;
      var $541=((($540)-(1))|0);
      var $542=1 << $541;
      var $543=$539 & $542;
      var $544=(($543)|0)!=0;
      if ($544) { var $559 = 1;label = 128; break; } else { label = 125; break; }
    case 125: 
      var $546=$sh;
      var $547=(($546)|0)==0;
      if ($547) { label = 126; break; } else { var $557 = 0;label = 127; break; }
    case 126: 
      var $549=$uj3;
      var $550=((($549)-(1))|0);
      var $551=$up;
      var $552=(($551+($550<<2))|0);
      var $553=HEAP32[(($552)>>2)];
      var $554=$553 & -2147483648;
      var $555=(($554)|0)!=0;
      var $557 = $555;label = 127; break;
    case 127: 
      var $557;
      var $559 = $557;label = 128; break;
    case 128: 
      var $559;
      var $560=(($559)&1);
      $rnd_away=$560;
      label = 129; break;
    case 129: 
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      var $564=$rp1;
      var $565=$rj;
      var $566=(((-$565))|0);
      var $567=(($564+($566<<2))|0);
      var $568=$567;
      var $569=$rj;
      var $570=($569<<2);
      _memset($568, 0, $570);
      label = 132; break;
    case 132: 
      var $572=$sh;
      var $573=(($572)|0)!=0;
      if ($573) { label = 133; break; } else { label = 134; break; }
    case 133: 
      var $575=$sh;
      var $576=-1 << $575;
      var $577=$rp1;
      var $578=(($577)|0);
      var $579=HEAP32[(($578)>>2)];
      var $580=$579 & $576;
      HEAP32[(($578)>>2)]=$580;
      label = 134; break;
    case 134: 
      var $582=$uflags;
      var $583=(($582)|0)==0;
      if ($583) { label = 135; break; } else { label = 136; break; }
    case 135: 
      $1=0;
      label = 154; break;
    case 136: 
      var $586=$rnd_away;
      var $587=(($586)|0)!=0;
      if ($587) { label = 137; break; } else { label = 145; break; }
    case 137: 
      var $589=$rp1;
      var $590=$rp1;
      var $591=$rn;
      var $592=$sh;
      var $593=1 << $592;
      var $594=___gmpn_add_1($589, $590, $591, $593);
      var $595=(($594)|0)!=0;
      if ($595) { label = 138; break; } else { label = 145; break; }
    case 138: 
      var $597=$exp;
      var $598=HEAP32[((5257656)>>2)];
      var $599=(($597)|0)==(($598)|0);
      if ($599) { label = 139; break; } else { label = 143; break; }
    case 139: 
      var $601=$2;
      var $602=$4;
      var $603=$2;
      var $604=(($603+4)|0);
      var $605=HEAP32[(($604)>>2)];
      var $606=_mpfr_overflow($601, $602, $605);
      var $607=(($606)|0) >= 0;
      if ($607) { label = 140; break; } else { label = 141; break; }
    case 140: 
      var $609=$uflags;
      var $614 = $609;label = 142; break;
    case 141: 
      var $611=$uflags;
      var $612=(((-$611))|0);
      var $614 = $612;label = 142; break;
    case 142: 
      var $614;
      $1=$614;
      label = 154; break;
    case 143: 
      var $616=$exp;
      var $617=((($616)+(1))|0);
      var $618=$2;
      var $619=(($618+8)|0);
      HEAP32[(($619)>>2)]=$617;
      var $620=$rn;
      var $621=((($620)-(1))|0);
      var $622=$rp1;
      var $623=(($622+($621<<2))|0);
      HEAP32[(($623)>>2)]=-2147483648;
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      var $626=$rnd_away;
      var $627=$sign;
      var $628=(($627)|0) < 0;
      var $629=(($628)&1);
      var $630=$626 ^ $629;
      var $631=(($630)|0)!=0;
      if ($631) { label = 146; break; } else { label = 147; break; }
    case 146: 
      var $633=$uflags;
      var $634=(($633)|0)!=0;
      if ($634) { label = 148; break; } else { label = 152; break; }
    case 147: 
      var $636=$uflags;
      var $637=(((-$636))|0);
      var $638=(($637)|0)!=0;
      if ($638) { label = 148; break; } else { label = 152; break; }
    case 148: 
      var $640=HEAP32[((5257648)>>2)];
      var $641=$640 | 8;
      HEAP32[((5257648)>>2)]=$641;
      var $642=$rnd_away;
      var $643=$sign;
      var $644=(($643)|0) < 0;
      var $645=(($644)&1);
      var $646=$642 ^ $645;
      var $647=(($646)|0)!=0;
      if ($647) { label = 149; break; } else { label = 150; break; }
    case 149: 
      var $649=$uflags;
      var $654 = $649;label = 151; break;
    case 150: 
      var $651=$uflags;
      var $652=(((-$651))|0);
      var $654 = $652;label = 151; break;
    case 151: 
      var $654;
      var $657 = $654;label = 153; break;
    case 152: 
      var $657 = 0;label = 153; break;
    case 153: 
      var $657;
      $1=$657;
      label = 154; break;
    case 154: 
      var $659=$1;

      return $659;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_rint["X"]=1;

function _mpfr_powerof2_raw($x) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $xp;
      var $xn;
      $2=$x;
      var $3=$2;
      var $4=(($3+12)|0);
      var $5=HEAP32[(($4)>>2)];
      $xp=$5;
      var $6=$2;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=((($8)-(1))|0);
      var $10=((((($9)|0))/(32))&-1);
      $xn=$10;
      var $11=$xn;
      var $12=$xp;
      var $13=(($12+($11<<2))|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=(($14)|0)!=-2147483648;
      if ($15) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 10; break;
    case 4: 
      label = 5; break;
    case 5: 
      var $19=$xn;
      var $20=(($19)|0) > 0;
      if ($20) { label = 6; break; } else { label = 9; break; }
    case 6: 
      var $22=$xn;
      var $23=((($22)-(1))|0);
      $xn=$23;
      var $24=$xp;
      var $25=(($24+($23<<2))|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26)|0)!=0;
      if ($27) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 10; break;
    case 8: 
      label = 5; break;
    case 9: 
      $1=1;
      label = 10; break;
    case 10: 
      var $32=$1;

      return $32;
    default: assert(0, "bad label: " + label);
  }

}


function _mpfr_cmp2($b, $c, $cancel) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 12)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $bp;
      var $cp;
      var $bb=__stackBase__;
      var $cc=(__stackBase__)+(4);
      var $lastc;
      var $dif=(__stackBase__)+(8);
      var $high_dif;
      var $bn;
      var $cn;
      var $diff_exp;
      var $res;
      var $sign;
      var $z;
      var $__xr;
      var $__a;
      var $tp;
      var $tn;
      var $z1;
      var $__xr2;
      var $__a3;
      $2=$b;
      $3=$c;
      $4=$cancel;
      HEAP32[(($cc)>>2)]=0;
      $lastc=0;
      $high_dif=0;
      $res=0;
      var $5=$2;
      var $6=(($5+8)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$3;
      var $9=(($8+8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($7)|0) >= (($10)|0);
      if ($11) { label = 3; break; } else { label = 30; break; }
    case 3: 
      $sign=1;
      var $13=$2;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$3;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      var $19=((($15)-($18))|0);
      $diff_exp=$19;
      var $20=$2;
      var $21=(($20+12)|0);
      var $22=HEAP32[(($21)>>2)];
      $bp=$22;
      var $23=$3;
      var $24=(($23+12)|0);
      var $25=HEAP32[(($24)>>2)];
      $cp=$25;
      var $26=$2;
      var $27=(($26)|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=((($28)-(1))|0);
      var $30=((((($29)|0))/(32))&-1);
      $bn=$30;
      var $31=$3;
      var $32=(($31)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=((($33)-(1))|0);
      var $35=((((($34)|0))/(32))&-1);
      $cn=$35;
      var $36=$diff_exp;
      var $37=(($36)|0)==0;
      var $38=$37 ^ 1;
      var $39=$38 ^ 1;
      var $40=(($39)&1);
      var $41=($40);
      var $42=(($41)|0)!=0;
      if ($42) { label = 4; break; } else { label = 29; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $45=$bn;
      var $46=(($45)|0) >= 0;
      if ($46) { label = 6; break; } else { var $61 = 0;label = 8; break; }
    case 6: 
      var $48=$cn;
      var $49=(($48)|0) >= 0;
      if ($49) { label = 7; break; } else { var $61 = 0;label = 8; break; }
    case 7: 
      var $51=$bn;
      var $52=$bp;
      var $53=(($52+($51<<2))|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$cn;
      var $56=$cp;
      var $57=(($56+($55<<2))|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=(($54)|0)==(($58)|0);
      var $61 = $59;label = 8; break;
    case 8: 
      var $61;
      if ($61) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $63=$bn;
      var $64=((($63)-(1))|0);
      $bn=$64;
      var $65=$cn;
      var $66=((($65)-(1))|0);
      $cn=$66;
      var $67=$res;
      var $68=((($67)+(32))|0);
      $res=$68;
      label = 5; break;
    case 10: 
      var $70=$bn;
      var $71=(($70)|0) < 0;
      var $72=$71 ^ 1;
      var $73=$72 ^ 1;
      var $74=(($73)&1);
      var $75=($74);
      var $76=(($75)|0)!=0;
      if ($76) { label = 11; break; } else { label = 14; break; }
    case 11: 
      var $78=$cn;
      var $79=(($78)|0) < 0;
      var $80=$79 ^ 1;
      var $81=$80 ^ 1;
      var $82=(($81)&1);
      var $83=($82);
      var $84=(($83)|0)!=0;
      if ($84) { label = 12; break; } else { label = 13; break; }
    case 12: 
      $1=0;
      label = 94; break;
    case 13: 
      var $87=$cp;
      $bp=$87;
      var $88=$cn;
      $bn=$88;
      $cn=-1;
      $sign=-1;
      label = 14; break;
    case 14: 
      var $90=$cn;
      var $91=(($90)|0) < 0;
      var $92=$91 ^ 1;
      var $93=$92 ^ 1;
      var $94=(($93)&1);
      var $95=($94);
      var $96=(($95)|0)!=0;
      if ($96) { label = 15; break; } else { label = 26; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $99=$bn;
      var $100=$bp;
      var $101=(($100+($99<<2))|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102)|0)==0;
      if ($103) { label = 17; break; } else { label = 20; break; }
    case 17: 
      var $105=$bn;
      var $106=((($105)-(1))|0);
      $bn=$106;
      var $107=(($106)|0) < 0;
      if ($107) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=0;
      label = 94; break;
    case 19: 
      var $110=$res;
      var $111=((($110)+(32))|0);
      $res=$111;
      label = 16; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $114=$bn;
      var $115=$bp;
      var $116=(($115+($114<<2))|0);
      var $117=HEAP32[(($116)>>2)];
      $__xr=$117;
      var $118=$__xr;
      var $119=(($118)>>>0) < 65536;
      if ($119) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $121=$__xr;
      var $122=(($121)>>>0) < 256;
      var $123=$122 ? 1 : 9;
      var $129 = $123;label = 24; break;
    case 23: 
      var $125=$__xr;
      var $126=(($125)>>>0) < 16777216;
      var $127=$126 ? 17 : 25;
      var $129 = $127;label = 24; break;
    case 24: 
      var $129;
      $__a=$129;
      var $130=$__a;
      var $131=(((33)-($130))|0);
      var $132=$__xr;
      var $133=$__a;
      var $134=$132 >>> (($133)>>>0);
      var $135=((5248192+$134)|0);
      var $136=HEAP8[($135)];
      var $137=(($136)&255);
      var $138=((($131)-($137))|0);
      $z=$138;
      label = 25; break;
    case 25: 
      var $140=$res;
      var $141=$z;
      var $142=((($140)+($141))|0);
      var $143=$4;
      HEAP32[(($143)>>2)]=$142;
      var $144=$sign;
      $1=$144;
      label = 94; break;
    case 26: 
      var $146=$bn;
      var $147=$bp;
      var $148=(($147+($146<<2))|0);
      var $149=HEAP32[(($148)>>2)];
      var $150=$cn;
      var $151=$cp;
      var $152=(($151+($150<<2))|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=(($149)>>>0) < (($153)>>>0);
      if ($154) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $156=$bp;
      $tp=$156;
      var $157=$cp;
      $bp=$157;
      var $158=$tp;
      $cp=$158;
      var $159=$bn;
      $tn=$159;
      var $160=$cn;
      $bn=$160;
      var $161=$tn;
      $cn=$161;
      $sign=-1;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 31; break;
    case 30: 
      $sign=-1;
      var $165=$3;
      var $166=(($165+8)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=$2;
      var $169=(($168+8)|0);
      var $170=HEAP32[(($169)>>2)];
      var $171=((($167)-($170))|0);
      $diff_exp=$171;
      var $172=$3;
      var $173=(($172+12)|0);
      var $174=HEAP32[(($173)>>2)];
      $bp=$174;
      var $175=$2;
      var $176=(($175+12)|0);
      var $177=HEAP32[(($176)>>2)];
      $cp=$177;
      var $178=$3;
      var $179=(($178)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=((($180)-(1))|0);
      var $182=((((($181)|0))/(32))&-1);
      $bn=$182;
      var $183=$2;
      var $184=(($183)|0);
      var $185=HEAP32[(($184)>>2)];
      var $186=((($185)-(1))|0);
      var $187=((((($186)|0))/(32))&-1);
      $cn=$187;
      label = 31; break;
    case 31: 
      var $189=$diff_exp;
      var $190=(($189)>>>0) < 32;
      var $191=$190 ^ 1;
      var $192=$191 ^ 1;
      var $193=(($192)&1);
      var $194=($193);
      var $195=(($194)|0)!=0;
      if ($195) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $197=$cn;
      var $198=$cp;
      var $199=(($198+($197<<2))|0);
      var $200=HEAP32[(($199)>>2)];
      var $201=$diff_exp;
      var $202=$200 >>> (($201)>>>0);
      HEAP32[(($cc)>>2)]=$202;
      var $203=$diff_exp;
      var $204=(($203)|0)!=0;
      if ($204) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $206=$cn;
      var $207=$cp;
      var $208=(($207+($206<<2))|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=$diff_exp;
      var $211=(((32)-($210))|0);
      var $212=$209 << $211;
      $lastc=$212;
      label = 34; break;
    case 34: 
      var $214=$cn;
      var $215=((($214)-(1))|0);
      $cn=$215;
      label = 36; break;
    case 35: 
      var $217=$diff_exp;
      var $218=((($217)-(32))|0);
      $diff_exp=$218;
      label = 36; break;
    case 36: 
      var $220=$bn;
      var $221=((($220)-(1))|0);
      $bn=$221;
      var $222=$bp;
      var $223=(($222+($220<<2))|0);
      var $224=HEAP32[(($223)>>2)];
      var $225=HEAP32[(($cc)>>2)];
      var $226=((($224)-($225))|0);
      HEAP32[(($dif)>>2)]=$226;
      label = 37; break;
    case 37: 
      var $228=$cn;
      var $229=(($228)|0) >= 0;
      if ($229) { label = 39; break; } else { label = 38; break; }
    case 38: 
      var $231=$lastc;
      var $232=(($231)|0)!=0;
      if ($232) { label = 39; break; } else { var $240 = 0;label = 41; break; }
    case 39: 
      var $234=$high_dif;
      var $235=(($234)|0)==0;
      if ($235) { label = 40; break; } else { var $240 = 0;label = 41; break; }
    case 40: 
      var $237=HEAP32[(($dif)>>2)];
      var $238=(($237)|0)==1;
      var $240 = $238;label = 41; break;
    case 41: 
      var $240;
      var $241=$240 ^ 1;
      var $242=$241 ^ 1;
      var $243=(($242)&1);
      var $244=($243);
      var $245=(($244)|0)!=0;
      if ($245) { label = 42; break; } else { label = 52; break; }
    case 42: 
      var $247=$bn;
      var $248=(($247)|0) >= 0;
      if ($248) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $250=$bn;
      var $251=$bp;
      var $252=(($251+($250<<2))|0);
      var $253=HEAP32[(($252)>>2)];
      var $256 = $253;label = 45; break;
    case 44: 
      var $256 = 0;label = 45; break;
    case 45: 
      var $256;
      HEAP32[(($bb)>>2)]=$256;
      var $257=$lastc;
      HEAP32[(($cc)>>2)]=$257;
      var $258=$cn;
      var $259=(($258)|0) >= 0;
      if ($259) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $261=$diff_exp;
      var $262=(($261)|0)==0;
      if ($262) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $264=$cn;
      var $265=$cp;
      var $266=(($265+($264<<2))|0);
      var $267=HEAP32[(($266)>>2)];
      var $268=HEAP32[(($cc)>>2)];
      var $269=((($268)+($267))|0);
      HEAP32[(($cc)>>2)]=$269;
      label = 49; break;
    case 48: 
      var $271=$cn;
      var $272=$cp;
      var $273=(($272+($271<<2))|0);
      var $274=HEAP32[(($273)>>2)];
      var $275=$274 >>> 1;
      var $276=HEAP32[(($cc)>>2)];
      var $277=((($276)+($275))|0);
      HEAP32[(($cc)>>2)]=$277;
      var $278=$cn;
      var $279=$cp;
      var $280=(($279+($278<<2))|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=$281 << 31;
      $lastc=$282;
      label = 49; break;
    case 49: 
      label = 51; break;
    case 50: 
      $lastc=0;
      label = 51; break;
    case 51: 
      var $286=___gmpn_sub_n($dif, $bb, $cc, 1);
      var $287=(((1)-($286))|0);
      $high_dif=$287;
      var $288=$bn;
      var $289=((($288)-(1))|0);
      $bn=$289;
      var $290=$cn;
      var $291=((($290)-(1))|0);
      $cn=$291;
      var $292=$res;
      var $293=((($292)+(32))|0);
      $res=$293;
      label = 37; break;
    case 52: 
      var $295=$high_dif;
      var $296=(($295)|0)!=0;
      var $297=$296 ^ 1;
      var $298=$297 ^ 1;
      var $299=(($298)&1);
      var $300=($299);
      var $301=(($300)|0)!=0;
      if ($301) { label = 53; break; } else { label = 56; break; }
    case 53: 
      var $303=$res;
      var $304=((($303)-(1))|0);
      $res=$304;
      var $305=HEAP32[(($dif)>>2)];
      var $306=(($305)|0)!=0;
      if ($306) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $308=$res;
      var $309=$4;
      HEAP32[(($309)>>2)]=$308;
      var $310=$sign;
      $1=$310;
      label = 94; break;
    case 55: 
      label = 64; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $314=HEAP32[(($dif)>>2)];
      $__xr2=$314;
      var $315=$__xr2;
      var $316=(($315)>>>0) < 65536;
      if ($316) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $318=$__xr2;
      var $319=(($318)>>>0) < 256;
      var $320=$319 ? 1 : 9;
      var $326 = $320;label = 60; break;
    case 59: 
      var $322=$__xr2;
      var $323=(($322)>>>0) < 16777216;
      var $324=$323 ? 17 : 25;
      var $326 = $324;label = 60; break;
    case 60: 
      var $326;
      $__a3=$326;
      var $327=$__a3;
      var $328=(((33)-($327))|0);
      var $329=$__xr2;
      var $330=$__a3;
      var $331=$329 >>> (($330)>>>0);
      var $332=((5248192+$331)|0);
      var $333=HEAP8[($332)];
      var $334=(($333)&255);
      var $335=((($328)-($334))|0);
      $z1=$335;
      label = 61; break;
    case 61: 
      var $337=$z1;
      var $338=$res;
      var $339=((($338)+($337))|0);
      $res=$339;
      var $340=HEAP32[(($dif)>>2)];
      var $341=$z1;
      var $342=(((32)-($341))|0);
      var $343=((($342)-(1))|0);
      var $344=1 << $343;
      var $345=(($340)|0)!=(($344)|0);
      var $346=$345 ^ 1;
      var $347=$346 ^ 1;
      var $348=(($347)&1);
      var $349=($348);
      var $350=(($349)|0)!=0;
      if ($350) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $352=$res;
      var $353=$4;
      HEAP32[(($353)>>2)]=$352;
      var $354=$sign;
      $1=$354;
      label = 94; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $358=$bn;
      var $359=(($358)|0) >= 0;
      if ($359) { label = 66; break; } else { var $369 = 0;label = 69; break; }
    case 66: 
      var $361=$cn;
      var $362=(($361)|0) >= 0;
      if ($362) { var $367 = 1;label = 68; break; } else { label = 67; break; }
    case 67: 
      var $364=$lastc;
      var $365=(($364)|0)!=0;
      var $367 = $365;label = 68; break;
    case 68: 
      var $367;
      var $369 = $367;label = 69; break;
    case 69: 
      var $369;
      var $370=$369 ^ 1;
      var $371=$370 ^ 1;
      var $372=(($371)&1);
      var $373=($372);
      var $374=(($373)|0)!=0;
      if ($374) { label = 70; break; } else { label = 81; break; }
    case 70: 
      var $376=$diff_exp;
      var $377=(($376)>>>0) >= 32;
      if ($377) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $379=$diff_exp;
      var $380=((($379)-(32))|0);
      $diff_exp=$380;
      label = 78; break;
    case 72: 
      var $382=$lastc;
      HEAP32[(($cc)>>2)]=$382;
      var $383=$cn;
      var $384=(($383)|0) >= 0;
      if ($384) { label = 73; break; } else { label = 76; break; }
    case 73: 
      var $386=$cn;
      var $387=$cp;
      var $388=(($387+($386<<2))|0);
      var $389=HEAP32[(($388)>>2)];
      var $390=$diff_exp;
      var $391=$389 >>> (($390)>>>0);
      var $392=HEAP32[(($cc)>>2)];
      var $393=((($392)+($391))|0);
      HEAP32[(($cc)>>2)]=$393;
      var $394=$diff_exp;
      var $395=(($394)|0)!=0;
      if ($395) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $397=$cn;
      var $398=$cp;
      var $399=(($398+($397<<2))|0);
      var $400=HEAP32[(($399)>>2)];
      var $401=$diff_exp;
      var $402=(((32)-($401))|0);
      var $403=$400 << $402;
      $lastc=$403;
      label = 75; break;
    case 75: 
      label = 77; break;
    case 76: 
      $lastc=0;
      label = 77; break;
    case 77: 
      var $407=$cn;
      var $408=((($407)-(1))|0);
      $cn=$408;
      label = 78; break;
    case 78: 
      var $410=$bn;
      var $411=$bp;
      var $412=(($411+($410<<2))|0);
      var $413=HEAP32[(($412)>>2)];
      var $414=HEAP32[(($cc)>>2)];
      var $415=(($413)|0)!=(($414)|0);
      if ($415) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $417=$res;
      var $418=$bn;
      var $419=$bp;
      var $420=(($419+($418<<2))|0);
      var $421=HEAP32[(($420)>>2)];
      var $422=HEAP32[(($cc)>>2)];
      var $423=(($421)>>>0) < (($422)>>>0);
      var $424=(($423)&1);
      var $425=((($417)+($424))|0);
      var $426=$4;
      HEAP32[(($426)>>2)]=$425;
      var $427=$sign;
      $1=$427;
      label = 94; break;
    case 80: 
      var $429=$bn;
      var $430=((($429)-(1))|0);
      $bn=$430;
      label = 65; break;
    case 81: 
      var $432=$bn;
      var $433=(($432)|0) < 0;
      if ($433) { label = 82; break; } else { label = 93; break; }
    case 82: 
      var $435=$lastc;
      var $436=(($435)|0)!=0;
      if ($436) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $438=$res;
      var $439=((($438)+(1))|0);
      $res=$439;
      label = 92; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $442=$cn;
      var $443=(($442)|0) >= 0;
      if ($443) { label = 86; break; } else { var $451 = 0;label = 87; break; }
    case 86: 
      var $445=$cn;
      var $446=$cp;
      var $447=(($446+($445<<2))|0);
      var $448=HEAP32[(($447)>>2)];
      var $449=(($448)|0)==0;
      var $451 = $449;label = 87; break;
    case 87: 
      var $451;
      if ($451) { label = 88; break; } else { label = 89; break; }
    case 88: 
      var $453=$cn;
      var $454=((($453)-(1))|0);
      $cn=$454;
      label = 85; break;
    case 89: 
      var $456=$cn;
      var $457=(($456)|0) >= 0;
      if ($457) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $459=$res;
      var $460=((($459)+(1))|0);
      $res=$460;
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $464=$res;
      var $465=$4;
      HEAP32[(($465)>>2)]=$464;
      var $466=$sign;
      $1=$466;
      label = 94; break;
    case 94: 
      var $468=$1;
      STACKTOP = __stackBase__;
      return $468;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_cmp2["X"]=1;

function _mpfr_init2($x, $p) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $xsize;
      var $tmp;
      $1=$x;
      $2=$p;
      var $3=HEAP32[((5257676)>>2)];
      var $4=(($3)|0)==32;
      var $5=$4 ^ 1;
      var $6=$5 ^ 1;
      var $7=(($6)&1);
      var $8=($7);
      var $9=(($8)|0)!=0;
      if ($9) { var $14 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      _mpfr_assert_fail(((5248756)|0), 39, ((5249660)|0));
      var $11=(0);
      var $12=(($11)|0)!=0;
      var $14 = $12;label = 4; break;
    case 4: 
      var $14;
      var $15=(($14)&1);
      var $16=$2;
      var $17=(($16)|0) >= 2;
      if ($17) { label = 5; break; } else { var $22 = 0;label = 6; break; }
    case 5: 
      var $19=$2;
      var $20=(($19)|0) <= 2147483647;
      var $22 = $20;label = 6; break;
    case 6: 
      var $22;
      var $23=$22 ^ 1;
      var $24=$23 ^ 1;
      var $25=(($24)&1);
      var $26=($25);
      var $27=(($26)|0)!=0;
      if ($27) { var $32 = 1;label = 8; break; } else { label = 7; break; }
    case 7: 
      _mpfr_assert_fail(((5248756)|0), 52, ((5249136)|0));
      var $29=(0);
      var $30=(($29)|0)!=0;
      var $32 = $30;label = 8; break;
    case 8: 
      var $32;
      var $33=(($32)&1);
      var $34=$2;
      var $35=((($34)-(1))|0);
      var $36=((((($35)|0))/(32))&-1);
      var $37=((($36)+(1))|0);
      $xsize=$37;
      ___gmp_get_memory_functions(5248320, 5247208, 5248188);
      var $38=HEAP32[((5248320)>>2)];
      var $39=$xsize;
      var $40=($39<<2);
      var $41=((($40)+(4))|0);
      var $42=FUNCTION_TABLE[$38]($41);
      var $43=$42;
      $tmp=$43;
      var $44=$2;
      var $45=$1;
      var $46=(($45)|0);
      HEAP32[(($46)>>2)]=$44;
      var $47=$1;
      var $48=(($47+8)|0);
      HEAP32[(($48)>>2)]=1073741824;
      var $49=$1;
      var $50=(($49+4)|0);
      HEAP32[(($50)>>2)]=1;
      var $51=$tmp;
      var $52=$51;
      var $53=(($52+4)|0);
      var $54=$53;
      var $55=$1;
      var $56=(($55+12)|0);
      HEAP32[(($56)>>2)]=$54;
      var $57=$xsize;
      var $58=$1;
      var $59=(($58+12)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=((($60)-(4))|0);
      HEAP32[(($61)>>2)]=$57;
      var $62=$1;
      var $63=(($62+8)|0);
      HEAP32[(($63)>>2)]=-2147483646;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_init2["X"]=1;

function _mpfr_fits_slong_p($f, $rnd) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $e;
      var $prec;
      var $x=__stackBase__;
      var $neg;
      var $res;
      var $s;
      var $s1;
      $2=$f;
      $3=$rnd;
      var $4=$2;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0) <= -2147483645;
      var $8=$7 ^ 1;
      var $9=$8 ^ 1;
      var $10=(($9)&1);
      var $11=($10);
      var $12=(($11)|0)!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=$2;
      var $15=(($14+8)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0)==-2147483647;
      var $18=$17 ? 1 : 0;
      $1=$18;
      label = 25; break;
    case 4: 
      var $20=$2;
      var $21=(($20+8)|0);
      var $22=HEAP32[(($21)>>2)];
      $e=$22;
      var $23=$e;
      var $24=(($23)|0) < 1;
      if ($24) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=1;
      label = 25; break;
    case 6: 
      var $27=$2;
      var $28=(($27+4)|0);
      var $29=HEAP32[(($28)>>2)];
      var $30=(($29)|0) < 0;
      var $31=(($30)&1);
      $neg=$31;
      var $32=$neg;
      var $33=(($32)|0)!=0;
      if ($33) { label = 7; break; } else { label = 12; break; }
    case 7: 
      $s=-2147483648;
      $prec=0;
      label = 8; break;
    case 8: 
      var $36=$s;
      var $37=(($36)|0)!=0;
      if ($37) { label = 9; break; } else { label = 11; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $40=$s;
      var $41=Math.floor(((($40)>>>0))/(2));
      $s=$41;
      var $42=$prec;
      var $43=((($42)+(1))|0);
      $prec=$43;
      label = 8; break;
    case 11: 
      label = 17; break;
    case 12: 
      $s1=2147483647;
      $prec=0;
      label = 13; break;
    case 13: 
      var $47=$s1;
      var $48=(($47)|0)!=0;
      if ($48) { label = 14; break; } else { label = 16; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $51=$s1;
      var $52=((((($51)|0))/(2))&-1);
      $s1=$52;
      var $53=$prec;
      var $54=((($53)+(1))|0);
      $prec=$54;
      label = 13; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $57=$e;
      var $58=$prec;
      var $59=((($58)-(1))|0);
      var $60=(($57)|0) <= (($59)|0);
      if ($60) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $1=1;
      label = 25; break;
    case 19: 
      var $63=$e;
      var $64=$prec;
      var $65=((($64)+(1))|0);
      var $66=(($63)|0) >= (($65)|0);
      if ($66) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $1=0;
      label = 25; break;
    case 21: 
      var $69=(($x)|0);
      var $70=$prec;
      _mpfr_init2($69, $70);
      var $71=(($x)|0);
      var $72=$2;
      var $73=$3;
      var $74=$2;
      var $75=(($74+4)|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=_mpfr_set4($71, $72, $73, $76);
      var $78=$neg;
      var $79=(($78)|0)!=0;
      if ($79) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $81=(($x)|0);
      var $82=_mpfr_cmp_si_2exp($81, -2147483648, 0);
      var $83=(($82)|0) >= 0;
      var $84=(($83)&1);
      var $93 = $84;label = 24; break;
    case 23: 
      var $86=(($x)|0);
      var $87=(($86+8)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$e;
      var $90=(($88)|0)==(($89)|0);
      var $91=(($90)&1);
      var $93 = $91;label = 24; break;
    case 24: 
      var $93;
      $res=$93;
      var $94=(($x)|0);
      _mpfr_clear($94);
      var $95=$res;
      $1=$95;
      label = 25; break;
    case 25: 
      var $97=$1;
      STACKTOP = __stackBase__;
      return $97;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_fits_slong_p["X"]=1;

function _mpfr_get_si($f, $rnd) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 16)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $prec;
      var $s;
      var $x=__stackBase__;
      var $a;
      var $n;
      var $exp;
      $2=$f;
      $3=$rnd;
      var $4=$2;
      var $5=$3;
      var $6=_mpfr_fits_slong_p($4, $5);
      var $7=(($6)|0)!=0;
      var $8=$7 ^ 1;
      var $9=$8 ^ 1;
      var $10=$9 ^ 1;
      var $11=(($10)&1);
      var $12=($11);
      var $13=(($12)|0)!=0;
      if ($13) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $15=HEAP32[((5257648)>>2)];
      var $16=$15 | 16;
      HEAP32[((5257648)>>2)]=$16;
      var $17=$2;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($19)|0)==-2147483646;
      if ($20) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $29 = 0;label = 6; break;
    case 5: 
      var $23=$2;
      var $24=(($23+4)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=(($25)|0) < 0;
      var $27=$26 ? -2147483648 : 2147483647;
      var $29 = $27;label = 6; break;
    case 6: 
      var $29;
      $1=$29;
      label = 23; break;
    case 7: 
      var $31=$2;
      var $32=(($31+8)|0);
      var $33=HEAP32[(($32)>>2)];
      var $34=(($33)|0)==-2147483647;
      if ($34) { label = 8; break; } else { label = 9; break; }
    case 8: 
      $1=0;
      label = 23; break;
    case 9: 
      $s=-2147483648;
      $prec=0;
      label = 10; break;
    case 10: 
      var $38=$s;
      var $39=(($38)|0)!=0;
      if ($39) { label = 11; break; } else { label = 13; break; }
    case 11: 
      label = 12; break;
    case 12: 
      var $42=$s;
      var $43=((((($42)|0))/(2))&-1);
      $s=$43;
      var $44=$prec;
      var $45=((($44)+(1))|0);
      $prec=$45;
      label = 10; break;
    case 13: 
      var $47=(($x)|0);
      var $48=$prec;
      _mpfr_init2($47, $48);
      var $49=(($x)|0);
      var $50=$2;
      var $51=$3;
      var $52=_mpfr_rint($49, $50, $51);
      var $53=(($x)|0);
      var $54=(($53+8)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=(($55)|0)==-2147483647;
      var $57=$56 ^ 1;
      var $58=$57 ^ 1;
      var $59=(($58)&1);
      var $60=($59);
      var $61=(($60)|0)!=0;
      if ($61) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $s=0;
      label = 22; break;
    case 15: 
      var $64=(($x)|0);
      var $65=(($64+8)|0);
      var $66=HEAP32[(($65)>>2)];
      $exp=$66;
      var $67=(($x)|0);
      var $68=(($67)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($69)-(1))|0);
      var $71=((((($70)|0))/(32))&-1);
      var $72=((($71)+(1))|0);
      $n=$72;
      var $73=$n;
      var $74=((($73)-(1))|0);
      var $75=(($x)|0);
      var $76=(($75+12)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($77+($74<<2))|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$exp;
      var $81=(((32)-($80))|0);
      var $82=$79 >>> (($81)>>>0);
      $a=$82;
      var $83=$2;
      var $84=(($83+4)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85)|0) > 0;
      if ($86) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $88=$a;
      var $99 = $88;label = 21; break;
    case 17: 
      var $90=$a;
      var $91=(($90)>>>0) <= 2147483647;
      if ($91) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $93=$a;
      var $94=(((-$93))|0);
      var $97 = $94;label = 20; break;
    case 19: 
      var $97 = -2147483648;label = 20; break;
    case 20: 
      var $97;
      var $99 = $97;label = 21; break;
    case 21: 
      var $99;
      $s=$99;
      label = 22; break;
    case 22: 
      var $101=(($x)|0);
      _mpfr_clear($101);
      var $102=$s;
      $1=$102;
      label = 23; break;
    case 23: 
      var $104=$1;
      STACKTOP = __stackBase__;
      return $104;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_get_si["X"]=1;

function _mpfr_sub1sp($a, $b, $c, $rnd_mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $bx;
      var $cx;
      var $d;
      var $p;
      var $sh;
      var $cnt;
      var $n;
      var $ap;
      var $bp;
      var $cp;
      var $limb;
      var $inexact;
      var $bcp;
      var $bcp1;
      var $bbcp;
      var $bbcp1;
      var $tmp_marker=__stackBase__;
      var $k;
      var $t;
      var $tx;
      var $__xr;
      var $__a;
      var $k1;
      var $len;
      var $__xr2;
      var $__a3;
      var $c0;
      var $mask;
      var $k4;
      var $carry;
      var $k5;
      var $k6;
      var $dm;
      var $m;
      var $mask7;
      var $x;
      var $tp;
      var $kx;
      var $sx;
      var $tp8;
      var $x9;
      var $kx10;
      var $sx11;
      var $tp12;
      var $x13;
      var $kx14;
      var $sx15;
      var $k16;
      $2=$a;
      $3=$b;
      $4=$c;
      $5=$rnd_mode;
      $bbcp=-1;
      $bbcp1=-1;
      HEAP32[(($tmp_marker)>>2)]=0;
      var $6=$3;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      $p=$8;
      var $9=$p;
      var $10=((($9)-(1))|0);
      var $11=((((($10)|0))/(32))&-1);
      var $12=((($11)+(1))|0);
      $n=$12;
      var $13=$3;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      $bx=$15;
      var $16=$4;
      var $17=(($16+8)|0);
      var $18=HEAP32[(($17)>>2)];
      $cx=$18;
      var $19=$bx;
      var $20=$cx;
      var $21=(($19)|0)==(($20)|0);
      var $22=$21 ^ 1;
      var $23=$22 ^ 1;
      var $24=(($23)&1);
      var $25=($24);
      var $26=(($25)|0)!=0;
      if ($26) { label = 3; break; } else { label = 16; break; }
    case 3: 
      var $28=$n;
      var $29=((($28)-(1))|0);
      $k=$29;
      var $30=$3;
      var $31=(($30+12)|0);
      var $32=HEAP32[(($31)>>2)];
      $bp=$32;
      var $33=$4;
      var $34=(($33+12)|0);
      var $35=HEAP32[(($34)>>2)];
      $cp=$35;
      label = 4; break;
    case 4: 
      var $37=$k;
      var $38=(($37)|0) >= 0;
      if ($38) { label = 5; break; } else { var $55 = 0;label = 6; break; }
    case 5: 
      var $40=$k;
      var $41=$bp;
      var $42=(($41+($40<<2))|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$k;
      var $45=$cp;
      var $46=(($45+($44<<2))|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=(($43)|0)==(($47)|0);
      var $49=$48 ^ 1;
      var $50=$49 ^ 1;
      var $51=(($50)&1);
      var $52=($51);
      var $53=(($52)|0)!=0;
      var $55 = $53;label = 6; break;
    case 6: 
      var $55;
      if ($55) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $57=$k;
      var $58=((($57)-(1))|0);
      $k=$58;
      label = 4; break;
    case 8: 
      var $60=$k;
      var $61=(($60)|0) < 0;
      var $62=$61 ^ 1;
      var $63=$62 ^ 1;
      var $64=(($63)&1);
      var $65=($64);
      var $66=(($65)|0)!=0;
      if ($66) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $68=$5;
      var $69=(($68)|0)==3;
      if ($69) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $71=$2;
      var $72=(($71+4)|0);
      HEAP32[(($72)>>2)]=-1;
      label = 12; break;
    case 11: 
      var $74=$2;
      var $75=(($74+4)|0);
      HEAP32[(($75)>>2)]=1;
      label = 12; break;
    case 12: 
      var $77=$2;
      var $78=(($77+8)|0);
      HEAP32[(($78)>>2)]=-2147483647;
      $1=0;
      label = 297; break;
    case 13: 
      var $80=$k;
      var $81=$bp;
      var $82=(($81+($80<<2))|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$k;
      var $85=$cp;
      var $86=(($85+($84<<2))|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=(($83)>>>0) > (($87)>>>0);
      if ($88) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 20; break;
    case 15: 
      label = 18; break;
    case 16: 
      var $92=$bx;
      var $93=$cx;
      var $94=(($92)|0) < (($93)|0);
      var $95=$94 ^ 1;
      var $96=$95 ^ 1;
      var $97=(($96)&1);
      var $98=($97);
      var $99=(($98)|0)!=0;
      if ($99) { label = 17; break; } else { label = 19; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $102=$3;
      var $103=(($102+4)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(((-$104))|0);
      var $106=$2;
      var $107=(($106+4)|0);
      HEAP32[(($107)>>2)]=$105;
      var $108=$3;
      $t=$108;
      var $109=$4;
      $3=$109;
      var $110=$t;
      $4=$110;
      var $111=$bx;
      $tx=$111;
      var $112=$cx;
      $bx=$112;
      var $113=$tx;
      $cx=$113;
      label = 21; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $116=$3;
      var $117=(($116+4)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=$2;
      var $120=(($119+4)|0);
      HEAP32[(($120)>>2)]=$118;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $123=$bx;
      var $124=$cx;
      var $125=((($123)-($124))|0);
      $d=$125;
      var $126=$d;
      var $127=(($126)>>>0) <= 1;
      var $128=$127 ^ 1;
      var $129=$128 ^ 1;
      var $130=(($129)&1);
      var $131=($130);
      var $132=(($131)|0)!=0;
      if ($132) { label = 23; break; } else { label = 91; break; }
    case 23: 
      var $134=$d;
      var $135=(($134)>>>0) < 1;
      var $136=$135 ^ 1;
      var $137=$136 ^ 1;
      var $138=(($137)&1);
      var $139=($138);
      var $140=(($139)|0)!=0;
      if ($140) { label = 24; break; } else { label = 53; break; }
    case 24: 
      var $142=$2;
      var $143=(($142+12)|0);
      var $144=HEAP32[(($143)>>2)];
      $ap=$144;
      var $145=$ap;
      var $146=$3;
      var $147=(($146+12)|0);
      var $148=HEAP32[(($147)>>2)];
      var $149=$4;
      var $150=(($149+12)|0);
      var $151=HEAP32[(($150)>>2)];
      var $152=$n;
      var $153=___gmpn_sub_n($145, $148, $151, $152);
      label = 25; break;
    case 25: 
      var $155=$n;
      var $156=((($155)-(1))|0);
      var $157=$ap;
      var $158=(($157+($156<<2))|0);
      var $159=HEAP32[(($158)>>2)];
      $limb=$159;
      var $160=$limb;
      var $161=(($160)|0)!=0;
      var $162=$161 ^ 1;
      var $163=$162 ^ 1;
      var $164=(($163)&1);
      var $165=($164);
      var $166=(($165)|0)!=0;
      if ($166) { label = 26; break; } else { label = 34; break; }
    case 26: 
      label = 27; break;
    case 27: 
      var $169=$limb;
      $__xr=$169;
      var $170=$__xr;
      var $171=(($170)>>>0) < 65536;
      if ($171) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $173=$__xr;
      var $174=(($173)>>>0) < 256;
      var $175=$174 ? 1 : 9;
      var $181 = $175;label = 30; break;
    case 29: 
      var $177=$__xr;
      var $178=(($177)>>>0) < 16777216;
      var $179=$178 ? 17 : 25;
      var $181 = $179;label = 30; break;
    case 30: 
      var $181;
      $__a=$181;
      var $182=$__a;
      var $183=(((33)-($182))|0);
      var $184=$__xr;
      var $185=$__a;
      var $186=$184 >>> (($185)>>>0);
      var $187=((5248192+$186)|0);
      var $188=HEAP8[($187)];
      var $189=(($188)&255);
      var $190=((($183)-($189))|0);
      $cnt=$190;
      label = 31; break;
    case 31: 
      var $192=$cnt;
      var $193=(($192)|0)!=0;
      var $194=$193 ^ 1;
      var $195=$194 ^ 1;
      var $196=(($195)&1);
      var $197=($196);
      var $198=(($197)|0)!=0;
      if ($198) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $200=$ap;
      var $201=$ap;
      var $202=$n;
      var $203=$cnt;
      var $204=___gmpn_lshift($200, $201, $202, $203);
      var $205=$cnt;
      var $206=$bx;
      var $207=((($206)-($205))|0);
      $bx=$207;
      label = 33; break;
    case 33: 
      label = 46; break;
    case 34: 
      var $210=$n;
      var $211=((($210)-(1))|0);
      $k1=$211;
      label = 35; break;
    case 35: 
      var $213=$k1;
      var $214=((($213)-(1))|0);
      $k1=$214;
      var $215=$ap;
      var $216=(($215+($214<<2))|0);
      var $217=HEAP32[(($216)>>2)];
      $limb=$217;
      label = 36; break;
    case 36: 
      var $219=$limb;
      var $220=(($219)|0)==0;
      if ($220) { label = 35; break; } else { label = 37; break; }
    case 37: 
      label = 38; break;
    case 38: 
      var $223=$limb;
      $__xr2=$223;
      var $224=$__xr2;
      var $225=(($224)>>>0) < 65536;
      if ($225) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $227=$__xr2;
      var $228=(($227)>>>0) < 256;
      var $229=$228 ? 1 : 9;
      var $235 = $229;label = 41; break;
    case 40: 
      var $231=$__xr2;
      var $232=(($231)>>>0) < 16777216;
      var $233=$232 ? 17 : 25;
      var $235 = $233;label = 41; break;
    case 41: 
      var $235;
      $__a3=$235;
      var $236=$__a3;
      var $237=(((33)-($236))|0);
      var $238=$__xr2;
      var $239=$__a3;
      var $240=$238 >>> (($239)>>>0);
      var $241=((5248192+$240)|0);
      var $242=HEAP8[($241)];
      var $243=(($242)&255);
      var $244=((($237)-($243))|0);
      $cnt=$244;
      label = 42; break;
    case 42: 
      var $246=$k1;
      var $247=((($246)+(1))|0);
      $k1=$247;
      var $248=$n;
      var $249=$k1;
      var $250=((($248)-($249))|0);
      $len=$250;
      var $251=$cnt;
      var $252=(($251)|0)!=0;
      var $253=$252 ^ 1;
      var $254=$253 ^ 1;
      var $255=(($254)&1);
      var $256=($255);
      var $257=(($256)|0)!=0;
      if ($257) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $259=$ap;
      var $260=$len;
      var $261=(($259+($260<<2))|0);
      var $262=$ap;
      var $263=$k1;
      var $264=$cnt;
      var $265=___gmpn_lshift($261, $262, $263, $264);
      label = 45; break;
    case 44: 
      var $267=$ap;
      var $268=$len;
      var $269=(($267+($268<<2))|0);
      var $270=$269;
      var $271=$ap;
      var $272=$271;
      var $273=$k1;
      var $274=($273<<2);
      _memmove($270, $272, $274, 4, 0);
      label = 45; break;
    case 45: 
      var $276=$ap;
      var $277=$276;
      var $278=$len;
      var $279=($278<<2);
      _memset($277, 0, $279);
      var $280=$cnt;
      var $281=$len;
      var $282=($281<<5);
      var $283=((($280)+($282))|0);
      var $284=$bx;
      var $285=((($284)-($283))|0);
      $bx=$285;
      label = 46; break;
    case 46: 
      var $287=$bx;
      var $288=HEAP32[((5257652)>>2)];
      var $289=(($287)|0) < (($288)|0);
      var $290=$289 ^ 1;
      var $291=$290 ^ 1;
      var $292=(($291)&1);
      var $293=($292);
      var $294=(($293)|0)!=0;
      if ($294) { label = 47; break; } else { label = 52; break; }
    case 47: 
      var $296=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($296);
      var $297=$5;
      var $298=(($297)|0)==0;
      if ($298) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $300=$bx;
      var $301=HEAP32[((5257652)>>2)];
      var $302=((($301)-(1))|0);
      var $303=(($300)|0) < (($302)|0);
      if ($303) { label = 50; break; } else { label = 49; break; }
    case 49: 
      var $305=$2;
      var $306=_mpfr_powerof2_raw($305);
      var $307=(($306)|0)!=0;
      if ($307) { label = 50; break; } else { label = 51; break; }
    case 50: 
      $5=1;
      label = 51; break;
    case 51: 
      var $310=$2;
      var $311=$5;
      var $312=$2;
      var $313=(($312+4)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=_mpfr_underflow($310, $311, $314);
      $1=$315;
      label = 297; break;
    case 52: 
      var $317=$bx;
      var $318=$2;
      var $319=(($318+8)|0);
      HEAP32[(($319)>>2)]=$317;
      var $320=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($320);
      $1=0;
      label = 297; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $323=$p;
      var $324=(((-$323))|0);
      var $325=((($324)>>>0))%(32);
      $sh=$325;
      label = 55; break;
    case 55: 
      var $327=$3;
      var $328=(($327+12)|0);
      var $329=HEAP32[(($328)>>2)];
      $bp=$329;
      var $330=$4;
      var $331=(($330+12)|0);
      var $332=HEAP32[(($331)>>2)];
      $cp=$332;
      var $333=$n;
      var $334=((($333)-(1))|0);
      $k4=$334;
      var $335=$k4;
      var $336=$bp;
      var $337=(($336+($335<<2))|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=$k4;
      var $340=$cp;
      var $341=(($340+($339<<2))|0);
      var $342=HEAP32[(($341)>>2)];
      var $343=Math.floor(((($342)>>>0))/(2));
      var $344=((($338)-($343))|0);
      $limb=$344;
      var $345=$limb;
      var $346=(($345)>>>0) > 2147483648;
      if ($346) { label = 56; break; } else { label = 73; break; }
    case 56: 
      label = 57; break;
    case 57: 
      var $349=$cp;
      var $350=(($349)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=$sh;
      var $353=1 << $352;
      var $354=$351 & $353;
      $c0=$354;
      var $355=$n;
      var $356=($355<<2);
      var $357=(($356)>>>0) < 16384;
      var $358=$357 ^ 1;
      var $359=$358 ^ 1;
      var $360=(($359)&1);
      var $361=($360);
      var $362=(($361)|0)!=0;
      if ($362) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $364=$n;
      var $365=($364<<2);
      var $366=STACKTOP;STACKTOP = (STACKTOP + $365)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $372 = $366;label = 60; break;
    case 59: 
      var $368=$n;
      var $369=($368<<2);
      var $370=_mpfr_tmp_allocate($tmp_marker, $369);
      var $372 = $370;label = 60; break;
    case 60: 
      var $372;
      var $373=$372;
      $cp=$373;
      var $374=$cp;
      var $375=$4;
      var $376=(($375+12)|0);
      var $377=HEAP32[(($376)>>2)];
      var $378=$n;
      var $379=___gmpn_rshift($374, $377, $378, 1);
      var $380=$c0;
      var $381=(($380)|0)==0;
      var $382=$381 ^ 1;
      var $383=$382 ^ 1;
      var $384=(($383)&1);
      var $385=($384);
      var $386=(($385)|0)!=0;
      if ($386) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $388=$2;
      var $389=(($388+12)|0);
      var $390=HEAP32[(($389)>>2)];
      $ap=$390;
      var $391=$ap;
      var $392=$bp;
      var $393=$cp;
      var $394=$n;
      var $395=___gmpn_sub_n($391, $392, $393, $394);
      var $396=$bx;
      var $397=$2;
      var $398=(($397+8)|0);
      HEAP32[(($398)>>2)]=$396;
      var $399=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($399);
      $1=0;
      label = 297; break;
    case 62: 
      var $401=$2;
      var $402=(($401+12)|0);
      var $403=HEAP32[(($402)>>2)];
      $ap=$403;
      var $404=$sh;
      var $405=1 << $404;
      var $406=((($405)-(1))|0);
      var $407=$406 ^ -1;
      $mask=$407;
      var $408=$mask;
      var $409=$cp;
      var $410=(($409)|0);
      var $411=HEAP32[(($410)>>2)];
      var $412=$411 & $408;
      HEAP32[(($410)>>2)]=$412;
      var $413=$ap;
      var $414=$bp;
      var $415=$cp;
      var $416=$n;
      var $417=___gmpn_sub_n($413, $414, $415, $416);
      var $418=$bx;
      var $419=$2;
      var $420=(($419+8)|0);
      HEAP32[(($420)>>2)]=$418;
      $bcp=1;
      $bcp1=0;
      var $421=$5;
      var $422=(($421)|0)==0;
      var $423=$422 ^ 1;
      var $424=$423 ^ 1;
      var $425=(($424)&1);
      var $426=($425);
      var $427=(($426)|0)!=0;
      if ($427) { label = 63; break; } else { label = 66; break; }
    case 63: 
      var $429=$ap;
      var $430=(($429)|0);
      var $431=HEAP32[(($430)>>2)];
      var $432=$sh;
      var $433=1 << $432;
      var $434=$431 & $433;
      var $435=(($434)|0)==0;
      var $436=$435 ^ 1;
      var $437=$436 ^ 1;
      var $438=(($437)&1);
      var $439=($438);
      var $440=(($439)|0)!=0;
      if ($440) { label = 64; break; } else { label = 65; break; }
    case 64: 
      label = 261; break;
    case 65: 
      label = 242; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $445=$5;
      var $446=$2;
      var $447=(($446+4)|0);
      var $448=HEAP32[(($447)>>2)];
      var $449=(($448)|0) < 0;
      var $450=(($449)&1);
      var $451=((($445)+($450))|0);
      var $452=(($451)|0)==3;
      var $453=$452 ^ 1;
      var $454=$453 ^ 1;
      var $455=(($454)&1);
      var $456=($455);
      var $457=(($456)|0)!=0;
      if ($457) { label = 68; break; } else { label = 69; break; }
    case 68: 
      $5=1;
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $461=$5;
      var $462=(($461)|0)==1;
      if ($462) { label = 71; break; } else { label = 72; break; }
    case 71: 
      label = 242; break;
    case 72: 
      label = 261; break;
    case 73: 
      var $466=$limb;
      var $467=(($466)>>>0) < 2147483648;
      var $468=$467 ^ 1;
      var $469=$468 ^ 1;
      var $470=(($469)&1);
      var $471=($470);
      var $472=(($471)|0)!=0;
      if ($472) { label = 74; break; } else { label = 79; break; }
    case 74: 
      label = 75; break;
    case 75: 
      var $475=$n;
      var $476=($475<<2);
      var $477=(($476)>>>0) < 16384;
      var $478=$477 ^ 1;
      var $479=$478 ^ 1;
      var $480=(($479)&1);
      var $481=($480);
      var $482=(($481)|0)!=0;
      if ($482) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $484=$n;
      var $485=($484<<2);
      var $486=STACKTOP;STACKTOP = (STACKTOP + $485)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $492 = $486;label = 78; break;
    case 77: 
      var $488=$n;
      var $489=($488<<2);
      var $490=_mpfr_tmp_allocate($tmp_marker, $489);
      var $492 = $490;label = 78; break;
    case 78: 
      var $492;
      var $493=$492;
      $bp=$493;
      var $494=$bp;
      var $495=$3;
      var $496=(($495+12)|0);
      var $497=HEAP32[(($496)>>2)];
      var $498=$n;
      var $499=___gmpn_lshift($494, $497, $498, 1);
      var $500=$2;
      var $501=(($500+12)|0);
      var $502=HEAP32[(($501)>>2)];
      $ap=$502;
      var $503=$ap;
      var $504=$bp;
      var $505=$cp;
      var $506=$n;
      var $507=___gmpn_sub_n($503, $504, $505, $506);
      var $508=$bx;
      var $509=((($508)-(1))|0);
      $bx=$509;
      label = 25; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $512=$k4;
      var $513=$cp;
      var $514=(($513+($512<<2))|0);
      var $515=HEAP32[(($514)>>2)];
      var $516=$515 & 1;
      $carry=$516;
      var $517=$k4;
      var $518=((($517)-(1))|0);
      $k4=$518;
      label = 81; break;
    case 81: 
      var $520=$k4;
      var $521=(($520)|0) >= 0;
      if ($521) { label = 82; break; } else { var $537 = 0;label = 83; break; }
    case 82: 
      var $523=$k4;
      var $524=$bp;
      var $525=(($524+($523<<2))|0);
      var $526=HEAP32[(($525)>>2)];
      var $527=$k4;
      var $528=$cp;
      var $529=(($528+($527<<2))|0);
      var $530=HEAP32[(($529)>>2)];
      var $531=Math.floor(((($530)>>>0))/(2));
      var $532=$carry;
      var $533=$532 << 31;
      var $534=((($531)+($533))|0);
      $carry=$534;
      var $535=(($526)|0)==(($534)|0);
      var $537 = $535;label = 83; break;
    case 83: 
      var $537;
      if ($537) { label = 80; break; } else { label = 84; break; }
    case 84: 
      var $539=$k4;
      var $540=(($539)|0) < 0;
      var $541=$540 ^ 1;
      var $542=$541 ^ 1;
      var $543=(($542)&1);
      var $544=($543);
      var $545=(($544)|0)!=0;
      if ($545) { label = 85; break; } else { label = 88; break; }
    case 85: 
      var $547=$carry;
      var $548=(($547)|0)!=0;
      var $549=$548 ^ 1;
      var $550=$549 ^ 1;
      var $551=(($550)&1);
      var $552=($551);
      var $553=(($552)|0)!=0;
      if ($553) { label = 86; break; } else { label = 87; break; }
    case 86: 
      label = 75; break;
    case 87: 
      var $556=$2;
      var $557=(($556+12)|0);
      var $558=HEAP32[(($557)>>2)];
      $ap=$558;
      var $559=$ap;
      var $560=$559;
      var $561=$n;
      var $562=($561<<2);
      _memset($560, 0, $562);
      var $563=$n;
      var $564=((($563)-(1))|0);
      var $565=$ap;
      var $566=(($565+($564<<2))|0);
      HEAP32[(($566)>>2)]=-2147483648;
      var $567=$bx;
      var $568=$2;
      var $569=(($568+8)|0);
      HEAP32[(($569)>>2)]=$567;
      var $570=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($570);
      $1=0;
      label = 297; break;
    case 88: 
      var $572=$k4;
      var $573=$bp;
      var $574=(($573+($572<<2))|0);
      var $575=HEAP32[(($574)>>2)];
      var $576=$carry;
      var $577=(($575)>>>0) > (($576)>>>0);
      if ($577) { label = 89; break; } else { label = 90; break; }
    case 89: 
      label = 57; break;
    case 90: 
      label = 75; break;
    case 91: 
      var $581=$d;
      var $582=$p;
      var $583=(($581)>>>0) >= (($582)>>>0);
      var $584=$583 ^ 1;
      var $585=$584 ^ 1;
      var $586=(($585)&1);
      var $587=($586);
      var $588=(($587)|0)!=0;
      if ($588) { label = 92; break; } else { label = 162; break; }
    case 92: 
      var $590=$2;
      var $591=(($590+12)|0);
      var $592=HEAP32[(($591)>>2)];
      $ap=$592;
      label = 93; break;
    case 93: 
      var $594=$p;
      var $595=(((-$594))|0);
      var $596=((($595)>>>0))%(32);
      $sh=$596;
      label = 94; break;
    case 94: 
      var $598=$d;
      var $599=$p;
      var $600=(($598)|0)==(($599)|0);
      var $601=$600 ^ 1;
      var $602=$601 ^ 1;
      var $603=(($602)&1);
      var $604=($603);
      var $605=(($604)|0)!=0;
      if ($605) { label = 95; break; } else { label = 137; break; }
    case 95: 
      $bcp=1;
      var $607=$n;
      var $608=((($607)-(1))|0);
      var $609=$4;
      var $610=(($609+12)|0);
      var $611=HEAP32[(($610)>>2)];
      var $612=(($611+($608<<2))|0);
      var $613=HEAP32[(($612)>>2)];
      var $614=$613 & 1073741824;
      $bbcp=$614;
      var $615=$bbcp;
      var $616=(($615)|0)!=0;
      var $617=$616 ^ 1;
      var $618=$617 ^ 1;
      var $619=(($618)&1);
      var $620=($619);
      var $621=(($620)|0)!=0;
      if ($621) { label = 96; break; } else { label = 97; break; }
    case 96: 
      $bcp1=1;
      label = 106; break;
    case 97: 
      var $624=$4;
      var $625=(($624+12)|0);
      var $626=HEAP32[(($625)>>2)];
      $cp=$626;
      var $627=$n;
      var $628=((($627)-(1))|0);
      var $629=$cp;
      var $630=(($629+($628<<2))|0);
      var $631=HEAP32[(($630)>>2)];
      var $632=(($631)|0)==-2147483648;
      var $633=$632 ^ 1;
      var $634=$633 ^ 1;
      var $635=(($634)&1);
      var $636=($635);
      var $637=(($636)|0)!=0;
      if ($637) { label = 98; break; } else { label = 104; break; }
    case 98: 
      var $639=$n;
      var $640=((($639)-(1))|0);
      $k5=$640;
      label = 99; break;
    case 99: 
      var $642=$k5;
      var $643=((($642)-(1))|0);
      $k5=$643;
      label = 100; break;
    case 100: 
      var $645=$k5;
      var $646=(($645)|0) >= 0;
      if ($646) { label = 101; break; } else { var $654 = 0;label = 102; break; }
    case 101: 
      var $648=$k5;
      var $649=$cp;
      var $650=(($649+($648<<2))|0);
      var $651=HEAP32[(($650)>>2)];
      var $652=(($651)|0)==0;
      var $654 = $652;label = 102; break;
    case 102: 
      var $654;
      if ($654) { label = 99; break; } else { label = 103; break; }
    case 103: 
      var $656=$k5;
      var $657=(($656)|0) >= 0;
      var $658=(($657)&1);
      $bcp1=$658;
      label = 105; break;
    case 104: 
      $bcp1=1;
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      var $662=$3;
      var $663=(($662+12)|0);
      var $664=HEAP32[(($663)>>2)];
      $bp=$664;
      var $665=$5;
      var $666=(($665)|0)==0;
      var $667=$666 ^ 1;
      var $668=$667 ^ 1;
      var $669=(($668)&1);
      var $670=($669);
      var $671=(($670)|0)!=0;
      if ($671) { label = 107; break; } else { label = 122; break; }
    case 107: 
      var $673=$bcp;
      var $674=(($673)|0)!=0;
      if ($674) { label = 108; break; } else { var $679 = 0;label = 109; break; }
    case 108: 
      var $676=$bcp1;
      var $677=(($676)|0)==0;
      var $679 = $677;label = 109; break;
    case 109: 
      var $679;
      var $680=$679 ^ 1;
      var $681=$680 ^ 1;
      var $682=(($681)&1);
      var $683=($682);
      var $684=(($683)|0)!=0;
      if ($684) { label = 110; break; } else { label = 117; break; }
    case 110: 
      var $686=$bp;
      var $687=(($686)|0);
      var $688=HEAP32[(($687)>>2)];
      var $689=$sh;
      var $690=1 << $689;
      var $691=$688 & $690;
      var $692=(($691)|0)==0;
      if ($692) { label = 111; break; } else { label = 116; break; }
    case 111: 
      label = 112; break;
    case 112: 
      var $695=$ap;
      var $696=$bp;
      var $697=(($695)|0)!=(($696)|0);
      if ($697) { label = 113; break; } else { label = 114; break; }
    case 113: 
      var $699=$ap;
      var $700=$699;
      var $701=$bp;
      var $702=$701;
      var $703=$n;
      var $704=($703<<2);
      assert($704 % 1 === 0);_memcpy($700, $702, $704);
      label = 114; break;
    case 114: 
      label = 115; break;
    case 115: 
      label = 261; break;
    case 116: 
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      var $710=$ap;
      var $711=$bp;
      var $712=(($710)|0)!=(($711)|0);
      if ($712) { label = 119; break; } else { label = 120; break; }
    case 119: 
      var $714=$ap;
      var $715=$714;
      var $716=$bp;
      var $717=$716;
      var $718=$n;
      var $719=($718<<2);
      assert($719 % 1 === 0);_memcpy($715, $717, $719);
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      label = 242; break;
    case 122: 
      label = 123; break;
    case 123: 
      var $724=$5;
      var $725=$2;
      var $726=(($725+4)|0);
      var $727=HEAP32[(($726)>>2)];
      var $728=(($727)|0) < 0;
      var $729=(($728)&1);
      var $730=((($724)+($729))|0);
      var $731=(($730)|0)==3;
      var $732=$731 ^ 1;
      var $733=$732 ^ 1;
      var $734=(($733)&1);
      var $735=($734);
      var $736=(($735)|0)!=0;
      if ($736) { label = 124; break; } else { label = 125; break; }
    case 124: 
      $5=1;
      label = 125; break;
    case 125: 
      label = 126; break;
    case 126: 
      var $740=$5;
      var $741=(($740)|0)==1;
      if ($741) { label = 127; break; } else { label = 132; break; }
    case 127: 
      label = 128; break;
    case 128: 
      var $744=$ap;
      var $745=$bp;
      var $746=(($744)|0)!=(($745)|0);
      if ($746) { label = 129; break; } else { label = 130; break; }
    case 129: 
      var $748=$ap;
      var $749=$748;
      var $750=$bp;
      var $751=$750;
      var $752=$n;
      var $753=($752<<2);
      assert($753 % 1 === 0);_memcpy($749, $751, $753);
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      label = 242; break;
    case 132: 
      label = 133; break;
    case 133: 
      var $758=$ap;
      var $759=$bp;
      var $760=(($758)|0)!=(($759)|0);
      if ($760) { label = 134; break; } else { label = 135; break; }
    case 134: 
      var $762=$ap;
      var $763=$762;
      var $764=$bp;
      var $765=$764;
      var $766=$n;
      var $767=($766<<2);
      assert($767 % 1 === 0);_memcpy($763, $765, $767);
      label = 135; break;
    case 135: 
      label = 136; break;
    case 136: 
      label = 261; break;
    case 137: 
      $bcp=0;
      var $771=$d;
      var $772=$p;
      var $773=((($772)+(1))|0);
      var $774=(($771)|0)==(($773)|0);
      var $775=(($774)&1);
      $bbcp=$775;
      $bcp1=1;
      var $776=$d;
      var $777=$p;
      var $778=((($777)+(1))|0);
      var $779=(($776)|0)==(($778)|0);
      if ($779) { label = 138; break; } else { var $784 = 0;label = 139; break; }
    case 138: 
      var $781=$5;
      var $782=(($781)|0)==0;
      var $784 = $782;label = 139; break;
    case 139: 
      var $784;
      var $785=$784 ^ 1;
      var $786=$785 ^ 1;
      var $787=(($786)&1);
      var $788=($787);
      var $789=(($788)|0)!=0;
      if ($789) { label = 140; break; } else { label = 149; break; }
    case 140: 
      var $791=$4;
      var $792=(($791+12)|0);
      var $793=HEAP32[(($792)>>2)];
      $cp=$793;
      var $794=$n;
      var $795=((($794)-(1))|0);
      var $796=$cp;
      var $797=(($796+($795<<2))|0);
      var $798=HEAP32[(($797)>>2)];
      var $799=(($798)|0)==-2147483648;
      var $800=$799 ^ 1;
      var $801=$800 ^ 1;
      var $802=(($801)&1);
      var $803=($802);
      var $804=(($803)|0)!=0;
      if ($804) { label = 141; break; } else { label = 147; break; }
    case 141: 
      var $806=$n;
      var $807=((($806)-(1))|0);
      $k6=$807;
      label = 142; break;
    case 142: 
      var $809=$k6;
      var $810=((($809)-(1))|0);
      $k6=$810;
      label = 143; break;
    case 143: 
      var $812=$k6;
      var $813=(($812)|0) >= 0;
      if ($813) { label = 144; break; } else { var $821 = 0;label = 145; break; }
    case 144: 
      var $815=$k6;
      var $816=$cp;
      var $817=(($816+($815<<2))|0);
      var $818=HEAP32[(($817)>>2)];
      var $819=(($818)|0)==0;
      var $821 = $819;label = 145; break;
    case 145: 
      var $821;
      if ($821) { label = 142; break; } else { label = 146; break; }
    case 146: 
      var $823=$k6;
      var $824=(($823)|0) >= 0;
      var $825=(($824)&1);
      $bbcp1=$825;
      label = 148; break;
    case 147: 
      $bbcp1=1;
      label = 148; break;
    case 148: 
      label = 149; break;
    case 149: 
      label = 150; break;
    case 150: 
      var $830=$ap;
      var $831=$3;
      var $832=(($831+12)|0);
      var $833=HEAP32[(($832)>>2)];
      var $834=(($830)|0)!=(($833)|0);
      if ($834) { label = 151; break; } else { label = 152; break; }
    case 151: 
      var $836=$ap;
      var $837=$836;
      var $838=$3;
      var $839=(($838+12)|0);
      var $840=HEAP32[(($839)>>2)];
      var $841=$840;
      var $842=$n;
      var $843=($842<<2);
      assert($843 % 1 === 0);_memcpy($837, $841, $843);
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      var $846=$5;
      var $847=(($846)|0)==0;
      var $848=$847 ^ 1;
      var $849=$848 ^ 1;
      var $850=(($849)&1);
      var $851=($850);
      var $852=(($851)|0)!=0;
      if ($852) { label = 154; break; } else { label = 155; break; }
    case 154: 
      label = 261; break;
    case 155: 
      label = 156; break;
    case 156: 
      var $856=$5;
      var $857=$2;
      var $858=(($857+4)|0);
      var $859=HEAP32[(($858)>>2)];
      var $860=(($859)|0) < 0;
      var $861=(($860)&1);
      var $862=((($856)+($861))|0);
      var $863=(($862)|0)==3;
      var $864=$863 ^ 1;
      var $865=$864 ^ 1;
      var $866=(($865)&1);
      var $867=($866);
      var $868=(($867)|0)!=0;
      if ($868) { label = 157; break; } else { label = 158; break; }
    case 157: 
      $5=1;
      label = 158; break;
    case 158: 
      label = 159; break;
    case 159: 
      var $872=$5;
      var $873=(($872)|0)==1;
      if ($873) { label = 160; break; } else { label = 161; break; }
    case 160: 
      label = 242; break;
    case 161: 
      label = 261; break;
    case 162: 
      label = 163; break;
    case 163: 
      var $878=$p;
      var $879=(((-$878))|0);
      var $880=((($879)>>>0))%(32);
      $sh=$880;
      label = 164; break;
    case 164: 
      var $882=$n;
      var $883=($882<<2);
      var $884=(($883)>>>0) < 16384;
      var $885=$884 ^ 1;
      var $886=$885 ^ 1;
      var $887=(($886)&1);
      var $888=($887);
      var $889=(($888)|0)!=0;
      if ($889) { label = 165; break; } else { label = 166; break; }
    case 165: 
      var $891=$n;
      var $892=($891<<2);
      var $893=STACKTOP;STACKTOP = (STACKTOP + $892)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $899 = $893;label = 167; break;
    case 166: 
      var $895=$n;
      var $896=($895<<2);
      var $897=_mpfr_tmp_allocate($tmp_marker, $896);
      var $899 = $897;label = 167; break;
    case 167: 
      var $899;
      var $900=$899;
      $cp=$900;
      var $901=$d;
      var $902=((($901)>>>0))%(32);
      $dm=$902;
      var $903=$d;
      var $904=Math.floor(((($903)>>>0))/(32));
      $m=$904;
      var $905=$dm;
      var $906=(($905)|0)==0;
      var $907=$906 ^ 1;
      var $908=$907 ^ 1;
      var $909=(($908)&1);
      var $910=($909);
      var $911=(($910)|0)!=0;
      if ($911) { label = 168; break; } else { label = 173; break; }
    case 168: 
      label = 169; break;
    case 169: 
      var $914=$cp;
      var $915=$4;
      var $916=(($915+12)|0);
      var $917=HEAP32[(($916)>>2)];
      var $918=$m;
      var $919=(($917+($918<<2))|0);
      var $920=(($914)|0)!=(($919)|0);
      if ($920) { label = 170; break; } else { label = 171; break; }
    case 170: 
      var $922=$cp;
      var $923=$922;
      var $924=$4;
      var $925=(($924+12)|0);
      var $926=HEAP32[(($925)>>2)];
      var $927=$m;
      var $928=(($926+($927<<2))|0);
      var $929=$928;
      var $930=$n;
      var $931=$m;
      var $932=((($930)-($931))|0);
      var $933=($932<<2);
      assert($933 % 1 === 0);_memcpy($923, $929, $933);
      label = 171; break;
    case 171: 
      label = 172; break;
    case 172: 
      var $936=$cp;
      var $937=$n;
      var $938=(($936+($937<<2))|0);
      var $939=$m;
      var $940=(((-$939))|0);
      var $941=(($938+($940<<2))|0);
      var $942=$941;
      var $943=$m;
      var $944=($943<<2);
      _memset($942, 0, $944);
      label = 177; break;
    case 173: 
      var $946=$m;
      var $947=(($946)|0)==0;
      var $948=$947 ^ 1;
      var $949=$948 ^ 1;
      var $950=(($949)&1);
      var $951=($950);
      var $952=(($951)|0)!=0;
      if ($952) { label = 174; break; } else { label = 175; break; }
    case 174: 
      var $954=$cp;
      var $955=$4;
      var $956=(($955+12)|0);
      var $957=HEAP32[(($956)>>2)];
      var $958=$n;
      var $959=$dm;
      var $960=___gmpn_rshift($954, $957, $958, $959);
      label = 176; break;
    case 175: 
      var $962=$cp;
      var $963=$4;
      var $964=(($963+12)|0);
      var $965=HEAP32[(($964)>>2)];
      var $966=$m;
      var $967=(($965+($966<<2))|0);
      var $968=$n;
      var $969=$m;
      var $970=((($968)-($969))|0);
      var $971=$dm;
      var $972=___gmpn_rshift($962, $967, $970, $971);
      var $973=$cp;
      var $974=$n;
      var $975=(($973+($974<<2))|0);
      var $976=$m;
      var $977=(((-$976))|0);
      var $978=(($975+($977<<2))|0);
      var $979=$978;
      var $980=$m;
      var $981=($980<<2);
      _memset($979, 0, $981);
      label = 176; break;
    case 176: 
      label = 177; break;
    case 177: 
      var $984=$sh;
      var $985=(($984)|0)!=0;
      var $986=$985 ^ 1;
      var $987=$986 ^ 1;
      var $988=(($987)&1);
      var $989=($988);
      var $990=(($989)|0)!=0;
      if ($990) { label = 178; break; } else { label = 193; break; }
    case 178: 
      var $992=$cp;
      var $993=(($992)|0);
      var $994=HEAP32[(($993)>>2)];
      var $995=$sh;
      var $996=((($995)-(1))|0);
      var $997=1 << $996;
      var $998=$994 & $997;
      $bcp=$998;
      var $999=$cp;
      var $1000=(($999)|0);
      var $1001=HEAP32[(($1000)>>2)];
      var $1002=$sh;
      var $1003=((($1002)-(1))|0);
      var $1004=1 << $1003;
      var $1005=((($1004)-(1))|0);
      var $1006=$1001 & $1005;
      var $1007=(($1006)|0)!=0;
      var $1008=$1007 ^ 1;
      var $1009=$1008 ^ 1;
      var $1010=(($1009)&1);
      var $1011=($1010);
      var $1012=(($1011)|0)!=0;
      if ($1012) { label = 179; break; } else { label = 180; break; }
    case 179: 
      $bcp1=1;
      label = 192; break;
    case 180: 
      var $1015=$p;
      var $1016=$d;
      var $1017=((($1015)-($1016))|0);
      var $1018=$sh;
      var $1019=((($1017)+($1018))|0);
      var $1020=((($1019)-(1))|0);
      $x=$1020;
      var $1021=$x;
      var $1022=$p;
      var $1023=(($1021)|0) > (($1022)|0);
      var $1024=$1023 ^ 1;
      var $1025=$1024 ^ 1;
      var $1026=(($1025)&1);
      var $1027=($1026);
      var $1028=(($1027)|0)!=0;
      if ($1028) { label = 181; break; } else { label = 182; break; }
    case 181: 
      $bcp1=0;
      label = 191; break;
    case 182: 
      var $1031=$4;
      var $1032=(($1031+12)|0);
      var $1033=HEAP32[(($1032)>>2)];
      $tp=$1033;
      var $1034=$n;
      var $1035=((($1034)-(1))|0);
      var $1036=$x;
      var $1037=((((($1036)|0))/(32))&-1);
      var $1038=((($1035)-($1037))|0);
      $kx=$1038;
      var $1039=$x;
      var $1040=((($1039)|0))%(32);
      var $1041=(((31)-($1040))|0);
      $sx=$1041;
      var $1042=$kx;
      var $1043=$tp;
      var $1044=(($1043+($1042<<2))|0);
      var $1045=HEAP32[(($1044)>>2)];
      var $1046=$sx;
      var $1047=1 << $1046;
      var $1048=((($1047)-(1))|0);
      var $1049=$1045 & $1048;
      var $1050=(($1049)|0)!=0;
      if ($1050) { label = 183; break; } else { label = 184; break; }
    case 183: 
      $bcp1=1;
      label = 190; break;
    case 184: 
      label = 185; break;
    case 185: 
      var $1054=$kx;
      var $1055=((($1054)-(1))|0);
      $kx=$1055;
      label = 186; break;
    case 186: 
      var $1057=$kx;
      var $1058=(($1057)|0) >= 0;
      if ($1058) { label = 187; break; } else { var $1066 = 0;label = 188; break; }
    case 187: 
      var $1060=$kx;
      var $1061=$tp;
      var $1062=(($1061+($1060<<2))|0);
      var $1063=HEAP32[(($1062)>>2)];
      var $1064=(($1063)|0)==0;
      var $1066 = $1064;label = 188; break;
    case 188: 
      var $1066;
      if ($1066) { label = 185; break; } else { label = 189; break; }
    case 189: 
      var $1068=$kx;
      var $1069=(($1068)|0) >= 0;
      var $1070=(($1069)&1);
      $bcp1=$1070;
      label = 190; break;
    case 190: 
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      label = 202; break;
    case 193: 
      var $1075=$4;
      var $1076=(($1075+12)|0);
      var $1077=HEAP32[(($1076)>>2)];
      $tp8=$1077;
      var $1078=$p;
      var $1079=$d;
      var $1080=((($1078)-($1079))|0);
      $x9=$1080;
      var $1081=$n;
      var $1082=((($1081)-(1))|0);
      var $1083=$x9;
      var $1084=((((($1083)|0))/(32))&-1);
      var $1085=((($1082)-($1084))|0);
      $kx10=$1085;
      var $1086=$x9;
      var $1087=((($1086)|0))%(32);
      var $1088=(((31)-($1087))|0);
      $sx11=$1088;
      var $1089=$kx10;
      var $1090=$tp8;
      var $1091=(($1090+($1089<<2))|0);
      var $1092=HEAP32[(($1091)>>2)];
      var $1093=$sx11;
      var $1094=1 << $1093;
      var $1095=$1092 & $1094;
      $bcp=$1095;
      var $1096=$kx10;
      var $1097=$tp8;
      var $1098=(($1097+($1096<<2))|0);
      var $1099=HEAP32[(($1098)>>2)];
      var $1100=$sx11;
      var $1101=1 << $1100;
      var $1102=((($1101)-(1))|0);
      var $1103=$1099 & $1102;
      var $1104=(($1103)|0)!=0;
      if ($1104) { label = 194; break; } else { label = 195; break; }
    case 194: 
      $bcp1=1;
      label = 201; break;
    case 195: 
      label = 196; break;
    case 196: 
      var $1108=$kx10;
      var $1109=((($1108)-(1))|0);
      $kx10=$1109;
      label = 197; break;
    case 197: 
      var $1111=$kx10;
      var $1112=(($1111)|0) >= 0;
      if ($1112) { label = 198; break; } else { var $1120 = 0;label = 199; break; }
    case 198: 
      var $1114=$kx10;
      var $1115=$tp8;
      var $1116=(($1115+($1114<<2))|0);
      var $1117=HEAP32[(($1116)>>2)];
      var $1118=(($1117)|0)==0;
      var $1120 = $1118;label = 199; break;
    case 199: 
      var $1120;
      if ($1120) { label = 196; break; } else { label = 200; break; }
    case 200: 
      var $1122=$kx10;
      var $1123=(($1122)|0) >= 0;
      var $1124=(($1123)&1);
      $bcp1=$1124;
      label = 201; break;
    case 201: 
      label = 202; break;
    case 202: 
      var $1127=$3;
      var $1128=(($1127+12)|0);
      var $1129=HEAP32[(($1128)>>2)];
      $bp=$1129;
      var $1130=$n;
      var $1131=((($1130)-(1))|0);
      var $1132=$bp;
      var $1133=(($1132+($1131<<2))|0);
      var $1134=HEAP32[(($1133)>>2)];
      var $1135=$n;
      var $1136=((($1135)-(1))|0);
      var $1137=$cp;
      var $1138=(($1137+($1136<<2))|0);
      var $1139=HEAP32[(($1138)>>2)];
      var $1140=((($1134)-($1139))|0);
      var $1141=(($1140)>>>0) <= 2147483648;
      var $1142=$1141 ^ 1;
      var $1143=$1142 ^ 1;
      var $1144=(($1143)&1);
      var $1145=($1144);
      var $1146=(($1145)|0)!=0;
      if ($1146) { label = 203; break; } else { label = 217; break; }
    case 203: 
      var $1148=$bcp1;
      var $1149=(($1148)|0)==0;
      var $1150=$1149 ^ 1;
      var $1151=$1150 ^ 1;
      var $1152=(($1151)&1);
      var $1153=($1152);
      var $1154=(($1153)|0)!=0;
      if ($1154) { label = 204; break; } else { label = 205; break; }
    case 204: 
      $bbcp=0;
      $bbcp1=0;
      label = 216; break;
    case 205: 
      var $1157=$4;
      var $1158=(($1157+12)|0);
      var $1159=HEAP32[(($1158)>>2)];
      $tp12=$1159;
      var $1160=$p;
      var $1161=((($1160)+(1))|0);
      var $1162=$d;
      var $1163=((($1161)-($1162))|0);
      $x13=$1163;
      var $1164=$n;
      var $1165=((($1164)-(1))|0);
      var $1166=$x13;
      var $1167=((((($1166)|0))/(32))&-1);
      var $1168=((($1165)-($1167))|0);
      $kx14=$1168;
      var $1169=$x13;
      var $1170=((($1169)|0))%(32);
      var $1171=(((31)-($1170))|0);
      $sx15=$1171;
      var $1172=$kx14;
      var $1173=$tp12;
      var $1174=(($1173+($1172<<2))|0);
      var $1175=HEAP32[(($1174)>>2)];
      var $1176=$sx15;
      var $1177=1 << $1176;
      var $1178=$1175 & $1177;
      $bbcp=$1178;
      var $1179=$bbcp;
      var $1180=(($1179)|0)==0;
      if ($1180) { var $1192 = 1;label = 207; break; } else { label = 206; break; }
    case 206: 
      var $1182=$kx14;
      var $1183=$tp12;
      var $1184=(($1183+($1182<<2))|0);
      var $1185=HEAP32[(($1184)>>2)];
      var $1186=$sx15;
      var $1187=1 << $1186;
      var $1188=((($1187)-(1))|0);
      var $1189=$1185 & $1188;
      var $1190=(($1189)|0)!=0;
      var $1192 = $1190;label = 207; break;
    case 207: 
      var $1192;
      var $1193=$1192 ^ 1;
      var $1194=$1193 ^ 1;
      var $1195=(($1194)&1);
      var $1196=($1195);
      var $1197=(($1196)|0)!=0;
      if ($1197) { label = 208; break; } else { label = 209; break; }
    case 208: 
      $bbcp1=1;
      label = 215; break;
    case 209: 
      label = 210; break;
    case 210: 
      var $1201=$kx14;
      var $1202=((($1201)-(1))|0);
      $kx14=$1202;
      label = 211; break;
    case 211: 
      var $1204=$kx14;
      var $1205=(($1204)|0) >= 0;
      if ($1205) { label = 212; break; } else { var $1213 = 0;label = 213; break; }
    case 212: 
      var $1207=$kx14;
      var $1208=$tp12;
      var $1209=(($1208+($1207<<2))|0);
      var $1210=HEAP32[(($1209)>>2)];
      var $1211=(($1210)|0)==0;
      var $1213 = $1211;label = 213; break;
    case 213: 
      var $1213;
      if ($1213) { label = 210; break; } else { label = 214; break; }
    case 214: 
      var $1215=$kx14;
      var $1216=(($1215)|0) >= 0;
      var $1217=(($1216)&1);
      $bbcp1=$1217;
      label = 215; break;
    case 215: 
      label = 216; break;
    case 216: 
      label = 217; break;
    case 217: 
      var $1221=$sh;
      var $1222=1 << $1221;
      var $1223=((($1222)-(1))|0);
      var $1224=$1223 ^ -1;
      $mask7=$1224;
      var $1225=$mask7;
      var $1226=$cp;
      var $1227=(($1226)|0);
      var $1228=HEAP32[(($1227)>>2)];
      var $1229=$1228 & $1225;
      HEAP32[(($1227)>>2)]=$1229;
      var $1230=$2;
      var $1231=(($1230+12)|0);
      var $1232=HEAP32[(($1231)>>2)];
      $ap=$1232;
      var $1233=$ap;
      var $1234=$bp;
      var $1235=$cp;
      var $1236=$n;
      var $1237=___gmpn_sub_n($1233, $1234, $1235, $1236);
      var $1238=$n;
      var $1239=((($1238)-(1))|0);
      var $1240=$ap;
      var $1241=(($1240+($1239<<2))|0);
      var $1242=HEAP32[(($1241)>>2)];
      var $1243=$1242 & -2147483648;
      var $1244=(($1243)|0)==0;
      var $1245=$1244 ^ 1;
      var $1246=$1245 ^ 1;
      var $1247=(($1246)&1);
      var $1248=($1247);
      var $1249=(($1248)|0)!=0;
      if ($1249) { label = 218; break; } else { label = 225; break; }
    case 218: 
      var $1251=$ap;
      var $1252=$ap;
      var $1253=$n;
      var $1254=___gmpn_lshift($1251, $1252, $1253, 1);
      var $1255=$bcp;
      var $1256=(($1255)|0)!=0;
      var $1257=$1256 ^ 1;
      var $1258=$1257 ^ 1;
      var $1259=(($1258)&1);
      var $1260=($1259);
      var $1261=(($1260)|0)!=0;
      if ($1261) { label = 219; break; } else { label = 220; break; }
    case 219: 
      var $1263=$ap;
      var $1264=$ap;
      var $1265=$n;
      var $1266=$sh;
      var $1267=1 << $1266;
      var $1268=___gmpn_sub_1($1263, $1264, $1265, $1267);
      label = 220; break;
    case 220: 
      var $1270=$bx;
      var $1271=((($1270)-(1))|0);
      $bx=$1271;
      var $1272=$bbcp;
      var $1273=(($1272)|0)!=-1;
      var $1274=$1273 ^ 1;
      var $1275=$1274 ^ 1;
      var $1276=(($1275)&1);
      var $1277=($1276);
      var $1278=(($1277)|0)!=0;
      if ($1278) { var $1283 = 1;label = 222; break; } else { label = 221; break; }
    case 221: 
      _mpfr_assert_fail(((5248672)|0), 661, ((5249528)|0));
      var $1280=(0);
      var $1281=(($1280)|0)!=0;
      var $1283 = $1281;label = 222; break;
    case 222: 
      var $1283;
      var $1284=(($1283)&1);
      var $1285=$bbcp1;
      var $1286=(($1285)|0)!=-1;
      var $1287=$1286 ^ 1;
      var $1288=$1287 ^ 1;
      var $1289=(($1288)&1);
      var $1290=($1289);
      var $1291=(($1290)|0)!=0;
      if ($1291) { var $1296 = 1;label = 224; break; } else { label = 223; break; }
    case 223: 
      _mpfr_assert_fail(((5248672)|0), 662, ((5249088)|0));
      var $1293=(0);
      var $1294=(($1293)|0)!=0;
      var $1296 = $1294;label = 224; break;
    case 224: 
      var $1296;
      var $1297=(($1296)&1);
      var $1298=$bbcp;
      $bcp=$1298;
      var $1299=$bbcp1;
      $bcp1=$1299;
      label = 225; break;
    case 225: 
      var $1301=$5;
      var $1302=(($1301)|0)==0;
      var $1303=$1302 ^ 1;
      var $1304=$1303 ^ 1;
      var $1305=(($1304)&1);
      var $1306=($1305);
      var $1307=(($1306)|0)!=0;
      if ($1307) { label = 226; break; } else { label = 232; break; }
    case 226: 
      var $1309=$bcp;
      var $1310=(($1309)|0)==0;
      var $1311=$1310 ^ 1;
      var $1312=$1311 ^ 1;
      var $1313=(($1312)&1);
      var $1314=($1313);
      var $1315=(($1314)|0)!=0;
      if ($1315) { label = 227; break; } else { label = 228; break; }
    case 227: 
      label = 261; break;
    case 228: 
      var $1318=$bcp1;
      var $1319=(($1318)|0)!=0;
      if ($1319) { label = 230; break; } else { label = 229; break; }
    case 229: 
      var $1321=$ap;
      var $1322=(($1321)|0);
      var $1323=HEAP32[(($1322)>>2)];
      var $1324=$sh;
      var $1325=1 << $1324;
      var $1326=$1323 & $1325;
      var $1327=(($1326)|0)!=0;
      if ($1327) { label = 230; break; } else { label = 231; break; }
    case 230: 
      label = 242; break;
    case 231: 
      label = 261; break;
    case 232: 
      label = 233; break;
    case 233: 
      var $1332=$5;
      var $1333=$2;
      var $1334=(($1333+4)|0);
      var $1335=HEAP32[(($1334)>>2)];
      var $1336=(($1335)|0) < 0;
      var $1337=(($1336)&1);
      var $1338=((($1332)+($1337))|0);
      var $1339=(($1338)|0)==3;
      var $1340=$1339 ^ 1;
      var $1341=$1340 ^ 1;
      var $1342=(($1341)&1);
      var $1343=($1342);
      var $1344=(($1343)|0)!=0;
      if ($1344) { label = 234; break; } else { label = 235; break; }
    case 234: 
      $5=1;
      label = 235; break;
    case 235: 
      label = 236; break;
    case 236: 
      var $1348=$5;
      var $1349=(($1348)|0)==1;
      if ($1349) { label = 237; break; } else { label = 241; break; }
    case 237: 
      var $1351=$bcp;
      var $1352=(($1351)|0)!=0;
      if ($1352) { var $1357 = 1;label = 239; break; } else { label = 238; break; }
    case 238: 
      var $1354=$bcp1;
      var $1355=(($1354)|0)!=0;
      var $1357 = $1355;label = 239; break;
    case 239: 
      var $1357;
      var $1358=$1357 ^ 1;
      var $1359=$1358 ^ 1;
      var $1360=(($1359)&1);
      var $1361=($1360);
      var $1362=(($1361)|0)!=0;
      if ($1362) { label = 240; break; } else { label = 241; break; }
    case 240: 
      label = 242; break;
    case 241: 
      label = 261; break;
    case 242: 
      var $1366=$ap;
      var $1367=$ap;
      var $1368=$n;
      var $1369=$sh;
      var $1370=1 << $1369;
      var $1371=___gmpn_sub_1($1366, $1367, $1368, $1370);
      $inexact=-1;
      var $1372=$n;
      var $1373=((($1372)-(1))|0);
      var $1374=$ap;
      var $1375=(($1374+($1373<<2))|0);
      var $1376=HEAP32[(($1375)>>2)];
      var $1377=$1376 & -2147483648;
      var $1378=(($1377)|0)==0;
      var $1379=$1378 ^ 1;
      var $1380=$1379 ^ 1;
      var $1381=(($1380)&1);
      var $1382=($1381);
      var $1383=(($1382)|0)!=0;
      if ($1383) { label = 243; break; } else { label = 260; break; }
    case 243: 
      var $1385=$ap;
      var $1386=$ap;
      var $1387=$n;
      var $1388=___gmpn_lshift($1385, $1386, $1387, 1);
      var $1389=$bx;
      var $1390=((($1389)-(1))|0);
      $bx=$1390;
      var $1391=$d;
      var $1392=(($1391)|0)==1;
      var $1393=$1392 ^ 1;
      var $1394=$1393 ^ 1;
      var $1395=(($1394)&1);
      var $1396=($1395);
      var $1397=(($1396)|0)!=0;
      if ($1397) { label = 244; break; } else { label = 245; break; }
    case 244: 
      $bbcp=0;
      label = 245; break;
    case 245: 
      var $1400=$bbcp;
      var $1401=(($1400)|0)!=-1;
      var $1402=$1401 ^ 1;
      var $1403=$1402 ^ 1;
      var $1404=(($1403)&1);
      var $1405=($1404);
      var $1406=(($1405)|0)!=0;
      if ($1406) { var $1411 = 1;label = 247; break; } else { label = 246; break; }
    case 246: 
      _mpfr_assert_fail(((5248672)|0), 709, ((5249528)|0));
      var $1408=(0);
      var $1409=(($1408)|0)!=0;
      var $1411 = $1409;label = 247; break;
    case 247: 
      var $1411;
      var $1412=(($1411)&1);
      var $1413=$5;
      var $1414=(($1413)|0)==1;
      if ($1414) { label = 248; break; } else { label = 249; break; }
    case 248: 
      var $1416=$bcp;
      var $1417=(($1416)|0)==0;
      if ($1417) { label = 253; break; } else { label = 249; break; }
    case 249: 
      var $1419=$5;
      var $1420=(($1419)|0)==0;
      if ($1420) { label = 250; break; } else { label = 251; break; }
    case 250: 
      var $1422=$bbcp;
      var $1423=(($1422)|0)==0;
      if ($1423) { label = 253; break; } else { label = 251; break; }
    case 251: 
      var $1425=$bcp;
      var $1426=(($1425)|0)!=0;
      if ($1426) { label = 252; break; } else { label = 256; break; }
    case 252: 
      var $1428=$bcp1;
      var $1429=(($1428)|0)==0;
      if ($1429) { label = 253; break; } else { label = 256; break; }
    case 253: 
      var $1431=$sh;
      var $1432=1 << $1431;
      var $1433=$ap;
      var $1434=(($1433)|0);
      var $1435=HEAP32[(($1434)>>2)];
      var $1436=$1435 | $1432;
      HEAP32[(($1434)>>2)]=$1436;
      var $1437=$5;
      var $1438=(($1437)|0)==0;
      if ($1438) { label = 254; break; } else { label = 255; break; }
    case 254: 
      $inexact=1;
      label = 255; break;
    case 255: 
      label = 256; break;
    case 256: 
      var $1442=$bcp1;
      var $1443=(($1442)|0)==0;
      if ($1443) { label = 257; break; } else { label = 259; break; }
    case 257: 
      var $1445=$5;
      var $1446=(($1445)|0)==1;
      if ($1446) { label = 258; break; } else { label = 259; break; }
    case 258: 
      $inexact=0;
      label = 259; break;
    case 259: 
      label = 260; break;
    case 260: 
      label = 293; break;
    case 261: 
      var $1451=$n;
      var $1452=((($1451)-(1))|0);
      var $1453=$ap;
      var $1454=(($1453+($1452<<2))|0);
      var $1455=HEAP32[(($1454)>>2)];
      var $1456=(($1455)|0)==-2147483648;
      var $1457=$1456 ^ 1;
      var $1458=$1457 ^ 1;
      var $1459=(($1458)&1);
      var $1460=($1459);
      var $1461=(($1460)|0)!=0;
      if ($1461) { label = 262; break; } else { label = 290; break; }
    case 262: 
      var $1463=$n;
      var $1464=((($1463)-(1))|0);
      $k16=$1464;
      label = 263; break;
    case 263: 
      var $1466=$k16;
      var $1467=((($1466)-(1))|0);
      $k16=$1467;
      label = 264; break;
    case 264: 
      var $1469=$k16;
      var $1470=(($1469)|0) >= 0;
      if ($1470) { label = 265; break; } else { var $1478 = 0;label = 266; break; }
    case 265: 
      var $1472=$k16;
      var $1473=$ap;
      var $1474=(($1473+($1472<<2))|0);
      var $1475=HEAP32[(($1474)>>2)];
      var $1476=(($1475)|0)==0;
      var $1478 = $1476;label = 266; break;
    case 266: 
      var $1478;
      if ($1478) { label = 263; break; } else { label = 267; break; }
    case 267: 
      var $1480=$k16;
      var $1481=(($1480)|0) < 0;
      var $1482=$1481 ^ 1;
      var $1483=$1482 ^ 1;
      var $1484=(($1483)&1);
      var $1485=($1484);
      var $1486=(($1485)|0)!=0;
      if ($1486) { label = 268; break; } else { label = 289; break; }
    case 268: 
      var $1488=$d;
      var $1489=(($1488)|0)==1;
      if ($1489) { label = 269; break; } else { label = 270; break; }
    case 269: 
      $bbcp=0;
      label = 270; break;
    case 270: 
      var $1492=$bbcp;
      var $1493=(($1492)|0)!=-1;
      var $1494=$1493 ^ 1;
      var $1495=$1494 ^ 1;
      var $1496=(($1495)&1);
      var $1497=($1496);
      var $1498=(($1497)|0)!=0;
      if ($1498) { var $1503 = 1;label = 272; break; } else { label = 271; break; }
    case 271: 
      _mpfr_assert_fail(((5248672)|0), 759, ((5249528)|0));
      var $1500=(0);
      var $1501=(($1500)|0)!=0;
      var $1503 = $1501;label = 272; break;
    case 272: 
      var $1503;
      var $1504=(($1503)&1);
      var $1505=$5;
      var $1506=(($1505)|0)!=0;
      if ($1506) { var $1517 = 1;label = 276; break; } else { label = 273; break; }
    case 273: 
      var $1508=$bcp;
      var $1509=(($1508)|0)!=0;
      if ($1509) { var $1517 = 1;label = 276; break; } else { label = 274; break; }
    case 274: 
      var $1511=$bbcp;
      var $1512=(($1511)|0)==0;
      if ($1512) { var $1517 = 1;label = 276; break; } else { label = 275; break; }
    case 275: 
      var $1514=$bbcp1;
      var $1515=(($1514)|0)!=-1;
      var $1517 = $1515;label = 276; break;
    case 276: 
      var $1517;
      var $1518=$1517 ^ 1;
      var $1519=$1518 ^ 1;
      var $1520=(($1519)&1);
      var $1521=($1520);
      var $1522=(($1521)|0)!=0;
      if ($1522) { var $1527 = 1;label = 278; break; } else { label = 277; break; }
    case 277: 
      _mpfr_assert_fail(((5248672)|0), 760, ((5248816)|0));
      var $1524=(0);
      var $1525=(($1524)|0)!=0;
      var $1527 = $1525;label = 278; break;
    case 278: 
      var $1527;
      var $1528=(($1527)&1);
      var $1529=$5;
      var $1530=(($1529)|0)!=1;
      if ($1530) { label = 279; break; } else { label = 280; break; }
    case 279: 
      var $1532=$bcp;
      var $1533=(($1532)|0)!=0;
      if ($1533) { label = 284; break; } else { label = 280; break; }
    case 280: 
      var $1535=$5;
      var $1536=(($1535)|0)==0;
      if ($1536) { label = 281; break; } else { label = 288; break; }
    case 281: 
      var $1538=$bcp;
      var $1539=(($1538)|0)==0;
      if ($1539) { label = 282; break; } else { label = 288; break; }
    case 282: 
      var $1541=$bbcp;
      var $1542=(($1541)|0)!=0;
      if ($1542) { label = 283; break; } else { label = 288; break; }
    case 283: 
      var $1544=$bbcp1;
      var $1545=(($1544)|0)!=0;
      if ($1545) { label = 284; break; } else { label = 288; break; }
    case 284: 
      var $1547=$ap;
      var $1548=$ap;
      var $1549=$n;
      var $1550=$sh;
      var $1551=1 << $1550;
      var $1552=___gmpn_sub_1($1547, $1548, $1549, $1551);
      var $1553=$ap;
      var $1554=$ap;
      var $1555=$n;
      var $1556=___gmpn_lshift($1553, $1554, $1555, 1);
      var $1557=$sh;
      var $1558=1 << $1557;
      var $1559=$ap;
      var $1560=(($1559)|0);
      var $1561=HEAP32[(($1560)>>2)];
      var $1562=$1561 | $1558;
      HEAP32[(($1560)>>2)]=$1562;
      var $1563=$bx;
      var $1564=((($1563)-(1))|0);
      $bx=$1564;
      var $1565=$bcp1;
      var $1566=(($1565)|0)==0;
      if ($1566) { label = 285; break; } else { label = 286; break; }
    case 285: 
      var $1573 = 0;label = 287; break;
    case 286: 
      var $1569=$5;
      var $1570=(($1569)|0)==0;
      var $1571=$1570 ? -1 : 1;
      var $1573 = $1571;label = 287; break;
    case 287: 
      var $1573;
      $inexact=$1573;
      label = 293; break;
    case 288: 
      label = 289; break;
    case 289: 
      label = 290; break;
    case 290: 
      var $1577=$bcp;
      var $1578=(($1577)|0)!=0;
      if ($1578) { var $1583 = 1;label = 292; break; } else { label = 291; break; }
    case 291: 
      var $1580=$bcp1;
      var $1581=(($1580)|0)!=0;
      var $1583 = $1581;label = 292; break;
    case 292: 
      var $1583;
      var $1584=$1583 ^ 1;
      var $1585=$1584 ^ 1;
      var $1586=(($1585)&1);
      var $1587=($1586);
      var $1588=(($1587)|0)!=0;
      var $1589=$1588 ? 1 : 0;
      $inexact=$1589;
      label = 293; break;
    case 293: 
      var $1591=$bx;
      var $1592=$2;
      var $1593=(($1592+8)|0);
      HEAP32[(($1593)>>2)]=$1591;
      var $1594=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($1594);
      var $1595=$inexact;
      var $1596=$2;
      var $1597=(($1596+4)|0);
      var $1598=HEAP32[(($1597)>>2)];
      var $1599=Math.imul($1595,$1598);
      var $1600=(($1599)|0)!=0;
      if ($1600) { label = 294; break; } else { label = 295; break; }
    case 294: 
      var $1602=HEAP32[((5257648)>>2)];
      var $1603=$1602 | 8;
      HEAP32[((5257648)>>2)]=$1603;
      var $1604=$inexact;
      var $1605=$2;
      var $1606=(($1605+4)|0);
      var $1607=HEAP32[(($1606)>>2)];
      var $1608=Math.imul($1604,$1607);
      var $1611 = $1608;label = 296; break;
    case 295: 
      var $1611 = 0;label = 296; break;
    case 296: 
      var $1611;
      $1=$1611;
      label = 297; break;
    case 297: 
      var $1613=$1;
      STACKTOP = __stackBase__;
      return $1613;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_sub1sp["X"]=1;

function _mpfr_mpn_exp($a, $exp_r, $b, $e, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $c;
      var $B;
      var $f;
      var $h;
      var $i;
      var $t;
      var $bits;
      var $n1;
      var $error;
      var $err_s_a2;
      var $err_s_ab;
      var $tmp_marker=__stackBase__;
      var $__xr;
      var $__a;
      var $__xr1;
      var $__a2;
      var $uc;
      var $ua;
      var $ub;
      var $uc3;
      var $ua4;
      var $ub5;
      $2=$a;
      $3=$exp_r;
      $4=$b;
      $5=$e;
      $6=$n;
      $err_s_a2=0;
      $err_s_ab=0;
      var $7=$5;
      var $8=(($7)|0) > 0;
      var $9=$8 ^ 1;
      var $10=$9 ^ 1;
      var $11=(($10)&1);
      var $12=($11);
      var $13=(($12)|0)!=0;
      if ($13) { var $18 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      _mpfr_assert_fail(((5248660)|0), 54, ((5249520)|0));
      var $15=(0);
      var $16=(($15)|0)!=0;
      var $18 = $16;label = 4; break;
    case 4: 
      var $18;
      var $19=(($18)&1);
      var $20=$4;
      var $21=2 <= (($20)|0);
      if ($21) { label = 5; break; } else { var $26 = 0;label = 6; break; }
    case 5: 
      var $23=$4;
      var $24=(($23)|0) <= 62;
      var $26 = $24;label = 6; break;
    case 6: 
      var $26;
      var $27=$26 ^ 1;
      var $28=$27 ^ 1;
      var $29=(($28)&1);
      var $30=($29);
      var $31=(($30)|0)!=0;
      if ($31) { var $36 = 1;label = 8; break; } else { label = 7; break; }
    case 7: 
      _mpfr_assert_fail(((5248660)|0), 55, ((5249064)|0));
      var $33=(0);
      var $34=(($33)|0)!=0;
      var $36 = $34;label = 8; break;
    case 8: 
      var $36;
      var $37=(($36)&1);
      HEAP32[(($tmp_marker)>>2)]=0;
      var $38=$4;
      $B=$38;
      label = 9; break;
    case 9: 
      var $40=$B;
      $__xr=$40;
      var $41=$__xr;
      var $42=(($41)>>>0) < 65536;
      if ($42) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $44=$__xr;
      var $45=(($44)>>>0) < 256;
      var $46=$45 ? 1 : 9;
      var $52 = $46;label = 12; break;
    case 11: 
      var $48=$__xr;
      var $49=(($48)>>>0) < 16777216;
      var $50=$49 ? 17 : 25;
      var $52 = $50;label = 12; break;
    case 12: 
      var $52;
      $__a=$52;
      var $53=$__a;
      var $54=(((33)-($53))|0);
      var $55=$__xr;
      var $56=$__a;
      var $57=$55 >>> (($56)>>>0);
      var $58=((5248192+$57)|0);
      var $59=HEAP8[($58)];
      var $60=(($59)&255);
      var $61=((($54)-($60))|0);
      $h=$61;
      label = 13; break;
    case 13: 
      var $63=$h;
      var $64=(((32)-($63))|0);
      $bits=$64;
      var $65=$B;
      var $66=$h;
      var $67=$65 << $66;
      $B=$67;
      var $68=$h;
      var $69=(((-$68))|0);
      $h=$69;
      var $70=$6;
      var $71=($70<<1);
      var $72=($71<<2);
      var $73=(($72)>>>0) < 16384;
      var $74=$73 ^ 1;
      var $75=$74 ^ 1;
      var $76=(($75)&1);
      var $77=($76);
      var $78=(($77)|0)!=0;
      if ($78) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $80=$6;
      var $81=($80<<1);
      var $82=($81<<2);
      var $83=STACKTOP;STACKTOP = (STACKTOP + $82)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $90 = $83;label = 16; break;
    case 15: 
      var $85=$6;
      var $86=($85<<1);
      var $87=($86<<2);
      var $88=_mpfr_tmp_allocate($tmp_marker, $87);
      var $90 = $88;label = 16; break;
    case 16: 
      var $90;
      var $91=$90;
      $c=$91;
      var $92=$B;
      var $93=$6;
      var $94=((($93)-(1))|0);
      var $95=$2;
      var $96=(($95+($94<<2))|0);
      HEAP32[(($96)>>2)]=$92;
      var $97=$2;
      var $98=$97;
      var $99=$6;
      var $100=((($99)-(1))|0);
      var $101=($100<<2);
      _memset($98, 0, $101);
      var $102=$h;
      var $103=$6;
      var $104=((($103)-(1))|0);
      var $105=($104<<5);
      var $106=((($102)-($105))|0);
      $f=$106;
      label = 17; break;
    case 17: 
      var $108=$5;
      $__xr1=$108;
      var $109=$__xr1;
      var $110=(($109)>>>0) < 65536;
      if ($110) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $112=$__xr1;
      var $113=(($112)>>>0) < 256;
      var $114=$113 ? 1 : 9;
      var $120 = $114;label = 20; break;
    case 19: 
      var $116=$__xr1;
      var $117=(($116)>>>0) < 16777216;
      var $118=$117 ? 17 : 25;
      var $120 = $118;label = 20; break;
    case 20: 
      var $120;
      $__a2=$120;
      var $121=$__a2;
      var $122=(((33)-($121))|0);
      var $123=$__xr1;
      var $124=$__a2;
      var $125=$123 >>> (($124)>>>0);
      var $126=((5248192+$125)|0);
      var $127=HEAP8[($126)];
      var $128=(($127)&255);
      var $129=((($122)-($128))|0);
      $t=$129;
      label = 21; break;
    case 21: 
      var $131=$t;
      var $132=(((32)-($131))|0);
      $t=$132;
      var $133=$t;
      $error=$133;
      var $134=$c;
      var $135=$134;
      var $136=$6;
      var $137=($136<<1);
      var $138=($137<<2);
      _memset($135, 0, $138);
      var $139=$t;
      var $140=((($139)-(2))|0);
      $i=$140;
      label = 22; break;
    case 22: 
      var $142=$i;
      var $143=(($142)|0) >= 0;
      if ($143) { label = 23; break; } else { label = 85; break; }
    case 23: 
      var $145=$6;
      var $146=($145<<5);
      var $147=$2;
      var $148=___gmpn_scan1($147, 0);
      var $149=((($146)-($148))|0);
      $bits=$149;
      var $150=$6;
      var $151=($150<<5);
      var $152=$bits;
      var $153=((($151)-($152))|0);
      var $154=Math.floor(((($153)>>>0))/(32));
      $n1=$154;
      var $155=$c;
      var $156=$n1;
      var $157=($156<<1);
      var $158=(($155+($157<<2))|0);
      var $159=$2;
      var $160=$n1;
      var $161=(($159+($160<<2))|0);
      var $162=$6;
      var $163=$n1;
      var $164=((($162)-($163))|0);
      var $165=$2;
      var $166=$n1;
      var $167=(($165+($166<<2))|0);
      var $168=$6;
      var $169=$n1;
      var $170=((($168)-($169))|0);
      var $171=___gmpn_mul($158, $161, $164, $167, $170);
      var $172=$f;
      var $173=(($172)|0) < -1073741824;
      if ($173) { var $178 = 1;label = 25; break; } else { label = 24; break; }
    case 24: 
      var $175=$f;
      var $176=(($175)|0) > 1073741823;
      var $178 = $176;label = 25; break;
    case 25: 
      var $178;
      var $179=$178 ^ 1;
      var $180=$179 ^ 1;
      var $181=(($180)&1);
      var $182=($181);
      var $183=(($182)|0)!=0;
      if ($183) { label = 26; break; } else { label = 28; break; }
    case 26: 
      label = 27; break;
    case 27: 
      var $186=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($186);
      $1=-2;
      label = 88; break;
    case 28: 
      var $188=$f;
      var $189=($188<<1);
      $f=$189;
      label = 29; break;
    case 29: 
      var $191=$f;
      var $192=(($191)|0) >= 0;
      if ($192) { label = 30; break; } else { label = 39; break; }
    case 30: 
      var $194=$6;
      var $195=($194<<5);
      var $196=(($195)>>>0) >= 0;
      if ($196) { label = 31; break; } else { label = 39; break; }
    case 31: 
      var $198=$f;
      $ua=$198;
      var $199=$6;
      var $200=($199<<5);
      $ub=$200;
      label = 32; break;
    case 32: 
      var $202=$ua;
      var $203=$ub;
      var $204=((($202)+($203))|0);
      $uc=$204;
      var $205=$uc;
      var $206=$ua;
      var $207=(($205)>>>0) < (($206)>>>0);
      if ($207) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 27; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $211=$uc;
      var $212=(($211)>>>0) > 2147483647;
      if ($212) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 27; break;
    case 37: 
      var $215=$uc;
      $f=$215;
      label = 38; break;
    case 38: 
      label = 55; break;
    case 39: 
      var $218=$f;
      var $219=(($218)|0) < 0;
      if ($219) { label = 40; break; } else { label = 53; break; }
    case 40: 
      var $221=$6;
      var $222=($221<<5);
      var $223=(($222)>>>0) < 0;
      if ($223) { label = 41; break; } else { label = 53; break; }
    case 41: 
      var $225=$f;
      var $226=(((-$225))|0);
      $ua4=$226;
      var $227=$6;
      var $228=($227<<5);
      var $229=(((-$228))|0);
      $ub5=$229;
      label = 42; break;
    case 42: 
      var $231=$ua4;
      var $232=$ub5;
      var $233=((($231)+($232))|0);
      $uc3=$233;
      var $234=$uc3;
      var $235=$ua4;
      var $236=(($234)>>>0) < (($235)>>>0);
      if ($236) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 27; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $240=$uc3;
      var $241=(($240)>>>0) >= 2147483648;
      if ($241) { label = 47; break; } else { label = 46; break; }
    case 46: 
      var $243=$uc3;
      var $244=(($243)>>>0) > 2147483647;
      if ($244) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $246=$uc3;
      var $247=(($246)|0)==-2147483648;
      if ($247) { label = 48; break; } else { label = 49; break; }
    case 48: 
      $f=-2147483648;
      label = 50; break;
    case 49: 
      label = 27; break;
    case 50: 
      label = 52; break;
    case 51: 
      var $252=$uc3;
      var $253=(((-$252))|0);
      $f=$253;
      label = 52; break;
    case 52: 
      label = 54; break;
    case 53: 
      var $256=$f;
      var $257=$6;
      var $258=($257<<5);
      var $259=((($256)+($258))|0);
      $f=$259;
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $263=$6;
      var $264=($263<<1);
      var $265=((($264)-(1))|0);
      var $266=$c;
      var $267=(($266+($265<<2))|0);
      var $268=HEAP32[(($267)>>2)];
      var $269=$268 & -2147483648;
      var $270=(($269)|0)==0;
      if ($270) { label = 57; break; } else { label = 60; break; }
    case 57: 
      var $272=$2;
      var $273=$c;
      var $274=$6;
      var $275=(($273+($274<<2))|0);
      var $276=$6;
      var $277=___gmpn_lshift($272, $275, $276, 1);
      var $278=$c;
      var $279=$6;
      var $280=(($278+($279<<2))|0);
      var $281=((($280)-(4))|0);
      var $282=$c;
      var $283=$6;
      var $284=(($282+($283<<2))|0);
      var $285=((($284)-(4))|0);
      var $286=___gmpn_lshift($281, $285, 1, 1);
      var $287=$2;
      var $288=(($287)|0);
      var $289=HEAP32[(($288)>>2)];
      var $290=$289 | $286;
      HEAP32[(($288)>>2)]=$290;
      var $291=$f;
      var $292=((($291)-(1))|0);
      $f=$292;
      var $293=$error;
      var $294=$t;
      var $295=(($293)|0)!=(($294)|0);
      if ($295) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $297=$err_s_a2;
      var $298=((($297)+(1))|0);
      $err_s_a2=$298;
      label = 59; break;
    case 59: 
      label = 65; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $302=$2;
      var $303=$c;
      var $304=$6;
      var $305=(($303+($304<<2))|0);
      var $306=(($302)|0)!=(($305)|0);
      if ($306) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $308=$2;
      var $309=$308;
      var $310=$c;
      var $311=$6;
      var $312=(($310+($311<<2))|0);
      var $313=$312;
      var $314=$6;
      var $315=($314<<2);
      assert($315 % 1 === 0);_memcpy($309, $313, $315);
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $319=$error;
      var $320=$t;
      var $321=(($319)|0)==(($320)|0);
      if ($321) { label = 66; break; } else { label = 69; break; }
    case 66: 
      var $323=$n1;
      var $324=($323<<1);
      var $325=$6;
      var $326=(($324)>>>0) <= (($325)>>>0);
      if ($326) { label = 67; break; } else { label = 69; break; }
    case 67: 
      var $328=$c;
      var $329=$n1;
      var $330=($329<<1);
      var $331=(($328+($330<<2))|0);
      var $332=___gmpn_scan1($331, 0);
      var $333=$6;
      var $334=$n1;
      var $335=($334<<1);
      var $336=((($333)-($335))|0);
      var $337=($336<<5);
      var $338=(($332)>>>0) < (($337)>>>0);
      if ($338) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $340=$i;
      $error=$340;
      label = 69; break;
    case 69: 
      var $342=$5;
      var $343=$i;
      var $344=1 << $343;
      var $345=$342 & $344;
      var $346=(($345)|0)!=0;
      if ($346) { label = 70; break; } else { label = 83; break; }
    case 70: 
      var $348=$c;
      var $349=$6;
      var $350=(($348+($349<<2))|0);
      var $351=((($350)-(4))|0);
      var $352=$2;
      var $353=$6;
      var $354=$B;
      var $355=___gmpn_mul_1($351, $352, $353, $354);
      var $356=$6;
      var $357=($356<<1);
      var $358=((($357)-(1))|0);
      var $359=$c;
      var $360=(($359+($358<<2))|0);
      HEAP32[(($360)>>2)]=$355;
      var $361=$h;
      var $362=((($361)+(32))|0);
      var $363=$f;
      var $364=((($363)+($362))|0);
      $f=$364;
      var $365=$6;
      var $366=($365<<1);
      var $367=((($366)-(1))|0);
      var $368=$c;
      var $369=(($368+($367<<2))|0);
      var $370=HEAP32[(($369)>>2)];
      var $371=$370 & -2147483648;
      var $372=(($371)|0)==0;
      if ($372) { label = 71; break; } else { label = 72; break; }
    case 71: 
      var $374=$2;
      var $375=$c;
      var $376=$6;
      var $377=(($375+($376<<2))|0);
      var $378=$6;
      var $379=___gmpn_lshift($374, $377, $378, 1);
      var $380=$c;
      var $381=$6;
      var $382=(($380+($381<<2))|0);
      var $383=((($382)-(4))|0);
      var $384=$c;
      var $385=$6;
      var $386=(($384+($385<<2))|0);
      var $387=((($386)-(4))|0);
      var $388=___gmpn_lshift($383, $387, 1, 1);
      var $389=$2;
      var $390=(($389)|0);
      var $391=HEAP32[(($390)>>2)];
      var $392=$391 | $388;
      HEAP32[(($390)>>2)]=$392;
      var $393=$f;
      var $394=((($393)-(1))|0);
      $f=$394;
      label = 79; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $397=$2;
      var $398=$c;
      var $399=$6;
      var $400=(($398+($399<<2))|0);
      var $401=(($397)|0)!=(($400)|0);
      if ($401) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $403=$2;
      var $404=$403;
      var $405=$c;
      var $406=$6;
      var $407=(($405+($406<<2))|0);
      var $408=$407;
      var $409=$6;
      var $410=($409<<2);
      assert($410 % 1 === 0);_memcpy($404, $408, $410);
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      var $413=$error;
      var $414=$t;
      var $415=(($413)|0)!=(($414)|0);
      if ($415) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $417=$err_s_ab;
      var $418=((($417)+(1))|0);
      $err_s_ab=$418;
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      var $421=$error;
      var $422=$t;
      var $423=(($421)|0)==(($422)|0);
      if ($423) { label = 80; break; } else { label = 82; break; }
    case 80: 
      var $425=$6;
      var $426=((($425)-(1))|0);
      var $427=$c;
      var $428=(($427+($426<<2))|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=(($429)|0)!=0;
      if ($430) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $432=$i;
      $error=$432;
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      var $436=$i;
      var $437=((($436)-(1))|0);
      $i=$437;
      label = 22; break;
    case 85: 
      var $439=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($439);
      var $440=$f;
      var $441=$3;
      HEAP32[(($441)>>2)]=$440;
      var $442=$error;
      var $443=$t;
      var $444=(($442)|0)==(($443)|0);
      if ($444) { label = 86; break; } else { label = 87; break; }
    case 86: 
      $1=-1;
      label = 88; break;
    case 87: 
      var $447=$error;
      var $448=$err_s_ab;
      var $449=((($447)+($448))|0);
      var $450=$err_s_a2;
      var $451=((((($450)|0))/(2))&-1);
      var $452=((($449)+($451))|0);
      var $453=((($452)+(3))|0);
      $error=$453;
      var $454=$error;
      $1=$454;
      label = 88; break;
    case 88: 
      var $456=$1;
      STACKTOP = __stackBase__;
      return $456;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_mpn_exp["X"]=1;

function _mpfr_default_free($blk_ptr, $blk_size) {
  var label = 0;


  var $1;
  var $2;
  $1=$blk_ptr;
  $2=$blk_size;
  var $3=$1;
  _free($3);

  return;
}


function _mpfr_tmp_allocate($tmp_marker, $size) {
  var label = 0;


  var $1;
  var $2;
  var $head;
  $1=$tmp_marker;
  $2=$size;
  var $3=_mpfr_default_allocate(12);
  var $4=$3;
  $head=$4;
  var $5=$2;
  var $6=_mpfr_default_allocate($5);
  var $7=$head;
  var $8=(($7)|0);
  HEAP32[(($8)>>2)]=$6;
  var $9=$2;
  var $10=$head;
  var $11=(($10+4)|0);
  HEAP32[(($11)>>2)]=$9;
  var $12=$1;
  var $13=HEAP32[(($12)>>2)];
  var $14=$head;
  var $15=(($14+8)|0);
  HEAP32[(($15)>>2)]=$13;
  var $16=$head;
  var $17=$1;
  HEAP32[(($17)>>2)]=$16;
  var $18=$head;
  var $19=(($18)|0);
  var $20=HEAP32[(($19)>>2)];

  return $20;
}


function _mpfr_tmp_free($tmp_marker) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $t;
      $1=$tmp_marker;
      label = 3; break;
    case 3: 
      var $3=$1;
      var $4=(($3)|0)!=0;
      if ($4) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$1;
      $t=$6;
      var $7=$t;
      var $8=(($7)|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=$t;
      var $11=(($10+4)|0);
      var $12=HEAP32[(($11)>>2)];
      _mpfr_default_free($9, $12);
      var $13=$t;
      var $14=(($13+8)|0);
      var $15=HEAP32[(($14)>>2)];
      $1=$15;
      var $16=$t;
      var $17=$16;
      _mpfr_default_free($17, 12);
      label = 3; break;
    case 5: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _mpfr_assert_fail($filename, $linenum, $expr) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$filename;
      $2=$linenum;
      $3=$expr;
      var $4=$1;
      var $5=(($4)|0)!=0;
      if ($5) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $7=$1;
      var $8=(($7)|0);
      var $9=HEAP8[($8)];
      var $10=(($9 << 24) >> 24);
      var $11=(($10)|0)!=0;
      if ($11) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $13=HEAP32[((_stderr)>>2)];
      var $14=$1;
      var $15=_fprintf($13, ((5248656)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$14,tempInt));
      var $16=$2;
      var $17=(($16)|0)!=-1;
      if ($17) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $19=HEAP32[((_stderr)>>2)];
      var $20=$2;
      var $21=_fprintf($19, ((5249512)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$20,tempInt));
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $24=HEAP32[((_stderr)>>2)];
      var $25=$3;
      var $26=_fprintf($24, ((5249036)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$25,tempInt));
      _abort();
      throw "Reached an unreachable!"
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function _mpfr_default_allocate($size) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $ret;
      $1=$size;
      var $2=$1;
      var $3=_malloc($2);
      $ret=$3;
      var $4=$ret;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=HEAP32[((_stderr)>>2)];
      var $8=$1;
      var $9=_fprintf($7, ((5248776)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$8,tempInt));
      _abort();
      throw "Reached an unreachable!"
    case 4: 
      var $11=$ret;
      STACKTOP = __stackBase__;
      return $11;
    default: assert(0, "bad label: " + label);
  }

}


function _mpfr_add1sp($a, $b, $c, $rnd_mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $d;
      var $p;
      var $sh;
      var $n;
      var $ap;
      var $cp;
      var $bx;
      var $limb;
      var $inexact;
      var $tmp_marker=__stackBase__;
      var $k;
      var $mask;
      var $bcp;
      var $bcp1;
      var $dm;
      var $m;
      var $x;
      var $tp;
      var $kx;
      var $sx;
      var $tp1;
      var $x2;
      var $kx3;
      var $sx4;
      $2=$a;
      $3=$b;
      $4=$c;
      $5=$rnd_mode;
      HEAP32[(($tmp_marker)>>2)]=0;
      var $6=$3;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      $p=$8;
      var $9=$p;
      var $10=((($9)-(1))|0);
      var $11=((((($10)|0))/(32))&-1);
      var $12=((($11)+(1))|0);
      $n=$12;
      label = 3; break;
    case 3: 
      var $14=$p;
      var $15=(((-$14))|0);
      var $16=((($15)>>>0))%(32);
      $sh=$16;
      label = 4; break;
    case 4: 
      var $18=$3;
      var $19=(($18+8)|0);
      var $20=HEAP32[(($19)>>2)];
      $bx=$20;
      var $21=$bx;
      var $22=$4;
      var $23=(($22+8)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=((($21)-($24))|0);
      $d=$25;
      var $26=$d;
      var $27=(($26)|0)==0;
      var $28=$27 ^ 1;
      var $29=$28 ^ 1;
      var $30=(($29)&1);
      var $31=($30);
      var $32=(($31)|0)!=0;
      if ($32) { label = 5; break; } else { label = 18; break; }
    case 5: 
      var $34=$bx;
      var $35=((($34)+(1))|0);
      $bx=$35;
      var $36=$2;
      var $37=(($36+12)|0);
      var $38=HEAP32[(($37)>>2)];
      $ap=$38;
      var $39=$ap;
      var $40=$3;
      var $41=(($40+12)|0);
      var $42=HEAP32[(($41)>>2)];
      var $43=$4;
      var $44=(($43+12)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$n;
      var $47=___gmpn_add_n($39, $42, $45, $46);
      $limb=$47;
      var $48=$ap;
      var $49=(($48)|0);
      var $50=HEAP32[(($49)>>2)];
      $limb=$50;
      var $51=$ap;
      var $52=$ap;
      var $53=$n;
      var $54=___gmpn_rshift($51, $52, $53, 1);
      var $55=$n;
      var $56=((($55)-(1))|0);
      var $57=$ap;
      var $58=(($57+($56<<2))|0);
      var $59=HEAP32[(($58)>>2)];
      var $60=$59 | -2147483648;
      HEAP32[(($58)>>2)]=$60;
      var $61=$sh;
      var $62=1 << $61;
      var $63=((($62)-(1))|0);
      var $64=$63 ^ -1;
      var $65=$ap;
      var $66=(($65)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$67 & $64;
      HEAP32[(($66)>>2)]=$68;
      var $69=$limb;
      var $70=$sh;
      var $71=1 << $70;
      var $72=$69 & $71;
      var $73=(($72)|0)==0;
      var $74=$73 ^ 1;
      var $75=$74 ^ 1;
      var $76=(($75)&1);
      var $77=($76);
      var $78=(($77)|0)!=0;
      if ($78) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $inexact=0;
      label = 117; break;
    case 7: 
      var $81=$5;
      var $82=(($81)|0)==0;
      var $83=$82 ^ 1;
      var $84=$83 ^ 1;
      var $85=(($84)&1);
      var $86=($85);
      var $87=(($86)|0)!=0;
      if ($87) { label = 8; break; } else { label = 11; break; }
    case 8: 
      var $89=$ap;
      var $90=(($89)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$sh;
      var $93=1 << $92;
      var $94=$91 & $93;
      var $95=(($94)|0)==0;
      var $96=$95 ^ 1;
      var $97=$96 ^ 1;
      var $98=(($97)&1);
      var $99=($98);
      var $100=(($99)|0)!=0;
      if ($100) { label = 9; break; } else { label = 10; break; }
    case 9: 
      $inexact=-1;
      label = 117; break;
    case 10: 
      label = 114; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $105=$5;
      var $106=$3;
      var $107=(($106+4)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=(($108)|0) < 0;
      var $110=(($109)&1);
      var $111=((($105)+($110))|0);
      var $112=(($111)|0)==3;
      var $113=$112 ^ 1;
      var $114=$113 ^ 1;
      var $115=(($114)&1);
      var $116=($115);
      var $117=(($116)|0)!=0;
      if ($117) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $5=1;
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $121=$5;
      var $122=(($121)|0)==1;
      if ($122) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $inexact=-1;
      label = 117; break;
    case 17: 
      label = 114; break;
    case 18: 
      var $126=$d;
      var $127=$p;
      var $128=(($126)>>>0) >= (($127)>>>0);
      var $129=$128 ^ 1;
      var $130=$129 ^ 1;
      var $131=(($130)&1);
      var $132=($131);
      var $133=(($132)|0)!=0;
      if ($133) { label = 19; break; } else { label = 54; break; }
    case 19: 
      var $135=$d;
      var $136=$p;
      var $137=(($135)>>>0) > (($136)>>>0);
      var $138=$137 ^ 1;
      var $139=$138 ^ 1;
      var $140=(($139)&1);
      var $141=($140);
      var $142=(($141)|0)!=0;
      if ($142) { label = 20; break; } else { label = 37; break; }
    case 20: 
      var $144=$5;
      var $145=(($144)|0)==0;
      if ($145) { var $161 = 1;label = 24; break; } else { label = 21; break; }
    case 21: 
      var $147=$5;
      var $148=(($147)|0)==1;
      if ($148) { var $159 = 1;label = 23; break; } else { label = 22; break; }
    case 22: 
      var $150=$5;
      var $151=$3;
      var $152=(($151+4)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=(($153)|0) < 0;
      var $155=(($154)&1);
      var $156=((($150)+($155))|0);
      var $157=(($156)|0)==3;
      var $159 = $157;label = 23; break;
    case 23: 
      var $159;
      var $161 = $159;label = 24; break;
    case 24: 
      var $161;
      var $162=$161 ^ 1;
      var $163=$162 ^ 1;
      var $164=(($163)&1);
      var $165=($164);
      var $166=(($165)|0)!=0;
      if ($166) { label = 25; break; } else { label = 31; break; }
    case 25: 
      label = 26; break;
    case 26: 
      var $169=$2;
      var $170=(($169+12)|0);
      var $171=HEAP32[(($170)>>2)];
      $ap=$171;
      label = 27; break;
    case 27: 
      var $173=$ap;
      var $174=$3;
      var $175=(($174+12)|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=(($173)|0)!=(($176)|0);
      if ($177) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $179=$ap;
      var $180=$179;
      var $181=$3;
      var $182=(($181+12)|0);
      var $183=HEAP32[(($182)>>2)];
      var $184=$183;
      var $185=$n;
      var $186=($185<<2);
      assert($186 % 1 === 0);_memcpy($180, $184, $186);
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      $inexact=-1;
      label = 117; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $191=$2;
      var $192=(($191+12)|0);
      var $193=HEAP32[(($192)>>2)];
      $ap=$193;
      label = 33; break;
    case 33: 
      var $195=$ap;
      var $196=$3;
      var $197=(($196+12)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=(($195)|0)!=(($198)|0);
      if ($199) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $201=$ap;
      var $202=$201;
      var $203=$3;
      var $204=(($203+12)|0);
      var $205=HEAP32[(($204)>>2)];
      var $206=$205;
      var $207=$n;
      var $208=($207<<2);
      assert($208 % 1 === 0);_memcpy($202, $206, $208);
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 114; break;
    case 37: 
      var $212=$5;
      var $213=(($212)|0)==0;
      var $214=$213 ^ 1;
      var $215=$214 ^ 1;
      var $216=(($215)&1);
      var $217=($216);
      var $218=(($217)|0)!=0;
      if ($218) { label = 38; break; } else { label = 50; break; }
    case 38: 
      var $220=$4;
      var $221=(($220+12)|0);
      var $222=HEAP32[(($221)>>2)];
      $cp=$222;
      var $223=$n;
      var $224=((($223)-(1))|0);
      var $225=$cp;
      var $226=(($225+($224<<2))|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=(($227)|0)==-2147483648;
      var $229=$228 ^ 1;
      var $230=$229 ^ 1;
      var $231=(($230)&1);
      var $232=($231);
      var $233=(($232)|0)!=0;
      if ($233) { label = 39; break; } else { label = 49; break; }
    case 39: 
      var $235=$n;
      var $236=((($235)-(1))|0);
      $k=$236;
      label = 40; break;
    case 40: 
      var $238=$k;
      var $239=((($238)-(1))|0);
      $k=$239;
      label = 41; break;
    case 41: 
      var $241=$k;
      var $242=(($241)|0) >= 0;
      if ($242) { label = 42; break; } else { var $250 = 0;label = 43; break; }
    case 42: 
      var $244=$k;
      var $245=$cp;
      var $246=(($245+($244<<2))|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=(($247)|0)==0;
      var $250 = $248;label = 43; break;
    case 43: 
      var $250;
      if ($250) { label = 40; break; } else { label = 44; break; }
    case 44: 
      var $252=$k;
      var $253=(($252)|0) < 0;
      var $254=$253 ^ 1;
      var $255=$254 ^ 1;
      var $256=(($255)&1);
      var $257=($256);
      var $258=(($257)|0)!=0;
      if ($258) { label = 45; break; } else { label = 48; break; }
    case 45: 
      var $260=$3;
      var $261=(($260+12)|0);
      var $262=HEAP32[(($261)>>2)];
      var $263=(($262)|0);
      var $264=HEAP32[(($263)>>2)];
      var $265=$sh;
      var $266=1 << $265;
      var $267=$264 & $266;
      var $268=(($267)|0)==0;
      if ($268) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 26; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 32; break;
    case 50: 
      var $274=$5;
      var $275=(($274)|0)==1;
      if ($275) { label = 52; break; } else { label = 51; break; }
    case 51: 
      var $277=$5;
      var $278=$3;
      var $279=(($278+4)|0);
      var $280=HEAP32[(($279)>>2)];
      var $281=(($280)|0) < 0;
      var $282=(($281)&1);
      var $283=((($277)+($282))|0);
      var $284=(($283)|0)==3;
      if ($284) { label = 52; break; } else { label = 53; break; }
    case 52: 
      label = 26; break;
    case 53: 
      label = 32; break;
    case 54: 
      var $288=$n;
      var $289=($288<<2);
      var $290=(($289)>>>0) < 16384;
      var $291=$290 ^ 1;
      var $292=$291 ^ 1;
      var $293=(($292)&1);
      var $294=($293);
      var $295=(($294)|0)!=0;
      if ($295) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $297=$n;
      var $298=($297<<2);
      var $299=STACKTOP;STACKTOP = (STACKTOP + $298)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $305 = $299;label = 57; break;
    case 56: 
      var $301=$n;
      var $302=($301<<2);
      var $303=_mpfr_tmp_allocate($tmp_marker, $302);
      var $305 = $303;label = 57; break;
    case 57: 
      var $305;
      var $306=$305;
      $cp=$306;
      var $307=$d;
      var $308=((($307)>>>0))%(32);
      $dm=$308;
      var $309=$d;
      var $310=Math.floor(((($309)>>>0))/(32));
      $m=$310;
      var $311=$dm;
      var $312=(($311)|0)==0;
      var $313=$312 ^ 1;
      var $314=$313 ^ 1;
      var $315=(($314)&1);
      var $316=($315);
      var $317=(($316)|0)!=0;
      if ($317) { label = 58; break; } else { label = 63; break; }
    case 58: 
      label = 59; break;
    case 59: 
      var $320=$cp;
      var $321=$4;
      var $322=(($321+12)|0);
      var $323=HEAP32[(($322)>>2)];
      var $324=$m;
      var $325=(($323+($324<<2))|0);
      var $326=(($320)|0)!=(($325)|0);
      if ($326) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $328=$cp;
      var $329=$328;
      var $330=$4;
      var $331=(($330+12)|0);
      var $332=HEAP32[(($331)>>2)];
      var $333=$m;
      var $334=(($332+($333<<2))|0);
      var $335=$334;
      var $336=$n;
      var $337=$m;
      var $338=((($336)-($337))|0);
      var $339=($338<<2);
      assert($339 % 1 === 0);_memcpy($329, $335, $339);
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $342=$cp;
      var $343=$n;
      var $344=(($342+($343<<2))|0);
      var $345=$m;
      var $346=(((-$345))|0);
      var $347=(($344+($346<<2))|0);
      var $348=$347;
      var $349=$m;
      var $350=($349<<2);
      _memset($348, 0, $350);
      label = 67; break;
    case 63: 
      var $352=$m;
      var $353=(($352)|0)==0;
      var $354=$353 ^ 1;
      var $355=$354 ^ 1;
      var $356=(($355)&1);
      var $357=($356);
      var $358=(($357)|0)!=0;
      if ($358) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $360=$cp;
      var $361=$4;
      var $362=(($361+12)|0);
      var $363=HEAP32[(($362)>>2)];
      var $364=$n;
      var $365=$dm;
      var $366=___gmpn_rshift($360, $363, $364, $365);
      label = 66; break;
    case 65: 
      var $368=$cp;
      var $369=$4;
      var $370=(($369+12)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=$m;
      var $373=(($371+($372<<2))|0);
      var $374=$n;
      var $375=$m;
      var $376=((($374)-($375))|0);
      var $377=$dm;
      var $378=___gmpn_rshift($368, $373, $376, $377);
      var $379=$cp;
      var $380=$n;
      var $381=(($379+($380<<2))|0);
      var $382=$m;
      var $383=(((-$382))|0);
      var $384=(($381+($383<<2))|0);
      var $385=$384;
      var $386=$m;
      var $387=($386<<2);
      _memset($385, 0, $387);
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $390=$sh;
      var $391=(($390)>>>0) > 0;
      var $392=$391 ^ 1;
      var $393=$392 ^ 1;
      var $394=(($393)&1);
      var $395=($394);
      var $396=(($395)|0)!=0;
      if ($396) { label = 68; break; } else { label = 83; break; }
    case 68: 
      var $398=$cp;
      var $399=(($398)|0);
      var $400=HEAP32[(($399)>>2)];
      var $401=$sh;
      var $402=((($401)-(1))|0);
      var $403=1 << $402;
      var $404=$400 & $403;
      $bcp=$404;
      var $405=$cp;
      var $406=(($405)|0);
      var $407=HEAP32[(($406)>>2)];
      var $408=$sh;
      var $409=((($408)-(1))|0);
      var $410=1 << $409;
      var $411=((($410)-(1))|0);
      var $412=$407 & $411;
      var $413=(($412)|0)!=0;
      var $414=$413 ^ 1;
      var $415=$414 ^ 1;
      var $416=(($415)&1);
      var $417=($416);
      var $418=(($417)|0)!=0;
      if ($418) { label = 69; break; } else { label = 70; break; }
    case 69: 
      $bcp1=1;
      label = 82; break;
    case 70: 
      var $421=$p;
      var $422=$d;
      var $423=((($421)-($422))|0);
      var $424=$sh;
      var $425=((($423)+($424))|0);
      var $426=((($425)-(1))|0);
      $x=$426;
      var $427=$x;
      var $428=$p;
      var $429=(($427)|0) > (($428)|0);
      var $430=$429 ^ 1;
      var $431=$430 ^ 1;
      var $432=(($431)&1);
      var $433=($432);
      var $434=(($433)|0)!=0;
      if ($434) { label = 71; break; } else { label = 72; break; }
    case 71: 
      $bcp1=0;
      label = 81; break;
    case 72: 
      var $437=$4;
      var $438=(($437+12)|0);
      var $439=HEAP32[(($438)>>2)];
      $tp=$439;
      var $440=$n;
      var $441=((($440)-(1))|0);
      var $442=$x;
      var $443=((((($442)|0))/(32))&-1);
      var $444=((($441)-($443))|0);
      $kx=$444;
      var $445=$x;
      var $446=((($445)|0))%(32);
      var $447=(((31)-($446))|0);
      $sx=$447;
      var $448=$kx;
      var $449=$tp;
      var $450=(($449+($448<<2))|0);
      var $451=HEAP32[(($450)>>2)];
      var $452=$sx;
      var $453=1 << $452;
      var $454=((($453)-(1))|0);
      var $455=$451 & $454;
      var $456=(($455)|0)!=0;
      if ($456) { label = 73; break; } else { label = 74; break; }
    case 73: 
      $bcp1=1;
      label = 80; break;
    case 74: 
      label = 75; break;
    case 75: 
      var $460=$kx;
      var $461=((($460)-(1))|0);
      $kx=$461;
      label = 76; break;
    case 76: 
      var $463=$kx;
      var $464=(($463)|0) >= 0;
      if ($464) { label = 77; break; } else { var $472 = 0;label = 78; break; }
    case 77: 
      var $466=$kx;
      var $467=$tp;
      var $468=(($467+($466<<2))|0);
      var $469=HEAP32[(($468)>>2)];
      var $470=(($469)|0)==0;
      var $472 = $470;label = 78; break;
    case 78: 
      var $472;
      if ($472) { label = 75; break; } else { label = 79; break; }
    case 79: 
      var $474=$kx;
      var $475=(($474)|0) >= 0;
      var $476=(($475)&1);
      $bcp1=$476;
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 92; break;
    case 83: 
      var $481=$4;
      var $482=(($481+12)|0);
      var $483=HEAP32[(($482)>>2)];
      $tp1=$483;
      var $484=$p;
      var $485=$d;
      var $486=((($484)-($485))|0);
      $x2=$486;
      var $487=$n;
      var $488=((($487)-(1))|0);
      var $489=$x2;
      var $490=((((($489)|0))/(32))&-1);
      var $491=((($488)-($490))|0);
      $kx3=$491;
      var $492=$x2;
      var $493=((($492)|0))%(32);
      var $494=(((31)-($493))|0);
      $sx4=$494;
      var $495=$kx3;
      var $496=$tp1;
      var $497=(($496+($495<<2))|0);
      var $498=HEAP32[(($497)>>2)];
      var $499=$sx4;
      var $500=1 << $499;
      var $501=$498 & $500;
      $bcp=$501;
      var $502=$kx3;
      var $503=$tp1;
      var $504=(($503+($502<<2))|0);
      var $505=HEAP32[(($504)>>2)];
      var $506=$sx4;
      var $507=1 << $506;
      var $508=((($507)-(1))|0);
      var $509=$505 & $508;
      var $510=(($509)|0)!=0;
      if ($510) { label = 84; break; } else { label = 85; break; }
    case 84: 
      $bcp1=1;
      label = 91; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $514=$kx3;
      var $515=((($514)-(1))|0);
      $kx3=$515;
      label = 87; break;
    case 87: 
      var $517=$kx3;
      var $518=(($517)|0) >= 0;
      if ($518) { label = 88; break; } else { var $526 = 0;label = 89; break; }
    case 88: 
      var $520=$kx3;
      var $521=$tp1;
      var $522=(($521+($520<<2))|0);
      var $523=HEAP32[(($522)>>2)];
      var $524=(($523)|0)==0;
      var $526 = $524;label = 89; break;
    case 89: 
      var $526;
      if ($526) { label = 86; break; } else { label = 90; break; }
    case 90: 
      var $528=$kx3;
      var $529=(($528)|0) >= 0;
      var $530=(($529)&1);
      $bcp1=$530;
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $533=$sh;
      var $534=1 << $533;
      var $535=((($534)-(1))|0);
      var $536=$535 ^ -1;
      $mask=$536;
      var $537=$mask;
      var $538=$cp;
      var $539=(($538)|0);
      var $540=HEAP32[(($539)>>2)];
      var $541=$540 & $537;
      HEAP32[(($539)>>2)]=$541;
      var $542=$2;
      var $543=(($542+12)|0);
      var $544=HEAP32[(($543)>>2)];
      $ap=$544;
      var $545=$ap;
      var $546=$3;
      var $547=(($546+12)|0);
      var $548=HEAP32[(($547)>>2)];
      var $549=$cp;
      var $550=$n;
      var $551=___gmpn_add_n($545, $548, $549, $550);
      $limb=$551;
      var $552=$limb;
      var $553=(($552)|0)!=0;
      var $554=$553 ^ 1;
      var $555=$554 ^ 1;
      var $556=(($555)&1);
      var $557=($556);
      var $558=(($557)|0)!=0;
      if ($558) { label = 93; break; } else { label = 94; break; }
    case 93: 
      var $560=$ap;
      var $561=(($560)|0);
      var $562=HEAP32[(($561)>>2)];
      var $563=$sh;
      var $564=1 << $563;
      var $565=$562 & $564;
      $limb=$565;
      var $566=$ap;
      var $567=$ap;
      var $568=$n;
      var $569=___gmpn_rshift($566, $567, $568, 1);
      var $570=$bx;
      var $571=((($570)+(1))|0);
      $bx=$571;
      var $572=$n;
      var $573=((($572)-(1))|0);
      var $574=$ap;
      var $575=(($574+($573<<2))|0);
      var $576=HEAP32[(($575)>>2)];
      var $577=$576 | -2147483648;
      HEAP32[(($575)>>2)]=$577;
      var $578=$mask;
      var $579=$ap;
      var $580=(($579)|0);
      var $581=HEAP32[(($580)>>2)];
      var $582=$581 & $578;
      HEAP32[(($580)>>2)]=$582;
      var $583=$bcp;
      var $584=$bcp1;
      var $585=$584 | $583;
      $bcp1=$585;
      var $586=$limb;
      $bcp=$586;
      label = 94; break;
    case 94: 
      var $588=$5;
      var $589=(($588)|0)==0;
      var $590=$589 ^ 1;
      var $591=$590 ^ 1;
      var $592=(($591)&1);
      var $593=($592);
      var $594=(($593)|0)!=0;
      if ($594) { label = 95; break; } else { label = 101; break; }
    case 95: 
      var $596=$bcp;
      var $597=(($596)|0)==0;
      var $598=$597 ^ 1;
      var $599=$598 ^ 1;
      var $600=(($599)&1);
      var $601=($600);
      var $602=(($601)|0)!=0;
      if ($602) { label = 96; break; } else { label = 97; break; }
    case 96: 
      var $604=$bcp1;
      var $605=(($604)|0)!=0;
      var $606=$605 ^ 1;
      var $607=$606 ^ 1;
      var $608=(($607)&1);
      var $609=($608);
      var $610=(($609)|0)!=0;
      var $611=$610 ? -1 : 0;
      $inexact=$611;
      label = 117; break;
    case 97: 
      var $613=$bcp1;
      var $614=(($613)|0)==0;
      var $615=$614 ^ 1;
      var $616=$615 ^ 1;
      var $617=(($616)&1);
      var $618=($617);
      var $619=(($618)|0)!=0;
      if ($619) { label = 98; break; } else { label = 100; break; }
    case 98: 
      var $621=$ap;
      var $622=(($621)|0);
      var $623=HEAP32[(($622)>>2)];
      var $624=$sh;
      var $625=1 << $624;
      var $626=$623 & $625;
      var $627=(($626)|0)==0;
      if ($627) { label = 99; break; } else { label = 100; break; }
    case 99: 
      $inexact=-1;
      label = 117; break;
    case 100: 
      label = 114; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $632=$5;
      var $633=$3;
      var $634=(($633+4)|0);
      var $635=HEAP32[(($634)>>2)];
      var $636=(($635)|0) < 0;
      var $637=(($636)&1);
      var $638=((($632)+($637))|0);
      var $639=(($638)|0)==3;
      var $640=$639 ^ 1;
      var $641=$640 ^ 1;
      var $642=(($641)&1);
      var $643=($642);
      var $644=(($643)|0)!=0;
      if ($644) { label = 103; break; } else { label = 104; break; }
    case 103: 
      $5=1;
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      var $648=$5;
      var $649=(($648)|0)==1;
      if ($649) { label = 106; break; } else { label = 109; break; }
    case 106: 
      var $651=$bcp;
      var $652=(($651)|0)!=0;
      if ($652) { var $657 = 1;label = 108; break; } else { label = 107; break; }
    case 107: 
      var $654=$bcp1;
      var $655=(($654)|0)!=0;
      var $657 = $655;label = 108; break;
    case 108: 
      var $657;
      var $658=$657 ^ 1;
      var $659=$658 ^ 1;
      var $660=(($659)&1);
      var $661=($660);
      var $662=(($661)|0)!=0;
      var $663=$662 ? -1 : 0;
      $inexact=$663;
      label = 117; break;
    case 109: 
      var $665=$bcp;
      var $666=(($665)|0)==0;
      if ($666) { label = 110; break; } else { var $671 = 0;label = 111; break; }
    case 110: 
      var $668=$bcp1;
      var $669=(($668)|0)==0;
      var $671 = $669;label = 111; break;
    case 111: 
      var $671;
      var $672=$671 ^ 1;
      var $673=$672 ^ 1;
      var $674=(($673)&1);
      var $675=($674);
      var $676=(($675)|0)!=0;
      if ($676) { label = 112; break; } else { label = 113; break; }
    case 112: 
      $inexact=0;
      label = 117; break;
    case 113: 
      label = 114; break;
    case 114: 
      var $680=$ap;
      var $681=$ap;
      var $682=$n;
      var $683=$sh;
      var $684=1 << $683;
      var $685=___gmpn_add_1($680, $681, $682, $684);
      var $686=(($685)|0)!=0;
      var $687=$686 ^ 1;
      var $688=$687 ^ 1;
      var $689=(($688)&1);
      var $690=($689);
      var $691=(($690)|0)!=0;
      if ($691) { label = 115; break; } else { label = 116; break; }
    case 115: 
      var $693=$bx;
      var $694=((($693)+(1))|0);
      $bx=$694;
      var $695=$n;
      var $696=((($695)-(1))|0);
      var $697=$ap;
      var $698=(($697+($696<<2))|0);
      HEAP32[(($698)>>2)]=-2147483648;
      label = 116; break;
    case 116: 
      $inexact=1;
      label = 117; break;
    case 117: 
      var $701=$bx;
      var $702=HEAP32[((5257656)>>2)];
      var $703=(($701)|0) > (($702)|0);
      var $704=$703 ^ 1;
      var $705=$704 ^ 1;
      var $706=(($705)&1);
      var $707=($706);
      var $708=(($707)|0)!=0;
      if ($708) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $710=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($710);
      var $711=$3;
      var $712=(($711+4)|0);
      var $713=HEAP32[(($712)>>2)];
      var $714=$2;
      var $715=(($714+4)|0);
      HEAP32[(($715)>>2)]=$713;
      var $716=$2;
      var $717=$5;
      var $718=$2;
      var $719=(($718+4)|0);
      var $720=HEAP32[(($719)>>2)];
      var $721=_mpfr_overflow($716, $717, $720);
      $1=$721;
      label = 123; break;
    case 119: 
      var $723=$bx;
      var $724=$2;
      var $725=(($724+8)|0);
      HEAP32[(($725)>>2)]=$723;
      var $726=$3;
      var $727=(($726+4)|0);
      var $728=HEAP32[(($727)>>2)];
      var $729=$2;
      var $730=(($729+4)|0);
      HEAP32[(($730)>>2)]=$728;
      var $731=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($731);
      var $732=$inexact;
      var $733=$2;
      var $734=(($733+4)|0);
      var $735=HEAP32[(($734)>>2)];
      var $736=Math.imul($732,$735);
      var $737=(($736)|0)!=0;
      if ($737) { label = 120; break; } else { label = 121; break; }
    case 120: 
      var $739=HEAP32[((5257648)>>2)];
      var $740=$739 | 8;
      HEAP32[((5257648)>>2)]=$740;
      var $741=$inexact;
      var $742=$2;
      var $743=(($742+4)|0);
      var $744=HEAP32[(($743)>>2)];
      var $745=Math.imul($741,$744);
      var $748 = $745;label = 122; break;
    case 121: 
      var $748 = 0;label = 122; break;
    case 122: 
      var $748;
      $1=$748;
      label = 123; break;
    case 123: 
      var $750=$1;
      STACKTOP = __stackBase__;
      return $750;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_add1sp["X"]=1;

function _mpfr_set_si_2exp($x, $i, $e, $rnd_mode) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $xn;
      var $cnt;
      var $nbits;
      var $ai;
      var $xp;
      var $inex=__stackBase__;
      var $__xr;
      var $__a;
      $2=$x;
      $3=$i;
      $4=$e;
      $5=$rnd_mode;
      var $6=$3;
      var $7=(($6)|0)==0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$2;
      var $10=(($9+8)|0);
      HEAP32[(($10)>>2)]=-2147483647;
      var $11=$2;
      var $12=(($11+4)|0);
      HEAP32[(($12)>>2)]=1;
      $1=0;
      label = 29; break;
    case 4: 
      HEAP32[(($inex)>>2)]=0;
      var $14=$3;
      var $15=(($14)|0) >= 0;
      if ($15) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $17=$3;
      var $22 = $17;label = 7; break;
    case 6: 
      var $19=$3;
      var $20=(((-$19))|0);
      var $22 = $20;label = 7; break;
    case 7: 
      var $22;
      $ai=$22;
      var $23=$3;
      var $24=(($23)|0) >= 0;
      if ($24) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $26=$3;
      var $31 = $26;label = 10; break;
    case 9: 
      var $28=$3;
      var $29=(((-$28))|0);
      var $31 = $29;label = 10; break;
    case 10: 
      var $31;
      var $32=$ai;
      var $33=(($31)|0)==(($32)|0);
      var $34=$33 ^ 1;
      var $35=$34 ^ 1;
      var $36=(($35)&1);
      var $37=($36);
      var $38=(($37)|0)!=0;
      if ($38) { var $43 = 1;label = 12; break; } else { label = 11; break; }
    case 11: 
      _mpfr_assert_fail(((5248576)|0), 45, ((5249452)|0));
      var $40=(0);
      var $41=(($40)|0)!=0;
      var $43 = $41;label = 12; break;
    case 12: 
      var $43;
      var $44=(($43)&1);
      var $45=$2;
      var $46=(($45)|0);
      var $47=HEAP32[(($46)>>2)];
      var $48=((($47)-(1))|0);
      var $49=((((($48)|0))/(32))&-1);
      $xn=$49;
      label = 13; break;
    case 13: 
      var $51=$ai;
      $__xr=$51;
      var $52=$__xr;
      var $53=(($52)>>>0) < 65536;
      if ($53) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $55=$__xr;
      var $56=(($55)>>>0) < 256;
      var $57=$56 ? 1 : 9;
      var $63 = $57;label = 16; break;
    case 15: 
      var $59=$__xr;
      var $60=(($59)>>>0) < 16777216;
      var $61=$60 ? 17 : 25;
      var $63 = $61;label = 16; break;
    case 16: 
      var $63;
      $__a=$63;
      var $64=$__a;
      var $65=(((33)-($64))|0);
      var $66=$__xr;
      var $67=$__a;
      var $68=$66 >>> (($67)>>>0);
      var $69=((5248192+$68)|0);
      var $70=HEAP8[($69)];
      var $71=(($70)&255);
      var $72=((($65)-($71))|0);
      $cnt=$72;
      label = 17; break;
    case 17: 
      var $74=$2;
      var $75=(($74+12)|0);
      var $76=HEAP32[(($75)>>2)];
      $xp=$76;
      var $77=$ai;
      var $78=$cnt;
      var $79=$77 << $78;
      var $80=$xn;
      var $81=$xp;
      var $82=(($81+($80<<2))|0);
      HEAP32[(($82)>>2)]=$79;
      var $83=$xp;
      var $84=$83;
      var $85=$xn;
      var $86=($85<<2);
      _memset($84, 0, $86);
      var $87=$3;
      var $88=(($87)|0) < 0;
      var $89=$88 ? -1 : 1;
      var $90=$2;
      var $91=(($90+4)|0);
      HEAP32[(($91)>>2)]=$89;
      var $92=$cnt;
      var $93=(((32)-($92))|0);
      $nbits=$93;
      var $94=$nbits;
      var $95=$4;
      var $96=((($95)+($94))|0);
      $4=$96;
      var $97=$2;
      var $98=(($97)|0);
      var $99=HEAP32[(($98)>>2)];
      var $100=$nbits;
      var $101=(($99)>>>0) < (($100)>>>0);
      var $102=$101 ^ 1;
      var $103=$102 ^ 1;
      var $104=(($103)&1);
      var $105=($104);
      var $106=(($105)|0)!=0;
      if ($106) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $108=$xp;
      var $109=$xn;
      var $110=(($108+($109<<2))|0);
      var $111=$xp;
      var $112=$xn;
      var $113=(($111+($112<<2))|0);
      var $114=$nbits;
      var $115=$3;
      var $116=(($115)|0) < 0;
      var $117=(($116)&1);
      var $118=$2;
      var $119=(($118)|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$5;
      var $122=_mpfr_round_raw($110, $113, $114, $117, $120, $121, $inex);
      var $123=(($122)|0)!=0;
      var $124=$123 ^ 1;
      var $125=$124 ^ 1;
      var $126=(($125)&1);
      var $127=($126);
      var $128=(($127)|0)!=0;
      if ($128) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $130=$4;
      var $131=((($130)+(1))|0);
      $4=$131;
      var $132=$xn;
      var $133=$xp;
      var $134=(($133+($132<<2))|0);
      HEAP32[(($134)>>2)]=-2147483648;
      label = 20; break;
    case 20: 
      var $136=$4;
      var $137=$2;
      var $138=(($137+8)|0);
      HEAP32[(($138)>>2)]=$136;
      var $139=$2;
      var $140=(($139+8)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=HEAP32[((5257652)>>2)];
      var $143=(($141)|0) >= (($142)|0);
      if ($143) { label = 21; break; } else { var $151 = 0;label = 22; break; }
    case 21: 
      var $145=$2;
      var $146=(($145+8)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=HEAP32[((5257656)>>2)];
      var $149=(($147)|0) <= (($148)|0);
      var $151 = $149;label = 22; break;
    case 22: 
      var $151;
      var $152=$151 ^ 1;
      var $153=$152 ^ 1;
      var $154=(($153)&1);
      var $155=($154);
      var $156=(($155)|0)!=0;
      if ($156) { label = 23; break; } else { label = 27; break; }
    case 23: 
      var $158=HEAP32[(($inex)>>2)];
      var $159=(($158)|0)!=0;
      if ($159) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $161=HEAP32[((5257648)>>2)];
      var $162=$161 | 8;
      HEAP32[((5257648)>>2)]=$162;
      var $163=HEAP32[(($inex)>>2)];
      var $166 = $163;label = 26; break;
    case 25: 
      var $166 = 0;label = 26; break;
    case 26: 
      var $166;
      var $173 = $166;label = 28; break;
    case 27: 
      var $168=$2;
      var $169=HEAP32[(($inex)>>2)];
      var $170=$5;
      var $171=_mpfr_check_range($168, $169, $170);
      var $173 = $171;label = 28; break;
    case 28: 
      var $173;
      $1=$173;
      label = 29; break;
    case 29: 
      var $175=$1;
      STACKTOP = __stackBase__;
      return $175;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_set_si_2exp["X"]=1;

function _mpfr_mulhigh_n($rp, $np, $mp, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $k;
      var $l;
      var $cy;
      $1=$rp;
      $2=$np;
      $3=$mp;
      $4=$n;
      var $5=$4;
      var $6=(($5)|0) < 1024;
      var $7=$6 ^ 1;
      var $8=$7 ^ 1;
      var $9=(($8)&1);
      var $10=($9);
      var $11=(($10)|0)!=0;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$4;
      var $14=((5245032+($13<<1))|0);
      var $15=HEAP16[(($14)>>1)];
      var $16=(($15 << 16) >> 16);
      var $22 = $16;label = 5; break;
    case 4: 
      var $18=$4;
      var $19=((((($18)|0))/(4))&-1);
      var $20=((($19)*(3))&-1);
      var $22 = $20;label = 5; break;
    case 5: 
      var $22;
      $k=$22;
      var $23=$k;
      var $24=(($23)|0) < 0;
      if ($24) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $26=$1;
      var $27=$2;
      var $28=$4;
      var $29=$3;
      var $30=$4;
      var $31=___gmpn_mul($26, $27, $28, $29, $30);
      label = 14; break;
    case 7: 
      var $33=$k;
      var $34=(($33)|0)==0;
      if ($34) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $36=$1;
      var $37=$2;
      var $38=$3;
      var $39=$4;
      _mpfr_mulhigh_n_basecase($36, $37, $38, $39);
      label = 13; break;
    case 9: 
      var $41=$4;
      var $42=(($41)|0) > 8448;
      if ($42) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $44=$1;
      var $45=$2;
      var $46=$3;
      var $47=$4;
      ___gmpn_mul_n($44, $45, $46, $47);
      label = 12; break;
    case 11: 
      var $49=$4;
      var $50=$k;
      var $51=((($49)-($50))|0);
      $l=$51;
      var $52=$1;
      var $53=$l;
      var $54=($53<<1);
      var $55=(($52+($54<<2))|0);
      var $56=$2;
      var $57=$l;
      var $58=(($56+($57<<2))|0);
      var $59=$3;
      var $60=$l;
      var $61=(($59+($60<<2))|0);
      var $62=$k;
      ___gmpn_mul_n($55, $58, $61, $62);
      var $63=$1;
      var $64=$2;
      var $65=$k;
      var $66=(($64+($65<<2))|0);
      var $67=$3;
      var $68=$l;
      _mpfr_mulhigh_n($63, $66, $67, $68);
      var $69=$1;
      var $70=$4;
      var $71=(($69+($70<<2))|0);
      var $72=((($71)-(4))|0);
      var $73=$1;
      var $74=$4;
      var $75=(($73+($74<<2))|0);
      var $76=((($75)-(4))|0);
      var $77=$1;
      var $78=$l;
      var $79=(($77+($78<<2))|0);
      var $80=((($79)-(4))|0);
      var $81=$l;
      var $82=((($81)+(1))|0);
      var $83=___gmpn_add_n($72, $76, $80, $82);
      $cy=$83;
      var $84=$1;
      var $85=$2;
      var $86=$3;
      var $87=$k;
      var $88=(($86+($87<<2))|0);
      var $89=$l;
      _mpfr_mulhigh_n($84, $85, $88, $89);
      var $90=$1;
      var $91=$4;
      var $92=(($90+($91<<2))|0);
      var $93=((($92)-(4))|0);
      var $94=$1;
      var $95=$4;
      var $96=(($94+($95<<2))|0);
      var $97=((($96)-(4))|0);
      var $98=$1;
      var $99=$l;
      var $100=(($98+($99<<2))|0);
      var $101=((($100)-(4))|0);
      var $102=$l;
      var $103=((($102)+(1))|0);
      var $104=___gmpn_add_n($93, $97, $101, $103);
      var $105=$cy;
      var $106=((($105)+($104))|0);
      $cy=$106;
      var $107=$1;
      var $108=$4;
      var $109=(($107+($108<<2))|0);
      var $110=$l;
      var $111=(($109+($110<<2))|0);
      var $112=$1;
      var $113=$4;
      var $114=(($112+($113<<2))|0);
      var $115=$l;
      var $116=(($114+($115<<2))|0);
      var $117=$k;
      var $118=$cy;
      var $119=___gmpn_add_1($111, $116, $117, $118);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_mulhigh_n["X"]=1;

function _mpfr_mulhigh_n_basecase($rp, $up, $vp, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      $1=$rp;
      $2=$up;
      $3=$vp;
      $4=$n;
      var $5=$4;
      var $6=((($5)-(1))|0);
      var $7=$1;
      var $8=(($7+($6<<2))|0);
      $1=$8;
      label = 3; break;
    case 3: 
      var $10=$4;
      var $11=((($10)-(1))|0);
      var $12=$2;
      var $13=(($12+($11<<2))|0);
      var $14=HEAP32[(($13)>>2)];
      $__u=$14;
      var $15=$3;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      $__v=$17;
      var $18=$__u;
      var $19=$18 & 65535;
      $__ul=$19;
      var $20=$__u;
      var $21=$20 >>> 16;
      $__uh=$21;
      var $22=$__v;
      var $23=$22 & 65535;
      $__vl=$23;
      var $24=$__v;
      var $25=$24 >>> 16;
      $__vh=$25;
      var $26=$__ul;
      var $27=$__vl;
      var $28=Math.imul($26,$27);
      $__x0=$28;
      var $29=$__ul;
      var $30=$__vh;
      var $31=Math.imul($29,$30);
      $__x1=$31;
      var $32=$__uh;
      var $33=$__vl;
      var $34=Math.imul($32,$33);
      $__x2=$34;
      var $35=$__uh;
      var $36=$__vh;
      var $37=Math.imul($35,$36);
      $__x3=$37;
      var $38=$__x0;
      var $39=$38 >>> 16;
      var $40=$__x1;
      var $41=((($40)+($39))|0);
      $__x1=$41;
      var $42=$__x2;
      var $43=$__x1;
      var $44=((($43)+($42))|0);
      $__x1=$44;
      var $45=$__x1;
      var $46=$__x2;
      var $47=(($45)>>>0) < (($46)>>>0);
      if ($47) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $49=$__x3;
      var $50=((($49)+(65536))|0);
      $__x3=$50;
      label = 5; break;
    case 5: 
      var $52=$__x3;
      var $53=$__x1;
      var $54=$53 >>> 16;
      var $55=((($52)+($54))|0);
      var $56=$1;
      var $57=(($56+4)|0);
      HEAP32[(($57)>>2)]=$55;
      var $58=$__x1;
      var $59=$58 << 16;
      var $60=$__x0;
      var $61=$60 & 65535;
      var $62=((($59)+($61))|0);
      var $63=$1;
      var $64=(($63)|0);
      HEAP32[(($64)>>2)]=$62;
      label = 6; break;
    case 6: 
      $i=1;
      label = 7; break;
    case 7: 
      var $67=$i;
      var $68=$4;
      var $69=(($67)|0) < (($68)|0);
      if ($69) { label = 8; break; } else { label = 10; break; }
    case 8: 
      var $71=$1;
      var $72=$2;
      var $73=$4;
      var $74=$i;
      var $75=((($73)-($74))|0);
      var $76=((($75)-(1))|0);
      var $77=(($72+($76<<2))|0);
      var $78=$i;
      var $79=((($78)+(1))|0);
      var $80=$i;
      var $81=$3;
      var $82=(($81+($80<<2))|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=___gmpn_addmul_1($71, $77, $79, $83);
      var $85=$i;
      var $86=((($85)+(1))|0);
      var $87=$1;
      var $88=(($87+($86<<2))|0);
      HEAP32[(($88)>>2)]=$84;
      label = 9; break;
    case 9: 
      var $90=$i;
      var $91=((($90)+(1))|0);
      $i=$91;
      label = 7; break;
    case 10: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_mulhigh_n_basecase["X"]=1;

function _mpfr_sqrhigh_n($rp, $np, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $k;
      var $l;
      var $cy;
      $1=$rp;
      $2=$np;
      $3=$n;
      var $4=$3;
      var $5=(($4)>>>0) < 1024;
      var $6=$5 ^ 1;
      var $7=$6 ^ 1;
      var $8=(($7)&1);
      var $9=($8);
      var $10=(($9)|0)!=0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$3;
      var $13=((5242880+($12<<1))|0);
      var $14=HEAP16[(($13)>>1)];
      var $15=(($14 << 16) >> 16);
      var $21 = $15;label = 5; break;
    case 4: 
      var $17=$3;
      var $18=((($17)+(4))|0);
      var $19=((((($18)|0))/(2))&-1);
      var $21 = $19;label = 5; break;
    case 5: 
      var $21;
      $k=$21;
      var $22=$k;
      var $23=(($22)|0) < 0;
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $25=$1;
      var $26=$2;
      var $27=$3;
      var $28=$2;
      var $29=$3;
      var $30=___gmpn_mul($25, $26, $27, $28, $29);
      label = 11; break;
    case 7: 
      var $32=$k;
      var $33=(($32)|0)==0;
      if ($33) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $35=$1;
      var $36=$2;
      var $37=$2;
      var $38=$3;
      _mpfr_mulhigh_n_basecase($35, $36, $37, $38);
      label = 10; break;
    case 9: 
      var $40=$3;
      var $41=$k;
      var $42=((($40)-($41))|0);
      $l=$42;
      var $43=$1;
      var $44=$l;
      var $45=($44<<1);
      var $46=(($43+($45<<2))|0);
      var $47=$2;
      var $48=$l;
      var $49=(($47+($48<<2))|0);
      var $50=$k;
      var $51=$2;
      var $52=$l;
      var $53=(($51+($52<<2))|0);
      var $54=$k;
      var $55=___gmpn_mul($46, $49, $50, $53, $54);
      var $56=$1;
      var $57=$2;
      var $58=$2;
      var $59=$k;
      var $60=(($58+($59<<2))|0);
      var $61=$l;
      _mpfr_mulhigh_n($56, $57, $60, $61);
      var $62=$1;
      var $63=$l;
      var $64=(($62+($63<<2))|0);
      var $65=((($64)-(4))|0);
      var $66=$1;
      var $67=$l;
      var $68=(($66+($67<<2))|0);
      var $69=((($68)-(4))|0);
      var $70=$l;
      var $71=((($70)+(1))|0);
      var $72=___gmpn_lshift($65, $69, $71, 1);
      $cy=$72;
      var $73=$1;
      var $74=$3;
      var $75=(($73+($74<<2))|0);
      var $76=((($75)-(4))|0);
      var $77=$1;
      var $78=$3;
      var $79=(($77+($78<<2))|0);
      var $80=((($79)-(4))|0);
      var $81=$1;
      var $82=$l;
      var $83=(($81+($82<<2))|0);
      var $84=((($83)-(4))|0);
      var $85=$l;
      var $86=((($85)+(1))|0);
      var $87=___gmpn_add_n($76, $80, $84, $86);
      var $88=$cy;
      var $89=((($88)+($87))|0);
      $cy=$89;
      var $90=$1;
      var $91=$3;
      var $92=(($90+($91<<2))|0);
      var $93=$l;
      var $94=(($92+($93<<2))|0);
      var $95=$1;
      var $96=$3;
      var $97=(($95+($96<<2))|0);
      var $98=$l;
      var $99=(($97+($98<<2))|0);
      var $100=$k;
      var $101=$cy;
      var $102=___gmpn_add_1($94, $99, $100, $101);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_sqrhigh_n["X"]=1;

function _mpfr_divhigh_n($qp, $np, $dp, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $k;
      var $l;
      var $qh;
      var $cy;
      var $tp;
      var $tmp_marker=__stackBase__;
      $2=$qp;
      $3=$np;
      $4=$dp;
      $5=$n;
      var $6=$5;
      var $7=(($6)>>>0) < 17;
      var $8=$7 ^ 1;
      var $9=$8 ^ 1;
      var $10=(($9)&1);
      var $11=($10);
      var $12=(($11)|0)!=0;
      if ($12) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $14=$5;
      var $15=((5248348+($14<<1))|0);
      var $16=HEAP16[(($15)>>1)];
      var $17=(($16 << 16) >> 16);
      var $23 = $17;label = 5; break;
    case 4: 
      var $19=$5;
      var $20=((((($19)|0))/(3))&-1);
      var $21=($20<<1);
      var $23 = $21;label = 5; break;
    case 5: 
      var $23;
      $k=$23;
      var $24=$k;
      var $25=(($24)|0)==0;
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $27=$2;
      var $28=$3;
      var $29=$4;
      var $30=$5;
      var $31=_mpfr_divhigh_n_basecase($27, $28, $29, $30);
      $1=$31;
      label = 19; break;
    case 7: 
      var $33=$k;
      var $34=$5;
      var $35=(($33)|0)==(($34)|0);
      if ($35) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $37=$2;
      var $38=$3;
      var $39=$5;
      var $40=($39<<1);
      var $41=$4;
      var $42=$5;
      var $43=___gmpn_divrem($37, 0, $38, $40, $41, $42);
      $1=$43;
      label = 19; break;
    case 9: 
      label = 10; break;
    case 10: 
      HEAP32[(($tmp_marker)>>2)]=0;
      var $46=$5;
      var $47=$k;
      var $48=((($46)-($47))|0);
      $l=$48;
      var $49=$2;
      var $50=$l;
      var $51=(($49+($50<<2))|0);
      var $52=$3;
      var $53=$l;
      var $54=($53<<1);
      var $55=(($52+($54<<2))|0);
      var $56=$k;
      var $57=($56<<1);
      var $58=$4;
      var $59=$l;
      var $60=(($58+($59<<2))|0);
      var $61=$k;
      var $62=___gmpn_divrem($51, 0, $55, $57, $60, $61);
      $qh=$62;
      var $63=$l;
      var $64=($63<<1);
      var $65=($64<<2);
      var $66=(($65)>>>0) < 16384;
      var $67=$66 ^ 1;
      var $68=$67 ^ 1;
      var $69=(($68)&1);
      var $70=($69);
      var $71=(($70)|0)!=0;
      if ($71) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $73=$l;
      var $74=($73<<1);
      var $75=($74<<2);
      var $76=STACKTOP;STACKTOP = (STACKTOP + $75)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $83 = $76;label = 13; break;
    case 12: 
      var $78=$l;
      var $79=($78<<1);
      var $80=($79<<2);
      var $81=_mpfr_tmp_allocate($tmp_marker, $80);
      var $83 = $81;label = 13; break;
    case 13: 
      var $83;
      var $84=$83;
      $tp=$84;
      var $85=$tp;
      var $86=$2;
      var $87=$k;
      var $88=(($86+($87<<2))|0);
      var $89=$4;
      var $90=$l;
      _mpfr_mulhigh_n($85, $88, $89, $90);
      var $91=$3;
      var $92=$5;
      var $93=(($91+($92<<2))|0);
      var $94=$3;
      var $95=$5;
      var $96=(($94+($95<<2))|0);
      var $97=$tp;
      var $98=$l;
      var $99=(($97+($98<<2))|0);
      var $100=$l;
      var $101=___gmpn_sub_n($93, $96, $99, $100);
      $cy=$101;
      var $102=$qh;
      var $103=(($102)|0)!=0;
      if ($103) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $105=$3;
      var $106=$5;
      var $107=(($105+($106<<2))|0);
      var $108=$3;
      var $109=$5;
      var $110=(($108+($109<<2))|0);
      var $111=$4;
      var $112=$l;
      var $113=___gmpn_sub_n($107, $110, $111, $112);
      var $114=$cy;
      var $115=((($114)+($113))|0);
      $cy=$115;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $118=$cy;
      var $119=(($118)>>>0) > 0;
      if ($119) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $121=$2;
      var $122=$l;
      var $123=(($121+($122<<2))|0);
      var $124=$2;
      var $125=$l;
      var $126=(($124+($125<<2))|0);
      var $127=$k;
      var $128=___gmpn_sub_1($123, $126, $127, 1);
      var $129=$qh;
      var $130=((($129)-($128))|0);
      $qh=$130;
      var $131=$3;
      var $132=$l;
      var $133=(($131+($132<<2))|0);
      var $134=$3;
      var $135=$l;
      var $136=(($134+($135<<2))|0);
      var $137=$4;
      var $138=$5;
      var $139=___gmpn_add_n($133, $136, $137, $138);
      var $140=$cy;
      var $141=((($140)-($139))|0);
      $cy=$141;
      label = 16; break;
    case 18: 
      var $143=$2;
      var $144=$3;
      var $145=$k;
      var $146=(($144+($145<<2))|0);
      var $147=$4;
      var $148=$k;
      var $149=(($147+($148<<2))|0);
      var $150=$l;
      var $151=_mpfr_divhigh_n($143, $146, $149, $150);
      $cy=$151;
      var $152=$2;
      var $153=$l;
      var $154=(($152+($153<<2))|0);
      var $155=$2;
      var $156=$l;
      var $157=(($155+($156<<2))|0);
      var $158=$k;
      var $159=$cy;
      var $160=___gmpn_add_1($154, $157, $158, $159);
      var $161=$qh;
      var $162=((($161)+($160))|0);
      $qh=$162;
      var $163=HEAP32[(($tmp_marker)>>2)];
      _mpfr_tmp_free($163);
      var $164=$qh;
      $1=$164;
      label = 19; break;
    case 19: 
      var $166=$1;
      STACKTOP = __stackBase__;
      return $166;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_divhigh_n["X"]=1;

function _mpfr_divhigh_n_basecase($qp, $np, $dp, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $qh;
      var $d1;
      var $d0;
      var $dinv;
      var $q2;
      var $q1;
      var $q0;
      var $dinv2=__stackBase__;
      var $dummy;
      var $__d1;
      var $__d0;
      var $__q1;
      var $__q0;
      var $__r1;
      var $__r0;
      var $__m;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $_v;
      var $_p;
      var $_t1;
      var $_t0;
      var $_mask;
      var $dummy1;
      var $__d12;
      var $__d03;
      var $__q14;
      var $__q05;
      var $__r16;
      var $__r07;
      var $__m8;
      var $__x09;
      var $__x110;
      var $__x211;
      var $__x312;
      var $__ul13;
      var $__vl14;
      var $__uh15;
      var $__vh16;
      var $__u17;
      var $__v18;
      var $_q0;
      var $_t119;
      var $_t020;
      var $_mask21;
      var $__x022;
      var $__x123;
      var $__x224;
      var $__x325;
      var $__ul26;
      var $__vl27;
      var $__uh28;
      var $__vh29;
      var $__u30;
      var $__v31;
      var $__x;
      var $__x32;
      var $__x033;
      var $__x134;
      var $__x235;
      var $__x336;
      var $__ul37;
      var $__vl38;
      var $__uh39;
      var $__vh40;
      var $__u41;
      var $__v42;
      var $__x43;
      var $__x44;
      var $__x45;
      var $__x046;
      var $__x147;
      var $__x248;
      var $__x349;
      var $__ul50;
      var $__vl51;
      var $__uh52;
      var $__vh53;
      var $__u54;
      var $__v55;
      $2=$qp;
      $3=$np;
      $4=$dp;
      $5=$n;
      var $6=$5;
      var $7=$3;
      var $8=(($7+($6<<2))|0);
      $3=$8;
      var $9=$3;
      var $10=$4;
      var $11=$5;
      var $12=___gmpn_cmp($9, $10, $11);
      var $13=(($12)|0) >= 0;
      var $14=(($13)&1);
      $qh=$14;
      if ($13) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $16=$3;
      var $17=$3;
      var $18=$4;
      var $19=$5;
      var $20=___gmpn_sub_n($16, $17, $18, $19);
      label = 4; break;
    case 4: 
      var $22=$5;
      var $23=((($22)-(1))|0);
      var $24=$4;
      var $25=(($24+($23<<2))|0);
      var $26=HEAP32[(($25)>>2)];
      $d1=$26;
      var $27=$5;
      var $28=(($27)|0)==1;
      if ($28) { label = 5; break; } else { label = 26; break; }
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $32=$d1;
      var $33=$32 >>> 16;
      $__d1=$33;
      var $34=$d1;
      var $35=$34 & 65535;
      $__d0=$35;
      var $36=$d1;
      var $37=$36 ^ -1;
      var $38=$__d1;
      var $39=Math.floor(((($37)>>>0))/((($38)>>>0)));
      $__q1=$39;
      var $40=$d1;
      var $41=$40 ^ -1;
      var $42=$__q1;
      var $43=$__d1;
      var $44=Math.imul($42,$43);
      var $45=((($41)-($44))|0);
      $__r1=$45;
      var $46=$__q1;
      var $47=$__d0;
      var $48=Math.imul($46,$47);
      $__m=$48;
      var $49=$__r1;
      var $50=($49<<16);
      var $51=$50 | 65535;
      $__r1=$51;
      var $52=$__r1;
      var $53=$__m;
      var $54=(($52)>>>0) < (($53)>>>0);
      if ($54) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $56=$__q1;
      var $57=((($56)-(1))|0);
      $__q1=$57;
      var $58=$d1;
      var $59=$__r1;
      var $60=((($59)+($58))|0);
      $__r1=$60;
      var $61=$__r1;
      var $62=$d1;
      var $63=(($61)>>>0) >= (($62)>>>0);
      if ($63) { label = 9; break; } else { label = 12; break; }
    case 9: 
      var $65=$__r1;
      var $66=$__m;
      var $67=(($65)>>>0) < (($66)>>>0);
      if ($67) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $69=$__q1;
      var $70=((($69)-(1))|0);
      $__q1=$70;
      var $71=$d1;
      var $72=$__r1;
      var $73=((($72)+($71))|0);
      $__r1=$73;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $77=$__m;
      var $78=$__r1;
      var $79=((($78)-($77))|0);
      $__r1=$79;
      var $80=$__r1;
      var $81=$__d1;
      var $82=Math.floor(((($80)>>>0))/((($81)>>>0)));
      $__q0=$82;
      var $83=$__r1;
      var $84=$__q0;
      var $85=$__d1;
      var $86=Math.imul($84,$85);
      var $87=((($83)-($86))|0);
      $__r0=$87;
      var $88=$__q0;
      var $89=$__d0;
      var $90=Math.imul($88,$89);
      $__m=$90;
      var $91=$__r0;
      var $92=($91<<16);
      var $93=$92 | 65535;
      $__r0=$93;
      var $94=$__r0;
      var $95=$__m;
      var $96=(($94)>>>0) < (($95)>>>0);
      if ($96) { label = 14; break; } else { label = 19; break; }
    case 14: 
      var $98=$__q0;
      var $99=((($98)-(1))|0);
      $__q0=$99;
      var $100=$d1;
      var $101=$__r0;
      var $102=((($101)+($100))|0);
      $__r0=$102;
      var $103=$__r0;
      var $104=$d1;
      var $105=(($103)>>>0) >= (($104)>>>0);
      if ($105) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $107=$__r0;
      var $108=$__m;
      var $109=(($107)>>>0) < (($108)>>>0);
      if ($109) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $111=$__q0;
      var $112=((($111)-(1))|0);
      $__q0=$112;
      var $113=$d1;
      var $114=$__r0;
      var $115=((($114)+($113))|0);
      $__r0=$115;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $119=$__m;
      var $120=$__r0;
      var $121=((($120)-($119))|0);
      $__r0=$121;
      var $122=$__q1;
      var $123=($122<<16);
      var $124=$__q0;
      var $125=$123 | $124;
      $dinv=$125;
      var $126=$__r0;
      $dummy=$126;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $130=$3;
      var $131=(($130)|0);
      var $132=HEAP32[(($131)>>2)];
      $__u=$132;
      var $133=$dinv;
      $__v=$133;
      var $134=$__u;
      var $135=$134 & 65535;
      $__ul=$135;
      var $136=$__u;
      var $137=$136 >>> 16;
      $__uh=$137;
      var $138=$__v;
      var $139=$138 & 65535;
      $__vl=$139;
      var $140=$__v;
      var $141=$140 >>> 16;
      $__vh=$141;
      var $142=$__ul;
      var $143=$__vl;
      var $144=Math.imul($142,$143);
      $__x0=$144;
      var $145=$__ul;
      var $146=$__vh;
      var $147=Math.imul($145,$146);
      $__x1=$147;
      var $148=$__uh;
      var $149=$__vl;
      var $150=Math.imul($148,$149);
      $__x2=$150;
      var $151=$__uh;
      var $152=$__vh;
      var $153=Math.imul($151,$152);
      $__x3=$153;
      var $154=$__x0;
      var $155=$154 >>> 16;
      var $156=$__x1;
      var $157=((($156)+($155))|0);
      $__x1=$157;
      var $158=$__x2;
      var $159=$__x1;
      var $160=((($159)+($158))|0);
      $__x1=$160;
      var $161=$__x1;
      var $162=$__x2;
      var $163=(($161)>>>0) < (($162)>>>0);
      if ($163) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $165=$__x3;
      var $166=((($165)+(65536))|0);
      $__x3=$166;
      label = 24; break;
    case 24: 
      var $168=$__x3;
      var $169=$__x1;
      var $170=$169 >>> 16;
      var $171=((($168)+($170))|0);
      $q1=$171;
      var $172=$__x1;
      var $173=$172 << 16;
      var $174=$__x0;
      var $175=$174 & 65535;
      var $176=((($173)+($175))|0);
      $q0=$176;
      label = 25; break;
    case 25: 
      var $178=$3;
      var $179=(($178)|0);
      var $180=HEAP32[(($179)>>2)];
      var $181=$q1;
      var $182=((($180)+($181))|0);
      var $183=$2;
      var $184=(($183)|0);
      HEAP32[(($184)>>2)]=$182;
      var $185=$qh;
      $1=$185;
      label = 97; break;
    case 26: 
      var $187=$5;
      var $188=((($187)-(2))|0);
      var $189=$4;
      var $190=(($189+($188<<2))|0);
      var $191=HEAP32[(($190)>>2)];
      $d0=$191;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $195=$d1;
      var $196=$195 >>> 16;
      $__d12=$196;
      var $197=$d1;
      var $198=$197 & 65535;
      $__d03=$198;
      var $199=$d1;
      var $200=$199 ^ -1;
      var $201=$__d12;
      var $202=Math.floor(((($200)>>>0))/((($201)>>>0)));
      $__q14=$202;
      var $203=$d1;
      var $204=$203 ^ -1;
      var $205=$__q14;
      var $206=$__d12;
      var $207=Math.imul($205,$206);
      var $208=((($204)-($207))|0);
      $__r16=$208;
      var $209=$__q14;
      var $210=$__d03;
      var $211=Math.imul($209,$210);
      $__m8=$211;
      var $212=$__r16;
      var $213=($212<<16);
      var $214=$213 | 65535;
      $__r16=$214;
      var $215=$__r16;
      var $216=$__m8;
      var $217=(($215)>>>0) < (($216)>>>0);
      if ($217) { label = 30; break; } else { label = 35; break; }
    case 30: 
      var $219=$__q14;
      var $220=((($219)-(1))|0);
      $__q14=$220;
      var $221=$d1;
      var $222=$__r16;
      var $223=((($222)+($221))|0);
      $__r16=$223;
      var $224=$__r16;
      var $225=$d1;
      var $226=(($224)>>>0) >= (($225)>>>0);
      if ($226) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $228=$__r16;
      var $229=$__m8;
      var $230=(($228)>>>0) < (($229)>>>0);
      if ($230) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $232=$__q14;
      var $233=((($232)-(1))|0);
      $__q14=$233;
      var $234=$d1;
      var $235=$__r16;
      var $236=((($235)+($234))|0);
      $__r16=$236;
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $240=$__m8;
      var $241=$__r16;
      var $242=((($241)-($240))|0);
      $__r16=$242;
      var $243=$__r16;
      var $244=$__d12;
      var $245=Math.floor(((($243)>>>0))/((($244)>>>0)));
      $__q05=$245;
      var $246=$__r16;
      var $247=$__q05;
      var $248=$__d12;
      var $249=Math.imul($247,$248);
      var $250=((($246)-($249))|0);
      $__r07=$250;
      var $251=$__q05;
      var $252=$__d03;
      var $253=Math.imul($251,$252);
      $__m8=$253;
      var $254=$__r07;
      var $255=($254<<16);
      var $256=$255 | 65535;
      $__r07=$256;
      var $257=$__r07;
      var $258=$__m8;
      var $259=(($257)>>>0) < (($258)>>>0);
      if ($259) { label = 36; break; } else { label = 41; break; }
    case 36: 
      var $261=$__q05;
      var $262=((($261)-(1))|0);
      $__q05=$262;
      var $263=$d1;
      var $264=$__r07;
      var $265=((($264)+($263))|0);
      $__r07=$265;
      var $266=$__r07;
      var $267=$d1;
      var $268=(($266)>>>0) >= (($267)>>>0);
      if ($268) { label = 37; break; } else { label = 40; break; }
    case 37: 
      var $270=$__r07;
      var $271=$__m8;
      var $272=(($270)>>>0) < (($271)>>>0);
      if ($272) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $274=$__q05;
      var $275=((($274)-(1))|0);
      $__q05=$275;
      var $276=$d1;
      var $277=$__r07;
      var $278=((($277)+($276))|0);
      $__r07=$278;
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $282=$__m8;
      var $283=$__r07;
      var $284=((($283)-($282))|0);
      $__r07=$284;
      var $285=$__q14;
      var $286=($285<<16);
      var $287=$__q05;
      var $288=$286 | $287;
      $_v=$288;
      var $289=$__r07;
      $dummy1=$289;
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $292=$d1;
      var $293=$_v;
      var $294=Math.imul($292,$293);
      $_p=$294;
      var $295=$d0;
      var $296=$_p;
      var $297=((($296)+($295))|0);
      $_p=$297;
      var $298=$_p;
      var $299=$d0;
      var $300=(($298)>>>0) < (($299)>>>0);
      if ($300) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $302=$_v;
      var $303=((($302)-(1))|0);
      $_v=$303;
      var $304=$_p;
      var $305=$d1;
      var $306=(($304)>>>0) >= (($305)>>>0);
      var $307=(($306)&1);
      var $308=(((-$307))|0);
      $_mask=$308;
      var $309=$d1;
      var $310=$_p;
      var $311=((($310)-($309))|0);
      $_p=$311;
      var $312=$_mask;
      var $313=$_v;
      var $314=((($313)+($312))|0);
      $_v=$314;
      var $315=$_mask;
      var $316=$d1;
      var $317=$315 & $316;
      var $318=$_p;
      var $319=((($318)-($317))|0);
      $_p=$319;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $322=$d0;
      $__u17=$322;
      var $323=$_v;
      $__v18=$323;
      var $324=$__u17;
      var $325=$324 & 65535;
      $__ul13=$325;
      var $326=$__u17;
      var $327=$326 >>> 16;
      $__uh15=$327;
      var $328=$__v18;
      var $329=$328 & 65535;
      $__vl14=$329;
      var $330=$__v18;
      var $331=$330 >>> 16;
      $__vh16=$331;
      var $332=$__ul13;
      var $333=$__vl14;
      var $334=Math.imul($332,$333);
      $__x09=$334;
      var $335=$__ul13;
      var $336=$__vh16;
      var $337=Math.imul($335,$336);
      $__x110=$337;
      var $338=$__uh15;
      var $339=$__vl14;
      var $340=Math.imul($338,$339);
      $__x211=$340;
      var $341=$__uh15;
      var $342=$__vh16;
      var $343=Math.imul($341,$342);
      $__x312=$343;
      var $344=$__x09;
      var $345=$344 >>> 16;
      var $346=$__x110;
      var $347=((($346)+($345))|0);
      $__x110=$347;
      var $348=$__x211;
      var $349=$__x110;
      var $350=((($349)+($348))|0);
      $__x110=$350;
      var $351=$__x110;
      var $352=$__x211;
      var $353=(($351)>>>0) < (($352)>>>0);
      if ($353) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $355=$__x312;
      var $356=((($355)+(65536))|0);
      $__x312=$356;
      label = 48; break;
    case 48: 
      var $358=$__x312;
      var $359=$__x110;
      var $360=$359 >>> 16;
      var $361=((($358)+($360))|0);
      $_t1=$361;
      var $362=$__x110;
      var $363=$362 << 16;
      var $364=$__x09;
      var $365=$364 & 65535;
      var $366=((($363)+($365))|0);
      $_t0=$366;
      label = 49; break;
    case 49: 
      var $368=$_t1;
      var $369=$_p;
      var $370=((($369)+($368))|0);
      $_p=$370;
      var $371=$_p;
      var $372=$_t1;
      var $373=(($371)>>>0) < (($372)>>>0);
      if ($373) { label = 50; break; } else { label = 56; break; }
    case 50: 
      var $375=$_v;
      var $376=((($375)-(1))|0);
      $_v=$376;
      var $377=$_p;
      var $378=$d1;
      var $379=(($377)>>>0) >= (($378)>>>0);
      var $380=$379 ^ 1;
      var $381=$380 ^ 1;
      var $382=(($381)&1);
      var $383=($382);
      var $384=(($383)|0)!=0;
      if ($384) { label = 51; break; } else { label = 55; break; }
    case 51: 
      var $386=$_p;
      var $387=$d1;
      var $388=(($386)>>>0) > (($387)>>>0);
      if ($388) { label = 53; break; } else { label = 52; break; }
    case 52: 
      var $390=$_t0;
      var $391=$d0;
      var $392=(($390)>>>0) >= (($391)>>>0);
      if ($392) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $394=$_v;
      var $395=((($394)-(1))|0);
      $_v=$395;
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $399=$_v;
      var $400=(($dinv2)|0);
      HEAP32[(($400)>>2)]=$399;
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $403=$5;
      var $404=(($403)|0) > 1;
      if ($404) { label = 59; break; } else { label = 92; break; }
    case 59: 
      var $406=$5;
      var $407=((($406)-(1))|0);
      var $408=$3;
      var $409=(($408+($407<<2))|0);
      var $410=HEAP32[(($409)>>2)];
      var $411=$d1;
      var $412=(($410)|0)==(($411)|0);
      if ($412) { label = 60; break; } else { var $422 = 0;label = 61; break; }
    case 60: 
      var $414=$5;
      var $415=((($414)-(2))|0);
      var $416=$3;
      var $417=(($416+($415<<2))|0);
      var $418=HEAP32[(($417)>>2)];
      var $419=$d0;
      var $420=(($418)|0)==(($419)|0);
      var $422 = $420;label = 61; break;
    case 61: 
      var $422;
      var $423=$422 ^ 1;
      var $424=$423 ^ 1;
      var $425=(($424)&1);
      var $426=($425);
      var $427=(($426)|0)!=0;
      if ($427) { label = 62; break; } else { label = 63; break; }
    case 62: 
      $q2=-1;
      label = 89; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $432=$5;
      var $433=((($432)-(1))|0);
      var $434=$3;
      var $435=(($434+($433<<2))|0);
      var $436=HEAP32[(($435)>>2)];
      $__u30=$436;
      var $437=(($dinv2)|0);
      var $438=HEAP32[(($437)>>2)];
      $__v31=$438;
      var $439=$__u30;
      var $440=$439 & 65535;
      $__ul26=$440;
      var $441=$__u30;
      var $442=$441 >>> 16;
      $__uh28=$442;
      var $443=$__v31;
      var $444=$443 & 65535;
      $__vl27=$444;
      var $445=$__v31;
      var $446=$445 >>> 16;
      $__vh29=$446;
      var $447=$__ul26;
      var $448=$__vl27;
      var $449=Math.imul($447,$448);
      $__x022=$449;
      var $450=$__ul26;
      var $451=$__vh29;
      var $452=Math.imul($450,$451);
      $__x123=$452;
      var $453=$__uh28;
      var $454=$__vl27;
      var $455=Math.imul($453,$454);
      $__x224=$455;
      var $456=$__uh28;
      var $457=$__vh29;
      var $458=Math.imul($456,$457);
      $__x325=$458;
      var $459=$__x022;
      var $460=$459 >>> 16;
      var $461=$__x123;
      var $462=((($461)+($460))|0);
      $__x123=$462;
      var $463=$__x224;
      var $464=$__x123;
      var $465=((($464)+($463))|0);
      $__x123=$465;
      var $466=$__x123;
      var $467=$__x224;
      var $468=(($466)>>>0) < (($467)>>>0);
      if ($468) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $470=$__x325;
      var $471=((($470)+(65536))|0);
      $__x325=$471;
      label = 67; break;
    case 67: 
      var $473=$__x325;
      var $474=$__x123;
      var $475=$474 >>> 16;
      var $476=((($473)+($475))|0);
      $q2=$476;
      var $477=$__x123;
      var $478=$477 << 16;
      var $479=$__x022;
      var $480=$479 & 65535;
      var $481=((($478)+($480))|0);
      $_q0=$481;
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $484=$_q0;
      var $485=$5;
      var $486=((($485)-(2))|0);
      var $487=$3;
      var $488=(($487+($486<<2))|0);
      var $489=HEAP32[(($488)>>2)];
      var $490=((($484)+($489))|0);
      $__x=$490;
      var $491=$q2;
      var $492=$5;
      var $493=((($492)-(1))|0);
      var $494=$3;
      var $495=(($494+($493<<2))|0);
      var $496=HEAP32[(($495)>>2)];
      var $497=((($491)+($496))|0);
      var $498=$__x;
      var $499=$_q0;
      var $500=(($498)>>>0) < (($499)>>>0);
      var $501=(($500)&1);
      var $502=((($497)+($501))|0);
      $q2=$502;
      var $503=$__x;
      $_q0=$503;
      label = 70; break;
    case 70: 
      var $505=$5;
      var $506=((($505)-(2))|0);
      var $507=$3;
      var $508=(($507+($506<<2))|0);
      var $509=HEAP32[(($508)>>2)];
      var $510=$d1;
      var $511=$q2;
      var $512=Math.imul($510,$511);
      var $513=((($509)-($512))|0);
      $q1=$513;
      var $514=$5;
      var $515=((($514)-(3))|0);
      var $516=$3;
      var $517=(($516+($515<<2))|0);
      var $518=HEAP32[(($517)>>2)];
      $q0=$518;
      label = 71; break;
    case 71: 
      var $520=$q0;
      var $521=$d0;
      var $522=((($520)-($521))|0);
      $__x32=$522;
      var $523=$q1;
      var $524=$d1;
      var $525=((($523)-($524))|0);
      var $526=$q0;
      var $527=$d0;
      var $528=(($526)>>>0) < (($527)>>>0);
      var $529=(($528)&1);
      var $530=((($525)-($529))|0);
      $q1=$530;
      var $531=$__x32;
      $q0=$531;
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $534=$d0;
      $__u41=$534;
      var $535=$q2;
      $__v42=$535;
      var $536=$__u41;
      var $537=$536 & 65535;
      $__ul37=$537;
      var $538=$__u41;
      var $539=$538 >>> 16;
      $__uh39=$539;
      var $540=$__v42;
      var $541=$540 & 65535;
      $__vl38=$541;
      var $542=$__v42;
      var $543=$542 >>> 16;
      $__vh40=$543;
      var $544=$__ul37;
      var $545=$__vl38;
      var $546=Math.imul($544,$545);
      $__x033=$546;
      var $547=$__ul37;
      var $548=$__vh40;
      var $549=Math.imul($547,$548);
      $__x134=$549;
      var $550=$__uh39;
      var $551=$__vl38;
      var $552=Math.imul($550,$551);
      $__x235=$552;
      var $553=$__uh39;
      var $554=$__vh40;
      var $555=Math.imul($553,$554);
      $__x336=$555;
      var $556=$__x033;
      var $557=$556 >>> 16;
      var $558=$__x134;
      var $559=((($558)+($557))|0);
      $__x134=$559;
      var $560=$__x235;
      var $561=$__x134;
      var $562=((($561)+($560))|0);
      $__x134=$562;
      var $563=$__x134;
      var $564=$__x235;
      var $565=(($563)>>>0) < (($564)>>>0);
      if ($565) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $567=$__x336;
      var $568=((($567)+(65536))|0);
      $__x336=$568;
      label = 75; break;
    case 75: 
      var $570=$__x336;
      var $571=$__x134;
      var $572=$571 >>> 16;
      var $573=((($570)+($572))|0);
      $_t119=$573;
      var $574=$__x134;
      var $575=$574 << 16;
      var $576=$__x033;
      var $577=$576 & 65535;
      var $578=((($575)+($577))|0);
      $_t020=$578;
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $581=$q0;
      var $582=$_t020;
      var $583=((($581)-($582))|0);
      $__x43=$583;
      var $584=$q1;
      var $585=$_t119;
      var $586=((($584)-($585))|0);
      var $587=$q0;
      var $588=$_t020;
      var $589=(($587)>>>0) < (($588)>>>0);
      var $590=(($589)&1);
      var $591=((($586)-($590))|0);
      $q1=$591;
      var $592=$__x43;
      $q0=$592;
      label = 78; break;
    case 78: 
      var $594=$q2;
      var $595=((($594)+(1))|0);
      $q2=$595;
      var $596=$q1;
      var $597=$_q0;
      var $598=(($596)>>>0) >= (($597)>>>0);
      var $599=(($598)&1);
      var $600=(((-$599))|0);
      $_mask21=$600;
      var $601=$_mask21;
      var $602=$q2;
      var $603=((($602)+($601))|0);
      $q2=$603;
      label = 79; break;
    case 79: 
      var $605=$q0;
      var $606=$_mask21;
      var $607=$d0;
      var $608=$606 & $607;
      var $609=((($605)+($608))|0);
      $__x44=$609;
      var $610=$q1;
      var $611=$_mask21;
      var $612=$d1;
      var $613=$611 & $612;
      var $614=((($610)+($613))|0);
      var $615=$__x44;
      var $616=$q0;
      var $617=(($615)>>>0) < (($616)>>>0);
      var $618=(($617)&1);
      var $619=((($614)+($618))|0);
      $q1=$619;
      var $620=$__x44;
      $q0=$620;
      label = 80; break;
    case 80: 
      var $622=$q1;
      var $623=$d1;
      var $624=(($622)>>>0) >= (($623)>>>0);
      var $625=$624 ^ 1;
      var $626=$625 ^ 1;
      var $627=(($626)&1);
      var $628=($627);
      var $629=(($628)|0)!=0;
      if ($629) { label = 81; break; } else { label = 87; break; }
    case 81: 
      var $631=$q1;
      var $632=$d1;
      var $633=(($631)>>>0) > (($632)>>>0);
      if ($633) { label = 83; break; } else { label = 82; break; }
    case 82: 
      var $635=$q0;
      var $636=$d0;
      var $637=(($635)>>>0) >= (($636)>>>0);
      if ($637) { label = 83; break; } else { label = 86; break; }
    case 83: 
      var $639=$q2;
      var $640=((($639)+(1))|0);
      $q2=$640;
      label = 84; break;
    case 84: 
      var $642=$q0;
      var $643=$d0;
      var $644=((($642)-($643))|0);
      $__x45=$644;
      var $645=$q1;
      var $646=$d1;
      var $647=((($645)-($646))|0);
      var $648=$q0;
      var $649=$d0;
      var $650=(($648)>>>0) < (($649)>>>0);
      var $651=(($650)&1);
      var $652=((($647)-($651))|0);
      $q1=$652;
      var $653=$__x45;
      $q0=$653;
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $659=$3;
      var $660=((($659)-(4))|0);
      var $661=$4;
      var $662=$5;
      var $663=$q2;
      var $664=___gmpn_submul_1($660, $661, $662, $663);
      $q0=$664;
      var $665=$q0;
      var $666=$5;
      var $667=((($666)-(1))|0);
      var $668=$3;
      var $669=(($668+($667<<2))|0);
      var $670=HEAP32[(($669)>>2)];
      var $671=(($665)>>>0) > (($670)>>>0);
      var $672=$671 ^ 1;
      var $673=$672 ^ 1;
      var $674=(($673)&1);
      var $675=($674);
      var $676=(($675)|0)!=0;
      if ($676) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $678=$3;
      var $679=((($678)-(4))|0);
      var $680=$3;
      var $681=((($680)-(4))|0);
      var $682=$4;
      var $683=$5;
      var $684=___gmpn_add_n($679, $681, $682, $683);
      var $685=$q2;
      var $686=((($685)-(1))|0);
      $q2=$686;
      label = 91; break;
    case 91: 
      var $688=$q2;
      var $689=$5;
      var $690=((($689)-(1))|0);
      $5=$690;
      var $691=$2;
      var $692=(($691+($690<<2))|0);
      HEAP32[(($692)>>2)]=$688;
      var $693=$4;
      var $694=(($693+4)|0);
      $4=$694;
      label = 58; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $697=$3;
      var $698=(($697)|0);
      var $699=HEAP32[(($698)>>2)];
      $__u54=$699;
      var $700=(($dinv2)|0);
      var $701=HEAP32[(($700)>>2)];
      $__v55=$701;
      var $702=$__u54;
      var $703=$702 & 65535;
      $__ul50=$703;
      var $704=$__u54;
      var $705=$704 >>> 16;
      $__uh52=$705;
      var $706=$__v55;
      var $707=$706 & 65535;
      $__vl51=$707;
      var $708=$__v55;
      var $709=$708 >>> 16;
      $__vh53=$709;
      var $710=$__ul50;
      var $711=$__vl51;
      var $712=Math.imul($710,$711);
      $__x046=$712;
      var $713=$__ul50;
      var $714=$__vh53;
      var $715=Math.imul($713,$714);
      $__x147=$715;
      var $716=$__uh52;
      var $717=$__vl51;
      var $718=Math.imul($716,$717);
      $__x248=$718;
      var $719=$__uh52;
      var $720=$__vh53;
      var $721=Math.imul($719,$720);
      $__x349=$721;
      var $722=$__x046;
      var $723=$722 >>> 16;
      var $724=$__x147;
      var $725=((($724)+($723))|0);
      $__x147=$725;
      var $726=$__x248;
      var $727=$__x147;
      var $728=((($727)+($726))|0);
      $__x147=$728;
      var $729=$__x147;
      var $730=$__x248;
      var $731=(($729)>>>0) < (($730)>>>0);
      if ($731) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $733=$__x349;
      var $734=((($733)+(65536))|0);
      $__x349=$734;
      label = 95; break;
    case 95: 
      var $736=$__x349;
      var $737=$__x147;
      var $738=$737 >>> 16;
      var $739=((($736)+($738))|0);
      $q1=$739;
      var $740=$__x147;
      var $741=$740 << 16;
      var $742=$__x046;
      var $743=$742 & 65535;
      var $744=((($741)+($743))|0);
      $q0=$744;
      label = 96; break;
    case 96: 
      var $746=$3;
      var $747=(($746)|0);
      var $748=HEAP32[(($747)>>2)];
      var $749=$q1;
      var $750=((($748)+($749))|0);
      var $751=$2;
      var $752=(($751)|0);
      HEAP32[(($752)>>2)]=$750;
      var $753=$qh;
      $1=$753;
      label = 97; break;
    case 97: 
      var $755=$1;
      STACKTOP = __stackBase__;
      return $755;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_divhigh_n_basecase["X"]=1;

function ___gmp_get_memory_functions($alloc_func, $realloc_func, $free_func) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      $1=$alloc_func;
      $2=$realloc_func;
      $3=$free_func;
      var $4=$1;
      var $5=(($4)|0)!=0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=HEAP32[((5257808)>>2)];
      var $8=$1;
      HEAP32[(($8)>>2)]=$7;
      label = 4; break;
    case 4: 
      var $10=$2;
      var $11=(($10)|0)!=0;
      if ($11) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $13=HEAP32[((5257660)>>2)];
      var $14=$2;
      HEAP32[(($14)>>2)]=$13;
      label = 6; break;
    case 6: 
      var $16=$3;
      var $17=(($16)|0)!=0;
      if ($17) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $19=HEAP32[((5257668)>>2)];
      var $20=$3;
      HEAP32[(($20)>>2)]=$19;
      label = 8; break;
    case 8: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_add_1($__gmp_dst, $__gmp_src, $__gmp_size, $__gmp_n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $__gmp_c;
      var $__gmp_i;
      var $__gmp_x;
      var $__gmp_r;
      var $__gmp_j;
      var $__gmp_j1;
      $1=$__gmp_dst;
      $2=$__gmp_src;
      $3=$__gmp_size;
      $4=$__gmp_n;
      label = 3; break;
    case 3: 
      var $6=$2;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      $__gmp_x=$8;
      var $9=$__gmp_x;
      var $10=$4;
      var $11=((($9)+($10))|0);
      $__gmp_r=$11;
      var $12=$__gmp_r;
      var $13=$1;
      var $14=(($13)|0);
      HEAP32[(($14)>>2)]=$12;
      var $15=$__gmp_r;
      var $16=$4;
      var $17=(($15)>>>0) < (($16)>>>0);
      if ($17) { label = 4; break; } else { label = 18; break; }
    case 4: 
      $__gmp_c=1;
      $__gmp_i=1;
      label = 5; break;
    case 5: 
      var $20=$__gmp_i;
      var $21=$3;
      var $22=(($20)|0) < (($21)|0);
      if ($22) { label = 6; break; } else { label = 17; break; }
    case 6: 
      var $24=$__gmp_i;
      var $25=$2;
      var $26=(($25+($24<<2))|0);
      var $27=HEAP32[(($26)>>2)];
      $__gmp_x=$27;
      var $28=$__gmp_x;
      var $29=((($28)+(1))|0);
      $__gmp_r=$29;
      var $30=$__gmp_r;
      var $31=$__gmp_i;
      var $32=$1;
      var $33=(($32+($31<<2))|0);
      HEAP32[(($33)>>2)]=$30;
      var $34=$__gmp_i;
      var $35=((($34)+(1))|0);
      $__gmp_i=$35;
      var $36=$__gmp_r;
      var $37=(($36)>>>0) < 1;
      if ($37) { label = 16; break; } else { label = 7; break; }
    case 7: 
      var $39=$2;
      var $40=$1;
      var $41=(($39)|0)!=(($40)|0);
      if ($41) { label = 8; break; } else { label = 15; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $44=$__gmp_i;
      $__gmp_j=$44;
      label = 10; break;
    case 10: 
      var $46=$__gmp_j;
      var $47=$3;
      var $48=(($46)|0) < (($47)|0);
      if ($48) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $50=$__gmp_j;
      var $51=$2;
      var $52=(($51+($50<<2))|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$__gmp_j;
      var $55=$1;
      var $56=(($55+($54<<2))|0);
      HEAP32[(($56)>>2)]=$53;
      label = 12; break;
    case 12: 
      var $58=$__gmp_j;
      var $59=((($58)+(1))|0);
      $__gmp_j=$59;
      label = 10; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      $__gmp_c=0;
      label = 17; break;
    case 16: 
      label = 5; break;
    case 17: 
      label = 27; break;
    case 18: 
      var $66=$2;
      var $67=$1;
      var $68=(($66)|0)!=(($67)|0);
      if ($68) { label = 19; break; } else { label = 26; break; }
    case 19: 
      label = 20; break;
    case 20: 
      $__gmp_j1=1;
      label = 21; break;
    case 21: 
      var $72=$__gmp_j1;
      var $73=$3;
      var $74=(($72)|0) < (($73)|0);
      if ($74) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $76=$__gmp_j1;
      var $77=$2;
      var $78=(($77+($76<<2))|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$__gmp_j1;
      var $81=$1;
      var $82=(($81+($80<<2))|0);
      HEAP32[(($82)>>2)]=$79;
      label = 23; break;
    case 23: 
      var $84=$__gmp_j1;
      var $85=((($84)+(1))|0);
      $__gmp_j1=$85;
      label = 21; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      $__gmp_c=0;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $91=$__gmp_c;

      return $91;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_add_1["X"]=1;

function ___gmpn_add_n($rp, $up, $vp, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ul;
      var $vl;
      var $sl;
      var $rl;
      var $cy;
      var $cy1;
      var $cy2;
      $1=$rp;
      $2=$up;
      $3=$vp;
      $4=$n;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      $cy=0;
      label = 9; break;
    case 9: 
      var $12=$2;
      var $13=(($12+4)|0);
      $2=$13;
      var $14=HEAP32[(($12)>>2)];
      $ul=$14;
      var $15=$3;
      var $16=(($15+4)|0);
      $3=$16;
      var $17=HEAP32[(($15)>>2)];
      $vl=$17;
      var $18=$ul;
      var $19=$vl;
      var $20=((($18)+($19))|0);
      $sl=$20;
      var $21=$sl;
      var $22=$ul;
      var $23=(($21)>>>0) < (($22)>>>0);
      var $24=(($23)&1);
      $cy1=$24;
      var $25=$sl;
      var $26=$cy;
      var $27=((($25)+($26))|0);
      $rl=$27;
      var $28=$rl;
      var $29=$sl;
      var $30=(($28)>>>0) < (($29)>>>0);
      var $31=(($30)&1);
      $cy2=$31;
      var $32=$cy1;
      var $33=$cy2;
      var $34=$32 | $33;
      $cy=$34;
      var $35=$rl;
      var $36=$1;
      var $37=(($36+4)|0);
      $1=$37;
      HEAP32[(($36)>>2)]=$35;
      label = 10; break;
    case 10: 
      var $39=$4;
      var $40=((($39)-(1))|0);
      $4=$40;
      var $41=(($40)|0)!=0;
      if ($41) { label = 9; break; } else { label = 11; break; }
    case 11: 
      var $43=$cy;

      return $43;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_add_n["X"]=1;

function _mpfr_round_p($bp, $bn, $err0, $prec) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $err;
      var $k;
      var $n;
      var $tmp;
      var $mask;
      var $s;
      $2=$bp;
      $3=$bn;
      $4=$err0;
      $5=$prec;
      var $6=$3;
      var $7=($6<<5);
      $err=$7;
      var $8=$4;
      var $9=(($8)|0) <= 0;
      if ($9) { var $19 = 1;label = 5; break; } else { label = 3; break; }
    case 3: 
      var $11=$4;
      var $12=$5;
      var $13=(($11)>>>0) <= (($12)>>>0);
      if ($13) { var $19 = 1;label = 5; break; } else { label = 4; break; }
    case 4: 
      var $15=$5;
      var $16=$err;
      var $17=(($15)|0) >= (($16)|0);
      var $19 = $17;label = 5; break;
    case 5: 
      var $19;
      var $20=$19 ^ 1;
      var $21=$20 ^ 1;
      var $22=(($21)&1);
      var $23=($22);
      var $24=(($23)|0)!=0;
      if ($24) { label = 6; break; } else { label = 7; break; }
    case 6: 
      $1=0;
      label = 36; break;
    case 7: 
      var $27=$err;
      var $28=$4;
      var $29=(($27)>>>0) < (($28)>>>0);
      if ($29) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $31=$err;
      var $35 = $31;label = 10; break;
    case 9: 
      var $33=$4;
      var $35 = $33;label = 10; break;
    case 10: 
      var $35;
      $err=$35;
      var $36=$5;
      var $37=((((($36)|0))/(32))&-1);
      $k=$37;
      var $38=$5;
      var $39=((($38)|0))%(32);
      var $40=(((32)-($39))|0);
      $s=$40;
      var $41=$err;
      var $42=((((($41)|0))/(32))&-1);
      var $43=$k;
      var $44=((($42)-($43))|0);
      $n=$44;
      var $45=$3;
      var $46=((($45)-(1))|0);
      var $47=$k;
      var $48=((($46)-($47))|0);
      var $49=$2;
      var $50=(($49+($48<<2))|0);
      $2=$50;
      var $51=$2;
      var $52=((($51)-(4))|0);
      $2=$52;
      var $53=HEAP32[(($51)>>2)];
      $tmp=$53;
      var $54=$s;
      var $55=(($54)|0)==32;
      if ($55) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $62 = -1;label = 13; break;
    case 12: 
      var $58=$s;
      var $59=1 << $58;
      var $60=((($59)-(1))|0);
      var $62 = $60;label = 13; break;
    case 13: 
      var $62;
      $mask=$62;
      var $63=$mask;
      var $64=$tmp;
      var $65=$64 & $63;
      $tmp=$65;
      var $66=$n;
      var $67=(($66)|0)==0;
      var $68=$67 ^ 1;
      var $69=$68 ^ 1;
      var $70=(($69)&1);
      var $71=($70);
      var $72=(($71)|0)!=0;
      if ($72) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $74=$err;
      var $75=((($74)|0))%(32);
      var $76=(((32)-($75))|0);
      $s=$76;
      var $77=$s;
      var $78=$tmp;
      var $79=$78 >>> (($77)>>>0);
      $tmp=$79;
      var $80=$s;
      var $81=$mask;
      var $82=$81 >>> (($80)>>>0);
      $mask=$82;
      var $83=$tmp;
      var $84=(($83)|0)!=0;
      if ($84) { label = 15; break; } else { var $90 = 0;label = 16; break; }
    case 15: 
      var $86=$tmp;
      var $87=$mask;
      var $88=(($86)|0)!=(($87)|0);
      var $90 = $88;label = 16; break;
    case 16: 
      var $90;
      var $91=(($90)&1);
      $1=$91;
      label = 36; break;
    case 17: 
      var $93=$tmp;
      var $94=(($93)|0)==0;
      var $95=$94 ^ 1;
      var $96=$95 ^ 1;
      var $97=(($96)&1);
      var $98=($97);
      var $99=(($98)|0)!=0;
      if ($99) { label = 18; break; } else { label = 26; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $102=$n;
      var $103=((($102)-(1))|0);
      $n=$103;
      var $104=(($103)|0)!=0;
      if ($104) { label = 20; break; } else { label = 23; break; }
    case 20: 
      var $106=$2;
      var $107=((($106)-(4))|0);
      $2=$107;
      var $108=HEAP32[(($106)>>2)];
      var $109=(($108)|0)!=0;
      if ($109) { label = 21; break; } else { label = 22; break; }
    case 21: 
      $1=1;
      label = 36; break;
    case 22: 
      label = 19; break;
    case 23: 
      var $113=$err;
      var $114=((($113)|0))%(32);
      var $115=(((32)-($114))|0);
      $s=$115;
      var $116=$s;
      var $117=(($116)|0)==32;
      if ($117) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $1=0;
      label = 36; break;
    case 25: 
      var $120=$2;
      var $121=HEAP32[(($120)>>2)];
      var $122=$s;
      var $123=$121 >>> (($122)>>>0);
      $tmp=$123;
      var $124=$tmp;
      var $125=(($124)|0)!=0;
      var $126=(($125)&1);
      $1=$126;
      label = 36; break;
    case 26: 
      var $128=$tmp;
      var $129=$mask;
      var $130=(($128)|0)==(($129)|0);
      var $131=$130 ^ 1;
      var $132=$131 ^ 1;
      var $133=(($132)&1);
      var $134=($133);
      var $135=(($134)|0)!=0;
      if ($135) { label = 27; break; } else { label = 35; break; }
    case 27: 
      label = 28; break;
    case 28: 
      var $138=$n;
      var $139=((($138)-(1))|0);
      $n=$139;
      var $140=(($139)|0)!=0;
      if ($140) { label = 29; break; } else { label = 32; break; }
    case 29: 
      var $142=$2;
      var $143=((($142)-(4))|0);
      $2=$143;
      var $144=HEAP32[(($142)>>2)];
      var $145=(($144)|0)!=-1;
      if ($145) { label = 30; break; } else { label = 31; break; }
    case 30: 
      $1=1;
      label = 36; break;
    case 31: 
      label = 28; break;
    case 32: 
      var $149=$err;
      var $150=((($149)|0))%(32);
      var $151=(((32)-($150))|0);
      $s=$151;
      var $152=$s;
      var $153=(($152)|0)==32;
      if ($153) { label = 33; break; } else { label = 34; break; }
    case 33: 
      $1=0;
      label = 36; break;
    case 34: 
      var $156=$2;
      var $157=HEAP32[(($156)>>2)];
      var $158=$s;
      var $159=$157 >>> (($158)>>>0);
      $tmp=$159;
      var $160=$tmp;
      var $161=$s;
      var $162=-1 >>> (($161)>>>0);
      var $163=(($160)|0)!=(($162)|0);
      var $164=(($163)&1);
      $1=$164;
      label = 36; break;
    case 35: 
      $1=1;
      label = 36; break;
    case 36: 
      var $167=$1;

      return $167;
    default: assert(0, "bad label: " + label);
  }

}
_mpfr_round_p["X"]=1;

function ___gmp_assert_header($filename, $linenum) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      $1=$filename;
      $2=$linenum;
      var $3=$1;
      var $4=(($3)|0)!=0;
      if ($4) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $6=$1;
      var $7=(($6)|0);
      var $8=HEAP8[($7)];
      var $9=(($8 << 24) >> 24);
      var $10=(($9)|0)!=0;
      if ($10) { label = 4; break; } else { label = 7; break; }
    case 4: 
      var $12=HEAP32[((_stderr)>>2)];
      var $13=$1;
      var $14=_fprintf($12, ((5249308)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$13,tempInt));
      var $15=$2;
      var $16=(($15)|0)!=-1;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $18=HEAP32[((_stderr)>>2)];
      var $19=$2;
      var $20=_fprintf($18, ((5249736)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$19,tempInt));
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmp_default_free($blk_ptr, $blk_size) {
  var label = 0;


  var $1;
  var $2;
  $1=$blk_ptr;
  $2=$blk_size;
  var $3=$1;
  _free($3);

  return;
}


function ___gmp_tmp_reentrant_alloc($markp, $size) {
  var label = 0;


  var $1;
  var $2;
  var $p;
  var $total_size;
  $1=$markp;
  $2=$size;
  var $3=$2;
  var $4=((($3)+(8))|0);
  $total_size=$4;
  var $5=HEAP32[((5257808)>>2)];
  var $6=$total_size;
  var $7=FUNCTION_TABLE[$5]($6);
  $p=$7;
  var $8=$total_size;
  var $9=$p;
  var $10=$9;
  var $11=(($10+4)|0);
  HEAP32[(($11)>>2)]=$8;
  var $12=$1;
  var $13=HEAP32[(($12)>>2)];
  var $14=$p;
  var $15=$14;
  var $16=(($15)|0);
  HEAP32[(($16)>>2)]=$13;
  var $17=$p;
  var $18=$17;
  var $19=$1;
  HEAP32[(($19)>>2)]=$18;
  var $20=$p;
  var $21=(($20+8)|0);

  return $21;
}


function ___gmp_tmp_reentrant_free($mark) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $next;
      $1=$mark;
      label = 3; break;
    case 3: 
      var $3=$1;
      var $4=(($3)|0)!=0;
      if ($4) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $6=$1;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      $next=$8;
      var $9=HEAP32[((5257668)>>2)];
      var $10=$1;
      var $11=$10;
      var $12=$1;
      var $13=(($12+4)|0);
      var $14=HEAP32[(($13)>>2)];
      FUNCTION_TABLE[$9]($11, $14);
      var $15=$next;
      $1=$15;
      label = 3; break;
    case 5: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_add($__gmp_wp, $__gmp_xp, $__gmp_xsize, $__gmp_yp, $__gmp_ysize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $__gmp_c;
      var $__gmp_i;
      var $__gmp_x;
      var $__gmp_j;
      $1=$__gmp_wp;
      $2=$__gmp_xp;
      $3=$__gmp_xsize;
      $4=$__gmp_yp;
      $5=$__gmp_ysize;
      label = 3; break;
    case 3: 
      var $7=$5;
      $__gmp_i=$7;
      var $8=$__gmp_i;
      var $9=(($8)|0)!=0;
      if ($9) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13=$4;
      var $14=$__gmp_i;
      var $15=___gmpn_add_n($11, $12, $13, $14);
      var $16=(($15)|0)!=0;
      if ($16) { label = 5; break; } else { label = 11; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $19=$__gmp_i;
      var $20=$3;
      var $21=(($19)|0) >= (($20)|0);
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $__gmp_c=1;
      label = 21; break;
    case 8: 
      var $24=$__gmp_i;
      var $25=$2;
      var $26=(($25+($24<<2))|0);
      var $27=HEAP32[(($26)>>2)];
      $__gmp_x=$27;
      label = 9; break;
    case 9: 
      var $29=$__gmp_x;
      var $30=((($29)+(1))|0);
      var $31=$__gmp_i;
      var $32=((($31)+(1))|0);
      $__gmp_i=$32;
      var $33=$1;
      var $34=(($33+($31<<2))|0);
      HEAP32[(($34)>>2)]=$30;
      var $35=(($30)|0)==0;
      if ($35) { label = 6; break; } else { label = 10; break; }
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $39=$1;
      var $40=$2;
      var $41=(($39)|0)!=(($40)|0);
      if ($41) { label = 13; break; } else { label = 20; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $44=$__gmp_i;
      $__gmp_j=$44;
      label = 15; break;
    case 15: 
      var $46=$__gmp_j;
      var $47=$3;
      var $48=(($46)|0) < (($47)|0);
      if ($48) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $50=$__gmp_j;
      var $51=$2;
      var $52=(($51+($50<<2))|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$__gmp_j;
      var $55=$1;
      var $56=(($55+($54<<2))|0);
      HEAP32[(($56)>>2)]=$53;
      label = 17; break;
    case 17: 
      var $58=$__gmp_j;
      var $59=((($58)+(1))|0);
      $__gmp_j=$59;
      label = 15; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      $__gmp_c=0;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $65=$__gmp_c;

      return $65;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_add["X"]=1;

function ___gmp_assert_fail($filename, $linenum, $expr) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);

  var $1;
  var $2;
  var $3;
  $1=$filename;
  $2=$linenum;
  $3=$expr;
  var $4=$1;
  var $5=$2;
  ___gmp_assert_header($4, $5);
  var $6=HEAP32[((_stderr)>>2)];
  var $7=$3;
  var $8=_fprintf($6, ((5249256)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$7,tempInt));
  _abort();
  throw "Reached an unreachable!"
  STACKTOP = __stackBase__;
  return;
}


function ___gmp_exception($error_bit) {
  var label = 0;


  var $1;
  $1=$error_bit;
  var $2=$1;
  var $3=HEAP32[((5257672)>>2)];
  var $4=$3 | $2;
  HEAP32[((5257672)>>2)]=$4;
  var $5=HEAP32[((5257812)>>2)];
  var $6=(((10)/((($5)|0)))&-1);
  HEAP32[((5257664)>>2)]=$6;
  _abort();
  throw "Reached an unreachable!"

  return;
}


function ___gmp_divide_by_zero() {
  var label = 0;


  ___gmp_exception(2);
  throw "Reached an unreachable!"

  return;
}


function ___gmp_default_allocate($size) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $ret;
      $1=$size;
      var $2=$1;
      var $3=_malloc($2);
      $ret=$3;
      var $4=$ret;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=HEAP32[((_stderr)>>2)];
      var $8=$1;
      var $9=_fprintf($7, ((5248912)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 4)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$8,tempInt));
      _abort();
      throw "Reached an unreachable!"
    case 4: 
      var $11=$ret;
      STACKTOP = __stackBase__;
      return $11;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmp_default_reallocate($oldptr, $old_size, $new_size) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ret;
      $1=$oldptr;
      $2=$old_size;
      $3=$new_size;
      var $4=$1;
      var $5=$3;
      var $6=_realloc($4, $5);
      $ret=$6;
      var $7=$ret;
      var $8=(($7)|0)==0;
      if ($8) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $10=HEAP32[((_stderr)>>2)];
      var $11=$2;
      var $12=$3;
      var $13=_fprintf($10, ((5249552)|0), (tempInt=STACKTOP,STACKTOP = (STACKTOP + 8)|0,assert(STACKTOP|0 < STACK_MAX|0),HEAP32[((tempInt)>>2)]=$11,HEAP32[(((tempInt)+(4))>>2)]=$12,tempInt));
      _abort();
      throw "Reached an unreachable!"
    case 4: 
      var $15=$ret;
      STACKTOP = __stackBase__;
      return $15;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_sub_1($__gmp_dst, $__gmp_src, $__gmp_size, $__gmp_n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $__gmp_c;
      var $__gmp_i;
      var $__gmp_x;
      var $__gmp_r;
      var $__gmp_j;
      var $__gmp_j1;
      $1=$__gmp_dst;
      $2=$__gmp_src;
      $3=$__gmp_size;
      $4=$__gmp_n;
      label = 3; break;
    case 3: 
      var $6=$2;
      var $7=(($6)|0);
      var $8=HEAP32[(($7)>>2)];
      $__gmp_x=$8;
      var $9=$__gmp_x;
      var $10=$4;
      var $11=((($9)-($10))|0);
      $__gmp_r=$11;
      var $12=$__gmp_r;
      var $13=$1;
      var $14=(($13)|0);
      HEAP32[(($14)>>2)]=$12;
      var $15=$__gmp_x;
      var $16=$4;
      var $17=(($15)>>>0) < (($16)>>>0);
      if ($17) { label = 4; break; } else { label = 18; break; }
    case 4: 
      $__gmp_c=1;
      $__gmp_i=1;
      label = 5; break;
    case 5: 
      var $20=$__gmp_i;
      var $21=$3;
      var $22=(($20)|0) < (($21)|0);
      if ($22) { label = 6; break; } else { label = 17; break; }
    case 6: 
      var $24=$__gmp_i;
      var $25=$2;
      var $26=(($25+($24<<2))|0);
      var $27=HEAP32[(($26)>>2)];
      $__gmp_x=$27;
      var $28=$__gmp_x;
      var $29=((($28)-(1))|0);
      $__gmp_r=$29;
      var $30=$__gmp_r;
      var $31=$__gmp_i;
      var $32=$1;
      var $33=(($32+($31<<2))|0);
      HEAP32[(($33)>>2)]=$30;
      var $34=$__gmp_i;
      var $35=((($34)+(1))|0);
      $__gmp_i=$35;
      var $36=$__gmp_x;
      var $37=(($36)>>>0) < 1;
      if ($37) { label = 16; break; } else { label = 7; break; }
    case 7: 
      var $39=$2;
      var $40=$1;
      var $41=(($39)|0)!=(($40)|0);
      if ($41) { label = 8; break; } else { label = 15; break; }
    case 8: 
      label = 9; break;
    case 9: 
      var $44=$__gmp_i;
      $__gmp_j=$44;
      label = 10; break;
    case 10: 
      var $46=$__gmp_j;
      var $47=$3;
      var $48=(($46)|0) < (($47)|0);
      if ($48) { label = 11; break; } else { label = 13; break; }
    case 11: 
      var $50=$__gmp_j;
      var $51=$2;
      var $52=(($51+($50<<2))|0);
      var $53=HEAP32[(($52)>>2)];
      var $54=$__gmp_j;
      var $55=$1;
      var $56=(($55+($54<<2))|0);
      HEAP32[(($56)>>2)]=$53;
      label = 12; break;
    case 12: 
      var $58=$__gmp_j;
      var $59=((($58)+(1))|0);
      $__gmp_j=$59;
      label = 10; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      $__gmp_c=0;
      label = 17; break;
    case 16: 
      label = 5; break;
    case 17: 
      label = 27; break;
    case 18: 
      var $66=$2;
      var $67=$1;
      var $68=(($66)|0)!=(($67)|0);
      if ($68) { label = 19; break; } else { label = 26; break; }
    case 19: 
      label = 20; break;
    case 20: 
      $__gmp_j1=1;
      label = 21; break;
    case 21: 
      var $72=$__gmp_j1;
      var $73=$3;
      var $74=(($72)|0) < (($73)|0);
      if ($74) { label = 22; break; } else { label = 24; break; }
    case 22: 
      var $76=$__gmp_j1;
      var $77=$2;
      var $78=(($77+($76<<2))|0);
      var $79=HEAP32[(($78)>>2)];
      var $80=$__gmp_j1;
      var $81=$1;
      var $82=(($81+($80<<2))|0);
      HEAP32[(($82)>>2)]=$79;
      label = 23; break;
    case 23: 
      var $84=$__gmp_j1;
      var $85=((($84)+(1))|0);
      $__gmp_j1=$85;
      label = 21; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      $__gmp_c=0;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $91=$__gmp_c;

      return $91;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sub_1["X"]=1;

function ___gmpn_sub_n($rp, $up, $vp, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ul;
      var $vl;
      var $sl;
      var $rl;
      var $cy;
      var $cy1;
      var $cy2;
      $1=$rp;
      $2=$up;
      $3=$vp;
      $4=$n;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      $cy=0;
      label = 9; break;
    case 9: 
      var $12=$2;
      var $13=(($12+4)|0);
      $2=$13;
      var $14=HEAP32[(($12)>>2)];
      $ul=$14;
      var $15=$3;
      var $16=(($15+4)|0);
      $3=$16;
      var $17=HEAP32[(($15)>>2)];
      $vl=$17;
      var $18=$ul;
      var $19=$vl;
      var $20=((($18)-($19))|0);
      $sl=$20;
      var $21=$sl;
      var $22=$ul;
      var $23=(($21)>>>0) > (($22)>>>0);
      var $24=(($23)&1);
      $cy1=$24;
      var $25=$sl;
      var $26=$cy;
      var $27=((($25)-($26))|0);
      $rl=$27;
      var $28=$rl;
      var $29=$sl;
      var $30=(($28)>>>0) > (($29)>>>0);
      var $31=(($30)&1);
      $cy2=$31;
      var $32=$cy1;
      var $33=$cy2;
      var $34=$32 | $33;
      $cy=$34;
      var $35=$rl;
      var $36=$1;
      var $37=(($36+4)|0);
      $1=$37;
      HEAP32[(($36)>>2)]=$35;
      label = 10; break;
    case 10: 
      var $39=$4;
      var $40=((($39)-(1))|0);
      $4=$40;
      var $41=(($40)|0)!=0;
      if ($41) { label = 9; break; } else { label = 11; break; }
    case 11: 
      var $43=$cy;

      return $43;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sub_n["X"]=1;

function ___gmpn_mul_1($rp, $up, $n, $vl) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ul;
      var $cl;
      var $hpl;
      var $lpl;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      $1=$rp;
      $2=$up;
      $3=$n;
      $4=$vl;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      $cl=0;
      label = 7; break;
    case 7: 
      var $10=$2;
      var $11=(($10+4)|0);
      $2=$11;
      var $12=HEAP32[(($10)>>2)];
      $ul=$12;
      label = 8; break;
    case 8: 
      var $14=$ul;
      $__u=$14;
      var $15=$4;
      $__v=$15;
      var $16=$__u;
      var $17=$16 & 65535;
      $__ul=$17;
      var $18=$__u;
      var $19=$18 >>> 16;
      $__uh=$19;
      var $20=$__v;
      var $21=$20 & 65535;
      $__vl=$21;
      var $22=$__v;
      var $23=$22 >>> 16;
      $__vh=$23;
      var $24=$__ul;
      var $25=$__vl;
      var $26=Math.imul($24,$25);
      $__x0=$26;
      var $27=$__ul;
      var $28=$__vh;
      var $29=Math.imul($27,$28);
      $__x1=$29;
      var $30=$__uh;
      var $31=$__vl;
      var $32=Math.imul($30,$31);
      $__x2=$32;
      var $33=$__uh;
      var $34=$__vh;
      var $35=Math.imul($33,$34);
      $__x3=$35;
      var $36=$__x0;
      var $37=$36 >>> 16;
      var $38=$__x1;
      var $39=((($38)+($37))|0);
      $__x1=$39;
      var $40=$__x2;
      var $41=$__x1;
      var $42=((($41)+($40))|0);
      $__x1=$42;
      var $43=$__x1;
      var $44=$__x2;
      var $45=(($43)>>>0) < (($44)>>>0);
      if ($45) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $47=$__x3;
      var $48=((($47)+(65536))|0);
      $__x3=$48;
      label = 10; break;
    case 10: 
      var $50=$__x3;
      var $51=$__x1;
      var $52=$51 >>> 16;
      var $53=((($50)+($52))|0);
      $hpl=$53;
      var $54=$__x1;
      var $55=$54 << 16;
      var $56=$__x0;
      var $57=$56 & 65535;
      var $58=((($55)+($57))|0);
      $lpl=$58;
      label = 11; break;
    case 11: 
      var $60=$cl;
      var $61=$lpl;
      var $62=((($61)+($60))|0);
      $lpl=$62;
      var $63=$lpl;
      var $64=$cl;
      var $65=(($63)>>>0) < (($64)>>>0);
      var $66=(($65)&1);
      var $67=$hpl;
      var $68=((($66)+($67))|0);
      $cl=$68;
      var $69=$lpl;
      var $70=$1;
      var $71=(($70+4)|0);
      $1=$71;
      HEAP32[(($70)>>2)]=$69;
      label = 12; break;
    case 12: 
      var $73=$3;
      var $74=((($73)-(1))|0);
      $3=$74;
      var $75=(($74)|0)!=0;
      if ($75) { label = 7; break; } else { label = 13; break; }
    case 13: 
      var $77=$cl;

      return $77;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mul_1["X"]=1;

function ___gmpn_addmul_1($rp, $up, $n, $vl) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ul;
      var $cl;
      var $hpl;
      var $lpl;
      var $rl;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      $1=$rp;
      $2=$up;
      $3=$n;
      $4=$vl;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      $cl=0;
      label = 7; break;
    case 7: 
      var $10=$2;
      var $11=(($10+4)|0);
      $2=$11;
      var $12=HEAP32[(($10)>>2)];
      $ul=$12;
      label = 8; break;
    case 8: 
      var $14=$ul;
      $__u=$14;
      var $15=$4;
      $__v=$15;
      var $16=$__u;
      var $17=$16 & 65535;
      $__ul=$17;
      var $18=$__u;
      var $19=$18 >>> 16;
      $__uh=$19;
      var $20=$__v;
      var $21=$20 & 65535;
      $__vl=$21;
      var $22=$__v;
      var $23=$22 >>> 16;
      $__vh=$23;
      var $24=$__ul;
      var $25=$__vl;
      var $26=Math.imul($24,$25);
      $__x0=$26;
      var $27=$__ul;
      var $28=$__vh;
      var $29=Math.imul($27,$28);
      $__x1=$29;
      var $30=$__uh;
      var $31=$__vl;
      var $32=Math.imul($30,$31);
      $__x2=$32;
      var $33=$__uh;
      var $34=$__vh;
      var $35=Math.imul($33,$34);
      $__x3=$35;
      var $36=$__x0;
      var $37=$36 >>> 16;
      var $38=$__x1;
      var $39=((($38)+($37))|0);
      $__x1=$39;
      var $40=$__x2;
      var $41=$__x1;
      var $42=((($41)+($40))|0);
      $__x1=$42;
      var $43=$__x1;
      var $44=$__x2;
      var $45=(($43)>>>0) < (($44)>>>0);
      if ($45) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $47=$__x3;
      var $48=((($47)+(65536))|0);
      $__x3=$48;
      label = 10; break;
    case 10: 
      var $50=$__x3;
      var $51=$__x1;
      var $52=$51 >>> 16;
      var $53=((($50)+($52))|0);
      $hpl=$53;
      var $54=$__x1;
      var $55=$54 << 16;
      var $56=$__x0;
      var $57=$56 & 65535;
      var $58=((($55)+($57))|0);
      $lpl=$58;
      label = 11; break;
    case 11: 
      var $60=$cl;
      var $61=$lpl;
      var $62=((($61)+($60))|0);
      $lpl=$62;
      var $63=$lpl;
      var $64=$cl;
      var $65=(($63)>>>0) < (($64)>>>0);
      var $66=(($65)&1);
      var $67=$hpl;
      var $68=((($66)+($67))|0);
      $cl=$68;
      var $69=$1;
      var $70=HEAP32[(($69)>>2)];
      $rl=$70;
      var $71=$rl;
      var $72=$lpl;
      var $73=((($71)+($72))|0);
      $lpl=$73;
      var $74=$lpl;
      var $75=$rl;
      var $76=(($74)>>>0) < (($75)>>>0);
      var $77=(($76)&1);
      var $78=$cl;
      var $79=((($78)+($77))|0);
      $cl=$79;
      var $80=$lpl;
      var $81=$1;
      var $82=(($81+4)|0);
      $1=$82;
      HEAP32[(($81)>>2)]=$80;
      label = 12; break;
    case 12: 
      var $84=$3;
      var $85=((($84)-(1))|0);
      $3=$85;
      var $86=(($85)|0)!=0;
      if ($86) { label = 7; break; } else { label = 13; break; }
    case 13: 
      var $88=$cl;

      return $88;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_addmul_1["X"]=1;

function ___gmpn_submul_1($rp, $up, $n, $vl) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ul;
      var $cl;
      var $hpl;
      var $lpl;
      var $rl;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      $1=$rp;
      $2=$up;
      $3=$n;
      $4=$vl;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      $cl=0;
      label = 7; break;
    case 7: 
      var $10=$2;
      var $11=(($10+4)|0);
      $2=$11;
      var $12=HEAP32[(($10)>>2)];
      $ul=$12;
      label = 8; break;
    case 8: 
      var $14=$ul;
      $__u=$14;
      var $15=$4;
      $__v=$15;
      var $16=$__u;
      var $17=$16 & 65535;
      $__ul=$17;
      var $18=$__u;
      var $19=$18 >>> 16;
      $__uh=$19;
      var $20=$__v;
      var $21=$20 & 65535;
      $__vl=$21;
      var $22=$__v;
      var $23=$22 >>> 16;
      $__vh=$23;
      var $24=$__ul;
      var $25=$__vl;
      var $26=Math.imul($24,$25);
      $__x0=$26;
      var $27=$__ul;
      var $28=$__vh;
      var $29=Math.imul($27,$28);
      $__x1=$29;
      var $30=$__uh;
      var $31=$__vl;
      var $32=Math.imul($30,$31);
      $__x2=$32;
      var $33=$__uh;
      var $34=$__vh;
      var $35=Math.imul($33,$34);
      $__x3=$35;
      var $36=$__x0;
      var $37=$36 >>> 16;
      var $38=$__x1;
      var $39=((($38)+($37))|0);
      $__x1=$39;
      var $40=$__x2;
      var $41=$__x1;
      var $42=((($41)+($40))|0);
      $__x1=$42;
      var $43=$__x1;
      var $44=$__x2;
      var $45=(($43)>>>0) < (($44)>>>0);
      if ($45) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $47=$__x3;
      var $48=((($47)+(65536))|0);
      $__x3=$48;
      label = 10; break;
    case 10: 
      var $50=$__x3;
      var $51=$__x1;
      var $52=$51 >>> 16;
      var $53=((($50)+($52))|0);
      $hpl=$53;
      var $54=$__x1;
      var $55=$54 << 16;
      var $56=$__x0;
      var $57=$56 & 65535;
      var $58=((($55)+($57))|0);
      $lpl=$58;
      label = 11; break;
    case 11: 
      var $60=$cl;
      var $61=$lpl;
      var $62=((($61)+($60))|0);
      $lpl=$62;
      var $63=$lpl;
      var $64=$cl;
      var $65=(($63)>>>0) < (($64)>>>0);
      var $66=(($65)&1);
      var $67=$hpl;
      var $68=((($66)+($67))|0);
      $cl=$68;
      var $69=$1;
      var $70=HEAP32[(($69)>>2)];
      $rl=$70;
      var $71=$rl;
      var $72=$lpl;
      var $73=((($71)-($72))|0);
      $lpl=$73;
      var $74=$lpl;
      var $75=$rl;
      var $76=(($74)>>>0) > (($75)>>>0);
      var $77=(($76)&1);
      var $78=$cl;
      var $79=((($78)+($77))|0);
      $cl=$79;
      var $80=$lpl;
      var $81=$1;
      var $82=(($81+4)|0);
      $1=$82;
      HEAP32[(($81)>>2)]=$80;
      label = 12; break;
    case 12: 
      var $84=$3;
      var $85=((($84)-(1))|0);
      $3=$85;
      var $86=(($85)|0)!=0;
      if ($86) { label = 7; break; } else { label = 13; break; }
    case 13: 
      var $88=$cl;

      return $88;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_submul_1["X"]=1;

function ___gmpn_lshift($rp, $up, $n, $cnt) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $high_limb;
      var $low_limb;
      var $tnc;
      var $i;
      var $retval;
      $1=$rp;
      $2=$up;
      $3=$n;
      $4=$cnt;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $13=$3;
      var $14=$2;
      var $15=(($14+($13<<2))|0);
      $2=$15;
      var $16=$3;
      var $17=$1;
      var $18=(($17+($16<<2))|0);
      $1=$18;
      var $19=$4;
      var $20=(((32)-($19))|0);
      $tnc=$20;
      var $21=$2;
      var $22=((($21)-(4))|0);
      $2=$22;
      var $23=HEAP32[(($22)>>2)];
      $low_limb=$23;
      var $24=$low_limb;
      var $25=$tnc;
      var $26=$24 >>> (($25)>>>0);
      $retval=$26;
      var $27=$low_limb;
      var $28=$4;
      var $29=$27 << $28;
      $high_limb=$29;
      var $30=$3;
      var $31=((($30)-(1))|0);
      $i=$31;
      label = 11; break;
    case 11: 
      var $33=$i;
      var $34=(($33)|0)!=0;
      if ($34) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $36=$2;
      var $37=((($36)-(4))|0);
      $2=$37;
      var $38=HEAP32[(($37)>>2)];
      $low_limb=$38;
      var $39=$high_limb;
      var $40=$low_limb;
      var $41=$tnc;
      var $42=$40 >>> (($41)>>>0);
      var $43=$39 | $42;
      var $44=$1;
      var $45=((($44)-(4))|0);
      $1=$45;
      HEAP32[(($45)>>2)]=$43;
      var $46=$low_limb;
      var $47=$4;
      var $48=$46 << $47;
      $high_limb=$48;
      label = 13; break;
    case 13: 
      var $50=$i;
      var $51=((($50)-(1))|0);
      $i=$51;
      label = 11; break;
    case 14: 
      var $53=$high_limb;
      var $54=$1;
      var $55=((($54)-(4))|0);
      $1=$55;
      HEAP32[(($55)>>2)]=$53;
      var $56=$retval;

      return $56;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_lshift["X"]=1;

function ___gmpn_sub($__gmp_wp, $__gmp_xp, $__gmp_xsize, $__gmp_yp, $__gmp_ysize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $__gmp_c;
      var $__gmp_i;
      var $__gmp_x;
      var $__gmp_j;
      $1=$__gmp_wp;
      $2=$__gmp_xp;
      $3=$__gmp_xsize;
      $4=$__gmp_yp;
      $5=$__gmp_ysize;
      label = 3; break;
    case 3: 
      var $7=$5;
      $__gmp_i=$7;
      var $8=$__gmp_i;
      var $9=(($8)|0)!=0;
      if ($9) { label = 4; break; } else { label = 12; break; }
    case 4: 
      var $11=$1;
      var $12=$2;
      var $13=$4;
      var $14=$__gmp_i;
      var $15=___gmpn_sub_n($11, $12, $13, $14);
      var $16=(($15)|0)!=0;
      if ($16) { label = 5; break; } else { label = 11; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $19=$__gmp_i;
      var $20=$3;
      var $21=(($19)|0) >= (($20)|0);
      if ($21) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $__gmp_c=1;
      label = 21; break;
    case 8: 
      var $24=$__gmp_i;
      var $25=$2;
      var $26=(($25+($24<<2))|0);
      var $27=HEAP32[(($26)>>2)];
      $__gmp_x=$27;
      label = 9; break;
    case 9: 
      var $29=$__gmp_x;
      var $30=((($29)-(1))|0);
      var $31=$__gmp_i;
      var $32=((($31)+(1))|0);
      $__gmp_i=$32;
      var $33=$1;
      var $34=(($33+($31<<2))|0);
      HEAP32[(($34)>>2)]=$30;
      var $35=$__gmp_x;
      var $36=(($35)|0)==0;
      if ($36) { label = 6; break; } else { label = 10; break; }
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $40=$1;
      var $41=$2;
      var $42=(($40)|0)!=(($41)|0);
      if ($42) { label = 13; break; } else { label = 20; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $45=$__gmp_i;
      $__gmp_j=$45;
      label = 15; break;
    case 15: 
      var $47=$__gmp_j;
      var $48=$3;
      var $49=(($47)|0) < (($48)|0);
      if ($49) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $51=$__gmp_j;
      var $52=$2;
      var $53=(($52+($51<<2))|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$__gmp_j;
      var $56=$1;
      var $57=(($56+($55<<2))|0);
      HEAP32[(($57)>>2)]=$54;
      label = 17; break;
    case 17: 
      var $59=$__gmp_j;
      var $60=((($59)+(1))|0);
      $__gmp_j=$60;
      label = 15; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      $__gmp_c=0;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $66=$__gmp_c;

      return $66;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sub["X"]=1;

function ___gmpn_rshift($rp, $up, $n, $cnt) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $high_limb;
      var $low_limb;
      var $tnc;
      var $i;
      var $retval;
      $1=$rp;
      $2=$up;
      $3=$n;
      $4=$cnt;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $13=$4;
      var $14=(((32)-($13))|0);
      $tnc=$14;
      var $15=$2;
      var $16=(($15+4)|0);
      $2=$16;
      var $17=HEAP32[(($15)>>2)];
      $high_limb=$17;
      var $18=$high_limb;
      var $19=$tnc;
      var $20=$18 << $19;
      $retval=$20;
      var $21=$high_limb;
      var $22=$4;
      var $23=$21 >>> (($22)>>>0);
      $low_limb=$23;
      var $24=$3;
      var $25=((($24)-(1))|0);
      $i=$25;
      label = 11; break;
    case 11: 
      var $27=$i;
      var $28=(($27)|0)!=0;
      if ($28) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $30=$2;
      var $31=(($30+4)|0);
      $2=$31;
      var $32=HEAP32[(($30)>>2)];
      $high_limb=$32;
      var $33=$low_limb;
      var $34=$high_limb;
      var $35=$tnc;
      var $36=$34 << $35;
      var $37=$33 | $36;
      var $38=$1;
      var $39=(($38+4)|0);
      $1=$39;
      HEAP32[(($38)>>2)]=$37;
      var $40=$high_limb;
      var $41=$4;
      var $42=$40 >>> (($41)>>>0);
      $low_limb=$42;
      label = 13; break;
    case 13: 
      var $44=$i;
      var $45=((($44)-(1))|0);
      $i=$45;
      label = 11; break;
    case 14: 
      var $47=$low_limb;
      var $48=$1;
      HEAP32[(($48)>>2)]=$47;
      var $49=$retval;

      return $49;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_rshift["X"]=1;

function ___gmpn_divexact_1($dst, $src, $size, $divisor) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $c;
      var $h;
      var $l;
      var $ls;
      var $s;
      var $s_next;
      var $inverse;
      var $dummy;
      var $shift;
      var $__ctz_x;
      var $__ctz_c;
      var $__n;
      var $__inv;
      var $__x;
      var $__y;
      var $__w;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x01;
      var $__x12;
      var $__x23;
      var $__x34;
      var $__ul5;
      var $__vl6;
      var $__uh7;
      var $__vh8;
      var $__u9;
      var $__v10;
      var $__x11;
      var $__y12;
      var $__w13;
      $1=$dst;
      $2=$src;
      $3=$size;
      $4=$divisor;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $15=$2;
      var $16=(($15)|0);
      var $17=HEAP32[(($16)>>2)];
      $s=$17;
      var $18=$3;
      var $19=(($18)|0)==1;
      if ($19) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $21=$s;
      var $22=$4;
      var $23=Math.floor(((($21)>>>0))/((($22)>>>0)));
      var $24=$1;
      var $25=(($24)|0);
      HEAP32[(($25)>>2)]=$23;
      label = 55; break;
    case 14: 
      var $27=$4;
      var $28=$27 & 1;
      var $29=(($28)|0)==0;
      if ($29) { label = 15; break; } else { label = 27; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $32=$4;
      $__ctz_x=$32;
      var $33=$__ctz_x;
      var $34=$33 & 255;
      var $35=(($34)|0)!=0;
      var $36=(($35)&1);
      var $37=(($36)|0)!=0;
      var $38=(($37)&1);
      var $39=($38);
      var $40=(($39)|0)!=0;
      if ($40) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $42=$__ctz_x;
      var $43=$__ctz_x;
      var $44=(((-$43))|0);
      var $45=$42 & $44;
      var $46=((5250424+$45)|0);
      var $47=HEAP8[($46)];
      var $48=(($47)&255);
      var $49=((($48)-(2))|0);
      $shift=$49;
      label = 25; break;
    case 18: 
      $__ctz_c=6;
      label = 19; break;
    case 19: 
      var $52=$__ctz_c;
      var $53=(($52)|0) < 30;
      if ($53) { label = 20; break; } else { label = 24; break; }
    case 20: 
      var $55=$__ctz_x;
      var $56=$55 >>> 8;
      $__ctz_x=$56;
      var $57=$__ctz_x;
      var $58=$57 & 255;
      var $59=(($58)|0)!=0;
      var $60=(($59)&1);
      var $61=(($60)|0)!=0;
      var $62=(($61)&1);
      var $63=($62);
      var $64=(($63)|0)!=0;
      if ($64) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 24; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $68=$__ctz_c;
      var $69=((($68)+(8))|0);
      $__ctz_c=$69;
      label = 19; break;
    case 24: 
      var $71=$__ctz_c;
      var $72=$__ctz_x;
      var $73=$__ctz_x;
      var $74=(((-$73))|0);
      var $75=$72 & $74;
      var $76=((5250424+$75)|0);
      var $77=HEAP8[($76)];
      var $78=(($77)&255);
      var $79=((($71)+($78))|0);
      $shift=$79;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $82=$shift;
      var $83=$4;
      var $84=$83 >>> (($82)>>>0);
      $4=$84;
      label = 28; break;
    case 27: 
      $shift=0;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $88=$4;
      $__n=$88;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $91=$__n;
      var $92=Math.floor(((($91)>>>0))/(2));
      var $93=$92 & 127;
      var $94=((5257680+$93)|0);
      var $95=HEAP8[($94)];
      var $96=(($95)&255);
      $__inv=$96;
      var $97=$__inv;
      var $98=($97<<1);
      var $99=$__inv;
      var $100=$__inv;
      var $101=Math.imul($99,$100);
      var $102=$__n;
      var $103=Math.imul($101,$102);
      var $104=((($98)-($103))|0);
      $__inv=$104;
      var $105=$__inv;
      var $106=($105<<1);
      var $107=$__inv;
      var $108=$__inv;
      var $109=Math.imul($107,$108);
      var $110=$__n;
      var $111=Math.imul($109,$110);
      var $112=((($106)-($111))|0);
      $__inv=$112;
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $115=$__inv;
      $inverse=$115;
      label = 34; break;
    case 34: 
      var $117=$4;
      var $118=$117 << 0;
      $4=$118;
      var $119=$shift;
      var $120=(($119)|0)!=0;
      if ($120) { label = 35; break; } else { label = 45; break; }
    case 35: 
      $c=0;
      $i=0;
      var $122=$3;
      var $123=((($122)-(1))|0);
      $3=$123;
      label = 36; break;
    case 36: 
      var $125=$i;
      var $126=((($125)+(1))|0);
      var $127=$2;
      var $128=(($127+($126<<2))|0);
      var $129=HEAP32[(($128)>>2)];
      $s_next=$129;
      var $130=$s;
      var $131=$shift;
      var $132=$130 >>> (($131)>>>0);
      var $133=$s_next;
      var $134=$shift;
      var $135=(((32)-($134))|0);
      var $136=$133 << $135;
      var $137=$132 | $136;
      $ls=$137;
      var $138=$s_next;
      $s=$138;
      label = 37; break;
    case 37: 
      var $140=$ls;
      $__x=$140;
      var $141=$c;
      $__y=$141;
      var $142=$__x;
      var $143=$__y;
      var $144=((($142)-($143))|0);
      $__w=$144;
      var $145=$__w;
      $l=$145;
      var $146=$__w;
      var $147=$__x;
      var $148=(($146)>>>0) > (($147)>>>0);
      var $149=(($148)&1);
      $c=$149;
      label = 38; break;
    case 38: 
      var $151=$l;
      var $152=$inverse;
      var $153=Math.imul($151,$152);
      $l=$153;
      var $154=$l;
      var $155=$i;
      var $156=$1;
      var $157=(($156+($155<<2))|0);
      HEAP32[(($157)>>2)]=$154;
      label = 39; break;
    case 39: 
      var $159=$l;
      $__u=$159;
      var $160=$4;
      $__v=$160;
      var $161=$__u;
      var $162=$161 & 65535;
      $__ul=$162;
      var $163=$__u;
      var $164=$163 >>> 16;
      $__uh=$164;
      var $165=$__v;
      var $166=$165 & 65535;
      $__vl=$166;
      var $167=$__v;
      var $168=$167 >>> 16;
      $__vh=$168;
      var $169=$__ul;
      var $170=$__vl;
      var $171=Math.imul($169,$170);
      $__x0=$171;
      var $172=$__ul;
      var $173=$__vh;
      var $174=Math.imul($172,$173);
      $__x1=$174;
      var $175=$__uh;
      var $176=$__vl;
      var $177=Math.imul($175,$176);
      $__x2=$177;
      var $178=$__uh;
      var $179=$__vh;
      var $180=Math.imul($178,$179);
      $__x3=$180;
      var $181=$__x0;
      var $182=$181 >>> 16;
      var $183=$__x1;
      var $184=((($183)+($182))|0);
      $__x1=$184;
      var $185=$__x2;
      var $186=$__x1;
      var $187=((($186)+($185))|0);
      $__x1=$187;
      var $188=$__x1;
      var $189=$__x2;
      var $190=(($188)>>>0) < (($189)>>>0);
      if ($190) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $192=$__x3;
      var $193=((($192)+(65536))|0);
      $__x3=$193;
      label = 41; break;
    case 41: 
      var $195=$__x3;
      var $196=$__x1;
      var $197=$196 >>> 16;
      var $198=((($195)+($197))|0);
      $h=$198;
      var $199=$__x1;
      var $200=$199 << 16;
      var $201=$__x0;
      var $202=$201 & 65535;
      var $203=((($200)+($202))|0);
      $dummy=$203;
      label = 42; break;
    case 42: 
      var $205=$h;
      var $206=$c;
      var $207=((($206)+($205))|0);
      $c=$207;
      var $208=$i;
      var $209=((($208)+(1))|0);
      $i=$209;
      label = 43; break;
    case 43: 
      var $211=$i;
      var $212=$3;
      var $213=(($211)|0) < (($212)|0);
      if ($213) { label = 36; break; } else { label = 44; break; }
    case 44: 
      var $215=$s;
      var $216=$shift;
      var $217=$215 >>> (($216)>>>0);
      $ls=$217;
      var $218=$ls;
      var $219=$c;
      var $220=((($218)-($219))|0);
      $l=$220;
      var $221=$l;
      var $222=$inverse;
      var $223=Math.imul($221,$222);
      $l=$223;
      var $224=$l;
      var $225=$i;
      var $226=$1;
      var $227=(($226+($225<<2))|0);
      HEAP32[(($227)>>2)]=$224;
      label = 55; break;
    case 45: 
      var $229=$s;
      var $230=$inverse;
      var $231=Math.imul($229,$230);
      $l=$231;
      var $232=$l;
      var $233=$1;
      var $234=(($233)|0);
      HEAP32[(($234)>>2)]=$232;
      $i=1;
      $c=0;
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $237=$l;
      $__u9=$237;
      var $238=$4;
      $__v10=$238;
      var $239=$__u9;
      var $240=$239 & 65535;
      $__ul5=$240;
      var $241=$__u9;
      var $242=$241 >>> 16;
      $__uh7=$242;
      var $243=$__v10;
      var $244=$243 & 65535;
      $__vl6=$244;
      var $245=$__v10;
      var $246=$245 >>> 16;
      $__vh8=$246;
      var $247=$__ul5;
      var $248=$__vl6;
      var $249=Math.imul($247,$248);
      $__x01=$249;
      var $250=$__ul5;
      var $251=$__vh8;
      var $252=Math.imul($250,$251);
      $__x12=$252;
      var $253=$__uh7;
      var $254=$__vl6;
      var $255=Math.imul($253,$254);
      $__x23=$255;
      var $256=$__uh7;
      var $257=$__vh8;
      var $258=Math.imul($256,$257);
      $__x34=$258;
      var $259=$__x01;
      var $260=$259 >>> 16;
      var $261=$__x12;
      var $262=((($261)+($260))|0);
      $__x12=$262;
      var $263=$__x23;
      var $264=$__x12;
      var $265=((($264)+($263))|0);
      $__x12=$265;
      var $266=$__x12;
      var $267=$__x23;
      var $268=(($266)>>>0) < (($267)>>>0);
      if ($268) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $270=$__x34;
      var $271=((($270)+(65536))|0);
      $__x34=$271;
      label = 49; break;
    case 49: 
      var $273=$__x34;
      var $274=$__x12;
      var $275=$274 >>> 16;
      var $276=((($273)+($275))|0);
      $h=$276;
      var $277=$__x12;
      var $278=$277 << 16;
      var $279=$__x01;
      var $280=$279 & 65535;
      var $281=((($278)+($280))|0);
      $dummy=$281;
      label = 50; break;
    case 50: 
      var $283=$h;
      var $284=$c;
      var $285=((($284)+($283))|0);
      $c=$285;
      var $286=$i;
      var $287=$2;
      var $288=(($287+($286<<2))|0);
      var $289=HEAP32[(($288)>>2)];
      $s=$289;
      label = 51; break;
    case 51: 
      var $291=$s;
      $__x11=$291;
      var $292=$c;
      $__y12=$292;
      var $293=$__x11;
      var $294=$__y12;
      var $295=((($293)-($294))|0);
      $__w13=$295;
      var $296=$__w13;
      $l=$296;
      var $297=$__w13;
      var $298=$__x11;
      var $299=(($297)>>>0) > (($298)>>>0);
      var $300=(($299)&1);
      $c=$300;
      label = 52; break;
    case 52: 
      var $302=$l;
      var $303=$inverse;
      var $304=Math.imul($302,$303);
      $l=$304;
      var $305=$l;
      var $306=$i;
      var $307=$1;
      var $308=(($307+($306<<2))|0);
      HEAP32[(($308)>>2)]=$305;
      var $309=$i;
      var $310=((($309)+(1))|0);
      $i=$310;
      label = 53; break;
    case 53: 
      var $312=$i;
      var $313=$3;
      var $314=(($312)|0) < (($313)|0);
      if ($314) { label = 46; break; } else { label = 54; break; }
    case 54: 
      label = 55; break;
    case 55: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_divexact_1["X"]=1;

function ___gmpn_divrem($qp, $qxn, $np, $nn, $dp, $dn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 8)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $ret;
      var $q2p;
      var $qn;
      var $__tmp_marker=__stackBase__;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $rp;
      var $q2p1;
      var $qhl;
      var $qn2;
      var $__tmp_marker3=(__stackBase__)+(4);
      var $n2p;
      var $__dst4;
      var $__n5;
      var $__n6;
      var $__dst7;
      var $__src8;
      var $__x9;
      var $__n10;
      var $__dst11;
      var $__src12;
      var $__x13;
      var $__n14;
      var $__dst15;
      var $__src16;
      var $__x17;
      var $__n18;
      var $__dst19;
      var $__src20;
      var $__x21;
      var $__n22;
      var $__dst23;
      var $__src24;
      var $__x25;
      $2=$qp;
      $3=$qxn;
      $4=$np;
      $5=$nn;
      $6=$dp;
      $7=$dn;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $26=$7;
      var $27=(($26)|0)==1;
      if ($27) { label = 21; break; } else { label = 46; break; }
    case 21: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $29=$5;
      var $30=$3;
      var $31=((($29)+($30))|0);
      var $32=($31<<2);
      var $33=(($32)>>>0) < 65536;
      var $34=(($33)&1);
      var $35=(($34)|0)!=0;
      var $36=(($35)&1);
      var $37=($36);
      var $38=(($37)|0)!=0;
      if ($38) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $40=$5;
      var $41=$3;
      var $42=((($40)+($41))|0);
      var $43=($42<<2);
      var $44=STACKTOP;STACKTOP = (STACKTOP + $43)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $52 = $44;label = 24; break;
    case 23: 
      var $46=$5;
      var $47=$3;
      var $48=((($46)+($47))|0);
      var $49=($48<<2);
      var $50=___gmp_tmp_reentrant_alloc($__tmp_marker, $49);
      var $52 = $50;label = 24; break;
    case 24: 
      var $52;
      var $53=$52;
      $q2p=$53;
      var $54=$q2p;
      var $55=$3;
      var $56=$4;
      var $57=$5;
      var $58=$6;
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=___gmpn_divrem_1($54, $55, $56, $57, $60);
      var $62=$4;
      var $63=(($62)|0);
      HEAP32[(($63)>>2)]=$61;
      var $64=$5;
      var $65=$3;
      var $66=((($64)+($65))|0);
      var $67=((($66)-(1))|0);
      $qn=$67;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $76=$qn;
      var $77=(($76)|0)!=0;
      if ($77) { label = 33; break; } else { label = 39; break; }
    case 33: 
      var $79=$qn;
      var $80=((($79)-(1))|0);
      $__n=$80;
      var $81=$2;
      $__dst=$81;
      var $82=$q2p;
      $__src=$82;
      var $83=$__src;
      var $84=(($83+4)|0);
      $__src=$84;
      var $85=HEAP32[(($83)>>2)];
      $__x=$85;
      var $86=$__n;
      var $87=(($86)|0)!=0;
      if ($87) { label = 34; break; } else { label = 38; break; }
    case 34: 
      label = 35; break;
    case 35: 
      var $90=$__x;
      var $91=$__dst;
      var $92=(($91+4)|0);
      $__dst=$92;
      HEAP32[(($91)>>2)]=$90;
      var $93=$__src;
      var $94=(($93+4)|0);
      $__src=$94;
      var $95=HEAP32[(($93)>>2)];
      $__x=$95;
      label = 36; break;
    case 36: 
      var $97=$__n;
      var $98=((($97)-(1))|0);
      $__n=$98;
      var $99=(($98)|0)!=0;
      if ($99) { label = 35; break; } else { label = 37; break; }
    case 37: 
      label = 38; break;
    case 38: 
      var $102=$__x;
      var $103=$__dst;
      var $104=(($103+4)|0);
      $__dst=$104;
      HEAP32[(($103)>>2)]=$102;
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $108=$qn;
      var $109=$q2p;
      var $110=(($109+($108<<2))|0);
      var $111=HEAP32[(($110)>>2)];
      $ret=$111;
      label = 42; break;
    case 42: 
      var $113=HEAP32[(($__tmp_marker)>>2)];
      var $114=(($113)|0)!=0;
      var $115=(($114)&1);
      var $116=(($115)|0)!=0;
      var $117=(($116)&1);
      var $118=($117);
      var $119=(($118)|0)!=0;
      if ($119) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $121=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($121);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $124=$ret;
      $1=$124;
      label = 165; break;
    case 46: 
      var $126=$7;
      var $127=(($126)|0)==2;
      if ($127) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $129=$2;
      var $130=$3;
      var $131=$4;
      var $132=$5;
      var $133=$6;
      var $134=___gmpn_divrem_2($129, $130, $131, $132, $133);
      $1=$134;
      label = 165; break;
    case 48: 
      HEAP32[(($__tmp_marker3)>>2)]=0;
      var $136=$3;
      var $137=(($136)|0)!=0;
      var $138=(($137)&1);
      var $139=(($138)|0)!=0;
      var $140=(($139)&1);
      var $141=($140);
      var $142=(($141)|0)!=0;
      if ($142) { label = 49; break; } else { label = 119; break; }
    case 49: 
      var $144=$5;
      var $145=$3;
      var $146=((($144)+($145))|0);
      var $147=($146<<2);
      var $148=(($147)>>>0) < 65536;
      var $149=(($148)&1);
      var $150=(($149)|0)!=0;
      var $151=(($150)&1);
      var $152=($151);
      var $153=(($152)|0)!=0;
      if ($153) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $155=$5;
      var $156=$3;
      var $157=((($155)+($156))|0);
      var $158=($157<<2);
      var $159=STACKTOP;STACKTOP = (STACKTOP + $158)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $167 = $159;label = 52; break;
    case 51: 
      var $161=$5;
      var $162=$3;
      var $163=((($161)+($162))|0);
      var $164=($163<<2);
      var $165=___gmp_tmp_reentrant_alloc($__tmp_marker3, $164);
      var $167 = $165;label = 52; break;
    case 52: 
      var $167;
      var $168=$167;
      $n2p=$168;
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $172=$3;
      var $173=(($172)|0)!=0;
      if ($173) { label = 56; break; } else { label = 60; break; }
    case 56: 
      var $175=$n2p;
      $__dst4=$175;
      var $176=$3;
      $__n5=$176;
      label = 57; break;
    case 57: 
      var $178=$__dst4;
      var $179=(($178+4)|0);
      $__dst4=$179;
      HEAP32[(($178)>>2)]=0;
      label = 58; break;
    case 58: 
      var $181=$__n5;
      var $182=((($181)-(1))|0);
      $__n5=$182;
      var $183=(($182)|0)!=0;
      if ($183) { label = 57; break; } else { label = 59; break; }
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $195=$5;
      var $196=(($195)|0)!=0;
      if ($196) { label = 70; break; } else { label = 76; break; }
    case 70: 
      var $198=$5;
      var $199=((($198)-(1))|0);
      $__n6=$199;
      var $200=$n2p;
      var $201=$3;
      var $202=(($200+($201<<2))|0);
      $__dst7=$202;
      var $203=$4;
      $__src8=$203;
      var $204=$__src8;
      var $205=(($204+4)|0);
      $__src8=$205;
      var $206=HEAP32[(($204)>>2)];
      $__x9=$206;
      var $207=$__n6;
      var $208=(($207)|0)!=0;
      if ($208) { label = 71; break; } else { label = 75; break; }
    case 71: 
      label = 72; break;
    case 72: 
      var $211=$__x9;
      var $212=$__dst7;
      var $213=(($212+4)|0);
      $__dst7=$213;
      HEAP32[(($212)>>2)]=$211;
      var $214=$__src8;
      var $215=(($214+4)|0);
      $__src8=$215;
      var $216=HEAP32[(($214)>>2)];
      $__x9=$216;
      label = 73; break;
    case 73: 
      var $218=$__n6;
      var $219=((($218)-(1))|0);
      $__n6=$219;
      var $220=(($219)|0)!=0;
      if ($220) { label = 72; break; } else { label = 74; break; }
    case 74: 
      label = 75; break;
    case 75: 
      var $223=$__x9;
      var $224=$__dst7;
      var $225=(($224+4)|0);
      $__dst7=$225;
      HEAP32[(($224)>>2)]=$223;
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $229=$5;
      var $230=$7;
      var $231=((($229)-($230))|0);
      var $232=$3;
      var $233=((($231)+($232))|0);
      var $234=((($233)+(1))|0);
      var $235=($234<<2);
      var $236=(($235)>>>0) < 65536;
      var $237=(($236)&1);
      var $238=(($237)|0)!=0;
      var $239=(($238)&1);
      var $240=($239);
      var $241=(($240)|0)!=0;
      if ($241) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $243=$5;
      var $244=$7;
      var $245=((($243)-($244))|0);
      var $246=$3;
      var $247=((($245)+($246))|0);
      var $248=((($247)+(1))|0);
      var $249=($248<<2);
      var $250=STACKTOP;STACKTOP = (STACKTOP + $249)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $261 = $250;label = 81; break;
    case 80: 
      var $252=$5;
      var $253=$7;
      var $254=((($252)-($253))|0);
      var $255=$3;
      var $256=((($254)+($255))|0);
      var $257=((($256)+(1))|0);
      var $258=($257<<2);
      var $259=___gmp_tmp_reentrant_alloc($__tmp_marker3, $258);
      var $261 = $259;label = 81; break;
    case 81: 
      var $261;
      var $262=$261;
      $q2p1=$262;
      var $263=$7;
      var $264=($263<<2);
      var $265=(($264)>>>0) < 65536;
      var $266=(($265)&1);
      var $267=(($266)|0)!=0;
      var $268=(($267)&1);
      var $269=($268);
      var $270=(($269)|0)!=0;
      if ($270) { label = 82; break; } else { label = 83; break; }
    case 82: 
      var $272=$7;
      var $273=($272<<2);
      var $274=STACKTOP;STACKTOP = (STACKTOP + $273)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $280 = $274;label = 84; break;
    case 83: 
      var $276=$7;
      var $277=($276<<2);
      var $278=___gmp_tmp_reentrant_alloc($__tmp_marker3, $277);
      var $280 = $278;label = 84; break;
    case 84: 
      var $280;
      var $281=$280;
      $rp=$281;
      var $282=$q2p1;
      var $283=$rp;
      var $284=$n2p;
      var $285=$5;
      var $286=$3;
      var $287=((($285)+($286))|0);
      var $288=$6;
      var $289=$7;
      ___gmpn_tdiv_qr($282, $283, 0, $284, $287, $288, $289);
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $298=$7;
      var $299=(($298)|0)!=0;
      if ($299) { label = 93; break; } else { label = 99; break; }
    case 93: 
      var $301=$7;
      var $302=((($301)-(1))|0);
      $__n10=$302;
      var $303=$4;
      $__dst11=$303;
      var $304=$rp;
      $__src12=$304;
      var $305=$__src12;
      var $306=(($305+4)|0);
      $__src12=$306;
      var $307=HEAP32[(($305)>>2)];
      $__x13=$307;
      var $308=$__n10;
      var $309=(($308)|0)!=0;
      if ($309) { label = 94; break; } else { label = 98; break; }
    case 94: 
      label = 95; break;
    case 95: 
      var $312=$__x13;
      var $313=$__dst11;
      var $314=(($313+4)|0);
      $__dst11=$314;
      HEAP32[(($313)>>2)]=$312;
      var $315=$__src12;
      var $316=(($315+4)|0);
      $__src12=$316;
      var $317=HEAP32[(($315)>>2)];
      $__x13=$317;
      label = 96; break;
    case 96: 
      var $319=$__n10;
      var $320=((($319)-(1))|0);
      $__n10=$320;
      var $321=(($320)|0)!=0;
      if ($321) { label = 95; break; } else { label = 97; break; }
    case 97: 
      label = 98; break;
    case 98: 
      var $324=$__x13;
      var $325=$__dst11;
      var $326=(($325+4)|0);
      $__dst11=$326;
      HEAP32[(($325)>>2)]=$324;
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      var $330=$5;
      var $331=$7;
      var $332=((($330)-($331))|0);
      var $333=$3;
      var $334=((($332)+($333))|0);
      $qn2=$334;
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      var $343=$qn2;
      var $344=(($343)|0)!=0;
      if ($344) { label = 110; break; } else { label = 116; break; }
    case 110: 
      var $346=$qn2;
      var $347=((($346)-(1))|0);
      $__n14=$347;
      var $348=$2;
      $__dst15=$348;
      var $349=$q2p1;
      $__src16=$349;
      var $350=$__src16;
      var $351=(($350+4)|0);
      $__src16=$351;
      var $352=HEAP32[(($350)>>2)];
      $__x17=$352;
      var $353=$__n14;
      var $354=(($353)|0)!=0;
      if ($354) { label = 111; break; } else { label = 115; break; }
    case 111: 
      label = 112; break;
    case 112: 
      var $357=$__x17;
      var $358=$__dst15;
      var $359=(($358+4)|0);
      $__dst15=$359;
      HEAP32[(($358)>>2)]=$357;
      var $360=$__src16;
      var $361=(($360+4)|0);
      $__src16=$361;
      var $362=HEAP32[(($360)>>2)];
      $__x17=$362;
      label = 113; break;
    case 113: 
      var $364=$__n14;
      var $365=((($364)-(1))|0);
      $__n14=$365;
      var $366=(($365)|0)!=0;
      if ($366) { label = 112; break; } else { label = 114; break; }
    case 114: 
      label = 115; break;
    case 115: 
      var $369=$__x17;
      var $370=$__dst15;
      var $371=(($370+4)|0);
      $__dst15=$371;
      HEAP32[(($370)>>2)]=$369;
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      var $375=$qn2;
      var $376=$q2p1;
      var $377=(($376+($375<<2))|0);
      var $378=HEAP32[(($377)>>2)];
      $qhl=$378;
      label = 160; break;
    case 119: 
      var $380=$5;
      var $381=$7;
      var $382=((($380)-($381))|0);
      var $383=((($382)+(1))|0);
      var $384=($383<<2);
      var $385=(($384)>>>0) < 65536;
      var $386=(($385)&1);
      var $387=(($386)|0)!=0;
      var $388=(($387)&1);
      var $389=($388);
      var $390=(($389)|0)!=0;
      if ($390) { label = 120; break; } else { label = 121; break; }
    case 120: 
      var $392=$5;
      var $393=$7;
      var $394=((($392)-($393))|0);
      var $395=((($394)+(1))|0);
      var $396=($395<<2);
      var $397=STACKTOP;STACKTOP = (STACKTOP + $396)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $406 = $397;label = 122; break;
    case 121: 
      var $399=$5;
      var $400=$7;
      var $401=((($399)-($400))|0);
      var $402=((($401)+(1))|0);
      var $403=($402<<2);
      var $404=___gmp_tmp_reentrant_alloc($__tmp_marker3, $403);
      var $406 = $404;label = 122; break;
    case 122: 
      var $406;
      var $407=$406;
      $q2p1=$407;
      var $408=$7;
      var $409=($408<<2);
      var $410=(($409)>>>0) < 65536;
      var $411=(($410)&1);
      var $412=(($411)|0)!=0;
      var $413=(($412)&1);
      var $414=($413);
      var $415=(($414)|0)!=0;
      if ($415) { label = 123; break; } else { label = 124; break; }
    case 123: 
      var $417=$7;
      var $418=($417<<2);
      var $419=STACKTOP;STACKTOP = (STACKTOP + $418)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $425 = $419;label = 125; break;
    case 124: 
      var $421=$7;
      var $422=($421<<2);
      var $423=___gmp_tmp_reentrant_alloc($__tmp_marker3, $422);
      var $425 = $423;label = 125; break;
    case 125: 
      var $425;
      var $426=$425;
      $rp=$426;
      var $427=$q2p1;
      var $428=$rp;
      var $429=$4;
      var $430=$5;
      var $431=$6;
      var $432=$7;
      ___gmpn_tdiv_qr($427, $428, 0, $429, $430, $431, $432);
      label = 126; break;
    case 126: 
      label = 127; break;
    case 127: 
      label = 128; break;
    case 128: 
      label = 129; break;
    case 129: 
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      label = 133; break;
    case 133: 
      var $441=$7;
      var $442=(($441)|0)!=0;
      if ($442) { label = 134; break; } else { label = 140; break; }
    case 134: 
      var $444=$7;
      var $445=((($444)-(1))|0);
      $__n18=$445;
      var $446=$4;
      $__dst19=$446;
      var $447=$rp;
      $__src20=$447;
      var $448=$__src20;
      var $449=(($448+4)|0);
      $__src20=$449;
      var $450=HEAP32[(($448)>>2)];
      $__x21=$450;
      var $451=$__n18;
      var $452=(($451)|0)!=0;
      if ($452) { label = 135; break; } else { label = 139; break; }
    case 135: 
      label = 136; break;
    case 136: 
      var $455=$__x21;
      var $456=$__dst19;
      var $457=(($456+4)|0);
      $__dst19=$457;
      HEAP32[(($456)>>2)]=$455;
      var $458=$__src20;
      var $459=(($458+4)|0);
      $__src20=$459;
      var $460=HEAP32[(($458)>>2)];
      $__x21=$460;
      label = 137; break;
    case 137: 
      var $462=$__n18;
      var $463=((($462)-(1))|0);
      $__n18=$463;
      var $464=(($463)|0)!=0;
      if ($464) { label = 136; break; } else { label = 138; break; }
    case 138: 
      label = 139; break;
    case 139: 
      var $467=$__x21;
      var $468=$__dst19;
      var $469=(($468+4)|0);
      $__dst19=$469;
      HEAP32[(($468)>>2)]=$467;
      label = 140; break;
    case 140: 
      label = 141; break;
    case 141: 
      label = 142; break;
    case 142: 
      var $473=$5;
      var $474=$7;
      var $475=((($473)-($474))|0);
      $qn2=$475;
      label = 143; break;
    case 143: 
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      label = 146; break;
    case 146: 
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      label = 149; break;
    case 149: 
      label = 150; break;
    case 150: 
      var $484=$qn2;
      var $485=(($484)|0)!=0;
      if ($485) { label = 151; break; } else { label = 157; break; }
    case 151: 
      var $487=$qn2;
      var $488=((($487)-(1))|0);
      $__n22=$488;
      var $489=$2;
      $__dst23=$489;
      var $490=$q2p1;
      $__src24=$490;
      var $491=$__src24;
      var $492=(($491+4)|0);
      $__src24=$492;
      var $493=HEAP32[(($491)>>2)];
      $__x25=$493;
      var $494=$__n22;
      var $495=(($494)|0)!=0;
      if ($495) { label = 152; break; } else { label = 156; break; }
    case 152: 
      label = 153; break;
    case 153: 
      var $498=$__x25;
      var $499=$__dst23;
      var $500=(($499+4)|0);
      $__dst23=$500;
      HEAP32[(($499)>>2)]=$498;
      var $501=$__src24;
      var $502=(($501+4)|0);
      $__src24=$502;
      var $503=HEAP32[(($501)>>2)];
      $__x25=$503;
      label = 154; break;
    case 154: 
      var $505=$__n22;
      var $506=((($505)-(1))|0);
      $__n22=$506;
      var $507=(($506)|0)!=0;
      if ($507) { label = 153; break; } else { label = 155; break; }
    case 155: 
      label = 156; break;
    case 156: 
      var $510=$__x25;
      var $511=$__dst23;
      var $512=(($511+4)|0);
      $__dst23=$512;
      HEAP32[(($511)>>2)]=$510;
      label = 157; break;
    case 157: 
      label = 158; break;
    case 158: 
      label = 159; break;
    case 159: 
      var $516=$qn2;
      var $517=$q2p1;
      var $518=(($517+($516<<2))|0);
      var $519=HEAP32[(($518)>>2)];
      $qhl=$519;
      label = 160; break;
    case 160: 
      label = 161; break;
    case 161: 
      var $522=HEAP32[(($__tmp_marker3)>>2)];
      var $523=(($522)|0)!=0;
      var $524=(($523)&1);
      var $525=(($524)|0)!=0;
      var $526=(($525)&1);
      var $527=($526);
      var $528=(($527)|0)!=0;
      if ($528) { label = 162; break; } else { label = 163; break; }
    case 162: 
      var $530=HEAP32[(($__tmp_marker3)>>2)];
      ___gmp_tmp_reentrant_free($530);
      label = 163; break;
    case 163: 
      label = 164; break;
    case 164: 
      var $533=$qhl;
      $1=$533;
      label = 165; break;
    case 165: 
      var $535=$1;
      STACKTOP = __stackBase__;
      return $535;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_divrem["X"]=1;


function ___gmpn_divrem_1($qp, $qxn, $up, $un, $d) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $i;
      var $n1;
      var $n0;
      var $r;
      var $q;
      var $__d1;
      var $__d0;
      var $__q1;
      var $__q0;
      var $__r1;
      var $__r0;
      var $__m;
      var $__d11;
      var $__d02;
      var $__q13;
      var $__q04;
      var $__r15;
      var $__r06;
      var $__m7;
      var $dinv;
      var $_dummy;
      var $__d18;
      var $__d09;
      var $__q110;
      var $__q011;
      var $__r112;
      var $__r013;
      var $__m14;
      var $_qh;
      var $_ql;
      var $_r;
      var $_mask;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x;
      var $_qh15;
      var $_ql16;
      var $_r17;
      var $_mask18;
      var $__x019;
      var $__x120;
      var $__x221;
      var $__x322;
      var $__ul23;
      var $__vl24;
      var $__uh25;
      var $__vh26;
      var $__u27;
      var $__v28;
      var $cnt;
      var $__xr;
      var $__a;
      var $dinv29;
      var $nshift;
      var $_dummy30;
      var $__d131;
      var $__d032;
      var $__q133;
      var $__q034;
      var $__r135;
      var $__r036;
      var $__m37;
      var $_qh38;
      var $_ql39;
      var $_r40;
      var $_mask41;
      var $__x042;
      var $__x143;
      var $__x244;
      var $__x345;
      var $__ul46;
      var $__vl47;
      var $__uh48;
      var $__vh49;
      var $__u50;
      var $__v51;
      var $__x52;
      var $_qh53;
      var $_ql54;
      var $_r55;
      var $_mask56;
      var $__x057;
      var $__x158;
      var $__x259;
      var $__x360;
      var $__ul61;
      var $__vl62;
      var $__uh63;
      var $__vh64;
      var $__u65;
      var $__v66;
      var $__x67;
      var $_qh68;
      var $_ql69;
      var $_r70;
      var $_mask71;
      var $__x072;
      var $__x173;
      var $__x274;
      var $__x375;
      var $__ul76;
      var $__vl77;
      var $__uh78;
      var $__vh79;
      var $__u80;
      var $__v81;
      $2=$qp;
      $3=$qxn;
      $4=$up;
      $5=$un;
      $6=$d;
      $r=0;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $15=$5;
      var $16=$3;
      var $17=((($15)+($16))|0);
      $n=$17;
      var $18=$n;
      var $19=(($18)|0)==0;
      if ($19) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $1=0;
      label = 180; break;
    case 12: 
      var $22=$6;
      var $23=$22 << 0;
      $6=$23;
      var $24=$n;
      var $25=((($24)-(1))|0);
      var $26=$2;
      var $27=(($26+($25<<2))|0);
      $2=$27;
      var $28=$6;
      var $29=$28 & -2147483648;
      var $30=(($29)|0)!=0;
      if ($30) { label = 13; break; } else { label = 110; break; }
    case 13: 
      var $32=$5;
      var $33=(($32)|0)!=0;
      if ($33) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $35=$5;
      var $36=((($35)-(1))|0);
      var $37=$4;
      var $38=(($37+($36<<2))|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 << 0;
      $r=$40;
      var $41=$r;
      var $42=$6;
      var $43=(($41)>>>0) >= (($42)>>>0);
      var $44=(($43)&1);
      $q=$44;
      var $45=$q;
      var $46=$2;
      var $47=((($46)-(4))|0);
      $2=$47;
      HEAP32[(($46)>>2)]=$45;
      var $48=$6;
      var $49=$q;
      var $50=(((-$49))|0);
      var $51=$48 & $50;
      var $52=$r;
      var $53=((($52)-($51))|0);
      $r=$53;
      var $54=$r;
      var $55=$54 >>> 0;
      $r=$55;
      var $56=$n;
      var $57=((($56)-(1))|0);
      $n=$57;
      var $58=$5;
      var $59=((($58)-(1))|0);
      $5=$59;
      label = 15; break;
    case 15: 
      if (1) { label = 63; break; } else { label = 16; break; }
    case 16: 
      var $62=$n;
      var $63=(($62)|0) >= 0;
      if ($63) { label = 63; break; } else { label = 17; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $66=$5;
      var $67=((($66)-(1))|0);
      $i=$67;
      label = 19; break;
    case 19: 
      var $69=$i;
      var $70=(($69)|0) >= 0;
      if ($70) { label = 20; break; } else { label = 40; break; }
    case 20: 
      var $72=$i;
      var $73=$4;
      var $74=(($73+($72<<2))|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=$75 << 0;
      $n0=$76;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $82=$6;
      var $83=$82 >>> 16;
      $__d1=$83;
      var $84=$6;
      var $85=$84 & 65535;
      $__d0=$85;
      var $86=$r;
      var $87=$__d1;
      var $88=Math.floor(((($86)>>>0))/((($87)>>>0)));
      $__q1=$88;
      var $89=$r;
      var $90=$__q1;
      var $91=$__d1;
      var $92=Math.imul($90,$91);
      var $93=((($89)-($92))|0);
      $__r1=$93;
      var $94=$__q1;
      var $95=$__d0;
      var $96=Math.imul($94,$95);
      $__m=$96;
      var $97=$__r1;
      var $98=($97<<16);
      var $99=$n0;
      var $100=$99 >>> 16;
      var $101=$98 | $100;
      $__r1=$101;
      var $102=$__r1;
      var $103=$__m;
      var $104=(($102)>>>0) < (($103)>>>0);
      if ($104) { label = 26; break; } else { label = 31; break; }
    case 26: 
      var $106=$__q1;
      var $107=((($106)-(1))|0);
      $__q1=$107;
      var $108=$6;
      var $109=$__r1;
      var $110=((($109)+($108))|0);
      $__r1=$110;
      var $111=$__r1;
      var $112=$6;
      var $113=(($111)>>>0) >= (($112)>>>0);
      if ($113) { label = 27; break; } else { label = 30; break; }
    case 27: 
      var $115=$__r1;
      var $116=$__m;
      var $117=(($115)>>>0) < (($116)>>>0);
      if ($117) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $119=$__q1;
      var $120=((($119)-(1))|0);
      $__q1=$120;
      var $121=$6;
      var $122=$__r1;
      var $123=((($122)+($121))|0);
      $__r1=$123;
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $127=$__m;
      var $128=$__r1;
      var $129=((($128)-($127))|0);
      $__r1=$129;
      var $130=$__r1;
      var $131=$__d1;
      var $132=Math.floor(((($130)>>>0))/((($131)>>>0)));
      $__q0=$132;
      var $133=$__r1;
      var $134=$__q0;
      var $135=$__d1;
      var $136=Math.imul($134,$135);
      var $137=((($133)-($136))|0);
      $__r0=$137;
      var $138=$__q0;
      var $139=$__d0;
      var $140=Math.imul($138,$139);
      $__m=$140;
      var $141=$__r0;
      var $142=($141<<16);
      var $143=$n0;
      var $144=$143 & 65535;
      var $145=$142 | $144;
      $__r0=$145;
      var $146=$__r0;
      var $147=$__m;
      var $148=(($146)>>>0) < (($147)>>>0);
      if ($148) { label = 32; break; } else { label = 37; break; }
    case 32: 
      var $150=$__q0;
      var $151=((($150)-(1))|0);
      $__q0=$151;
      var $152=$6;
      var $153=$__r0;
      var $154=((($153)+($152))|0);
      $__r0=$154;
      var $155=$__r0;
      var $156=$6;
      var $157=(($155)>>>0) >= (($156)>>>0);
      if ($157) { label = 33; break; } else { label = 36; break; }
    case 33: 
      var $159=$__r0;
      var $160=$__m;
      var $161=(($159)>>>0) < (($160)>>>0);
      if ($161) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $163=$__q0;
      var $164=((($163)-(1))|0);
      $__q0=$164;
      var $165=$6;
      var $166=$__r0;
      var $167=((($166)+($165))|0);
      $__r0=$167;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $171=$__m;
      var $172=$__r0;
      var $173=((($172)-($171))|0);
      $__r0=$173;
      var $174=$__q1;
      var $175=($174<<16);
      var $176=$__q0;
      var $177=$175 | $176;
      var $178=$2;
      HEAP32[(($178)>>2)]=$177;
      var $179=$__r0;
      $r=$179;
      label = 38; break;
    case 38: 
      var $181=$r;
      var $182=$181 >>> 0;
      $r=$182;
      var $183=$2;
      var $184=((($183)-(4))|0);
      $2=$184;
      label = 39; break;
    case 39: 
      var $186=$i;
      var $187=((($186)-(1))|0);
      $i=$187;
      label = 19; break;
    case 40: 
      var $189=$3;
      var $190=((($189)-(1))|0);
      $i=$190;
      label = 41; break;
    case 41: 
      var $192=$i;
      var $193=(($192)|0) >= 0;
      if ($193) { label = 42; break; } else { label = 62; break; }
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $200=$6;
      var $201=$200 >>> 16;
      $__d11=$201;
      var $202=$6;
      var $203=$202 & 65535;
      $__d02=$203;
      var $204=$r;
      var $205=$__d11;
      var $206=Math.floor(((($204)>>>0))/((($205)>>>0)));
      $__q13=$206;
      var $207=$r;
      var $208=$__q13;
      var $209=$__d11;
      var $210=Math.imul($208,$209);
      var $211=((($207)-($210))|0);
      $__r15=$211;
      var $212=$__q13;
      var $213=$__d02;
      var $214=Math.imul($212,$213);
      $__m7=$214;
      var $215=$__r15;
      var $216=($215<<16);
      $__r15=$216;
      var $217=$__r15;
      var $218=$__m7;
      var $219=(($217)>>>0) < (($218)>>>0);
      if ($219) { label = 48; break; } else { label = 53; break; }
    case 48: 
      var $221=$__q13;
      var $222=((($221)-(1))|0);
      $__q13=$222;
      var $223=$6;
      var $224=$__r15;
      var $225=((($224)+($223))|0);
      $__r15=$225;
      var $226=$__r15;
      var $227=$6;
      var $228=(($226)>>>0) >= (($227)>>>0);
      if ($228) { label = 49; break; } else { label = 52; break; }
    case 49: 
      var $230=$__r15;
      var $231=$__m7;
      var $232=(($230)>>>0) < (($231)>>>0);
      if ($232) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $234=$__q13;
      var $235=((($234)-(1))|0);
      $__q13=$235;
      var $236=$6;
      var $237=$__r15;
      var $238=((($237)+($236))|0);
      $__r15=$238;
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $242=$__m7;
      var $243=$__r15;
      var $244=((($243)-($242))|0);
      $__r15=$244;
      var $245=$__r15;
      var $246=$__d11;
      var $247=Math.floor(((($245)>>>0))/((($246)>>>0)));
      $__q04=$247;
      var $248=$__r15;
      var $249=$__q04;
      var $250=$__d11;
      var $251=Math.imul($249,$250);
      var $252=((($248)-($251))|0);
      $__r06=$252;
      var $253=$__q04;
      var $254=$__d02;
      var $255=Math.imul($253,$254);
      $__m7=$255;
      var $256=$__r06;
      var $257=($256<<16);
      $__r06=$257;
      var $258=$__r06;
      var $259=$__m7;
      var $260=(($258)>>>0) < (($259)>>>0);
      if ($260) { label = 54; break; } else { label = 59; break; }
    case 54: 
      var $262=$__q04;
      var $263=((($262)-(1))|0);
      $__q04=$263;
      var $264=$6;
      var $265=$__r06;
      var $266=((($265)+($264))|0);
      $__r06=$266;
      var $267=$__r06;
      var $268=$6;
      var $269=(($267)>>>0) >= (($268)>>>0);
      if ($269) { label = 55; break; } else { label = 58; break; }
    case 55: 
      var $271=$__r06;
      var $272=$__m7;
      var $273=(($271)>>>0) < (($272)>>>0);
      if ($273) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $275=$__q04;
      var $276=((($275)-(1))|0);
      $__q04=$276;
      var $277=$6;
      var $278=$__r06;
      var $279=((($278)+($277))|0);
      $__r06=$279;
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $283=$__m7;
      var $284=$__r06;
      var $285=((($284)-($283))|0);
      $__r06=$285;
      var $286=$__q13;
      var $287=($286<<16);
      var $288=$__q04;
      var $289=$287 | $288;
      var $290=$2;
      HEAP32[(($290)>>2)]=$289;
      var $291=$__r06;
      $r=$291;
      label = 60; break;
    case 60: 
      var $293=$r;
      var $294=$293 >>> 0;
      $r=$294;
      var $295=$2;
      var $296=((($295)-(4))|0);
      $2=$296;
      label = 61; break;
    case 61: 
      var $298=$i;
      var $299=((($298)-(1))|0);
      $i=$299;
      label = 41; break;
    case 62: 
      var $301=$r;
      $1=$301;
      label = 180; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $311=$6;
      var $312=$311 >>> 16;
      $__d18=$312;
      var $313=$6;
      var $314=$313 & 65535;
      $__d09=$314;
      var $315=$6;
      var $316=$315 ^ -1;
      var $317=$__d18;
      var $318=Math.floor(((($316)>>>0))/((($317)>>>0)));
      $__q110=$318;
      var $319=$6;
      var $320=$319 ^ -1;
      var $321=$__q110;
      var $322=$__d18;
      var $323=Math.imul($321,$322);
      var $324=((($320)-($323))|0);
      $__r112=$324;
      var $325=$__q110;
      var $326=$__d09;
      var $327=Math.imul($325,$326);
      $__m14=$327;
      var $328=$__r112;
      var $329=($328<<16);
      var $330=$329 | 65535;
      $__r112=$330;
      var $331=$__r112;
      var $332=$__m14;
      var $333=(($331)>>>0) < (($332)>>>0);
      if ($333) { label = 72; break; } else { label = 77; break; }
    case 72: 
      var $335=$__q110;
      var $336=((($335)-(1))|0);
      $__q110=$336;
      var $337=$6;
      var $338=$__r112;
      var $339=((($338)+($337))|0);
      $__r112=$339;
      var $340=$__r112;
      var $341=$6;
      var $342=(($340)>>>0) >= (($341)>>>0);
      if ($342) { label = 73; break; } else { label = 76; break; }
    case 73: 
      var $344=$__r112;
      var $345=$__m14;
      var $346=(($344)>>>0) < (($345)>>>0);
      if ($346) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $348=$__q110;
      var $349=((($348)-(1))|0);
      $__q110=$349;
      var $350=$6;
      var $351=$__r112;
      var $352=((($351)+($350))|0);
      $__r112=$352;
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $356=$__m14;
      var $357=$__r112;
      var $358=((($357)-($356))|0);
      $__r112=$358;
      var $359=$__r112;
      var $360=$__d18;
      var $361=Math.floor(((($359)>>>0))/((($360)>>>0)));
      $__q011=$361;
      var $362=$__r112;
      var $363=$__q011;
      var $364=$__d18;
      var $365=Math.imul($363,$364);
      var $366=((($362)-($365))|0);
      $__r013=$366;
      var $367=$__q011;
      var $368=$__d09;
      var $369=Math.imul($367,$368);
      $__m14=$369;
      var $370=$__r013;
      var $371=($370<<16);
      var $372=$371 | 65535;
      $__r013=$372;
      var $373=$__r013;
      var $374=$__m14;
      var $375=(($373)>>>0) < (($374)>>>0);
      if ($375) { label = 78; break; } else { label = 83; break; }
    case 78: 
      var $377=$__q011;
      var $378=((($377)-(1))|0);
      $__q011=$378;
      var $379=$6;
      var $380=$__r013;
      var $381=((($380)+($379))|0);
      $__r013=$381;
      var $382=$__r013;
      var $383=$6;
      var $384=(($382)>>>0) >= (($383)>>>0);
      if ($384) { label = 79; break; } else { label = 82; break; }
    case 79: 
      var $386=$__r013;
      var $387=$__m14;
      var $388=(($386)>>>0) < (($387)>>>0);
      if ($388) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $390=$__q011;
      var $391=((($390)-(1))|0);
      $__q011=$391;
      var $392=$6;
      var $393=$__r013;
      var $394=((($393)+($392))|0);
      $__r013=$394;
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $398=$__m14;
      var $399=$__r013;
      var $400=((($399)-($398))|0);
      $__r013=$400;
      var $401=$__q110;
      var $402=($401<<16);
      var $403=$__q011;
      var $404=$402 | $403;
      $dinv=$404;
      var $405=$__r013;
      $_dummy=$405;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $408=$5;
      var $409=((($408)-(1))|0);
      $i=$409;
      label = 86; break;
    case 86: 
      var $411=$i;
      var $412=(($411)|0) >= 0;
      if ($412) { label = 87; break; } else { label = 99; break; }
    case 87: 
      var $414=$i;
      var $415=$4;
      var $416=(($415+($414<<2))|0);
      var $417=HEAP32[(($416)>>2)];
      var $418=$417 << 0;
      $n0=$418;
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $421=$r;
      $__u=$421;
      var $422=$dinv;
      $__v=$422;
      var $423=$__u;
      var $424=$423 & 65535;
      $__ul=$424;
      var $425=$__u;
      var $426=$425 >>> 16;
      $__uh=$426;
      var $427=$__v;
      var $428=$427 & 65535;
      $__vl=$428;
      var $429=$__v;
      var $430=$429 >>> 16;
      $__vh=$430;
      var $431=$__ul;
      var $432=$__vl;
      var $433=Math.imul($431,$432);
      $__x0=$433;
      var $434=$__ul;
      var $435=$__vh;
      var $436=Math.imul($434,$435);
      $__x1=$436;
      var $437=$__uh;
      var $438=$__vl;
      var $439=Math.imul($437,$438);
      $__x2=$439;
      var $440=$__uh;
      var $441=$__vh;
      var $442=Math.imul($440,$441);
      $__x3=$442;
      var $443=$__x0;
      var $444=$443 >>> 16;
      var $445=$__x1;
      var $446=((($445)+($444))|0);
      $__x1=$446;
      var $447=$__x2;
      var $448=$__x1;
      var $449=((($448)+($447))|0);
      $__x1=$449;
      var $450=$__x1;
      var $451=$__x2;
      var $452=(($450)>>>0) < (($451)>>>0);
      if ($452) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $454=$__x3;
      var $455=((($454)+(65536))|0);
      $__x3=$455;
      label = 91; break;
    case 91: 
      var $457=$__x3;
      var $458=$__x1;
      var $459=$458 >>> 16;
      var $460=((($457)+($459))|0);
      $_qh=$460;
      var $461=$__x1;
      var $462=$461 << 16;
      var $463=$__x0;
      var $464=$463 & 65535;
      var $465=((($462)+($464))|0);
      $_ql=$465;
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $468=$_ql;
      var $469=$n0;
      var $470=((($468)+($469))|0);
      $__x=$470;
      var $471=$_qh;
      var $472=$r;
      var $473=((($472)+(1))|0);
      var $474=((($471)+($473))|0);
      var $475=$__x;
      var $476=$_ql;
      var $477=(($475)>>>0) < (($476)>>>0);
      var $478=(($477)&1);
      var $479=((($474)+($478))|0);
      $_qh=$479;
      var $480=$__x;
      $_ql=$480;
      label = 94; break;
    case 94: 
      var $482=$n0;
      var $483=$_qh;
      var $484=$6;
      var $485=Math.imul($483,$484);
      var $486=((($482)-($485))|0);
      $_r=$486;
      var $487=$_r;
      var $488=$_ql;
      var $489=(($487)>>>0) > (($488)>>>0);
      var $490=(($489)&1);
      var $491=(((-$490))|0);
      $_mask=$491;
      var $492=$_mask;
      var $493=$_qh;
      var $494=((($493)+($492))|0);
      $_qh=$494;
      var $495=$_mask;
      var $496=$6;
      var $497=$495 & $496;
      var $498=$_r;
      var $499=((($498)+($497))|0);
      $_r=$499;
      var $500=$_r;
      var $501=$6;
      var $502=(($500)>>>0) >= (($501)>>>0);
      var $503=(($502)&1);
      var $504=(($503)|0)!=0;
      var $505=(($504)&1);
      var $506=($505);
      var $507=(($506)|0)!=0;
      if ($507) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $509=$6;
      var $510=$_r;
      var $511=((($510)-($509))|0);
      $_r=$511;
      var $512=$_qh;
      var $513=((($512)+(1))|0);
      $_qh=$513;
      label = 96; break;
    case 96: 
      var $515=$_r;
      $r=$515;
      var $516=$_qh;
      var $517=$2;
      HEAP32[(($517)>>2)]=$516;
      label = 97; break;
    case 97: 
      var $519=$r;
      var $520=$519 >>> 0;
      $r=$520;
      var $521=$2;
      var $522=((($521)-(4))|0);
      $2=$522;
      label = 98; break;
    case 98: 
      var $524=$i;
      var $525=((($524)-(1))|0);
      $i=$525;
      label = 86; break;
    case 99: 
      var $527=$3;
      var $528=((($527)-(1))|0);
      $i=$528;
      label = 100; break;
    case 100: 
      var $530=$i;
      var $531=(($530)|0) >= 0;
      if ($531) { label = 101; break; } else { label = 109; break; }
    case 101: 
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      var $535=$r;
      $__u27=$535;
      var $536=$dinv;
      $__v28=$536;
      var $537=$__u27;
      var $538=$537 & 65535;
      $__ul23=$538;
      var $539=$__u27;
      var $540=$539 >>> 16;
      $__uh25=$540;
      var $541=$__v28;
      var $542=$541 & 65535;
      $__vl24=$542;
      var $543=$__v28;
      var $544=$543 >>> 16;
      $__vh26=$544;
      var $545=$__ul23;
      var $546=$__vl24;
      var $547=Math.imul($545,$546);
      $__x019=$547;
      var $548=$__ul23;
      var $549=$__vh26;
      var $550=Math.imul($548,$549);
      $__x120=$550;
      var $551=$__uh25;
      var $552=$__vl24;
      var $553=Math.imul($551,$552);
      $__x221=$553;
      var $554=$__uh25;
      var $555=$__vh26;
      var $556=Math.imul($554,$555);
      $__x322=$556;
      var $557=$__x019;
      var $558=$557 >>> 16;
      var $559=$__x120;
      var $560=((($559)+($558))|0);
      $__x120=$560;
      var $561=$__x221;
      var $562=$__x120;
      var $563=((($562)+($561))|0);
      $__x120=$563;
      var $564=$__x120;
      var $565=$__x221;
      var $566=(($564)>>>0) < (($565)>>>0);
      if ($566) { label = 104; break; } else { label = 105; break; }
    case 104: 
      var $568=$__x322;
      var $569=((($568)+(65536))|0);
      $__x322=$569;
      label = 105; break;
    case 105: 
      var $571=$__x322;
      var $572=$__x120;
      var $573=$572 >>> 16;
      var $574=((($571)+($573))|0);
      $_qh15=$574;
      var $575=$__x120;
      var $576=$575 << 16;
      var $577=$__x019;
      var $578=$577 & 65535;
      var $579=((($576)+($578))|0);
      $_ql16=$579;
      label = 106; break;
    case 106: 
      var $581=$r;
      var $582=((($581)+(1))|0);
      var $583=$_qh15;
      var $584=((($583)+($582))|0);
      $_qh15=$584;
      var $585=$_qh15;
      var $586=(((-$585))|0);
      var $587=$6;
      var $588=Math.imul($586,$587);
      $_r17=$588;
      var $589=$_r17;
      var $590=$_ql16;
      var $591=(($589)>>>0) > (($590)>>>0);
      var $592=(($591)&1);
      var $593=(((-$592))|0);
      $_mask18=$593;
      var $594=$_mask18;
      var $595=$_qh15;
      var $596=((($595)+($594))|0);
      $_qh15=$596;
      var $597=$_mask18;
      var $598=$6;
      var $599=$597 & $598;
      var $600=$_r17;
      var $601=((($600)+($599))|0);
      $_r17=$601;
      var $602=$_r17;
      $r=$602;
      var $603=$_qh15;
      var $604=$2;
      HEAP32[(($604)>>2)]=$603;
      label = 107; break;
    case 107: 
      var $606=$r;
      var $607=$606 >>> 0;
      $r=$607;
      var $608=$2;
      var $609=((($608)-(4))|0);
      $2=$609;
      label = 108; break;
    case 108: 
      var $611=$i;
      var $612=((($611)-(1))|0);
      $i=$612;
      label = 100; break;
    case 109: 
      var $614=$r;
      $1=$614;
      label = 180; break;
    case 110: 
      var $616=$5;
      var $617=(($616)|0)!=0;
      if ($617) { label = 111; break; } else { label = 116; break; }
    case 111: 
      var $619=$5;
      var $620=((($619)-(1))|0);
      var $621=$4;
      var $622=(($621+($620<<2))|0);
      var $623=HEAP32[(($622)>>2)];
      var $624=$623 << 0;
      $n1=$624;
      var $625=$n1;
      var $626=$6;
      var $627=(($625)>>>0) < (($626)>>>0);
      if ($627) { label = 112; break; } else { label = 115; break; }
    case 112: 
      var $629=$n1;
      var $630=$629 >>> 0;
      $r=$630;
      var $631=$2;
      var $632=((($631)-(4))|0);
      $2=$632;
      HEAP32[(($631)>>2)]=0;
      var $633=$n;
      var $634=((($633)-(1))|0);
      $n=$634;
      var $635=$n;
      var $636=(($635)|0)==0;
      if ($636) { label = 113; break; } else { label = 114; break; }
    case 113: 
      var $638=$r;
      $1=$638;
      label = 180; break;
    case 114: 
      var $640=$5;
      var $641=((($640)-(1))|0);
      $5=$641;
      label = 115; break;
    case 115: 
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      var $645=$6;
      $__xr=$645;
      var $646=$__xr;
      var $647=(($646)>>>0) < 65536;
      if ($647) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $649=$__xr;
      var $650=(($649)>>>0) < 256;
      var $651=$650 ? 1 : 9;
      var $657 = $651;label = 120; break;
    case 119: 
      var $653=$__xr;
      var $654=(($653)>>>0) < 16777216;
      var $655=$654 ? 17 : 25;
      var $657 = $655;label = 120; break;
    case 120: 
      var $657;
      $__a=$657;
      var $658=$__a;
      var $659=(((33)-($658))|0);
      var $660=$__xr;
      var $661=$__a;
      var $662=$660 >>> (($661)>>>0);
      var $663=((5250424+$662)|0);
      var $664=HEAP8[($663)];
      var $665=(($664)&255);
      var $666=((($659)-($665))|0);
      $cnt=$666;
      label = 121; break;
    case 121: 
      var $668=$cnt;
      var $669=$6;
      var $670=$669 << $668;
      $6=$670;
      var $671=$cnt;
      var $672=$r;
      var $673=$672 << $671;
      $r=$673;
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      label = 125; break;
    case 125: 
      label = 126; break;
    case 126: 
      label = 127; break;
    case 127: 
      label = 128; break;
    case 128: 
      label = 129; break;
    case 129: 
      var $682=$6;
      var $683=$682 >>> 16;
      $__d131=$683;
      var $684=$6;
      var $685=$684 & 65535;
      $__d032=$685;
      var $686=$6;
      var $687=$686 ^ -1;
      var $688=$__d131;
      var $689=Math.floor(((($687)>>>0))/((($688)>>>0)));
      $__q133=$689;
      var $690=$6;
      var $691=$690 ^ -1;
      var $692=$__q133;
      var $693=$__d131;
      var $694=Math.imul($692,$693);
      var $695=((($691)-($694))|0);
      $__r135=$695;
      var $696=$__q133;
      var $697=$__d032;
      var $698=Math.imul($696,$697);
      $__m37=$698;
      var $699=$__r135;
      var $700=($699<<16);
      var $701=$700 | 65535;
      $__r135=$701;
      var $702=$__r135;
      var $703=$__m37;
      var $704=(($702)>>>0) < (($703)>>>0);
      if ($704) { label = 130; break; } else { label = 135; break; }
    case 130: 
      var $706=$__q133;
      var $707=((($706)-(1))|0);
      $__q133=$707;
      var $708=$6;
      var $709=$__r135;
      var $710=((($709)+($708))|0);
      $__r135=$710;
      var $711=$__r135;
      var $712=$6;
      var $713=(($711)>>>0) >= (($712)>>>0);
      if ($713) { label = 131; break; } else { label = 134; break; }
    case 131: 
      var $715=$__r135;
      var $716=$__m37;
      var $717=(($715)>>>0) < (($716)>>>0);
      if ($717) { label = 132; break; } else { label = 133; break; }
    case 132: 
      var $719=$__q133;
      var $720=((($719)-(1))|0);
      $__q133=$720;
      var $721=$6;
      var $722=$__r135;
      var $723=((($722)+($721))|0);
      $__r135=$723;
      label = 133; break;
    case 133: 
      label = 134; break;
    case 134: 
      label = 135; break;
    case 135: 
      var $727=$__m37;
      var $728=$__r135;
      var $729=((($728)-($727))|0);
      $__r135=$729;
      var $730=$__r135;
      var $731=$__d131;
      var $732=Math.floor(((($730)>>>0))/((($731)>>>0)));
      $__q034=$732;
      var $733=$__r135;
      var $734=$__q034;
      var $735=$__d131;
      var $736=Math.imul($734,$735);
      var $737=((($733)-($736))|0);
      $__r036=$737;
      var $738=$__q034;
      var $739=$__d032;
      var $740=Math.imul($738,$739);
      $__m37=$740;
      var $741=$__r036;
      var $742=($741<<16);
      var $743=$742 | 65535;
      $__r036=$743;
      var $744=$__r036;
      var $745=$__m37;
      var $746=(($744)>>>0) < (($745)>>>0);
      if ($746) { label = 136; break; } else { label = 141; break; }
    case 136: 
      var $748=$__q034;
      var $749=((($748)-(1))|0);
      $__q034=$749;
      var $750=$6;
      var $751=$__r036;
      var $752=((($751)+($750))|0);
      $__r036=$752;
      var $753=$__r036;
      var $754=$6;
      var $755=(($753)>>>0) >= (($754)>>>0);
      if ($755) { label = 137; break; } else { label = 140; break; }
    case 137: 
      var $757=$__r036;
      var $758=$__m37;
      var $759=(($757)>>>0) < (($758)>>>0);
      if ($759) { label = 138; break; } else { label = 139; break; }
    case 138: 
      var $761=$__q034;
      var $762=((($761)-(1))|0);
      $__q034=$762;
      var $763=$6;
      var $764=$__r036;
      var $765=((($764)+($763))|0);
      $__r036=$765;
      label = 139; break;
    case 139: 
      label = 140; break;
    case 140: 
      label = 141; break;
    case 141: 
      var $769=$__m37;
      var $770=$__r036;
      var $771=((($770)-($769))|0);
      $__r036=$771;
      var $772=$__q133;
      var $773=($772<<16);
      var $774=$__q034;
      var $775=$773 | $774;
      $dinv29=$775;
      var $776=$__r036;
      $_dummy30=$776;
      label = 142; break;
    case 142: 
      label = 143; break;
    case 143: 
      var $779=$5;
      var $780=(($779)|0)!=0;
      if ($780) { label = 144; break; } else { label = 169; break; }
    case 144: 
      var $782=$5;
      var $783=((($782)-(1))|0);
      var $784=$4;
      var $785=(($784+($783<<2))|0);
      var $786=HEAP32[(($785)>>2)];
      var $787=$786 << 0;
      $n1=$787;
      var $788=$n1;
      var $789=$cnt;
      var $790=(((32)-($789))|0);
      var $791=$788 >>> (($790)>>>0);
      var $792=$r;
      var $793=$792 | $791;
      $r=$793;
      var $794=$5;
      var $795=((($794)-(2))|0);
      $i=$795;
      label = 145; break;
    case 145: 
      var $797=$i;
      var $798=(($797)|0) >= 0;
      if ($798) { label = 146; break; } else { label = 158; break; }
    case 146: 
      var $800=$i;
      var $801=$4;
      var $802=(($801+($800<<2))|0);
      var $803=HEAP32[(($802)>>2)];
      var $804=$803 << 0;
      $n0=$804;
      var $805=$n1;
      var $806=$cnt;
      var $807=$805 << $806;
      var $808=$n0;
      var $809=$cnt;
      var $810=(((32)-($809))|0);
      var $811=$808 >>> (($810)>>>0);
      var $812=$807 | $811;
      $nshift=$812;
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      var $815=$r;
      $__u50=$815;
      var $816=$dinv29;
      $__v51=$816;
      var $817=$__u50;
      var $818=$817 & 65535;
      $__ul46=$818;
      var $819=$__u50;
      var $820=$819 >>> 16;
      $__uh48=$820;
      var $821=$__v51;
      var $822=$821 & 65535;
      $__vl47=$822;
      var $823=$__v51;
      var $824=$823 >>> 16;
      $__vh49=$824;
      var $825=$__ul46;
      var $826=$__vl47;
      var $827=Math.imul($825,$826);
      $__x042=$827;
      var $828=$__ul46;
      var $829=$__vh49;
      var $830=Math.imul($828,$829);
      $__x143=$830;
      var $831=$__uh48;
      var $832=$__vl47;
      var $833=Math.imul($831,$832);
      $__x244=$833;
      var $834=$__uh48;
      var $835=$__vh49;
      var $836=Math.imul($834,$835);
      $__x345=$836;
      var $837=$__x042;
      var $838=$837 >>> 16;
      var $839=$__x143;
      var $840=((($839)+($838))|0);
      $__x143=$840;
      var $841=$__x244;
      var $842=$__x143;
      var $843=((($842)+($841))|0);
      $__x143=$843;
      var $844=$__x143;
      var $845=$__x244;
      var $846=(($844)>>>0) < (($845)>>>0);
      if ($846) { label = 149; break; } else { label = 150; break; }
    case 149: 
      var $848=$__x345;
      var $849=((($848)+(65536))|0);
      $__x345=$849;
      label = 150; break;
    case 150: 
      var $851=$__x345;
      var $852=$__x143;
      var $853=$852 >>> 16;
      var $854=((($851)+($853))|0);
      $_qh38=$854;
      var $855=$__x143;
      var $856=$855 << 16;
      var $857=$__x042;
      var $858=$857 & 65535;
      var $859=((($856)+($858))|0);
      $_ql39=$859;
      label = 151; break;
    case 151: 
      label = 152; break;
    case 152: 
      var $862=$_ql39;
      var $863=$nshift;
      var $864=((($862)+($863))|0);
      $__x52=$864;
      var $865=$_qh38;
      var $866=$r;
      var $867=((($866)+(1))|0);
      var $868=((($865)+($867))|0);
      var $869=$__x52;
      var $870=$_ql39;
      var $871=(($869)>>>0) < (($870)>>>0);
      var $872=(($871)&1);
      var $873=((($868)+($872))|0);
      $_qh38=$873;
      var $874=$__x52;
      $_ql39=$874;
      label = 153; break;
    case 153: 
      var $876=$nshift;
      var $877=$_qh38;
      var $878=$6;
      var $879=Math.imul($877,$878);
      var $880=((($876)-($879))|0);
      $_r40=$880;
      var $881=$_r40;
      var $882=$_ql39;
      var $883=(($881)>>>0) > (($882)>>>0);
      var $884=(($883)&1);
      var $885=(((-$884))|0);
      $_mask41=$885;
      var $886=$_mask41;
      var $887=$_qh38;
      var $888=((($887)+($886))|0);
      $_qh38=$888;
      var $889=$_mask41;
      var $890=$6;
      var $891=$889 & $890;
      var $892=$_r40;
      var $893=((($892)+($891))|0);
      $_r40=$893;
      var $894=$_r40;
      var $895=$6;
      var $896=(($894)>>>0) >= (($895)>>>0);
      var $897=(($896)&1);
      var $898=(($897)|0)!=0;
      var $899=(($898)&1);
      var $900=($899);
      var $901=(($900)|0)!=0;
      if ($901) { label = 154; break; } else { label = 155; break; }
    case 154: 
      var $903=$6;
      var $904=$_r40;
      var $905=((($904)-($903))|0);
      $_r40=$905;
      var $906=$_qh38;
      var $907=((($906)+(1))|0);
      $_qh38=$907;
      label = 155; break;
    case 155: 
      var $909=$_r40;
      $r=$909;
      var $910=$_qh38;
      var $911=$2;
      HEAP32[(($911)>>2)]=$910;
      label = 156; break;
    case 156: 
      var $913=$r;
      var $914=$913 >>> 0;
      $r=$914;
      var $915=$2;
      var $916=((($915)-(4))|0);
      $2=$916;
      var $917=$n0;
      $n1=$917;
      label = 157; break;
    case 157: 
      var $919=$i;
      var $920=((($919)-(1))|0);
      $i=$920;
      label = 145; break;
    case 158: 
      label = 159; break;
    case 159: 
      label = 160; break;
    case 160: 
      var $924=$r;
      $__u65=$924;
      var $925=$dinv29;
      $__v66=$925;
      var $926=$__u65;
      var $927=$926 & 65535;
      $__ul61=$927;
      var $928=$__u65;
      var $929=$928 >>> 16;
      $__uh63=$929;
      var $930=$__v66;
      var $931=$930 & 65535;
      $__vl62=$931;
      var $932=$__v66;
      var $933=$932 >>> 16;
      $__vh64=$933;
      var $934=$__ul61;
      var $935=$__vl62;
      var $936=Math.imul($934,$935);
      $__x057=$936;
      var $937=$__ul61;
      var $938=$__vh64;
      var $939=Math.imul($937,$938);
      $__x158=$939;
      var $940=$__uh63;
      var $941=$__vl62;
      var $942=Math.imul($940,$941);
      $__x259=$942;
      var $943=$__uh63;
      var $944=$__vh64;
      var $945=Math.imul($943,$944);
      $__x360=$945;
      var $946=$__x057;
      var $947=$946 >>> 16;
      var $948=$__x158;
      var $949=((($948)+($947))|0);
      $__x158=$949;
      var $950=$__x259;
      var $951=$__x158;
      var $952=((($951)+($950))|0);
      $__x158=$952;
      var $953=$__x158;
      var $954=$__x259;
      var $955=(($953)>>>0) < (($954)>>>0);
      if ($955) { label = 161; break; } else { label = 162; break; }
    case 161: 
      var $957=$__x360;
      var $958=((($957)+(65536))|0);
      $__x360=$958;
      label = 162; break;
    case 162: 
      var $960=$__x360;
      var $961=$__x158;
      var $962=$961 >>> 16;
      var $963=((($960)+($962))|0);
      $_qh53=$963;
      var $964=$__x158;
      var $965=$964 << 16;
      var $966=$__x057;
      var $967=$966 & 65535;
      var $968=((($965)+($967))|0);
      $_ql54=$968;
      label = 163; break;
    case 163: 
      label = 164; break;
    case 164: 
      var $971=$_ql54;
      var $972=$n1;
      var $973=$cnt;
      var $974=$972 << $973;
      var $975=((($971)+($974))|0);
      $__x67=$975;
      var $976=$_qh53;
      var $977=$r;
      var $978=((($977)+(1))|0);
      var $979=((($976)+($978))|0);
      var $980=$__x67;
      var $981=$_ql54;
      var $982=(($980)>>>0) < (($981)>>>0);
      var $983=(($982)&1);
      var $984=((($979)+($983))|0);
      $_qh53=$984;
      var $985=$__x67;
      $_ql54=$985;
      label = 165; break;
    case 165: 
      var $987=$n1;
      var $988=$cnt;
      var $989=$987 << $988;
      var $990=$_qh53;
      var $991=$6;
      var $992=Math.imul($990,$991);
      var $993=((($989)-($992))|0);
      $_r55=$993;
      var $994=$_r55;
      var $995=$_ql54;
      var $996=(($994)>>>0) > (($995)>>>0);
      var $997=(($996)&1);
      var $998=(((-$997))|0);
      $_mask56=$998;
      var $999=$_mask56;
      var $1000=$_qh53;
      var $1001=((($1000)+($999))|0);
      $_qh53=$1001;
      var $1002=$_mask56;
      var $1003=$6;
      var $1004=$1002 & $1003;
      var $1005=$_r55;
      var $1006=((($1005)+($1004))|0);
      $_r55=$1006;
      var $1007=$_r55;
      var $1008=$6;
      var $1009=(($1007)>>>0) >= (($1008)>>>0);
      var $1010=(($1009)&1);
      var $1011=(($1010)|0)!=0;
      var $1012=(($1011)&1);
      var $1013=($1012);
      var $1014=(($1013)|0)!=0;
      if ($1014) { label = 166; break; } else { label = 167; break; }
    case 166: 
      var $1016=$6;
      var $1017=$_r55;
      var $1018=((($1017)-($1016))|0);
      $_r55=$1018;
      var $1019=$_qh53;
      var $1020=((($1019)+(1))|0);
      $_qh53=$1020;
      label = 167; break;
    case 167: 
      var $1022=$_r55;
      $r=$1022;
      var $1023=$_qh53;
      var $1024=$2;
      HEAP32[(($1024)>>2)]=$1023;
      label = 168; break;
    case 168: 
      var $1026=$r;
      var $1027=$1026 >>> 0;
      $r=$1027;
      var $1028=$2;
      var $1029=((($1028)-(4))|0);
      $2=$1029;
      label = 169; break;
    case 169: 
      var $1031=$3;
      var $1032=((($1031)-(1))|0);
      $i=$1032;
      label = 170; break;
    case 170: 
      var $1034=$i;
      var $1035=(($1034)|0) >= 0;
      if ($1035) { label = 171; break; } else { label = 179; break; }
    case 171: 
      label = 172; break;
    case 172: 
      label = 173; break;
    case 173: 
      var $1039=$r;
      $__u80=$1039;
      var $1040=$dinv29;
      $__v81=$1040;
      var $1041=$__u80;
      var $1042=$1041 & 65535;
      $__ul76=$1042;
      var $1043=$__u80;
      var $1044=$1043 >>> 16;
      $__uh78=$1044;
      var $1045=$__v81;
      var $1046=$1045 & 65535;
      $__vl77=$1046;
      var $1047=$__v81;
      var $1048=$1047 >>> 16;
      $__vh79=$1048;
      var $1049=$__ul76;
      var $1050=$__vl77;
      var $1051=Math.imul($1049,$1050);
      $__x072=$1051;
      var $1052=$__ul76;
      var $1053=$__vh79;
      var $1054=Math.imul($1052,$1053);
      $__x173=$1054;
      var $1055=$__uh78;
      var $1056=$__vl77;
      var $1057=Math.imul($1055,$1056);
      $__x274=$1057;
      var $1058=$__uh78;
      var $1059=$__vh79;
      var $1060=Math.imul($1058,$1059);
      $__x375=$1060;
      var $1061=$__x072;
      var $1062=$1061 >>> 16;
      var $1063=$__x173;
      var $1064=((($1063)+($1062))|0);
      $__x173=$1064;
      var $1065=$__x274;
      var $1066=$__x173;
      var $1067=((($1066)+($1065))|0);
      $__x173=$1067;
      var $1068=$__x173;
      var $1069=$__x274;
      var $1070=(($1068)>>>0) < (($1069)>>>0);
      if ($1070) { label = 174; break; } else { label = 175; break; }
    case 174: 
      var $1072=$__x375;
      var $1073=((($1072)+(65536))|0);
      $__x375=$1073;
      label = 175; break;
    case 175: 
      var $1075=$__x375;
      var $1076=$__x173;
      var $1077=$1076 >>> 16;
      var $1078=((($1075)+($1077))|0);
      $_qh68=$1078;
      var $1079=$__x173;
      var $1080=$1079 << 16;
      var $1081=$__x072;
      var $1082=$1081 & 65535;
      var $1083=((($1080)+($1082))|0);
      $_ql69=$1083;
      label = 176; break;
    case 176: 
      var $1085=$r;
      var $1086=((($1085)+(1))|0);
      var $1087=$_qh68;
      var $1088=((($1087)+($1086))|0);
      $_qh68=$1088;
      var $1089=$_qh68;
      var $1090=(((-$1089))|0);
      var $1091=$6;
      var $1092=Math.imul($1090,$1091);
      $_r70=$1092;
      var $1093=$_r70;
      var $1094=$_ql69;
      var $1095=(($1093)>>>0) > (($1094)>>>0);
      var $1096=(($1095)&1);
      var $1097=(((-$1096))|0);
      $_mask71=$1097;
      var $1098=$_mask71;
      var $1099=$_qh68;
      var $1100=((($1099)+($1098))|0);
      $_qh68=$1100;
      var $1101=$_mask71;
      var $1102=$6;
      var $1103=$1101 & $1102;
      var $1104=$_r70;
      var $1105=((($1104)+($1103))|0);
      $_r70=$1105;
      var $1106=$_r70;
      $r=$1106;
      var $1107=$_qh68;
      var $1108=$2;
      HEAP32[(($1108)>>2)]=$1107;
      label = 177; break;
    case 177: 
      var $1110=$r;
      var $1111=$1110 >>> 0;
      $r=$1111;
      var $1112=$2;
      var $1113=((($1112)-(4))|0);
      $2=$1113;
      label = 178; break;
    case 178: 
      var $1115=$i;
      var $1116=((($1115)-(1))|0);
      $i=$1116;
      label = 170; break;
    case 179: 
      var $1118=$r;
      var $1119=$cnt;
      var $1120=$1118 >>> (($1119)>>>0);
      $1=$1120;
      label = 180; break;
    case 180: 
      var $1122=$1;

      return $1122;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_divrem_1["X"]=1;

function ___gmpn_divrem_2($qp, $qxn, $np, $nn, $dp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $most_significant_q_limb;
      var $i;
      var $r1;
      var $r0;
      var $d1;
      var $d0;
      var $di=__stackBase__;
      var $__x;
      var $_v;
      var $_p;
      var $_t1;
      var $_t0;
      var $_mask;
      var $_dummy;
      var $__d1;
      var $__d0;
      var $__q1;
      var $__q0;
      var $__r1;
      var $__r0;
      var $__m;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $n0;
      var $q;
      var $_q0;
      var $_t11;
      var $_t02;
      var $_mask3;
      var $__x04;
      var $__x15;
      var $__x26;
      var $__x37;
      var $__ul8;
      var $__vl9;
      var $__uh10;
      var $__vh11;
      var $__u12;
      var $__v13;
      var $__x14;
      var $__x16;
      var $__x017;
      var $__x118;
      var $__x219;
      var $__x320;
      var $__ul21;
      var $__vl22;
      var $__uh23;
      var $__vh24;
      var $__u25;
      var $__v26;
      var $__x27;
      var $__x28;
      var $__x29;
      var $q30;
      var $_q031;
      var $_t132;
      var $_t033;
      var $_mask34;
      var $__x035;
      var $__x136;
      var $__x237;
      var $__x338;
      var $__ul39;
      var $__vl40;
      var $__uh41;
      var $__vh42;
      var $__u43;
      var $__v44;
      var $__x45;
      var $__x46;
      var $__x047;
      var $__x148;
      var $__x249;
      var $__x350;
      var $__ul51;
      var $__vl52;
      var $__uh53;
      var $__vh54;
      var $__u55;
      var $__v56;
      var $__x57;
      var $__x58;
      var $__x59;
      $1=$qp;
      $2=$qxn;
      $3=$np;
      $4=$nn;
      $5=$dp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $18=$4;
      var $19=((($18)-(2))|0);
      var $20=$3;
      var $21=(($20+($19<<2))|0);
      $3=$21;
      var $22=$5;
      var $23=(($22+4)|0);
      var $24=HEAP32[(($23)>>2)];
      $d1=$24;
      var $25=$5;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      $d0=$27;
      var $28=$3;
      var $29=(($28+4)|0);
      var $30=HEAP32[(($29)>>2)];
      $r1=$30;
      var $31=$3;
      var $32=(($31)|0);
      var $33=HEAP32[(($32)>>2)];
      $r0=$33;
      $most_significant_q_limb=0;
      var $34=$r1;
      var $35=$d1;
      var $36=(($34)>>>0) >= (($35)>>>0);
      if ($36) { label = 15; break; } else { label = 20; break; }
    case 15: 
      var $38=$r1;
      var $39=$d1;
      var $40=(($38)>>>0) > (($39)>>>0);
      if ($40) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $42=$r0;
      var $43=$d0;
      var $44=(($42)>>>0) >= (($43)>>>0);
      if ($44) { label = 17; break; } else { label = 20; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $47=$r0;
      var $48=$d0;
      var $49=((($47)-($48))|0);
      $__x=$49;
      var $50=$r1;
      var $51=$d1;
      var $52=((($50)-($51))|0);
      var $53=$r0;
      var $54=$d0;
      var $55=(($53)>>>0) < (($54)>>>0);
      var $56=(($55)&1);
      var $57=((($52)-($56))|0);
      $r1=$57;
      var $58=$__x;
      $r0=$58;
      label = 19; break;
    case 19: 
      $most_significant_q_limb=1;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $70=$d1;
      var $71=$70 >>> 16;
      $__d1=$71;
      var $72=$d1;
      var $73=$72 & 65535;
      $__d0=$73;
      var $74=$d1;
      var $75=$74 ^ -1;
      var $76=$__d1;
      var $77=Math.floor(((($75)>>>0))/((($76)>>>0)));
      $__q1=$77;
      var $78=$d1;
      var $79=$78 ^ -1;
      var $80=$__q1;
      var $81=$__d1;
      var $82=Math.imul($80,$81);
      var $83=((($79)-($82))|0);
      $__r1=$83;
      var $84=$__q1;
      var $85=$__d0;
      var $86=Math.imul($84,$85);
      $__m=$86;
      var $87=$__r1;
      var $88=($87<<16);
      var $89=$88 | 65535;
      $__r1=$89;
      var $90=$__r1;
      var $91=$__m;
      var $92=(($90)>>>0) < (($91)>>>0);
      if ($92) { label = 30; break; } else { label = 35; break; }
    case 30: 
      var $94=$__q1;
      var $95=((($94)-(1))|0);
      $__q1=$95;
      var $96=$d1;
      var $97=$__r1;
      var $98=((($97)+($96))|0);
      $__r1=$98;
      var $99=$__r1;
      var $100=$d1;
      var $101=(($99)>>>0) >= (($100)>>>0);
      if ($101) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $103=$__r1;
      var $104=$__m;
      var $105=(($103)>>>0) < (($104)>>>0);
      if ($105) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $107=$__q1;
      var $108=((($107)-(1))|0);
      $__q1=$108;
      var $109=$d1;
      var $110=$__r1;
      var $111=((($110)+($109))|0);
      $__r1=$111;
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $115=$__m;
      var $116=$__r1;
      var $117=((($116)-($115))|0);
      $__r1=$117;
      var $118=$__r1;
      var $119=$__d1;
      var $120=Math.floor(((($118)>>>0))/((($119)>>>0)));
      $__q0=$120;
      var $121=$__r1;
      var $122=$__q0;
      var $123=$__d1;
      var $124=Math.imul($122,$123);
      var $125=((($121)-($124))|0);
      $__r0=$125;
      var $126=$__q0;
      var $127=$__d0;
      var $128=Math.imul($126,$127);
      $__m=$128;
      var $129=$__r0;
      var $130=($129<<16);
      var $131=$130 | 65535;
      $__r0=$131;
      var $132=$__r0;
      var $133=$__m;
      var $134=(($132)>>>0) < (($133)>>>0);
      if ($134) { label = 36; break; } else { label = 41; break; }
    case 36: 
      var $136=$__q0;
      var $137=((($136)-(1))|0);
      $__q0=$137;
      var $138=$d1;
      var $139=$__r0;
      var $140=((($139)+($138))|0);
      $__r0=$140;
      var $141=$__r0;
      var $142=$d1;
      var $143=(($141)>>>0) >= (($142)>>>0);
      if ($143) { label = 37; break; } else { label = 40; break; }
    case 37: 
      var $145=$__r0;
      var $146=$__m;
      var $147=(($145)>>>0) < (($146)>>>0);
      if ($147) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $149=$__q0;
      var $150=((($149)-(1))|0);
      $__q0=$150;
      var $151=$d1;
      var $152=$__r0;
      var $153=((($152)+($151))|0);
      $__r0=$153;
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $157=$__m;
      var $158=$__r0;
      var $159=((($158)-($157))|0);
      $__r0=$159;
      var $160=$__q1;
      var $161=($160<<16);
      var $162=$__q0;
      var $163=$161 | $162;
      $_v=$163;
      var $164=$__r0;
      $_dummy=$164;
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $167=$d1;
      var $168=$_v;
      var $169=Math.imul($167,$168);
      $_p=$169;
      var $170=$d0;
      var $171=$_p;
      var $172=((($171)+($170))|0);
      $_p=$172;
      var $173=$_p;
      var $174=$d0;
      var $175=(($173)>>>0) < (($174)>>>0);
      if ($175) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $177=$_v;
      var $178=((($177)-(1))|0);
      $_v=$178;
      var $179=$_p;
      var $180=$d1;
      var $181=(($179)>>>0) >= (($180)>>>0);
      var $182=(($181)&1);
      var $183=(((-$182))|0);
      $_mask=$183;
      var $184=$d1;
      var $185=$_p;
      var $186=((($185)-($184))|0);
      $_p=$186;
      var $187=$_mask;
      var $188=$_v;
      var $189=((($188)+($187))|0);
      $_v=$189;
      var $190=$_mask;
      var $191=$d1;
      var $192=$190 & $191;
      var $193=$_p;
      var $194=((($193)-($192))|0);
      $_p=$194;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $197=$d0;
      $__u=$197;
      var $198=$_v;
      $__v=$198;
      var $199=$__u;
      var $200=$199 & 65535;
      $__ul=$200;
      var $201=$__u;
      var $202=$201 >>> 16;
      $__uh=$202;
      var $203=$__v;
      var $204=$203 & 65535;
      $__vl=$204;
      var $205=$__v;
      var $206=$205 >>> 16;
      $__vh=$206;
      var $207=$__ul;
      var $208=$__vl;
      var $209=Math.imul($207,$208);
      $__x0=$209;
      var $210=$__ul;
      var $211=$__vh;
      var $212=Math.imul($210,$211);
      $__x1=$212;
      var $213=$__uh;
      var $214=$__vl;
      var $215=Math.imul($213,$214);
      $__x2=$215;
      var $216=$__uh;
      var $217=$__vh;
      var $218=Math.imul($216,$217);
      $__x3=$218;
      var $219=$__x0;
      var $220=$219 >>> 16;
      var $221=$__x1;
      var $222=((($221)+($220))|0);
      $__x1=$222;
      var $223=$__x2;
      var $224=$__x1;
      var $225=((($224)+($223))|0);
      $__x1=$225;
      var $226=$__x1;
      var $227=$__x2;
      var $228=(($226)>>>0) < (($227)>>>0);
      if ($228) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $230=$__x3;
      var $231=((($230)+(65536))|0);
      $__x3=$231;
      label = 48; break;
    case 48: 
      var $233=$__x3;
      var $234=$__x1;
      var $235=$234 >>> 16;
      var $236=((($233)+($235))|0);
      $_t1=$236;
      var $237=$__x1;
      var $238=$237 << 16;
      var $239=$__x0;
      var $240=$239 & 65535;
      var $241=((($238)+($240))|0);
      $_t0=$241;
      label = 49; break;
    case 49: 
      var $243=$_t1;
      var $244=$_p;
      var $245=((($244)+($243))|0);
      $_p=$245;
      var $246=$_p;
      var $247=$_t1;
      var $248=(($246)>>>0) < (($247)>>>0);
      if ($248) { label = 50; break; } else { label = 56; break; }
    case 50: 
      var $250=$_v;
      var $251=((($250)-(1))|0);
      $_v=$251;
      var $252=$_p;
      var $253=$d1;
      var $254=(($252)>>>0) >= (($253)>>>0);
      var $255=(($254)&1);
      var $256=(($255)|0)!=0;
      var $257=(($256)&1);
      var $258=($257);
      var $259=(($258)|0)!=0;
      if ($259) { label = 51; break; } else { label = 55; break; }
    case 51: 
      var $261=$_p;
      var $262=$d1;
      var $263=(($261)>>>0) > (($262)>>>0);
      if ($263) { label = 53; break; } else { label = 52; break; }
    case 52: 
      var $265=$_t0;
      var $266=$d0;
      var $267=(($265)>>>0) >= (($266)>>>0);
      if ($267) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $269=$_v;
      var $270=((($269)-(1))|0);
      $_v=$270;
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $274=$_v;
      var $275=(($di)|0);
      HEAP32[(($275)>>2)]=$274;
      label = 57; break;
    case 57: 
      var $277=$2;
      var $278=$1;
      var $279=(($278+($277<<2))|0);
      $1=$279;
      var $280=$4;
      var $281=((($280)-(2))|0);
      var $282=((($281)-(1))|0);
      $i=$282;
      label = 58; break;
    case 58: 
      var $284=$i;
      var $285=(($284)|0) >= 0;
      if ($285) { label = 59; break; } else { label = 86; break; }
    case 59: 
      var $287=$3;
      var $288=((($287)-(4))|0);
      var $289=HEAP32[(($288)>>2)];
      $n0=$289;
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      var $292=$r1;
      $__u12=$292;
      var $293=(($di)|0);
      var $294=HEAP32[(($293)>>2)];
      $__v13=$294;
      var $295=$__u12;
      var $296=$295 & 65535;
      $__ul8=$296;
      var $297=$__u12;
      var $298=$297 >>> 16;
      $__uh10=$298;
      var $299=$__v13;
      var $300=$299 & 65535;
      $__vl9=$300;
      var $301=$__v13;
      var $302=$301 >>> 16;
      $__vh11=$302;
      var $303=$__ul8;
      var $304=$__vl9;
      var $305=Math.imul($303,$304);
      $__x04=$305;
      var $306=$__ul8;
      var $307=$__vh11;
      var $308=Math.imul($306,$307);
      $__x15=$308;
      var $309=$__uh10;
      var $310=$__vl9;
      var $311=Math.imul($309,$310);
      $__x26=$311;
      var $312=$__uh10;
      var $313=$__vh11;
      var $314=Math.imul($312,$313);
      $__x37=$314;
      var $315=$__x04;
      var $316=$315 >>> 16;
      var $317=$__x15;
      var $318=((($317)+($316))|0);
      $__x15=$318;
      var $319=$__x26;
      var $320=$__x15;
      var $321=((($320)+($319))|0);
      $__x15=$321;
      var $322=$__x15;
      var $323=$__x26;
      var $324=(($322)>>>0) < (($323)>>>0);
      if ($324) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $326=$__x37;
      var $327=((($326)+(65536))|0);
      $__x37=$327;
      label = 63; break;
    case 63: 
      var $329=$__x37;
      var $330=$__x15;
      var $331=$330 >>> 16;
      var $332=((($329)+($331))|0);
      $q=$332;
      var $333=$__x15;
      var $334=$333 << 16;
      var $335=$__x04;
      var $336=$335 & 65535;
      var $337=((($334)+($336))|0);
      $_q0=$337;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $340=$_q0;
      var $341=$r0;
      var $342=((($340)+($341))|0);
      $__x14=$342;
      var $343=$q;
      var $344=$r1;
      var $345=((($343)+($344))|0);
      var $346=$__x14;
      var $347=$_q0;
      var $348=(($346)>>>0) < (($347)>>>0);
      var $349=(($348)&1);
      var $350=((($345)+($349))|0);
      $q=$350;
      var $351=$__x14;
      $_q0=$351;
      label = 66; break;
    case 66: 
      var $353=$r0;
      var $354=$d1;
      var $355=$q;
      var $356=Math.imul($354,$355);
      var $357=((($353)-($356))|0);
      $r1=$357;
      label = 67; break;
    case 67: 
      var $359=$n0;
      var $360=$d0;
      var $361=((($359)-($360))|0);
      $__x16=$361;
      var $362=$r1;
      var $363=$d1;
      var $364=((($362)-($363))|0);
      var $365=$n0;
      var $366=$d0;
      var $367=(($365)>>>0) < (($366)>>>0);
      var $368=(($367)&1);
      var $369=((($364)-($368))|0);
      $r1=$369;
      var $370=$__x16;
      $r0=$370;
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $373=$d0;
      $__u25=$373;
      var $374=$q;
      $__v26=$374;
      var $375=$__u25;
      var $376=$375 & 65535;
      $__ul21=$376;
      var $377=$__u25;
      var $378=$377 >>> 16;
      $__uh23=$378;
      var $379=$__v26;
      var $380=$379 & 65535;
      $__vl22=$380;
      var $381=$__v26;
      var $382=$381 >>> 16;
      $__vh24=$382;
      var $383=$__ul21;
      var $384=$__vl22;
      var $385=Math.imul($383,$384);
      $__x017=$385;
      var $386=$__ul21;
      var $387=$__vh24;
      var $388=Math.imul($386,$387);
      $__x118=$388;
      var $389=$__uh23;
      var $390=$__vl22;
      var $391=Math.imul($389,$390);
      $__x219=$391;
      var $392=$__uh23;
      var $393=$__vh24;
      var $394=Math.imul($392,$393);
      $__x320=$394;
      var $395=$__x017;
      var $396=$395 >>> 16;
      var $397=$__x118;
      var $398=((($397)+($396))|0);
      $__x118=$398;
      var $399=$__x219;
      var $400=$__x118;
      var $401=((($400)+($399))|0);
      $__x118=$401;
      var $402=$__x118;
      var $403=$__x219;
      var $404=(($402)>>>0) < (($403)>>>0);
      if ($404) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $406=$__x320;
      var $407=((($406)+(65536))|0);
      $__x320=$407;
      label = 71; break;
    case 71: 
      var $409=$__x320;
      var $410=$__x118;
      var $411=$410 >>> 16;
      var $412=((($409)+($411))|0);
      $_t11=$412;
      var $413=$__x118;
      var $414=$413 << 16;
      var $415=$__x017;
      var $416=$415 & 65535;
      var $417=((($414)+($416))|0);
      $_t02=$417;
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $420=$r0;
      var $421=$_t02;
      var $422=((($420)-($421))|0);
      $__x27=$422;
      var $423=$r1;
      var $424=$_t11;
      var $425=((($423)-($424))|0);
      var $426=$r0;
      var $427=$_t02;
      var $428=(($426)>>>0) < (($427)>>>0);
      var $429=(($428)&1);
      var $430=((($425)-($429))|0);
      $r1=$430;
      var $431=$__x27;
      $r0=$431;
      label = 74; break;
    case 74: 
      var $433=$q;
      var $434=((($433)+(1))|0);
      $q=$434;
      var $435=$r1;
      var $436=$_q0;
      var $437=(($435)>>>0) >= (($436)>>>0);
      var $438=(($437)&1);
      var $439=(((-$438))|0);
      $_mask3=$439;
      var $440=$_mask3;
      var $441=$q;
      var $442=((($441)+($440))|0);
      $q=$442;
      label = 75; break;
    case 75: 
      var $444=$r0;
      var $445=$_mask3;
      var $446=$d0;
      var $447=$445 & $446;
      var $448=((($444)+($447))|0);
      $__x28=$448;
      var $449=$r1;
      var $450=$_mask3;
      var $451=$d1;
      var $452=$450 & $451;
      var $453=((($449)+($452))|0);
      var $454=$__x28;
      var $455=$r0;
      var $456=(($454)>>>0) < (($455)>>>0);
      var $457=(($456)&1);
      var $458=((($453)+($457))|0);
      $r1=$458;
      var $459=$__x28;
      $r0=$459;
      label = 76; break;
    case 76: 
      var $461=$r1;
      var $462=$d1;
      var $463=(($461)>>>0) >= (($462)>>>0);
      var $464=(($463)&1);
      var $465=(($464)|0)!=0;
      var $466=(($465)&1);
      var $467=($466);
      var $468=(($467)|0)!=0;
      if ($468) { label = 77; break; } else { label = 83; break; }
    case 77: 
      var $470=$r1;
      var $471=$d1;
      var $472=(($470)>>>0) > (($471)>>>0);
      if ($472) { label = 79; break; } else { label = 78; break; }
    case 78: 
      var $474=$r0;
      var $475=$d0;
      var $476=(($474)>>>0) >= (($475)>>>0);
      if ($476) { label = 79; break; } else { label = 82; break; }
    case 79: 
      var $478=$q;
      var $479=((($478)+(1))|0);
      $q=$479;
      label = 80; break;
    case 80: 
      var $481=$r0;
      var $482=$d0;
      var $483=((($481)-($482))|0);
      $__x29=$483;
      var $484=$r1;
      var $485=$d1;
      var $486=((($484)-($485))|0);
      var $487=$r0;
      var $488=$d0;
      var $489=(($487)>>>0) < (($488)>>>0);
      var $490=(($489)&1);
      var $491=((($486)-($490))|0);
      $r1=$491;
      var $492=$__x29;
      $r0=$492;
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      var $497=$3;
      var $498=((($497)-(4))|0);
      $3=$498;
      var $499=$q;
      var $500=$i;
      var $501=$1;
      var $502=(($501+($500<<2))|0);
      HEAP32[(($502)>>2)]=$499;
      label = 85; break;
    case 85: 
      var $504=$i;
      var $505=((($504)-(1))|0);
      $i=$505;
      label = 58; break;
    case 86: 
      var $507=$2;
      var $508=(($507)|0)!=0;
      var $509=(($508)&1);
      var $510=(($509)|0)!=0;
      var $511=(($510)&1);
      var $512=($511);
      var $513=(($512)|0)!=0;
      if ($513) { label = 87; break; } else { label = 117; break; }
    case 87: 
      var $515=$2;
      var $516=$1;
      var $517=(((-$515))|0);
      var $518=(($516+($517<<2))|0);
      $1=$518;
      var $519=$2;
      var $520=((($519)-(1))|0);
      $i=$520;
      label = 88; break;
    case 88: 
      var $522=$i;
      var $523=(($522)|0) >= 0;
      if ($523) { label = 89; break; } else { label = 116; break; }
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $527=$r1;
      $__u43=$527;
      var $528=(($di)|0);
      var $529=HEAP32[(($528)>>2)];
      $__v44=$529;
      var $530=$__u43;
      var $531=$530 & 65535;
      $__ul39=$531;
      var $532=$__u43;
      var $533=$532 >>> 16;
      $__uh41=$533;
      var $534=$__v44;
      var $535=$534 & 65535;
      $__vl40=$535;
      var $536=$__v44;
      var $537=$536 >>> 16;
      $__vh42=$537;
      var $538=$__ul39;
      var $539=$__vl40;
      var $540=Math.imul($538,$539);
      $__x035=$540;
      var $541=$__ul39;
      var $542=$__vh42;
      var $543=Math.imul($541,$542);
      $__x136=$543;
      var $544=$__uh41;
      var $545=$__vl40;
      var $546=Math.imul($544,$545);
      $__x237=$546;
      var $547=$__uh41;
      var $548=$__vh42;
      var $549=Math.imul($547,$548);
      $__x338=$549;
      var $550=$__x035;
      var $551=$550 >>> 16;
      var $552=$__x136;
      var $553=((($552)+($551))|0);
      $__x136=$553;
      var $554=$__x237;
      var $555=$__x136;
      var $556=((($555)+($554))|0);
      $__x136=$556;
      var $557=$__x136;
      var $558=$__x237;
      var $559=(($557)>>>0) < (($558)>>>0);
      if ($559) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $561=$__x338;
      var $562=((($561)+(65536))|0);
      $__x338=$562;
      label = 93; break;
    case 93: 
      var $564=$__x338;
      var $565=$__x136;
      var $566=$565 >>> 16;
      var $567=((($564)+($566))|0);
      $q30=$567;
      var $568=$__x136;
      var $569=$568 << 16;
      var $570=$__x035;
      var $571=$570 & 65535;
      var $572=((($569)+($571))|0);
      $_q031=$572;
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $575=$_q031;
      var $576=$r0;
      var $577=((($575)+($576))|0);
      $__x45=$577;
      var $578=$q30;
      var $579=$r1;
      var $580=((($578)+($579))|0);
      var $581=$__x45;
      var $582=$_q031;
      var $583=(($581)>>>0) < (($582)>>>0);
      var $584=(($583)&1);
      var $585=((($580)+($584))|0);
      $q30=$585;
      var $586=$__x45;
      $_q031=$586;
      label = 96; break;
    case 96: 
      var $588=$r0;
      var $589=$d1;
      var $590=$q30;
      var $591=Math.imul($589,$590);
      var $592=((($588)-($591))|0);
      $r1=$592;
      label = 97; break;
    case 97: 
      var $594=$d0;
      var $595=(((-$594))|0);
      $__x46=$595;
      var $596=$r1;
      var $597=$d1;
      var $598=((($596)-($597))|0);
      var $599=$d0;
      var $600=0 < (($599)>>>0);
      var $601=(($600)&1);
      var $602=((($598)-($601))|0);
      $r1=$602;
      var $603=$__x46;
      $r0=$603;
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      var $606=$d0;
      $__u55=$606;
      var $607=$q30;
      $__v56=$607;
      var $608=$__u55;
      var $609=$608 & 65535;
      $__ul51=$609;
      var $610=$__u55;
      var $611=$610 >>> 16;
      $__uh53=$611;
      var $612=$__v56;
      var $613=$612 & 65535;
      $__vl52=$613;
      var $614=$__v56;
      var $615=$614 >>> 16;
      $__vh54=$615;
      var $616=$__ul51;
      var $617=$__vl52;
      var $618=Math.imul($616,$617);
      $__x047=$618;
      var $619=$__ul51;
      var $620=$__vh54;
      var $621=Math.imul($619,$620);
      $__x148=$621;
      var $622=$__uh53;
      var $623=$__vl52;
      var $624=Math.imul($622,$623);
      $__x249=$624;
      var $625=$__uh53;
      var $626=$__vh54;
      var $627=Math.imul($625,$626);
      $__x350=$627;
      var $628=$__x047;
      var $629=$628 >>> 16;
      var $630=$__x148;
      var $631=((($630)+($629))|0);
      $__x148=$631;
      var $632=$__x249;
      var $633=$__x148;
      var $634=((($633)+($632))|0);
      $__x148=$634;
      var $635=$__x148;
      var $636=$__x249;
      var $637=(($635)>>>0) < (($636)>>>0);
      if ($637) { label = 100; break; } else { label = 101; break; }
    case 100: 
      var $639=$__x350;
      var $640=((($639)+(65536))|0);
      $__x350=$640;
      label = 101; break;
    case 101: 
      var $642=$__x350;
      var $643=$__x148;
      var $644=$643 >>> 16;
      var $645=((($642)+($644))|0);
      $_t132=$645;
      var $646=$__x148;
      var $647=$646 << 16;
      var $648=$__x047;
      var $649=$648 & 65535;
      var $650=((($647)+($649))|0);
      $_t033=$650;
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      var $653=$r0;
      var $654=$_t033;
      var $655=((($653)-($654))|0);
      $__x57=$655;
      var $656=$r1;
      var $657=$_t132;
      var $658=((($656)-($657))|0);
      var $659=$r0;
      var $660=$_t033;
      var $661=(($659)>>>0) < (($660)>>>0);
      var $662=(($661)&1);
      var $663=((($658)-($662))|0);
      $r1=$663;
      var $664=$__x57;
      $r0=$664;
      label = 104; break;
    case 104: 
      var $666=$q30;
      var $667=((($666)+(1))|0);
      $q30=$667;
      var $668=$r1;
      var $669=$_q031;
      var $670=(($668)>>>0) >= (($669)>>>0);
      var $671=(($670)&1);
      var $672=(((-$671))|0);
      $_mask34=$672;
      var $673=$_mask34;
      var $674=$q30;
      var $675=((($674)+($673))|0);
      $q30=$675;
      label = 105; break;
    case 105: 
      var $677=$r0;
      var $678=$_mask34;
      var $679=$d0;
      var $680=$678 & $679;
      var $681=((($677)+($680))|0);
      $__x58=$681;
      var $682=$r1;
      var $683=$_mask34;
      var $684=$d1;
      var $685=$683 & $684;
      var $686=((($682)+($685))|0);
      var $687=$__x58;
      var $688=$r0;
      var $689=(($687)>>>0) < (($688)>>>0);
      var $690=(($689)&1);
      var $691=((($686)+($690))|0);
      $r1=$691;
      var $692=$__x58;
      $r0=$692;
      label = 106; break;
    case 106: 
      var $694=$r1;
      var $695=$d1;
      var $696=(($694)>>>0) >= (($695)>>>0);
      var $697=(($696)&1);
      var $698=(($697)|0)!=0;
      var $699=(($698)&1);
      var $700=($699);
      var $701=(($700)|0)!=0;
      if ($701) { label = 107; break; } else { label = 113; break; }
    case 107: 
      var $703=$r1;
      var $704=$d1;
      var $705=(($703)>>>0) > (($704)>>>0);
      if ($705) { label = 109; break; } else { label = 108; break; }
    case 108: 
      var $707=$r0;
      var $708=$d0;
      var $709=(($707)>>>0) >= (($708)>>>0);
      if ($709) { label = 109; break; } else { label = 112; break; }
    case 109: 
      var $711=$q30;
      var $712=((($711)+(1))|0);
      $q30=$712;
      label = 110; break;
    case 110: 
      var $714=$r0;
      var $715=$d0;
      var $716=((($714)-($715))|0);
      $__x59=$716;
      var $717=$r1;
      var $718=$d1;
      var $719=((($717)-($718))|0);
      var $720=$r0;
      var $721=$d0;
      var $722=(($720)>>>0) < (($721)>>>0);
      var $723=(($722)&1);
      var $724=((($719)-($723))|0);
      $r1=$724;
      var $725=$__x59;
      $r0=$725;
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      label = 114; break;
    case 114: 
      var $730=$q30;
      var $731=$i;
      var $732=$1;
      var $733=(($732+($731<<2))|0);
      HEAP32[(($733)>>2)]=$730;
      label = 115; break;
    case 115: 
      var $735=$i;
      var $736=((($735)-(1))|0);
      $i=$736;
      label = 88; break;
    case 116: 
      label = 117; break;
    case 117: 
      var $739=$r1;
      var $740=$3;
      var $741=(($740+4)|0);
      HEAP32[(($741)>>2)]=$739;
      var $742=$r0;
      var $743=$3;
      var $744=(($743)|0);
      HEAP32[(($744)>>2)]=$742;
      var $745=$most_significant_q_limb;
      STACKTOP = __stackBase__;
      return $745;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_divrem_2["X"]=1;

function ___gmpn_lshiftc($rp, $up, $n, $cnt) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $high_limb;
      var $low_limb;
      var $tnc;
      var $i;
      var $retval;
      $1=$rp;
      $2=$up;
      $3=$n;
      $4=$cnt;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $13=$3;
      var $14=$2;
      var $15=(($14+($13<<2))|0);
      $2=$15;
      var $16=$3;
      var $17=$1;
      var $18=(($17+($16<<2))|0);
      $1=$18;
      var $19=$4;
      var $20=(((32)-($19))|0);
      $tnc=$20;
      var $21=$2;
      var $22=((($21)-(4))|0);
      $2=$22;
      var $23=HEAP32[(($22)>>2)];
      $low_limb=$23;
      var $24=$low_limb;
      var $25=$tnc;
      var $26=$24 >>> (($25)>>>0);
      $retval=$26;
      var $27=$low_limb;
      var $28=$4;
      var $29=$27 << $28;
      $high_limb=$29;
      var $30=$3;
      var $31=((($30)-(1))|0);
      $i=$31;
      label = 11; break;
    case 11: 
      var $33=$i;
      var $34=(($33)|0)!=0;
      if ($34) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $36=$2;
      var $37=((($36)-(4))|0);
      $2=$37;
      var $38=HEAP32[(($37)>>2)];
      $low_limb=$38;
      var $39=$high_limb;
      var $40=$low_limb;
      var $41=$tnc;
      var $42=$40 >>> (($41)>>>0);
      var $43=$39 | $42;
      var $44=$43 ^ -1;
      var $45=$1;
      var $46=((($45)-(4))|0);
      $1=$46;
      HEAP32[(($46)>>2)]=$44;
      var $47=$low_limb;
      var $48=$4;
      var $49=$47 << $48;
      $high_limb=$49;
      label = 13; break;
    case 13: 
      var $51=$i;
      var $52=((($51)-(1))|0);
      $i=$52;
      label = 11; break;
    case 14: 
      var $54=$high_limb;
      var $55=$54 ^ -1;
      var $56=$1;
      var $57=((($56)-(4))|0);
      $1=$57;
      HEAP32[(($57)>>2)]=$55;
      var $58=$retval;

      return $58;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_lshiftc["X"]=1;

function ___gmpn_preinv_divrem_1($qp, $xsize, $ap, $size, $d_unnorm, $dinv, $shift) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $ahigh;
      var $qhigh;
      var $r;
      var $i;
      var $n1;
      var $n0;
      var $d;
      var $_qh;
      var $_ql;
      var $_r;
      var $_mask;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x;
      var $_qh1;
      var $_ql2;
      var $_r3;
      var $_mask4;
      var $__x05;
      var $__x16;
      var $__x27;
      var $__x38;
      var $__ul9;
      var $__vl10;
      var $__uh11;
      var $__vh12;
      var $__u13;
      var $__v14;
      var $__x15;
      var $_qh16;
      var $_ql17;
      var $_r18;
      var $_mask19;
      var $__x020;
      var $__x121;
      var $__x222;
      var $__x323;
      var $__ul24;
      var $__vl25;
      var $__uh26;
      var $__vh27;
      var $__u28;
      var $__v29;
      var $__x30;
      var $_qh31;
      var $_ql32;
      var $_r33;
      var $_mask34;
      var $__x035;
      var $__x136;
      var $__x237;
      var $__x338;
      var $__ul39;
      var $__vl40;
      var $__uh41;
      var $__vh42;
      var $__u43;
      var $__v44;
      $1=$qp;
      $2=$xsize;
      $3=$ap;
      $4=$size;
      $5=$d_unnorm;
      $6=$dinv;
      $7=$shift;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $16=$4;
      var $17=((($16)-(1))|0);
      var $18=$3;
      var $19=(($18+($17<<2))|0);
      var $20=HEAP32[(($19)>>2)];
      $ahigh=$20;
      var $21=$5;
      var $22=$7;
      var $23=$21 << $22;
      $d=$23;
      var $24=$4;
      var $25=$2;
      var $26=((($24)+($25))|0);
      var $27=((($26)-(1))|0);
      var $28=$1;
      var $29=(($28+($27<<2))|0);
      $1=$29;
      var $30=$7;
      var $31=(($30)|0)==0;
      if ($31) { label = 11; break; } else { label = 29; break; }
    case 11: 
      var $33=$ahigh;
      $r=$33;
      var $34=$r;
      var $35=$d;
      var $36=(($34)>>>0) >= (($35)>>>0);
      var $37=(($36)&1);
      $qhigh=$37;
      var $38=$qhigh;
      var $39=(($38)|0)!=0;
      if ($39) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $41=$r;
      var $42=$d;
      var $43=((($41)-($42))|0);
      var $47 = $43;label = 14; break;
    case 13: 
      var $45=$r;
      var $47 = $45;label = 14; break;
    case 14: 
      var $47;
      $r=$47;
      var $48=$qhigh;
      var $49=$1;
      var $50=((($49)-(4))|0);
      $1=$50;
      HEAP32[(($49)>>2)]=$48;
      var $51=$4;
      var $52=((($51)-(1))|0);
      $4=$52;
      var $53=$4;
      var $54=((($53)-(1))|0);
      $i=$54;
      label = 15; break;
    case 15: 
      var $56=$i;
      var $57=(($56)|0) >= 0;
      if ($57) { label = 16; break; } else { label = 28; break; }
    case 16: 
      var $59=$i;
      var $60=$3;
      var $61=(($60+($59<<2))|0);
      var $62=HEAP32[(($61)>>2)];
      $n0=$62;
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $65=$r;
      $__u=$65;
      var $66=$6;
      $__v=$66;
      var $67=$__u;
      var $68=$67 & 65535;
      $__ul=$68;
      var $69=$__u;
      var $70=$69 >>> 16;
      $__uh=$70;
      var $71=$__v;
      var $72=$71 & 65535;
      $__vl=$72;
      var $73=$__v;
      var $74=$73 >>> 16;
      $__vh=$74;
      var $75=$__ul;
      var $76=$__vl;
      var $77=Math.imul($75,$76);
      $__x0=$77;
      var $78=$__ul;
      var $79=$__vh;
      var $80=Math.imul($78,$79);
      $__x1=$80;
      var $81=$__uh;
      var $82=$__vl;
      var $83=Math.imul($81,$82);
      $__x2=$83;
      var $84=$__uh;
      var $85=$__vh;
      var $86=Math.imul($84,$85);
      $__x3=$86;
      var $87=$__x0;
      var $88=$87 >>> 16;
      var $89=$__x1;
      var $90=((($89)+($88))|0);
      $__x1=$90;
      var $91=$__x2;
      var $92=$__x1;
      var $93=((($92)+($91))|0);
      $__x1=$93;
      var $94=$__x1;
      var $95=$__x2;
      var $96=(($94)>>>0) < (($95)>>>0);
      if ($96) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $98=$__x3;
      var $99=((($98)+(65536))|0);
      $__x3=$99;
      label = 20; break;
    case 20: 
      var $101=$__x3;
      var $102=$__x1;
      var $103=$102 >>> 16;
      var $104=((($101)+($103))|0);
      $_qh=$104;
      var $105=$__x1;
      var $106=$105 << 16;
      var $107=$__x0;
      var $108=$107 & 65535;
      var $109=((($106)+($108))|0);
      $_ql=$109;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $112=$_ql;
      var $113=$n0;
      var $114=((($112)+($113))|0);
      $__x=$114;
      var $115=$_qh;
      var $116=$r;
      var $117=((($116)+(1))|0);
      var $118=((($115)+($117))|0);
      var $119=$__x;
      var $120=$_ql;
      var $121=(($119)>>>0) < (($120)>>>0);
      var $122=(($121)&1);
      var $123=((($118)+($122))|0);
      $_qh=$123;
      var $124=$__x;
      $_ql=$124;
      label = 23; break;
    case 23: 
      var $126=$n0;
      var $127=$_qh;
      var $128=$d;
      var $129=Math.imul($127,$128);
      var $130=((($126)-($129))|0);
      $_r=$130;
      var $131=$_r;
      var $132=$_ql;
      var $133=(($131)>>>0) > (($132)>>>0);
      var $134=(($133)&1);
      var $135=(((-$134))|0);
      $_mask=$135;
      var $136=$_mask;
      var $137=$_qh;
      var $138=((($137)+($136))|0);
      $_qh=$138;
      var $139=$_mask;
      var $140=$d;
      var $141=$139 & $140;
      var $142=$_r;
      var $143=((($142)+($141))|0);
      $_r=$143;
      var $144=$_r;
      var $145=$d;
      var $146=(($144)>>>0) >= (($145)>>>0);
      var $147=(($146)&1);
      var $148=(($147)|0)!=0;
      var $149=(($148)&1);
      var $150=($149);
      var $151=(($150)|0)!=0;
      if ($151) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $153=$d;
      var $154=$_r;
      var $155=((($154)-($153))|0);
      $_r=$155;
      var $156=$_qh;
      var $157=((($156)+(1))|0);
      $_qh=$157;
      label = 25; break;
    case 25: 
      var $159=$_r;
      $r=$159;
      var $160=$_qh;
      var $161=$1;
      HEAP32[(($161)>>2)]=$160;
      label = 26; break;
    case 26: 
      var $163=$1;
      var $164=((($163)-(4))|0);
      $1=$164;
      label = 27; break;
    case 27: 
      var $166=$i;
      var $167=((($166)-(1))|0);
      $i=$167;
      label = 15; break;
    case 28: 
      label = 60; break;
    case 29: 
      $r=0;
      var $170=$ahigh;
      var $171=$5;
      var $172=(($170)>>>0) < (($171)>>>0);
      if ($172) { label = 30; break; } else { label = 33; break; }
    case 30: 
      var $174=$ahigh;
      var $175=$7;
      var $176=$174 << $175;
      $r=$176;
      var $177=$1;
      var $178=((($177)-(4))|0);
      $1=$178;
      HEAP32[(($177)>>2)]=0;
      var $179=$4;
      var $180=((($179)-(1))|0);
      $4=$180;
      var $181=$4;
      var $182=(($181)|0)==0;
      if ($182) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 61; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $186=$4;
      var $187=((($186)-(1))|0);
      var $188=$3;
      var $189=(($188+($187<<2))|0);
      var $190=HEAP32[(($189)>>2)];
      $n1=$190;
      var $191=$n1;
      var $192=$7;
      var $193=(((32)-($192))|0);
      var $194=$191 >>> (($193)>>>0);
      var $195=$r;
      var $196=$195 | $194;
      $r=$196;
      var $197=$4;
      var $198=((($197)-(2))|0);
      $i=$198;
      label = 34; break;
    case 34: 
      var $200=$i;
      var $201=(($200)|0) >= 0;
      if ($201) { label = 35; break; } else { label = 49; break; }
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $205=$i;
      var $206=$3;
      var $207=(($206+($205<<2))|0);
      var $208=HEAP32[(($207)>>2)];
      $n0=$208;
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $211=$r;
      $__u13=$211;
      var $212=$6;
      $__v14=$212;
      var $213=$__u13;
      var $214=$213 & 65535;
      $__ul9=$214;
      var $215=$__u13;
      var $216=$215 >>> 16;
      $__uh11=$216;
      var $217=$__v14;
      var $218=$217 & 65535;
      $__vl10=$218;
      var $219=$__v14;
      var $220=$219 >>> 16;
      $__vh12=$220;
      var $221=$__ul9;
      var $222=$__vl10;
      var $223=Math.imul($221,$222);
      $__x05=$223;
      var $224=$__ul9;
      var $225=$__vh12;
      var $226=Math.imul($224,$225);
      $__x16=$226;
      var $227=$__uh11;
      var $228=$__vl10;
      var $229=Math.imul($227,$228);
      $__x27=$229;
      var $230=$__uh11;
      var $231=$__vh12;
      var $232=Math.imul($230,$231);
      $__x38=$232;
      var $233=$__x05;
      var $234=$233 >>> 16;
      var $235=$__x16;
      var $236=((($235)+($234))|0);
      $__x16=$236;
      var $237=$__x27;
      var $238=$__x16;
      var $239=((($238)+($237))|0);
      $__x16=$239;
      var $240=$__x16;
      var $241=$__x27;
      var $242=(($240)>>>0) < (($241)>>>0);
      if ($242) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $244=$__x38;
      var $245=((($244)+(65536))|0);
      $__x38=$245;
      label = 41; break;
    case 41: 
      var $247=$__x38;
      var $248=$__x16;
      var $249=$248 >>> 16;
      var $250=((($247)+($249))|0);
      $_qh1=$250;
      var $251=$__x16;
      var $252=$251 << 16;
      var $253=$__x05;
      var $254=$253 & 65535;
      var $255=((($252)+($254))|0);
      $_ql2=$255;
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $258=$_ql2;
      var $259=$n1;
      var $260=$7;
      var $261=$259 << $260;
      var $262=$n0;
      var $263=$7;
      var $264=(((32)-($263))|0);
      var $265=$262 >>> (($264)>>>0);
      var $266=$261 | $265;
      var $267=((($258)+($266))|0);
      $__x15=$267;
      var $268=$_qh1;
      var $269=$r;
      var $270=((($269)+(1))|0);
      var $271=((($268)+($270))|0);
      var $272=$__x15;
      var $273=$_ql2;
      var $274=(($272)>>>0) < (($273)>>>0);
      var $275=(($274)&1);
      var $276=((($271)+($275))|0);
      $_qh1=$276;
      var $277=$__x15;
      $_ql2=$277;
      label = 44; break;
    case 44: 
      var $279=$n1;
      var $280=$7;
      var $281=$279 << $280;
      var $282=$n0;
      var $283=$7;
      var $284=(((32)-($283))|0);
      var $285=$282 >>> (($284)>>>0);
      var $286=$281 | $285;
      var $287=$_qh1;
      var $288=$d;
      var $289=Math.imul($287,$288);
      var $290=((($286)-($289))|0);
      $_r3=$290;
      var $291=$_r3;
      var $292=$_ql2;
      var $293=(($291)>>>0) > (($292)>>>0);
      var $294=(($293)&1);
      var $295=(((-$294))|0);
      $_mask4=$295;
      var $296=$_mask4;
      var $297=$_qh1;
      var $298=((($297)+($296))|0);
      $_qh1=$298;
      var $299=$_mask4;
      var $300=$d;
      var $301=$299 & $300;
      var $302=$_r3;
      var $303=((($302)+($301))|0);
      $_r3=$303;
      var $304=$_r3;
      var $305=$d;
      var $306=(($304)>>>0) >= (($305)>>>0);
      var $307=(($306)&1);
      var $308=(($307)|0)!=0;
      var $309=(($308)&1);
      var $310=($309);
      var $311=(($310)|0)!=0;
      if ($311) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $313=$d;
      var $314=$_r3;
      var $315=((($314)-($313))|0);
      $_r3=$315;
      var $316=$_qh1;
      var $317=((($316)+(1))|0);
      $_qh1=$317;
      label = 46; break;
    case 46: 
      var $319=$_r3;
      $r=$319;
      var $320=$_qh1;
      var $321=$1;
      HEAP32[(($321)>>2)]=$320;
      label = 47; break;
    case 47: 
      var $323=$1;
      var $324=((($323)-(4))|0);
      $1=$324;
      var $325=$n0;
      $n1=$325;
      label = 48; break;
    case 48: 
      var $327=$i;
      var $328=((($327)-(1))|0);
      $i=$328;
      label = 34; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $332=$r;
      $__u28=$332;
      var $333=$6;
      $__v29=$333;
      var $334=$__u28;
      var $335=$334 & 65535;
      $__ul24=$335;
      var $336=$__u28;
      var $337=$336 >>> 16;
      $__uh26=$337;
      var $338=$__v29;
      var $339=$338 & 65535;
      $__vl25=$339;
      var $340=$__v29;
      var $341=$340 >>> 16;
      $__vh27=$341;
      var $342=$__ul24;
      var $343=$__vl25;
      var $344=Math.imul($342,$343);
      $__x020=$344;
      var $345=$__ul24;
      var $346=$__vh27;
      var $347=Math.imul($345,$346);
      $__x121=$347;
      var $348=$__uh26;
      var $349=$__vl25;
      var $350=Math.imul($348,$349);
      $__x222=$350;
      var $351=$__uh26;
      var $352=$__vh27;
      var $353=Math.imul($351,$352);
      $__x323=$353;
      var $354=$__x020;
      var $355=$354 >>> 16;
      var $356=$__x121;
      var $357=((($356)+($355))|0);
      $__x121=$357;
      var $358=$__x222;
      var $359=$__x121;
      var $360=((($359)+($358))|0);
      $__x121=$360;
      var $361=$__x121;
      var $362=$__x222;
      var $363=(($361)>>>0) < (($362)>>>0);
      if ($363) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $365=$__x323;
      var $366=((($365)+(65536))|0);
      $__x323=$366;
      label = 53; break;
    case 53: 
      var $368=$__x323;
      var $369=$__x121;
      var $370=$369 >>> 16;
      var $371=((($368)+($370))|0);
      $_qh16=$371;
      var $372=$__x121;
      var $373=$372 << 16;
      var $374=$__x020;
      var $375=$374 & 65535;
      var $376=((($373)+($375))|0);
      $_ql17=$376;
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $379=$_ql17;
      var $380=$n1;
      var $381=$7;
      var $382=$380 << $381;
      var $383=((($379)+($382))|0);
      $__x30=$383;
      var $384=$_qh16;
      var $385=$r;
      var $386=((($385)+(1))|0);
      var $387=((($384)+($386))|0);
      var $388=$__x30;
      var $389=$_ql17;
      var $390=(($388)>>>0) < (($389)>>>0);
      var $391=(($390)&1);
      var $392=((($387)+($391))|0);
      $_qh16=$392;
      var $393=$__x30;
      $_ql17=$393;
      label = 56; break;
    case 56: 
      var $395=$n1;
      var $396=$7;
      var $397=$395 << $396;
      var $398=$_qh16;
      var $399=$d;
      var $400=Math.imul($398,$399);
      var $401=((($397)-($400))|0);
      $_r18=$401;
      var $402=$_r18;
      var $403=$_ql17;
      var $404=(($402)>>>0) > (($403)>>>0);
      var $405=(($404)&1);
      var $406=(((-$405))|0);
      $_mask19=$406;
      var $407=$_mask19;
      var $408=$_qh16;
      var $409=((($408)+($407))|0);
      $_qh16=$409;
      var $410=$_mask19;
      var $411=$d;
      var $412=$410 & $411;
      var $413=$_r18;
      var $414=((($413)+($412))|0);
      $_r18=$414;
      var $415=$_r18;
      var $416=$d;
      var $417=(($415)>>>0) >= (($416)>>>0);
      var $418=(($417)&1);
      var $419=(($418)|0)!=0;
      var $420=(($419)&1);
      var $421=($420);
      var $422=(($421)|0)!=0;
      if ($422) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $424=$d;
      var $425=$_r18;
      var $426=((($425)-($424))|0);
      $_r18=$426;
      var $427=$_qh16;
      var $428=((($427)+(1))|0);
      $_qh16=$428;
      label = 58; break;
    case 58: 
      var $430=$_r18;
      $r=$430;
      var $431=$_qh16;
      var $432=$1;
      HEAP32[(($432)>>2)]=$431;
      label = 59; break;
    case 59: 
      var $434=$1;
      var $435=((($434)-(4))|0);
      $1=$435;
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      $i=0;
      label = 62; break;
    case 62: 
      var $439=$i;
      var $440=$2;
      var $441=(($439)|0) < (($440)|0);
      if ($441) { label = 63; break; } else { label = 71; break; }
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $445=$r;
      $__u43=$445;
      var $446=$6;
      $__v44=$446;
      var $447=$__u43;
      var $448=$447 & 65535;
      $__ul39=$448;
      var $449=$__u43;
      var $450=$449 >>> 16;
      $__uh41=$450;
      var $451=$__v44;
      var $452=$451 & 65535;
      $__vl40=$452;
      var $453=$__v44;
      var $454=$453 >>> 16;
      $__vh42=$454;
      var $455=$__ul39;
      var $456=$__vl40;
      var $457=Math.imul($455,$456);
      $__x035=$457;
      var $458=$__ul39;
      var $459=$__vh42;
      var $460=Math.imul($458,$459);
      $__x136=$460;
      var $461=$__uh41;
      var $462=$__vl40;
      var $463=Math.imul($461,$462);
      $__x237=$463;
      var $464=$__uh41;
      var $465=$__vh42;
      var $466=Math.imul($464,$465);
      $__x338=$466;
      var $467=$__x035;
      var $468=$467 >>> 16;
      var $469=$__x136;
      var $470=((($469)+($468))|0);
      $__x136=$470;
      var $471=$__x237;
      var $472=$__x136;
      var $473=((($472)+($471))|0);
      $__x136=$473;
      var $474=$__x136;
      var $475=$__x237;
      var $476=(($474)>>>0) < (($475)>>>0);
      if ($476) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $478=$__x338;
      var $479=((($478)+(65536))|0);
      $__x338=$479;
      label = 67; break;
    case 67: 
      var $481=$__x338;
      var $482=$__x136;
      var $483=$482 >>> 16;
      var $484=((($481)+($483))|0);
      $_qh31=$484;
      var $485=$__x136;
      var $486=$485 << 16;
      var $487=$__x035;
      var $488=$487 & 65535;
      var $489=((($486)+($488))|0);
      $_ql32=$489;
      label = 68; break;
    case 68: 
      var $491=$r;
      var $492=((($491)+(1))|0);
      var $493=$_qh31;
      var $494=((($493)+($492))|0);
      $_qh31=$494;
      var $495=$_qh31;
      var $496=(((-$495))|0);
      var $497=$d;
      var $498=Math.imul($496,$497);
      $_r33=$498;
      var $499=$_r33;
      var $500=$_ql32;
      var $501=(($499)>>>0) > (($500)>>>0);
      var $502=(($501)&1);
      var $503=(((-$502))|0);
      $_mask34=$503;
      var $504=$_mask34;
      var $505=$_qh31;
      var $506=((($505)+($504))|0);
      $_qh31=$506;
      var $507=$_mask34;
      var $508=$d;
      var $509=$507 & $508;
      var $510=$_r33;
      var $511=((($510)+($509))|0);
      $_r33=$511;
      var $512=$_r33;
      $r=$512;
      var $513=$_qh31;
      var $514=$1;
      HEAP32[(($514)>>2)]=$513;
      label = 69; break;
    case 69: 
      var $516=$1;
      var $517=((($516)-(4))|0);
      $1=$517;
      label = 70; break;
    case 70: 
      var $519=$i;
      var $520=((($519)+(1))|0);
      $i=$520;
      label = 62; break;
    case 71: 
      var $522=$r;
      var $523=$7;
      var $524=$522 >>> (($523)>>>0);

      return $524;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_preinv_divrem_1["X"]=1;

function ___gmpn_mul($prodp, $up, $un, $vp, $vn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 128)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $tp=__stackBase__;
      var $cy;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__x1;
      var $__p;
      var $__n2;
      var $__dst3;
      var $__src4;
      var $__x5;
      var $__x6;
      var $__p7;
      var $scratch;
      var $cy8;
      var $ws;
      var $__n9;
      var $__dst10;
      var $__src11;
      var $__x12;
      var $__x13;
      var $__p14;
      var $__n15;
      var $__dst16;
      var $__src17;
      var $__x18;
      var $__x19;
      var $__p20;
      var $scratch21;
      var $cy22;
      var $ws23;
      var $__n24;
      var $__dst25;
      var $__src26;
      var $__x27;
      var $__x28;
      var $__p29;
      var $__n30;
      var $__dst31;
      var $__src32;
      var $__x33;
      var $__x34;
      var $__p35;
      var $scratch36;
      var $__tmp_marker=(__stackBase__)+(120);
      var $cy37;
      var $ws38;
      var $__tmp_marker39=(__stackBase__)+(124);
      var $__n40;
      var $__dst41;
      var $__src42;
      var $__x43;
      var $__x44;
      var $__p45;
      var $__n46;
      var $__dst47;
      var $__src48;
      var $__x49;
      var $__x50;
      var $__p51;
      $1=$prodp;
      $2=$up;
      $3=$un;
      $4=$vp;
      $5=$vn;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $14=$3;
      var $15=$5;
      var $16=(($14)|0)==(($15)|0);
      if ($16) { label = 11; break; } else { label = 15; break; }
    case 11: 
      var $18=$2;
      var $19=$4;
      var $20=(($18)|0)==(($19)|0);
      if ($20) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $22=$1;
      var $23=$2;
      var $24=$3;
      ___gmpn_sqr($22, $23, $24);
      label = 14; break;
    case 13: 
      var $26=$1;
      var $27=$2;
      var $28=$4;
      var $29=$3;
      ___gmpn_mul_n($26, $27, $28, $29);
      label = 14; break;
    case 14: 
      label = 325; break;
    case 15: 
      var $32=$5;
      var $33=(($32)|0) < 30;
      if ($33) { label = 16; break; } else { label = 79; break; }
    case 16: 
      var $35=$3;
      var $36=(($35)|0) <= 500;
      if ($36) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $38=$5;
      var $39=(($38)|0)==1;
      if ($39) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $41=$1;
      var $42=$2;
      var $43=$3;
      var $44=$4;
      var $45=$5;
      ___gmpn_mul_basecase($41, $42, $43, $44, $45);
      label = 78; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $49=$1;
      var $50=$2;
      var $51=$4;
      var $52=$5;
      ___gmpn_mul_basecase($49, $50, 500, $51, $52);
      var $53=$1;
      var $54=(($53+2000)|0);
      $1=$54;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $63=$5;
      var $64=(($63)|0)!=0;
      if ($64) { label = 30; break; } else { label = 36; break; }
    case 30: 
      var $66=$5;
      var $67=((($66)-(1))|0);
      $__n=$67;
      var $68=(($tp)|0);
      $__dst=$68;
      var $69=$1;
      $__src=$69;
      var $70=$__src;
      var $71=(($70+4)|0);
      $__src=$71;
      var $72=HEAP32[(($70)>>2)];
      $__x=$72;
      var $73=$__n;
      var $74=(($73)|0)!=0;
      if ($74) { label = 31; break; } else { label = 35; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $77=$__x;
      var $78=$__dst;
      var $79=(($78+4)|0);
      $__dst=$79;
      HEAP32[(($78)>>2)]=$77;
      var $80=$__src;
      var $81=(($80+4)|0);
      $__src=$81;
      var $82=HEAP32[(($80)>>2)];
      $__x=$82;
      label = 33; break;
    case 33: 
      var $84=$__n;
      var $85=((($84)-(1))|0);
      $__n=$85;
      var $86=(($85)|0)!=0;
      if ($86) { label = 32; break; } else { label = 34; break; }
    case 34: 
      label = 35; break;
    case 35: 
      var $89=$__x;
      var $90=$__dst;
      var $91=(($90+4)|0);
      $__dst=$91;
      HEAP32[(($90)>>2)]=$89;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $95=$2;
      var $96=(($95+2000)|0);
      $2=$96;
      var $97=$3;
      var $98=((($97)-(500))|0);
      $3=$98;
      label = 39; break;
    case 39: 
      var $100=$3;
      var $101=(($100)|0) > 500;
      if ($101) { label = 40; break; } else { label = 65; break; }
    case 40: 
      var $103=$1;
      var $104=$2;
      var $105=$4;
      var $106=$5;
      ___gmpn_mul_basecase($103, $104, 500, $105, $106);
      var $107=$1;
      var $108=$1;
      var $109=(($tp)|0);
      var $110=$5;
      var $111=___gmpn_add_n($107, $108, $109, $110);
      $cy=$111;
      label = 41; break;
    case 41: 
      var $113=$1;
      var $114=$5;
      var $115=(($113+($114<<2))|0);
      $__p=$115;
      var $116=$__p;
      var $117=HEAP32[(($116)>>2)];
      var $118=$cy;
      var $119=((($117)+($118))|0);
      $__x1=$119;
      var $120=$__x1;
      var $121=$__p;
      HEAP32[(($121)>>2)]=$120;
      var $122=$__x1;
      var $123=$cy;
      var $124=(($122)>>>0) < (($123)>>>0);
      if ($124) { label = 42; break; } else { label = 46; break; }
    case 42: 
      label = 43; break;
    case 43: 
      var $127=$__p;
      var $128=(($127+4)|0);
      $__p=$128;
      var $129=HEAP32[(($128)>>2)];
      var $130=((($129)+(1))|0);
      HEAP32[(($128)>>2)]=$130;
      var $131=(($130)|0)==0;
      if ($131) { label = 44; break; } else { label = 45; break; }
    case 44: 
      label = 43; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $136=$1;
      var $137=(($136+2000)|0);
      $1=$137;
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $146=$5;
      var $147=(($146)|0)!=0;
      if ($147) { label = 56; break; } else { label = 62; break; }
    case 56: 
      var $149=$5;
      var $150=((($149)-(1))|0);
      $__n2=$150;
      var $151=(($tp)|0);
      $__dst3=$151;
      var $152=$1;
      $__src4=$152;
      var $153=$__src4;
      var $154=(($153+4)|0);
      $__src4=$154;
      var $155=HEAP32[(($153)>>2)];
      $__x5=$155;
      var $156=$__n2;
      var $157=(($156)|0)!=0;
      if ($157) { label = 57; break; } else { label = 61; break; }
    case 57: 
      label = 58; break;
    case 58: 
      var $160=$__x5;
      var $161=$__dst3;
      var $162=(($161+4)|0);
      $__dst3=$162;
      HEAP32[(($161)>>2)]=$160;
      var $163=$__src4;
      var $164=(($163+4)|0);
      $__src4=$164;
      var $165=HEAP32[(($163)>>2)];
      $__x5=$165;
      label = 59; break;
    case 59: 
      var $167=$__n2;
      var $168=((($167)-(1))|0);
      $__n2=$168;
      var $169=(($168)|0)!=0;
      if ($169) { label = 58; break; } else { label = 60; break; }
    case 60: 
      label = 61; break;
    case 61: 
      var $172=$__x5;
      var $173=$__dst3;
      var $174=(($173+4)|0);
      $__dst3=$174;
      HEAP32[(($173)>>2)]=$172;
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $178=$2;
      var $179=(($178+2000)|0);
      $2=$179;
      var $180=$3;
      var $181=((($180)-(500))|0);
      $3=$181;
      label = 39; break;
    case 65: 
      var $183=$3;
      var $184=$5;
      var $185=(($183)|0) > (($184)|0);
      if ($185) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $187=$1;
      var $188=$2;
      var $189=$3;
      var $190=$4;
      var $191=$5;
      ___gmpn_mul_basecase($187, $188, $189, $190, $191);
      label = 70; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $195=$1;
      var $196=$4;
      var $197=$5;
      var $198=$2;
      var $199=$3;
      ___gmpn_mul_basecase($195, $196, $197, $198, $199);
      label = 70; break;
    case 70: 
      var $201=$1;
      var $202=$1;
      var $203=(($tp)|0);
      var $204=$5;
      var $205=___gmpn_add_n($201, $202, $203, $204);
      $cy=$205;
      label = 71; break;
    case 71: 
      var $207=$1;
      var $208=$5;
      var $209=(($207+($208<<2))|0);
      $__p7=$209;
      var $210=$__p7;
      var $211=HEAP32[(($210)>>2)];
      var $212=$cy;
      var $213=((($211)+($212))|0);
      $__x6=$213;
      var $214=$__x6;
      var $215=$__p7;
      HEAP32[(($215)>>2)]=$214;
      var $216=$__x6;
      var $217=$cy;
      var $218=(($216)>>>0) < (($217)>>>0);
      if ($218) { label = 72; break; } else { label = 76; break; }
    case 72: 
      label = 73; break;
    case 73: 
      var $221=$__p7;
      var $222=(($221+4)|0);
      $__p7=$222;
      var $223=HEAP32[(($222)>>2)];
      var $224=((($223)+(1))|0);
      HEAP32[(($222)>>2)]=$224;
      var $225=(($224)|0)==0;
      if ($225) { label = 74; break; } else { label = 75; break; }
    case 74: 
      label = 73; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 324; break;
    case 79: 
      var $232=$5;
      var $233=(($232)|0) >= 100;
      if ($233) { label = 147; break; } else { label = 80; break; }
    case 80: 
      var $235=$5;
      var $236=($235<<4);
      var $237=((($236)+(100))|0);
      var $238=($237<<2);
      var $239=STACKTOP;STACKTOP = (STACKTOP + $238)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $240=$239;
      $scratch=$240;
      var $241=$3;
      var $242=$5;
      var $243=((($242)*(3))&-1);
      var $244=(($241)|0) >= (($243)|0);
      if ($244) { label = 81; break; } else { label = 139; break; }
    case 81: 
      var $246=$5;
      var $247=($246<<2);
      var $248=($247<<2);
      var $249=STACKTOP;STACKTOP = (STACKTOP + $248)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $250=$249;
      $ws=$250;
      var $251=$1;
      var $252=$2;
      var $253=$5;
      var $254=($253<<1);
      var $255=$4;
      var $256=$5;
      var $257=$scratch;
      ___gmpn_toom42_mul($251, $252, $254, $255, $256, $257);
      var $258=$5;
      var $259=($258<<1);
      var $260=$3;
      var $261=((($260)-($259))|0);
      $3=$261;
      var $262=$5;
      var $263=($262<<1);
      var $264=$2;
      var $265=(($264+($263<<2))|0);
      $2=$265;
      var $266=$5;
      var $267=($266<<1);
      var $268=$1;
      var $269=(($268+($267<<2))|0);
      $1=$269;
      label = 82; break;
    case 82: 
      var $271=$3;
      var $272=$5;
      var $273=((($272)*(3))&-1);
      var $274=(($271)|0) >= (($273)|0);
      if ($274) { label = 83; break; } else { label = 108; break; }
    case 83: 
      var $276=$ws;
      var $277=$2;
      var $278=$5;
      var $279=($278<<1);
      var $280=$4;
      var $281=$5;
      var $282=$scratch;
      ___gmpn_toom42_mul($276, $277, $279, $280, $281, $282);
      var $283=$5;
      var $284=($283<<1);
      var $285=$3;
      var $286=((($285)-($284))|0);
      $3=$286;
      var $287=$5;
      var $288=($287<<1);
      var $289=$2;
      var $290=(($289+($288<<2))|0);
      $2=$290;
      var $291=$1;
      var $292=$1;
      var $293=$ws;
      var $294=$5;
      var $295=___gmpn_add_n($291, $292, $293, $294);
      $cy8=$295;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $304=$5;
      var $305=($304<<1);
      var $306=(($305)|0)!=0;
      if ($306) { label = 92; break; } else { label = 98; break; }
    case 92: 
      var $308=$5;
      var $309=($308<<1);
      var $310=((($309)-(1))|0);
      $__n9=$310;
      var $311=$1;
      var $312=$5;
      var $313=(($311+($312<<2))|0);
      $__dst10=$313;
      var $314=$ws;
      var $315=$5;
      var $316=(($314+($315<<2))|0);
      $__src11=$316;
      var $317=$__src11;
      var $318=(($317+4)|0);
      $__src11=$318;
      var $319=HEAP32[(($317)>>2)];
      $__x12=$319;
      var $320=$__n9;
      var $321=(($320)|0)!=0;
      if ($321) { label = 93; break; } else { label = 97; break; }
    case 93: 
      label = 94; break;
    case 94: 
      var $324=$__x12;
      var $325=$__dst10;
      var $326=(($325+4)|0);
      $__dst10=$326;
      HEAP32[(($325)>>2)]=$324;
      var $327=$__src11;
      var $328=(($327+4)|0);
      $__src11=$328;
      var $329=HEAP32[(($327)>>2)];
      $__x12=$329;
      label = 95; break;
    case 95: 
      var $331=$__n9;
      var $332=((($331)-(1))|0);
      $__n9=$332;
      var $333=(($332)|0)!=0;
      if ($333) { label = 94; break; } else { label = 96; break; }
    case 96: 
      label = 97; break;
    case 97: 
      var $336=$__x12;
      var $337=$__dst10;
      var $338=(($337+4)|0);
      $__dst10=$338;
      HEAP32[(($337)>>2)]=$336;
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      var $343=$1;
      var $344=$5;
      var $345=(($343+($344<<2))|0);
      $__p14=$345;
      var $346=$__p14;
      var $347=HEAP32[(($346)>>2)];
      var $348=$cy8;
      var $349=((($347)+($348))|0);
      $__x13=$349;
      var $350=$__x13;
      var $351=$__p14;
      HEAP32[(($351)>>2)]=$350;
      var $352=$__x13;
      var $353=$cy8;
      var $354=(($352)>>>0) < (($353)>>>0);
      if ($354) { label = 102; break; } else { label = 106; break; }
    case 102: 
      label = 103; break;
    case 103: 
      var $357=$__p14;
      var $358=(($357+4)|0);
      $__p14=$358;
      var $359=HEAP32[(($358)>>2)];
      var $360=((($359)+(1))|0);
      HEAP32[(($358)>>2)]=$360;
      var $361=(($360)|0)==0;
      if ($361) { label = 104; break; } else { label = 105; break; }
    case 104: 
      label = 103; break;
    case 105: 
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      var $366=$5;
      var $367=($366<<1);
      var $368=$1;
      var $369=(($368+($367<<2))|0);
      $1=$369;
      label = 82; break;
    case 108: 
      var $371=$3;
      var $372=($371<<2);
      var $373=$5;
      var $374=((($373)*(5))&-1);
      var $375=(($372)|0) < (($374)|0);
      if ($375) { label = 109; break; } else { label = 110; break; }
    case 109: 
      var $377=$ws;
      var $378=$2;
      var $379=$3;
      var $380=$4;
      var $381=$5;
      var $382=$scratch;
      ___gmpn_toom22_mul($377, $378, $379, $380, $381, $382);
      label = 114; break;
    case 110: 
      var $384=$3;
      var $385=($384<<2);
      var $386=$5;
      var $387=((($386)*(7))&-1);
      var $388=(($385)|0) < (($387)|0);
      if ($388) { label = 111; break; } else { label = 112; break; }
    case 111: 
      var $390=$ws;
      var $391=$2;
      var $392=$3;
      var $393=$4;
      var $394=$5;
      var $395=$scratch;
      ___gmpn_toom32_mul($390, $391, $392, $393, $394, $395);
      label = 113; break;
    case 112: 
      var $397=$ws;
      var $398=$2;
      var $399=$3;
      var $400=$4;
      var $401=$5;
      var $402=$scratch;
      ___gmpn_toom42_mul($397, $398, $399, $400, $401, $402);
      label = 113; break;
    case 113: 
      label = 114; break;
    case 114: 
      var $405=$1;
      var $406=$1;
      var $407=$ws;
      var $408=$5;
      var $409=___gmpn_add_n($405, $406, $407, $408);
      $cy8=$409;
      label = 115; break;
    case 115: 
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      label = 122; break;
    case 122: 
      var $418=$3;
      var $419=(($418)|0)!=0;
      if ($419) { label = 123; break; } else { label = 129; break; }
    case 123: 
      var $421=$3;
      var $422=((($421)-(1))|0);
      $__n15=$422;
      var $423=$1;
      var $424=$5;
      var $425=(($423+($424<<2))|0);
      $__dst16=$425;
      var $426=$ws;
      var $427=$5;
      var $428=(($426+($427<<2))|0);
      $__src17=$428;
      var $429=$__src17;
      var $430=(($429+4)|0);
      $__src17=$430;
      var $431=HEAP32[(($429)>>2)];
      $__x18=$431;
      var $432=$__n15;
      var $433=(($432)|0)!=0;
      if ($433) { label = 124; break; } else { label = 128; break; }
    case 124: 
      label = 125; break;
    case 125: 
      var $436=$__x18;
      var $437=$__dst16;
      var $438=(($437+4)|0);
      $__dst16=$438;
      HEAP32[(($437)>>2)]=$436;
      var $439=$__src17;
      var $440=(($439+4)|0);
      $__src17=$440;
      var $441=HEAP32[(($439)>>2)];
      $__x18=$441;
      label = 126; break;
    case 126: 
      var $443=$__n15;
      var $444=((($443)-(1))|0);
      $__n15=$444;
      var $445=(($444)|0)!=0;
      if ($445) { label = 125; break; } else { label = 127; break; }
    case 127: 
      label = 128; break;
    case 128: 
      var $448=$__x18;
      var $449=$__dst16;
      var $450=(($449+4)|0);
      $__dst16=$450;
      HEAP32[(($449)>>2)]=$448;
      label = 129; break;
    case 129: 
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      var $455=$1;
      var $456=$5;
      var $457=(($455+($456<<2))|0);
      $__p20=$457;
      var $458=$__p20;
      var $459=HEAP32[(($458)>>2)];
      var $460=$cy8;
      var $461=((($459)+($460))|0);
      $__x19=$461;
      var $462=$__x19;
      var $463=$__p20;
      HEAP32[(($463)>>2)]=$462;
      var $464=$__x19;
      var $465=$cy8;
      var $466=(($464)>>>0) < (($465)>>>0);
      if ($466) { label = 133; break; } else { label = 137; break; }
    case 133: 
      label = 134; break;
    case 134: 
      var $469=$__p20;
      var $470=(($469+4)|0);
      $__p20=$470;
      var $471=HEAP32[(($470)>>2)];
      var $472=((($471)+(1))|0);
      HEAP32[(($470)>>2)]=$472;
      var $473=(($472)|0)==0;
      if ($473) { label = 135; break; } else { label = 136; break; }
    case 135: 
      label = 134; break;
    case 136: 
      label = 137; break;
    case 137: 
      label = 138; break;
    case 138: 
      label = 146; break;
    case 139: 
      var $479=$3;
      var $480=($479<<2);
      var $481=$5;
      var $482=((($481)*(5))&-1);
      var $483=(($480)|0) < (($482)|0);
      if ($483) { label = 140; break; } else { label = 141; break; }
    case 140: 
      var $485=$1;
      var $486=$2;
      var $487=$3;
      var $488=$4;
      var $489=$5;
      var $490=$scratch;
      ___gmpn_toom22_mul($485, $486, $487, $488, $489, $490);
      label = 145; break;
    case 141: 
      var $492=$3;
      var $493=($492<<2);
      var $494=$5;
      var $495=((($494)*(7))&-1);
      var $496=(($493)|0) < (($495)|0);
      if ($496) { label = 142; break; } else { label = 143; break; }
    case 142: 
      var $498=$1;
      var $499=$2;
      var $500=$3;
      var $501=$4;
      var $502=$5;
      var $503=$scratch;
      ___gmpn_toom32_mul($498, $499, $500, $501, $502, $503);
      label = 144; break;
    case 143: 
      var $505=$1;
      var $506=$2;
      var $507=$3;
      var $508=$4;
      var $509=$5;
      var $510=$scratch;
      ___gmpn_toom42_mul($505, $506, $507, $508, $509, $510);
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      label = 146; break;
    case 146: 
      label = 323; break;
    case 147: 
      var $515=$3;
      var $516=$5;
      var $517=((($515)+($516))|0);
      var $518=$517 >> 1;
      var $519=(($518)|0) >= 3000;
      if ($519) { label = 148; break; } else { label = 149; break; }
    case 148: 
      var $521=$5;
      var $522=((($521)*(3))&-1);
      var $523=(($522)|0) >= 3000;
      if ($523) { label = 260; break; } else { label = 149; break; }
    case 149: 
      var $525=$5;
      var $526=(($525)|0) >= 300;
      if ($526) { label = 150; break; } else { label = 151; break; }
    case 150: 
      var $528=$3;
      var $529=((($528)*(3))&-1);
      var $530=((($529)+(12))|0);
      var $531=$5;
      var $532=($531<<2);
      var $533=(($530)|0) < (($532)|0);
      if ($533) { label = 239; break; } else { label = 151; break; }
    case 151: 
      var $535=$5;
      var $536=($535<<4);
      var $537=((($536)+(100))|0);
      var $538=($537<<2);
      var $539=STACKTOP;STACKTOP = (STACKTOP + $538)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $540=$539;
      $scratch21=$540;
      var $541=$3;
      var $542=($541<<1);
      var $543=$5;
      var $544=((($543)*(5))&-1);
      var $545=(($542)|0) >= (($544)|0);
      if ($545) { label = 152; break; } else { label = 213; break; }
    case 152: 
      var $547=$5;
      var $548=((($547)*(7))&-1);
      var $549=$548 >> 1;
      var $550=($549<<2);
      var $551=STACKTOP;STACKTOP = (STACKTOP + $550)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $552=$551;
      $ws23=$552;
      var $553=$5;
      var $554=(($553)|0) >= 110;
      if ($554) { label = 154; break; } else { label = 153; break; }
    case 153: 
      var $556=$1;
      var $557=$2;
      var $558=$5;
      var $559=($558<<1);
      var $560=$4;
      var $561=$5;
      var $562=$scratch21;
      ___gmpn_toom42_mul($556, $557, $559, $560, $561, $562);
      label = 155; break;
    case 154: 
      var $564=$1;
      var $565=$2;
      var $566=$5;
      var $567=($566<<1);
      var $568=$4;
      var $569=$5;
      var $570=$scratch21;
      ___gmpn_toom63_mul($564, $565, $567, $568, $569, $570);
      label = 155; break;
    case 155: 
      var $572=$5;
      var $573=($572<<1);
      var $574=$3;
      var $575=((($574)-($573))|0);
      $3=$575;
      var $576=$5;
      var $577=($576<<1);
      var $578=$2;
      var $579=(($578+($577<<2))|0);
      $2=$579;
      var $580=$5;
      var $581=($580<<1);
      var $582=$1;
      var $583=(($582+($581<<2))|0);
      $1=$583;
      label = 156; break;
    case 156: 
      var $585=$3;
      var $586=($585<<1);
      var $587=$5;
      var $588=((($587)*(5))&-1);
      var $589=(($586)|0) >= (($588)|0);
      if ($589) { label = 157; break; } else { label = 185; break; }
    case 157: 
      var $591=$5;
      var $592=(($591)|0) >= 110;
      if ($592) { label = 159; break; } else { label = 158; break; }
    case 158: 
      var $594=$ws23;
      var $595=$2;
      var $596=$5;
      var $597=($596<<1);
      var $598=$4;
      var $599=$5;
      var $600=$scratch21;
      ___gmpn_toom42_mul($594, $595, $597, $598, $599, $600);
      label = 160; break;
    case 159: 
      var $602=$ws23;
      var $603=$2;
      var $604=$5;
      var $605=($604<<1);
      var $606=$4;
      var $607=$5;
      var $608=$scratch21;
      ___gmpn_toom63_mul($602, $603, $605, $606, $607, $608);
      label = 160; break;
    case 160: 
      var $610=$5;
      var $611=($610<<1);
      var $612=$3;
      var $613=((($612)-($611))|0);
      $3=$613;
      var $614=$5;
      var $615=($614<<1);
      var $616=$2;
      var $617=(($616+($615<<2))|0);
      $2=$617;
      var $618=$1;
      var $619=$1;
      var $620=$ws23;
      var $621=$5;
      var $622=___gmpn_add_n($618, $619, $620, $621);
      $cy22=$622;
      label = 161; break;
    case 161: 
      label = 162; break;
    case 162: 
      label = 163; break;
    case 163: 
      label = 164; break;
    case 164: 
      label = 165; break;
    case 165: 
      label = 166; break;
    case 166: 
      label = 167; break;
    case 167: 
      label = 168; break;
    case 168: 
      var $631=$5;
      var $632=($631<<1);
      var $633=(($632)|0)!=0;
      if ($633) { label = 169; break; } else { label = 175; break; }
    case 169: 
      var $635=$5;
      var $636=($635<<1);
      var $637=((($636)-(1))|0);
      $__n24=$637;
      var $638=$1;
      var $639=$5;
      var $640=(($638+($639<<2))|0);
      $__dst25=$640;
      var $641=$ws23;
      var $642=$5;
      var $643=(($641+($642<<2))|0);
      $__src26=$643;
      var $644=$__src26;
      var $645=(($644+4)|0);
      $__src26=$645;
      var $646=HEAP32[(($644)>>2)];
      $__x27=$646;
      var $647=$__n24;
      var $648=(($647)|0)!=0;
      if ($648) { label = 170; break; } else { label = 174; break; }
    case 170: 
      label = 171; break;
    case 171: 
      var $651=$__x27;
      var $652=$__dst25;
      var $653=(($652+4)|0);
      $__dst25=$653;
      HEAP32[(($652)>>2)]=$651;
      var $654=$__src26;
      var $655=(($654+4)|0);
      $__src26=$655;
      var $656=HEAP32[(($654)>>2)];
      $__x27=$656;
      label = 172; break;
    case 172: 
      var $658=$__n24;
      var $659=((($658)-(1))|0);
      $__n24=$659;
      var $660=(($659)|0)!=0;
      if ($660) { label = 171; break; } else { label = 173; break; }
    case 173: 
      label = 174; break;
    case 174: 
      var $663=$__x27;
      var $664=$__dst25;
      var $665=(($664+4)|0);
      $__dst25=$665;
      HEAP32[(($664)>>2)]=$663;
      label = 175; break;
    case 175: 
      label = 176; break;
    case 176: 
      label = 177; break;
    case 177: 
      label = 178; break;
    case 178: 
      var $670=$1;
      var $671=$5;
      var $672=(($670+($671<<2))|0);
      $__p29=$672;
      var $673=$__p29;
      var $674=HEAP32[(($673)>>2)];
      var $675=$cy22;
      var $676=((($674)+($675))|0);
      $__x28=$676;
      var $677=$__x28;
      var $678=$__p29;
      HEAP32[(($678)>>2)]=$677;
      var $679=$__x28;
      var $680=$cy22;
      var $681=(($679)>>>0) < (($680)>>>0);
      if ($681) { label = 179; break; } else { label = 183; break; }
    case 179: 
      label = 180; break;
    case 180: 
      var $684=$__p29;
      var $685=(($684+4)|0);
      $__p29=$685;
      var $686=HEAP32[(($685)>>2)];
      var $687=((($686)+(1))|0);
      HEAP32[(($685)>>2)]=$687;
      var $688=(($687)|0)==0;
      if ($688) { label = 181; break; } else { label = 182; break; }
    case 181: 
      label = 180; break;
    case 182: 
      label = 183; break;
    case 183: 
      label = 184; break;
    case 184: 
      var $693=$5;
      var $694=($693<<1);
      var $695=$1;
      var $696=(($695+($694<<2))|0);
      $1=$696;
      label = 156; break;
    case 185: 
      var $698=$3;
      var $699=$5;
      var $700=(($698)|0) < (($699)|0);
      if ($700) { label = 186; break; } else { label = 187; break; }
    case 186: 
      var $702=$ws23;
      var $703=$4;
      var $704=$5;
      var $705=$2;
      var $706=$3;
      var $707=___gmpn_mul($702, $703, $704, $705, $706);
      label = 188; break;
    case 187: 
      var $709=$ws23;
      var $710=$2;
      var $711=$3;
      var $712=$4;
      var $713=$5;
      var $714=___gmpn_mul($709, $710, $711, $712, $713);
      label = 188; break;
    case 188: 
      var $716=$1;
      var $717=$1;
      var $718=$ws23;
      var $719=$5;
      var $720=___gmpn_add_n($716, $717, $718, $719);
      $cy22=$720;
      label = 189; break;
    case 189: 
      label = 190; break;
    case 190: 
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      label = 193; break;
    case 193: 
      label = 194; break;
    case 194: 
      label = 195; break;
    case 195: 
      label = 196; break;
    case 196: 
      var $729=$3;
      var $730=(($729)|0)!=0;
      if ($730) { label = 197; break; } else { label = 203; break; }
    case 197: 
      var $732=$3;
      var $733=((($732)-(1))|0);
      $__n30=$733;
      var $734=$1;
      var $735=$5;
      var $736=(($734+($735<<2))|0);
      $__dst31=$736;
      var $737=$ws23;
      var $738=$5;
      var $739=(($737+($738<<2))|0);
      $__src32=$739;
      var $740=$__src32;
      var $741=(($740+4)|0);
      $__src32=$741;
      var $742=HEAP32[(($740)>>2)];
      $__x33=$742;
      var $743=$__n30;
      var $744=(($743)|0)!=0;
      if ($744) { label = 198; break; } else { label = 202; break; }
    case 198: 
      label = 199; break;
    case 199: 
      var $747=$__x33;
      var $748=$__dst31;
      var $749=(($748+4)|0);
      $__dst31=$749;
      HEAP32[(($748)>>2)]=$747;
      var $750=$__src32;
      var $751=(($750+4)|0);
      $__src32=$751;
      var $752=HEAP32[(($750)>>2)];
      $__x33=$752;
      label = 200; break;
    case 200: 
      var $754=$__n30;
      var $755=((($754)-(1))|0);
      $__n30=$755;
      var $756=(($755)|0)!=0;
      if ($756) { label = 199; break; } else { label = 201; break; }
    case 201: 
      label = 202; break;
    case 202: 
      var $759=$__x33;
      var $760=$__dst31;
      var $761=(($760+4)|0);
      $__dst31=$761;
      HEAP32[(($760)>>2)]=$759;
      label = 203; break;
    case 203: 
      label = 204; break;
    case 204: 
      label = 205; break;
    case 205: 
      label = 206; break;
    case 206: 
      var $766=$1;
      var $767=$5;
      var $768=(($766+($767<<2))|0);
      $__p35=$768;
      var $769=$__p35;
      var $770=HEAP32[(($769)>>2)];
      var $771=$cy22;
      var $772=((($770)+($771))|0);
      $__x34=$772;
      var $773=$__x34;
      var $774=$__p35;
      HEAP32[(($774)>>2)]=$773;
      var $775=$__x34;
      var $776=$cy22;
      var $777=(($775)>>>0) < (($776)>>>0);
      if ($777) { label = 207; break; } else { label = 211; break; }
    case 207: 
      label = 208; break;
    case 208: 
      var $780=$__p35;
      var $781=(($780+4)|0);
      $__p35=$781;
      var $782=HEAP32[(($781)>>2)];
      var $783=((($782)+(1))|0);
      HEAP32[(($781)>>2)]=$783;
      var $784=(($783)|0)==0;
      if ($784) { label = 209; break; } else { label = 210; break; }
    case 209: 
      label = 208; break;
    case 210: 
      label = 211; break;
    case 211: 
      label = 212; break;
    case 212: 
      label = 238; break;
    case 213: 
      var $790=$3;
      var $791=((($790)*(6))&-1);
      var $792=$5;
      var $793=((($792)*(7))&-1);
      var $794=(($791)|0) < (($793)|0);
      if ($794) { label = 214; break; } else { label = 215; break; }
    case 214: 
      var $796=$1;
      var $797=$2;
      var $798=$3;
      var $799=$4;
      var $800=$5;
      var $801=$scratch21;
      ___gmpn_toom33_mul($796, $797, $798, $799, $800, $801);
      label = 237; break;
    case 215: 
      var $803=$3;
      var $804=($803<<1);
      var $805=$5;
      var $806=((($805)*(3))&-1);
      var $807=(($804)|0) < (($806)|0);
      if ($807) { label = 216; break; } else { label = 220; break; }
    case 216: 
      var $809=$5;
      var $810=(($809)|0) >= 100;
      if ($810) { label = 218; break; } else { label = 217; break; }
    case 217: 
      var $812=$1;
      var $813=$2;
      var $814=$3;
      var $815=$4;
      var $816=$5;
      var $817=$scratch21;
      ___gmpn_toom32_mul($812, $813, $814, $815, $816, $817);
      label = 219; break;
    case 218: 
      var $819=$1;
      var $820=$2;
      var $821=$3;
      var $822=$4;
      var $823=$5;
      var $824=$scratch21;
      ___gmpn_toom43_mul($819, $820, $821, $822, $823, $824);
      label = 219; break;
    case 219: 
      label = 236; break;
    case 220: 
      var $827=$3;
      var $828=((($827)*(6))&-1);
      var $829=$5;
      var $830=((($829)*(11))&-1);
      var $831=(($828)|0) < (($830)|0);
      if ($831) { label = 221; break; } else { label = 231; break; }
    case 221: 
      var $833=$3;
      var $834=($833<<2);
      var $835=$5;
      var $836=((($835)*(7))&-1);
      var $837=(($834)|0) < (($836)|0);
      if ($837) { label = 222; break; } else { label = 226; break; }
    case 222: 
      var $839=$5;
      var $840=(($839)|0) >= 110;
      if ($840) { label = 224; break; } else { label = 223; break; }
    case 223: 
      var $842=$1;
      var $843=$2;
      var $844=$3;
      var $845=$4;
      var $846=$5;
      var $847=$scratch21;
      ___gmpn_toom32_mul($842, $843, $844, $845, $846, $847);
      label = 225; break;
    case 224: 
      var $849=$1;
      var $850=$2;
      var $851=$3;
      var $852=$4;
      var $853=$5;
      var $854=$scratch21;
      ___gmpn_toom53_mul($849, $850, $851, $852, $853, $854);
      label = 225; break;
    case 225: 
      label = 230; break;
    case 226: 
      var $857=$5;
      var $858=(($857)|0) >= 100;
      if ($858) { label = 228; break; } else { label = 227; break; }
    case 227: 
      var $860=$1;
      var $861=$2;
      var $862=$3;
      var $863=$4;
      var $864=$5;
      var $865=$scratch21;
      ___gmpn_toom42_mul($860, $861, $862, $863, $864, $865);
      label = 229; break;
    case 228: 
      var $867=$1;
      var $868=$2;
      var $869=$3;
      var $870=$4;
      var $871=$5;
      var $872=$scratch21;
      ___gmpn_toom53_mul($867, $868, $869, $870, $871, $872);
      label = 229; break;
    case 229: 
      label = 230; break;
    case 230: 
      label = 235; break;
    case 231: 
      var $876=$5;
      var $877=(($876)|0) >= 110;
      if ($877) { label = 233; break; } else { label = 232; break; }
    case 232: 
      var $879=$1;
      var $880=$2;
      var $881=$3;
      var $882=$4;
      var $883=$5;
      var $884=$scratch21;
      ___gmpn_toom42_mul($879, $880, $881, $882, $883, $884);
      label = 234; break;
    case 233: 
      var $886=$1;
      var $887=$2;
      var $888=$3;
      var $889=$4;
      var $890=$5;
      var $891=$scratch21;
      ___gmpn_toom63_mul($886, $887, $888, $889, $890, $891);
      label = 234; break;
    case 234: 
      label = 235; break;
    case 235: 
      label = 236; break;
    case 236: 
      label = 237; break;
    case 237: 
      label = 238; break;
    case 238: 
      label = 259; break;
    case 239: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $898=$5;
      var $899=(($898)|0) >= 350;
      if ($899) { label = 244; break; } else { label = 240; break; }
    case 240: 
      var $901=$3;
      var $902=((($901)*(3))&-1);
      var $903=((($902)+(32))|0);
      var $904=($903<<2);
      var $905=(($904)>>>0) < 65536;
      var $906=(($905)&1);
      var $907=(($906)|0)!=0;
      var $908=(($907)&1);
      var $909=($908);
      var $910=(($909)|0)!=0;
      if ($910) { label = 241; break; } else { label = 242; break; }
    case 241: 
      var $912=$3;
      var $913=((($912)*(3))&-1);
      var $914=((($913)+(32))|0);
      var $915=($914<<2);
      var $916=STACKTOP;STACKTOP = (STACKTOP + $915)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $924 = $916;label = 243; break;
    case 242: 
      var $918=$3;
      var $919=((($918)*(3))&-1);
      var $920=((($919)+(32))|0);
      var $921=($920<<2);
      var $922=___gmp_tmp_reentrant_alloc($__tmp_marker, $921);
      var $924 = $922;label = 243; break;
    case 243: 
      var $924;
      var $925=$924;
      $scratch36=$925;
      var $926=$1;
      var $927=$2;
      var $928=$3;
      var $929=$4;
      var $930=$5;
      var $931=$scratch36;
      ___gmpn_toom44_mul($926, $927, $928, $929, $930, $931);
      label = 254; break;
    case 244: 
      var $933=$5;
      var $934=(($933)|0) >= 450;
      if ($934) { label = 249; break; } else { label = 245; break; }
    case 245: 
      var $936=$3;
      var $937=$5;
      var $938=_mpn_toom6h_mul_itch($936, $937);
      var $939=($938<<2);
      var $940=(($939)>>>0) < 65536;
      var $941=(($940)&1);
      var $942=(($941)|0)!=0;
      var $943=(($942)&1);
      var $944=($943);
      var $945=(($944)|0)!=0;
      if ($945) { label = 246; break; } else { label = 247; break; }
    case 246: 
      var $947=$3;
      var $948=$5;
      var $949=_mpn_toom6h_mul_itch($947, $948);
      var $950=($949<<2);
      var $951=STACKTOP;STACKTOP = (STACKTOP + $950)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $959 = $951;label = 248; break;
    case 247: 
      var $953=$3;
      var $954=$5;
      var $955=_mpn_toom6h_mul_itch($953, $954);
      var $956=($955<<2);
      var $957=___gmp_tmp_reentrant_alloc($__tmp_marker, $956);
      var $959 = $957;label = 248; break;
    case 248: 
      var $959;
      var $960=$959;
      $scratch36=$960;
      var $961=$1;
      var $962=$2;
      var $963=$3;
      var $964=$4;
      var $965=$5;
      var $966=$scratch36;
      ___gmpn_toom6h_mul($961, $962, $963, $964, $965, $966);
      label = 253; break;
    case 249: 
      var $968=$3;
      var $969=$5;
      var $970=_mpn_toom8h_mul_itch($968, $969);
      var $971=($970<<2);
      var $972=(($971)>>>0) < 65536;
      var $973=(($972)&1);
      var $974=(($973)|0)!=0;
      var $975=(($974)&1);
      var $976=($975);
      var $977=(($976)|0)!=0;
      if ($977) { label = 250; break; } else { label = 251; break; }
    case 250: 
      var $979=$3;
      var $980=$5;
      var $981=_mpn_toom8h_mul_itch($979, $980);
      var $982=($981<<2);
      var $983=STACKTOP;STACKTOP = (STACKTOP + $982)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $991 = $983;label = 252; break;
    case 251: 
      var $985=$3;
      var $986=$5;
      var $987=_mpn_toom8h_mul_itch($985, $986);
      var $988=($987<<2);
      var $989=___gmp_tmp_reentrant_alloc($__tmp_marker, $988);
      var $991 = $989;label = 252; break;
    case 252: 
      var $991;
      var $992=$991;
      $scratch36=$992;
      var $993=$1;
      var $994=$2;
      var $995=$3;
      var $996=$4;
      var $997=$5;
      var $998=$scratch36;
      ___gmpn_toom8h_mul($993, $994, $995, $996, $997, $998);
      label = 253; break;
    case 253: 
      label = 254; break;
    case 254: 
      label = 255; break;
    case 255: 
      var $1002=HEAP32[(($__tmp_marker)>>2)];
      var $1003=(($1002)|0)!=0;
      var $1004=(($1003)&1);
      var $1005=(($1004)|0)!=0;
      var $1006=(($1005)&1);
      var $1007=($1006);
      var $1008=(($1007)|0)!=0;
      if ($1008) { label = 256; break; } else { label = 257; break; }
    case 256: 
      var $1010=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($1010);
      label = 257; break;
    case 257: 
      label = 258; break;
    case 258: 
      label = 259; break;
    case 259: 
      label = 322; break;
    case 260: 
      var $1015=$3;
      var $1016=$5;
      var $1017=($1016<<3);
      var $1018=(($1015)|0) >= (($1017)|0);
      if ($1018) { label = 261; break; } else { label = 320; break; }
    case 261: 
      HEAP32[(($__tmp_marker39)>>2)]=0;
      var $1020=$5;
      var $1021=((($1020)*(9))&-1);
      var $1022=$1021 >> 1;
      var $1023=($1022<<2);
      var $1024=___gmp_tmp_reentrant_alloc($__tmp_marker39, $1023);
      var $1025=$1024;
      $ws38=$1025;
      var $1026=$1;
      var $1027=$2;
      var $1028=$5;
      var $1029=((($1028)*(3))&-1);
      var $1030=$4;
      var $1031=$5;
      ___gmpn_nussbaumer_mul($1026, $1027, $1029, $1030, $1031);
      var $1032=$5;
      var $1033=((($1032)*(3))&-1);
      var $1034=$3;
      var $1035=((($1034)-($1033))|0);
      $3=$1035;
      var $1036=$5;
      var $1037=((($1036)*(3))&-1);
      var $1038=$2;
      var $1039=(($1038+($1037<<2))|0);
      $2=$1039;
      var $1040=$5;
      var $1041=((($1040)*(3))&-1);
      var $1042=$1;
      var $1043=(($1042+($1041<<2))|0);
      $1=$1043;
      label = 262; break;
    case 262: 
      var $1045=$3;
      var $1046=($1045<<1);
      var $1047=$5;
      var $1048=((($1047)*(7))&-1);
      var $1049=(($1046)|0) >= (($1048)|0);
      if ($1049) { label = 263; break; } else { label = 288; break; }
    case 263: 
      var $1051=$ws38;
      var $1052=$2;
      var $1053=$5;
      var $1054=((($1053)*(3))&-1);
      var $1055=$4;
      var $1056=$5;
      ___gmpn_nussbaumer_mul($1051, $1052, $1054, $1055, $1056);
      var $1057=$5;
      var $1058=((($1057)*(3))&-1);
      var $1059=$3;
      var $1060=((($1059)-($1058))|0);
      $3=$1060;
      var $1061=$5;
      var $1062=((($1061)*(3))&-1);
      var $1063=$2;
      var $1064=(($1063+($1062<<2))|0);
      $2=$1064;
      var $1065=$1;
      var $1066=$1;
      var $1067=$ws38;
      var $1068=$5;
      var $1069=___gmpn_add_n($1065, $1066, $1067, $1068);
      $cy37=$1069;
      label = 264; break;
    case 264: 
      label = 265; break;
    case 265: 
      label = 266; break;
    case 266: 
      label = 267; break;
    case 267: 
      label = 268; break;
    case 268: 
      label = 269; break;
    case 269: 
      label = 270; break;
    case 270: 
      label = 271; break;
    case 271: 
      var $1078=$5;
      var $1079=((($1078)*(3))&-1);
      var $1080=(($1079)|0)!=0;
      if ($1080) { label = 272; break; } else { label = 278; break; }
    case 272: 
      var $1082=$5;
      var $1083=((($1082)*(3))&-1);
      var $1084=((($1083)-(1))|0);
      $__n40=$1084;
      var $1085=$1;
      var $1086=$5;
      var $1087=(($1085+($1086<<2))|0);
      $__dst41=$1087;
      var $1088=$ws38;
      var $1089=$5;
      var $1090=(($1088+($1089<<2))|0);
      $__src42=$1090;
      var $1091=$__src42;
      var $1092=(($1091+4)|0);
      $__src42=$1092;
      var $1093=HEAP32[(($1091)>>2)];
      $__x43=$1093;
      var $1094=$__n40;
      var $1095=(($1094)|0)!=0;
      if ($1095) { label = 273; break; } else { label = 277; break; }
    case 273: 
      label = 274; break;
    case 274: 
      var $1098=$__x43;
      var $1099=$__dst41;
      var $1100=(($1099+4)|0);
      $__dst41=$1100;
      HEAP32[(($1099)>>2)]=$1098;
      var $1101=$__src42;
      var $1102=(($1101+4)|0);
      $__src42=$1102;
      var $1103=HEAP32[(($1101)>>2)];
      $__x43=$1103;
      label = 275; break;
    case 275: 
      var $1105=$__n40;
      var $1106=((($1105)-(1))|0);
      $__n40=$1106;
      var $1107=(($1106)|0)!=0;
      if ($1107) { label = 274; break; } else { label = 276; break; }
    case 276: 
      label = 277; break;
    case 277: 
      var $1110=$__x43;
      var $1111=$__dst41;
      var $1112=(($1111+4)|0);
      $__dst41=$1112;
      HEAP32[(($1111)>>2)]=$1110;
      label = 278; break;
    case 278: 
      label = 279; break;
    case 279: 
      label = 280; break;
    case 280: 
      label = 281; break;
    case 281: 
      var $1117=$1;
      var $1118=$5;
      var $1119=(($1117+($1118<<2))|0);
      $__p45=$1119;
      var $1120=$__p45;
      var $1121=HEAP32[(($1120)>>2)];
      var $1122=$cy37;
      var $1123=((($1121)+($1122))|0);
      $__x44=$1123;
      var $1124=$__x44;
      var $1125=$__p45;
      HEAP32[(($1125)>>2)]=$1124;
      var $1126=$__x44;
      var $1127=$cy37;
      var $1128=(($1126)>>>0) < (($1127)>>>0);
      if ($1128) { label = 282; break; } else { label = 286; break; }
    case 282: 
      label = 283; break;
    case 283: 
      var $1131=$__p45;
      var $1132=(($1131+4)|0);
      $__p45=$1132;
      var $1133=HEAP32[(($1132)>>2)];
      var $1134=((($1133)+(1))|0);
      HEAP32[(($1132)>>2)]=$1134;
      var $1135=(($1134)|0)==0;
      if ($1135) { label = 284; break; } else { label = 285; break; }
    case 284: 
      label = 283; break;
    case 285: 
      label = 286; break;
    case 286: 
      label = 287; break;
    case 287: 
      var $1140=$5;
      var $1141=((($1140)*(3))&-1);
      var $1142=$1;
      var $1143=(($1142+($1141<<2))|0);
      $1=$1143;
      label = 262; break;
    case 288: 
      var $1145=$3;
      var $1146=$5;
      var $1147=(($1145)|0) < (($1146)|0);
      if ($1147) { label = 289; break; } else { label = 290; break; }
    case 289: 
      var $1149=$ws38;
      var $1150=$4;
      var $1151=$5;
      var $1152=$2;
      var $1153=$3;
      var $1154=___gmpn_mul($1149, $1150, $1151, $1152, $1153);
      label = 291; break;
    case 290: 
      var $1156=$ws38;
      var $1157=$2;
      var $1158=$3;
      var $1159=$4;
      var $1160=$5;
      var $1161=___gmpn_mul($1156, $1157, $1158, $1159, $1160);
      label = 291; break;
    case 291: 
      var $1163=$1;
      var $1164=$1;
      var $1165=$ws38;
      var $1166=$5;
      var $1167=___gmpn_add_n($1163, $1164, $1165, $1166);
      $cy37=$1167;
      label = 292; break;
    case 292: 
      label = 293; break;
    case 293: 
      label = 294; break;
    case 294: 
      label = 295; break;
    case 295: 
      label = 296; break;
    case 296: 
      label = 297; break;
    case 297: 
      label = 298; break;
    case 298: 
      label = 299; break;
    case 299: 
      var $1176=$3;
      var $1177=(($1176)|0)!=0;
      if ($1177) { label = 300; break; } else { label = 306; break; }
    case 300: 
      var $1179=$3;
      var $1180=((($1179)-(1))|0);
      $__n46=$1180;
      var $1181=$1;
      var $1182=$5;
      var $1183=(($1181+($1182<<2))|0);
      $__dst47=$1183;
      var $1184=$ws38;
      var $1185=$5;
      var $1186=(($1184+($1185<<2))|0);
      $__src48=$1186;
      var $1187=$__src48;
      var $1188=(($1187+4)|0);
      $__src48=$1188;
      var $1189=HEAP32[(($1187)>>2)];
      $__x49=$1189;
      var $1190=$__n46;
      var $1191=(($1190)|0)!=0;
      if ($1191) { label = 301; break; } else { label = 305; break; }
    case 301: 
      label = 302; break;
    case 302: 
      var $1194=$__x49;
      var $1195=$__dst47;
      var $1196=(($1195+4)|0);
      $__dst47=$1196;
      HEAP32[(($1195)>>2)]=$1194;
      var $1197=$__src48;
      var $1198=(($1197+4)|0);
      $__src48=$1198;
      var $1199=HEAP32[(($1197)>>2)];
      $__x49=$1199;
      label = 303; break;
    case 303: 
      var $1201=$__n46;
      var $1202=((($1201)-(1))|0);
      $__n46=$1202;
      var $1203=(($1202)|0)!=0;
      if ($1203) { label = 302; break; } else { label = 304; break; }
    case 304: 
      label = 305; break;
    case 305: 
      var $1206=$__x49;
      var $1207=$__dst47;
      var $1208=(($1207+4)|0);
      $__dst47=$1208;
      HEAP32[(($1207)>>2)]=$1206;
      label = 306; break;
    case 306: 
      label = 307; break;
    case 307: 
      label = 308; break;
    case 308: 
      label = 309; break;
    case 309: 
      var $1213=$1;
      var $1214=$5;
      var $1215=(($1213+($1214<<2))|0);
      $__p51=$1215;
      var $1216=$__p51;
      var $1217=HEAP32[(($1216)>>2)];
      var $1218=$cy37;
      var $1219=((($1217)+($1218))|0);
      $__x50=$1219;
      var $1220=$__x50;
      var $1221=$__p51;
      HEAP32[(($1221)>>2)]=$1220;
      var $1222=$__x50;
      var $1223=$cy37;
      var $1224=(($1222)>>>0) < (($1223)>>>0);
      if ($1224) { label = 310; break; } else { label = 314; break; }
    case 310: 
      label = 311; break;
    case 311: 
      var $1227=$__p51;
      var $1228=(($1227+4)|0);
      $__p51=$1228;
      var $1229=HEAP32[(($1228)>>2)];
      var $1230=((($1229)+(1))|0);
      HEAP32[(($1228)>>2)]=$1230;
      var $1231=(($1230)|0)==0;
      if ($1231) { label = 312; break; } else { label = 313; break; }
    case 312: 
      label = 311; break;
    case 313: 
      label = 314; break;
    case 314: 
      label = 315; break;
    case 315: 
      label = 316; break;
    case 316: 
      var $1237=HEAP32[(($__tmp_marker39)>>2)];
      var $1238=(($1237)|0)!=0;
      var $1239=(($1238)&1);
      var $1240=(($1239)|0)!=0;
      var $1241=(($1240)&1);
      var $1242=($1241);
      var $1243=(($1242)|0)!=0;
      if ($1243) { label = 317; break; } else { label = 318; break; }
    case 317: 
      var $1245=HEAP32[(($__tmp_marker39)>>2)];
      ___gmp_tmp_reentrant_free($1245);
      label = 318; break;
    case 318: 
      label = 319; break;
    case 319: 
      label = 321; break;
    case 320: 
      var $1249=$1;
      var $1250=$2;
      var $1251=$3;
      var $1252=$4;
      var $1253=$5;
      ___gmpn_nussbaumer_mul($1249, $1250, $1251, $1252, $1253);
      label = 321; break;
    case 321: 
      label = 322; break;
    case 322: 
      label = 323; break;
    case 323: 
      label = 324; break;
    case 324: 
      label = 325; break;
    case 325: 
      var $1259=$3;
      var $1260=$5;
      var $1261=((($1259)+($1260))|0);
      var $1262=((($1261)-(1))|0);
      var $1263=$1;
      var $1264=(($1263+($1262<<2))|0);
      var $1265=HEAP32[(($1264)>>2)];
      STACKTOP = __stackBase__;
      return $1265;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mul["X"]=1;

function _mpn_toom6h_mul_itch($an, $bn) {
  var label = 0;


  var $1;
  var $2;
  var $estimatedN;
  $1=$an;
  $2=$bn;
  var $3=$1;
  var $4=$2;
  var $5=((($3)+($4))|0);
  var $6=Math.floor(((($5)>>>0))/(10));
  var $7=((($6)+(1))|0);
  $estimatedN=$7;
  var $8=$estimatedN;
  var $9=((($8)*(6))&-1);
  var $10=((($9)-(350))|0);
  var $11=($10<<1);
  var $12=((($11)+(1082))|0);

  return $12;
}


function _mpn_toom8h_mul_itch($an, $bn) {
  var label = 0;


  var $1;
  var $2;
  var $estimatedN;
  $1=$an;
  $2=$bn;
  var $3=$1;
  var $4=$2;
  var $5=((($3)+($4))|0);
  var $6=Math.floor(((($5)>>>0))/(14));
  var $7=((($6)+(1))|0);
  $estimatedN=$7;
  var $8=$estimatedN;
  var $9=($8<<3);
  var $10=((($9)*(15))&-1);
  var $11=$10 >> 3;
  var $12=((($11)-(843))|0);
  var $13=((($12)+(1282))|0);

  return $13;
}


function ___gmpn_fft_next_size($pl, $k) {
  var label = 0;


  var $1;
  var $2;
  $1=$pl;
  $2=$k;
  var $3=$1;
  var $4=((($3)-(1))|0);
  var $5=$2;
  var $6=$4 >> (($5)|0);
  var $7=((($6)+(1))|0);
  $1=$7;
  var $8=$1;
  var $9=$2;
  var $10=$8 << $9;

  return $10;
}


function _mpn_mul_fft_lcm($a, $k) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $l;
      $1=$a;
      $2=$k;
      var $3=$2;
      $l=$3;
      label = 3; break;
    case 3: 
      var $5=$1;
      var $6=((($5)>>>0))%(2);
      var $7=(($6)|0)==0;
      if ($7) { label = 4; break; } else { var $12 = 0;label = 5; break; }
    case 4: 
      var $9=$2;
      var $10=(($9)>>>0) > 0;
      var $12 = $10;label = 5; break;
    case 5: 
      var $12;
      if ($12) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $14=$1;
      var $15=$14 >>> 1;
      $1=$15;
      var $16=$2;
      var $17=((($16)-(1))|0);
      $2=$17;
      label = 3; break;
    case 7: 
      var $19=$1;
      var $20=$l;
      var $21=$19 << $20;

      return $21;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_fft_best_k($n, $sqr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$n;
      $3=$sqr;
      $i=0;
      label = 3; break;
    case 3: 
      var $5=$i;
      var $6=$3;
      var $7=((5247080+($6<<6))|0);
      var $8=(($7+($5<<2))|0);
      var $9=HEAP32[(($8)>>2)];
      var $10=(($9)|0)!=0;
      if ($10) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $12=$2;
      var $13=$i;
      var $14=$3;
      var $15=((5247080+($14<<6))|0);
      var $16=(($15+($13<<2))|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($12)|0) < (($17)|0);
      if ($18) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $20=$i;
      var $21=((($20)+(4))|0);
      $1=$21;
      label = 12; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $24=$i;
      var $25=((($24)+(1))|0);
      $i=$25;
      label = 3; break;
    case 8: 
      var $27=$i;
      var $28=(($27)|0)==0;
      if ($28) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $30=$2;
      var $31=$i;
      var $32=((($31)-(1))|0);
      var $33=$3;
      var $34=((5247080+($33<<6))|0);
      var $35=(($34+($32<<2))|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=($36<<2);
      var $38=(($30)|0) < (($37)|0);
      if ($38) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $40=$i;
      var $41=((($40)+(4))|0);
      $1=$41;
      label = 12; break;
    case 11: 
      var $43=$i;
      var $44=((($43)+(4))|0);
      var $45=((($44)+(1))|0);
      $1=$45;
      label = 12; break;
    case 12: 
      var $47=$1;

      return $47;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_fft_best_k["X"]=1;

function _mpn_fft_initl($l, $k) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $i;
      var $j;
      var $K;
      var $li;
      $1=$l;
      $2=$k;
      var $3=$1;
      var $4=(($3)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=(($5)|0);
      HEAP32[(($6)>>2)]=0;
      $i=1;
      $K=1;
      label = 3; break;
    case 3: 
      var $8=$i;
      var $9=$2;
      var $10=(($8)|0) <= (($9)|0);
      if ($10) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $12=$i;
      var $13=$1;
      var $14=(($13+($12<<2))|0);
      var $15=HEAP32[(($14)>>2)];
      $li=$15;
      $j=0;
      label = 5; break;
    case 5: 
      var $17=$j;
      var $18=$K;
      var $19=(($17)|0) < (($18)|0);
      if ($19) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $21=$j;
      var $22=$i;
      var $23=((($22)-(1))|0);
      var $24=$1;
      var $25=(($24+($23<<2))|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($26+($21<<2))|0);
      var $28=HEAP32[(($27)>>2)];
      var $29=($28<<1);
      var $30=$j;
      var $31=$li;
      var $32=(($31+($30<<2))|0);
      HEAP32[(($32)>>2)]=$29;
      var $33=$j;
      var $34=$li;
      var $35=(($34+($33<<2))|0);
      var $36=HEAP32[(($35)>>2)];
      var $37=((($36)+(1))|0);
      var $38=$K;
      var $39=$j;
      var $40=((($38)+($39))|0);
      var $41=$li;
      var $42=(($41+($40<<2))|0);
      HEAP32[(($42)>>2)]=$37;
      label = 7; break;
    case 7: 
      var $44=$j;
      var $45=((($44)+(1))|0);
      $j=$45;
      label = 5; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $48=$i;
      var $49=((($48)+(1))|0);
      $i=$49;
      var $50=$K;
      var $51=($50<<1);
      $K=$51;
      label = 3; break;
    case 10: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_initl["X"]=1;

function ___gmpn_mul_fft($op, $pl, $n, $nl, $m, $ml, $k) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $K;
      var $maxLK;
      var $i;
      var $N;
      var $Nprime;
      var $nprime;
      var $M;
      var $Mp;
      var $l;
      var $Ap;
      var $Bp;
      var $A;
      var $T;
      var $B;
      var $fft_l;
      var $sqr;
      var $h;
      var $__tmp_marker=__stackBase__;
      var $K2;
      var $pla;
      $1=$op;
      $2=$pl;
      $3=$n;
      $4=$nl;
      $5=$m;
      $6=$ml;
      $7=$k;
      var $8=$3;
      var $9=$5;
      var $10=(($8)|0)==(($9)|0);
      if ($10) { label = 3; break; } else { var $16 = 0;label = 4; break; }
    case 3: 
      var $12=$4;
      var $13=$6;
      var $14=(($12)|0)==(($13)|0);
      var $16 = $14;label = 4; break;
    case 4: 
      var $16;
      var $17=(($16)&1);
      $sqr=$17;
      label = 5; break;
    case 5: 
      var $19=$2;
      var $20=$7;
      var $21=___gmpn_fft_next_size($19, $20);
      var $22=$2;
      var $23=(($21)|0)==(($22)|0);
      var $24=$23 ^ 1;
      var $25=(($24)&1);
      var $26=(($25)|0)!=0;
      var $27=(($26)&1);
      var $28=($27);
      var $29=(($28)|0)!=0;
      if ($29) { label = 6; break; } else { label = 7; break; }
    case 6: 
      ___gmp_assert_fail(((5249420)|0), 824, ((5249832)|0));
      throw "Reached an unreachable!"
    case 7: 
      label = 8; break;
    case 8: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $33=$2;
      var $34=($33<<5);
      $N=$34;
      var $35=$7;
      var $36=((($35)+(1))|0);
      var $37=($36<<2);
      var $38=(($37)>>>0) < 65536;
      var $39=(($38)&1);
      var $40=(($39)|0)!=0;
      var $41=(($40)&1);
      var $42=($41);
      var $43=(($42)|0)!=0;
      if ($43) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $45=$7;
      var $46=((($45)+(1))|0);
      var $47=($46<<2);
      var $48=STACKTOP;STACKTOP = (STACKTOP + $47)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $55 = $48;label = 11; break;
    case 10: 
      var $50=$7;
      var $51=((($50)+(1))|0);
      var $52=($51<<2);
      var $53=___gmp_tmp_reentrant_alloc($__tmp_marker, $52);
      var $55 = $53;label = 11; break;
    case 11: 
      var $55;
      var $56=$55;
      $fft_l=$56;
      $i=0;
      label = 12; break;
    case 12: 
      var $58=$i;
      var $59=$7;
      var $60=(($58)|0) <= (($59)|0);
      if ($60) { label = 13; break; } else { label = 18; break; }
    case 13: 
      var $62=$i;
      var $63=1 << $62;
      var $64=($63<<2);
      var $65=(($64)>>>0) < 65536;
      var $66=(($65)&1);
      var $67=(($66)|0)!=0;
      var $68=(($67)&1);
      var $69=($68);
      var $70=(($69)|0)!=0;
      if ($70) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $72=$i;
      var $73=1 << $72;
      var $74=($73<<2);
      var $75=STACKTOP;STACKTOP = (STACKTOP + $74)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $82 = $75;label = 16; break;
    case 15: 
      var $77=$i;
      var $78=1 << $77;
      var $79=($78<<2);
      var $80=___gmp_tmp_reentrant_alloc($__tmp_marker, $79);
      var $82 = $80;label = 16; break;
    case 16: 
      var $82;
      var $83=$82;
      var $84=$i;
      var $85=$fft_l;
      var $86=(($85+($84<<2))|0);
      HEAP32[(($86)>>2)]=$83;
      label = 17; break;
    case 17: 
      var $88=$i;
      var $89=((($88)+(1))|0);
      $i=$89;
      label = 12; break;
    case 18: 
      var $91=$fft_l;
      var $92=$7;
      _mpn_fft_initl($91, $92);
      var $93=$7;
      var $94=1 << $93;
      $K=$94;
      var $95=$N;
      var $96=$7;
      var $97=$95 >> (($96)|0);
      $M=$97;
      var $98=$M;
      var $99=((($98)-(1))|0);
      var $100=((((($99)|0))/(32))&-1);
      var $101=((($100)+(1))|0);
      $l=$101;
      var $102=$7;
      var $103=_mpn_mul_fft_lcm(32, $102);
      $maxLK=$103;
      var $104=$M;
      var $105=($104<<1);
      var $106=$7;
      var $107=((($105)+($106))|0);
      var $108=((($107)+(2))|0);
      var $109=$maxLK;
      var $110=((((($108)|0))/((($109)|0)))&-1);
      var $111=((($110)+(1))|0);
      var $112=$maxLK;
      var $113=Math.imul($111,$112);
      $Nprime=$113;
      var $114=$Nprime;
      var $115=((((($114)|0))/(32))&-1);
      $nprime=$115;
      var $116=$nprime;
      var $117=$sqr;
      var $118=(($117)|0)!=0;
      var $119=$118 ? 360 : 300;
      var $120=(($116)|0) >= (($119)|0);
      if ($120) { label = 19; break; } else { label = 24; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $123=$nprime;
      var $124=$sqr;
      var $125=___gmpn_fft_best_k($123, $124);
      var $126=1 << $125;
      $K2=$126;
      var $127=$nprime;
      var $128=$K2;
      var $129=((($128)-(1))|0);
      var $130=$127 & $129;
      var $131=(($130)|0)==0;
      if ($131) { label = 21; break; } else { label = 22; break; }
    case 21: 
      label = 23; break;
    case 22: 
      var $134=$nprime;
      var $135=$K2;
      var $136=((($134)+($135))|0);
      var $137=((($136)-(1))|0);
      var $138=$K2;
      var $139=(((-$138))|0);
      var $140=$137 & $139;
      $nprime=$140;
      var $141=$nprime;
      var $142=($141<<5);
      $Nprime=$142;
      label = 20; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $146=$nprime;
      var $147=$2;
      var $148=(($146)|0) < (($147)|0);
      var $149=$148 ^ 1;
      var $150=(($149)&1);
      var $151=(($150)|0)!=0;
      var $152=(($151)&1);
      var $153=($152);
      var $154=(($153)|0)!=0;
      if ($154) { label = 26; break; } else { label = 27; break; }
    case 26: 
      ___gmp_assert_fail(((5249420)|0), 857, ((5249288)|0));
      throw "Reached an unreachable!"
    case 27: 
      label = 28; break;
    case 28: 
      var $158=$nprime;
      var $159=((($158)+(1))|0);
      var $160=($159<<1);
      var $161=($160<<2);
      var $162=(($161)>>>0) < 65536;
      var $163=(($162)&1);
      var $164=(($163)|0)!=0;
      var $165=(($164)&1);
      var $166=($165);
      var $167=(($166)|0)!=0;
      if ($167) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $169=$nprime;
      var $170=((($169)+(1))|0);
      var $171=($170<<1);
      var $172=($171<<2);
      var $173=STACKTOP;STACKTOP = (STACKTOP + $172)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $181 = $173;label = 31; break;
    case 30: 
      var $175=$nprime;
      var $176=((($175)+(1))|0);
      var $177=($176<<1);
      var $178=($177<<2);
      var $179=___gmp_tmp_reentrant_alloc($__tmp_marker, $178);
      var $181 = $179;label = 31; break;
    case 31: 
      var $181;
      var $182=$181;
      $T=$182;
      var $183=$Nprime;
      var $184=$7;
      var $185=$183 >> (($184)|0);
      $Mp=$185;
      var $186=$K;
      var $187=$nprime;
      var $188=((($187)+(1))|0);
      var $189=Math.imul($186,$188);
      var $190=($189<<2);
      var $191=(($190)>>>0) < 65536;
      var $192=(($191)&1);
      var $193=(($192)|0)!=0;
      var $194=(($193)&1);
      var $195=($194);
      var $196=(($195)|0)!=0;
      if ($196) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $198=$K;
      var $199=$nprime;
      var $200=((($199)+(1))|0);
      var $201=Math.imul($198,$200);
      var $202=($201<<2);
      var $203=STACKTOP;STACKTOP = (STACKTOP + $202)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $212 = $203;label = 34; break;
    case 33: 
      var $205=$K;
      var $206=$nprime;
      var $207=((($206)+(1))|0);
      var $208=Math.imul($205,$207);
      var $209=($208<<2);
      var $210=___gmp_tmp_reentrant_alloc($__tmp_marker, $209);
      var $212 = $210;label = 34; break;
    case 34: 
      var $212;
      var $213=$212;
      $A=$213;
      var $214=$K;
      var $215=($214<<2);
      var $216=(($215)>>>0) < 65536;
      var $217=(($216)&1);
      var $218=(($217)|0)!=0;
      var $219=(($218)&1);
      var $220=($219);
      var $221=(($220)|0)!=0;
      if ($221) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $223=$K;
      var $224=($223<<2);
      var $225=STACKTOP;STACKTOP = (STACKTOP + $224)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $231 = $225;label = 37; break;
    case 36: 
      var $227=$K;
      var $228=($227<<2);
      var $229=___gmp_tmp_reentrant_alloc($__tmp_marker, $228);
      var $231 = $229;label = 37; break;
    case 37: 
      var $231;
      var $232=$231;
      $Ap=$232;
      var $233=$A;
      var $234=$Ap;
      var $235=$K;
      var $236=$nprime;
      var $237=$3;
      var $238=$4;
      var $239=$l;
      var $240=$Mp;
      var $241=$T;
      _mpn_mul_fft_decompose($233, $234, $235, $236, $237, $238, $239, $240, $241);
      var $242=$sqr;
      var $243=(($242)|0)!=0;
      if ($243) { label = 38; break; } else { label = 45; break; }
    case 38: 
      var $245=$l;
      var $246=$K;
      var $247=((($246)-(1))|0);
      var $248=Math.imul($245,$247);
      var $249=$nprime;
      var $250=((($248)+($249))|0);
      var $251=((($250)+(1))|0);
      $pla=$251;
      var $252=$pla;
      var $253=($252<<2);
      var $254=(($253)>>>0) < 65536;
      var $255=(($254)&1);
      var $256=(($255)|0)!=0;
      var $257=(($256)&1);
      var $258=($257);
      var $259=(($258)|0)!=0;
      if ($259) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $261=$pla;
      var $262=($261<<2);
      var $263=STACKTOP;STACKTOP = (STACKTOP + $262)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $269 = $263;label = 41; break;
    case 40: 
      var $265=$pla;
      var $266=($265<<2);
      var $267=___gmp_tmp_reentrant_alloc($__tmp_marker, $266);
      var $269 = $267;label = 41; break;
    case 41: 
      var $269;
      var $270=$269;
      $B=$270;
      var $271=$K;
      var $272=($271<<2);
      var $273=(($272)>>>0) < 65536;
      var $274=(($273)&1);
      var $275=(($274)|0)!=0;
      var $276=(($275)&1);
      var $277=($276);
      var $278=(($277)|0)!=0;
      if ($278) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $280=$K;
      var $281=($280<<2);
      var $282=STACKTOP;STACKTOP = (STACKTOP + $281)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $288 = $282;label = 44; break;
    case 43: 
      var $284=$K;
      var $285=($284<<2);
      var $286=___gmp_tmp_reentrant_alloc($__tmp_marker, $285);
      var $288 = $286;label = 44; break;
    case 44: 
      var $288;
      var $289=$288;
      $Bp=$289;
      label = 52; break;
    case 45: 
      var $291=$K;
      var $292=$nprime;
      var $293=((($292)+(1))|0);
      var $294=Math.imul($291,$293);
      var $295=($294<<2);
      var $296=(($295)>>>0) < 65536;
      var $297=(($296)&1);
      var $298=(($297)|0)!=0;
      var $299=(($298)&1);
      var $300=($299);
      var $301=(($300)|0)!=0;
      if ($301) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $303=$K;
      var $304=$nprime;
      var $305=((($304)+(1))|0);
      var $306=Math.imul($303,$305);
      var $307=($306<<2);
      var $308=STACKTOP;STACKTOP = (STACKTOP + $307)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $317 = $308;label = 48; break;
    case 47: 
      var $310=$K;
      var $311=$nprime;
      var $312=((($311)+(1))|0);
      var $313=Math.imul($310,$312);
      var $314=($313<<2);
      var $315=___gmp_tmp_reentrant_alloc($__tmp_marker, $314);
      var $317 = $315;label = 48; break;
    case 48: 
      var $317;
      var $318=$317;
      $B=$318;
      var $319=$K;
      var $320=($319<<2);
      var $321=(($320)>>>0) < 65536;
      var $322=(($321)&1);
      var $323=(($322)|0)!=0;
      var $324=(($323)&1);
      var $325=($324);
      var $326=(($325)|0)!=0;
      if ($326) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $328=$K;
      var $329=($328<<2);
      var $330=STACKTOP;STACKTOP = (STACKTOP + $329)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $336 = $330;label = 51; break;
    case 50: 
      var $332=$K;
      var $333=($332<<2);
      var $334=___gmp_tmp_reentrant_alloc($__tmp_marker, $333);
      var $336 = $334;label = 51; break;
    case 51: 
      var $336;
      var $337=$336;
      $Bp=$337;
      var $338=$B;
      var $339=$Bp;
      var $340=$K;
      var $341=$nprime;
      var $342=$5;
      var $343=$6;
      var $344=$l;
      var $345=$Mp;
      var $346=$T;
      _mpn_mul_fft_decompose($338, $339, $340, $341, $342, $343, $344, $345, $346);
      label = 52; break;
    case 52: 
      var $348=$1;
      var $349=$2;
      var $350=$7;
      var $351=$Ap;
      var $352=$Bp;
      var $353=$A;
      var $354=$B;
      var $355=$nprime;
      var $356=$l;
      var $357=$Mp;
      var $358=$fft_l;
      var $359=$T;
      var $360=$sqr;
      var $361=_mpn_mul_fft_internal($348, $349, $350, $351, $352, $353, $354, $355, $356, $357, $358, $359, $360);
      $h=$361;
      label = 53; break;
    case 53: 
      var $363=HEAP32[(($__tmp_marker)>>2)];
      var $364=(($363)|0)!=0;
      var $365=(($364)&1);
      var $366=(($365)|0)!=0;
      var $367=(($366)&1);
      var $368=($367);
      var $369=(($368)|0)!=0;
      if ($369) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $371=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($371);
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $374=$h;
      STACKTOP = __stackBase__;
      return $374;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mul_fft["X"]=1;

function _mpn_mul_fft_decompose($A, $Ap, $K, $nprime, $n, $nl, $l, $Mp, $T) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $i;
      var $j;
      var $tmp;
      var $Kl;
      var $__tmp_marker=__stackBase__;
      var $dif;
      var $cy;
      var $subp;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__dst1;
      var $__n2;
      var $__dst3;
      var $__n4;
      $1=$A;
      $2=$Ap;
      $3=$K;
      $4=$nprime;
      $5=$n;
      $6=$nl;
      $7=$l;
      $8=$Mp;
      $9=$T;
      var $10=$3;
      var $11=$7;
      var $12=Math.imul($10,$11);
      $Kl=$12;
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $13=$6;
      var $14=$Kl;
      var $15=(($13)|0) > (($14)|0);
      if ($15) { label = 3; break; } else { label = 22; break; }
    case 3: 
      var $17=$6;
      var $18=$Kl;
      var $19=((($17)-($18))|0);
      $dif=$19;
      var $20=$Kl;
      var $21=((($20)+(1))|0);
      var $22=($21<<2);
      var $23=(($22)>>>0) < 65536;
      var $24=(($23)&1);
      var $25=(($24)|0)!=0;
      var $26=(($25)&1);
      var $27=($26);
      var $28=(($27)|0)!=0;
      if ($28) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $30=$Kl;
      var $31=((($30)+(1))|0);
      var $32=($31<<2);
      var $33=STACKTOP;STACKTOP = (STACKTOP + $32)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $40 = $33;label = 6; break;
    case 5: 
      var $35=$Kl;
      var $36=((($35)+(1))|0);
      var $37=($36<<2);
      var $38=___gmp_tmp_reentrant_alloc($__tmp_marker, $37);
      var $40 = $38;label = 6; break;
    case 6: 
      var $40;
      var $41=$40;
      $tmp=$41;
      var $42=$dif;
      var $43=$Kl;
      var $44=(($42)|0) > (($43)|0);
      if ($44) { label = 7; break; } else { label = 20; break; }
    case 7: 
      $subp=0;
      var $46=$tmp;
      var $47=$5;
      var $48=$5;
      var $49=$Kl;
      var $50=(($48+($49<<2))|0);
      var $51=$Kl;
      var $52=___gmpn_sub_n($46, $47, $50, $51);
      $cy=$52;
      var $53=$Kl;
      var $54=($53<<1);
      var $55=$5;
      var $56=(($55+($54<<2))|0);
      $5=$56;
      var $57=$Kl;
      var $58=$dif;
      var $59=((($58)-($57))|0);
      $dif=$59;
      label = 8; break;
    case 8: 
      var $61=$dif;
      var $62=$Kl;
      var $63=(($61)|0) > (($62)|0);
      if ($63) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $65=$subp;
      var $66=(($65)|0)!=0;
      if ($66) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $68=$tmp;
      var $69=$tmp;
      var $70=$5;
      var $71=$Kl;
      var $72=___gmpn_sub_n($68, $69, $70, $71);
      var $73=$cy;
      var $74=((($73)+($72))|0);
      $cy=$74;
      label = 12; break;
    case 11: 
      var $76=$tmp;
      var $77=$tmp;
      var $78=$5;
      var $79=$Kl;
      var $80=___gmpn_add_n($76, $77, $78, $79);
      var $81=$cy;
      var $82=((($81)-($80))|0);
      $cy=$82;
      label = 12; break;
    case 12: 
      var $84=$subp;
      var $85=$84 ^ 1;
      $subp=$85;
      var $86=$Kl;
      var $87=$5;
      var $88=(($87+($86<<2))|0);
      $5=$88;
      var $89=$Kl;
      var $90=$dif;
      var $91=((($90)-($89))|0);
      $dif=$91;
      label = 8; break;
    case 13: 
      var $93=$subp;
      var $94=(($93)|0)!=0;
      if ($94) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $96=$tmp;
      var $97=$tmp;
      var $98=$Kl;
      var $99=$5;
      var $100=$dif;
      var $101=___gmpn_sub($96, $97, $98, $99, $100);
      var $102=$cy;
      var $103=((($102)+($101))|0);
      $cy=$103;
      label = 16; break;
    case 15: 
      var $105=$tmp;
      var $106=$tmp;
      var $107=$Kl;
      var $108=$5;
      var $109=$dif;
      var $110=___gmpn_add($105, $106, $107, $108, $109);
      var $111=$cy;
      var $112=((($111)-($110))|0);
      $cy=$112;
      label = 16; break;
    case 16: 
      var $114=$cy;
      var $115=(($114)|0) >= 0;
      if ($115) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $117=$tmp;
      var $118=$tmp;
      var $119=$Kl;
      var $120=$cy;
      var $121=___gmpn_add_1($117, $118, $119, $120);
      $cy=$121;
      label = 19; break;
    case 18: 
      var $123=$tmp;
      var $124=$tmp;
      var $125=$Kl;
      var $126=$cy;
      var $127=(((-$126))|0);
      var $128=___gmpn_sub_1($123, $124, $125, $127);
      $cy=$128;
      label = 19; break;
    case 19: 
      label = 21; break;
    case 20: 
      var $131=$tmp;
      var $132=$5;
      var $133=$Kl;
      var $134=$5;
      var $135=$Kl;
      var $136=(($134+($135<<2))|0);
      var $137=$dif;
      var $138=___gmpn_sub($131, $132, $133, $136, $137);
      $cy=$138;
      var $139=$tmp;
      var $140=$tmp;
      var $141=$Kl;
      var $142=$cy;
      var $143=___gmpn_add_1($139, $140, $141, $142);
      $cy=$143;
      label = 21; break;
    case 21: 
      var $145=$cy;
      var $146=$Kl;
      var $147=$tmp;
      var $148=(($147+($146<<2))|0);
      HEAP32[(($148)>>2)]=$145;
      var $149=$Kl;
      var $150=((($149)+(1))|0);
      $6=$150;
      var $151=$tmp;
      $5=$151;
      label = 22; break;
    case 22: 
      $i=0;
      label = 23; break;
    case 23: 
      var $154=$i;
      var $155=$3;
      var $156=(($154)|0) < (($155)|0);
      if ($156) { label = 24; break; } else { label = 68; break; }
    case 24: 
      var $158=$1;
      var $159=$i;
      var $160=$2;
      var $161=(($160+($159<<2))|0);
      HEAP32[(($161)>>2)]=$158;
      var $162=$6;
      var $163=(($162)|0) > 0;
      if ($163) { label = 25; break; } else { label = 56; break; }
    case 25: 
      var $165=$7;
      var $166=$6;
      var $167=(($165)|0) <= (($166)|0);
      if ($167) { label = 26; break; } else { label = 28; break; }
    case 26: 
      var $169=$i;
      var $170=$3;
      var $171=((($170)-(1))|0);
      var $172=(($169)|0) < (($171)|0);
      if ($172) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $174=$7;
      var $178 = $174;label = 29; break;
    case 28: 
      var $176=$6;
      var $178 = $176;label = 29; break;
    case 29: 
      var $178;
      $j=$178;
      var $179=$j;
      var $180=$6;
      var $181=((($180)-($179))|0);
      $6=$181;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $190=$j;
      var $191=(($190)|0)!=0;
      if ($191) { label = 38; break; } else { label = 44; break; }
    case 38: 
      var $193=$j;
      var $194=((($193)-(1))|0);
      $__n=$194;
      var $195=$9;
      $__dst=$195;
      var $196=$5;
      $__src=$196;
      var $197=$__src;
      var $198=(($197+4)|0);
      $__src=$198;
      var $199=HEAP32[(($197)>>2)];
      $__x=$199;
      var $200=$__n;
      var $201=(($200)|0)!=0;
      if ($201) { label = 39; break; } else { label = 43; break; }
    case 39: 
      label = 40; break;
    case 40: 
      var $204=$__x;
      var $205=$__dst;
      var $206=(($205+4)|0);
      $__dst=$206;
      HEAP32[(($205)>>2)]=$204;
      var $207=$__src;
      var $208=(($207+4)|0);
      $__src=$208;
      var $209=HEAP32[(($207)>>2)];
      $__x=$209;
      label = 41; break;
    case 41: 
      var $211=$__n;
      var $212=((($211)-(1))|0);
      $__n=$212;
      var $213=(($212)|0)!=0;
      if ($213) { label = 40; break; } else { label = 42; break; }
    case 42: 
      label = 43; break;
    case 43: 
      var $216=$__x;
      var $217=$__dst;
      var $218=(($217+4)|0);
      $__dst=$218;
      HEAP32[(($217)>>2)]=$216;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $225=$4;
      var $226=((($225)+(1))|0);
      var $227=$j;
      var $228=((($226)-($227))|0);
      var $229=(($228)|0)!=0;
      if ($229) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $231=$9;
      var $232=$j;
      var $233=(($231+($232<<2))|0);
      $__dst1=$233;
      var $234=$4;
      var $235=((($234)+(1))|0);
      var $236=$j;
      var $237=((($235)-($236))|0);
      $__n2=$237;
      label = 51; break;
    case 51: 
      var $239=$__dst1;
      var $240=(($239+4)|0);
      $__dst1=$240;
      HEAP32[(($239)>>2)]=0;
      label = 52; break;
    case 52: 
      var $242=$__n2;
      var $243=((($242)-(1))|0);
      $__n2=$243;
      var $244=(($243)|0)!=0;
      if ($244) { label = 51; break; } else { label = 53; break; }
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $248=$7;
      var $249=$5;
      var $250=(($249+($248<<2))|0);
      $5=$250;
      var $251=$1;
      var $252=$9;
      var $253=$i;
      var $254=$8;
      var $255=Math.imul($253,$254);
      var $256=$4;
      _mpn_fft_mul_2exp_modF($251, $252, $255, $256);
      label = 66; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $261=$4;
      var $262=((($261)+(1))|0);
      var $263=(($262)|0)!=0;
      if ($263) { label = 60; break; } else { label = 64; break; }
    case 60: 
      var $265=$1;
      $__dst3=$265;
      var $266=$4;
      var $267=((($266)+(1))|0);
      $__n4=$267;
      label = 61; break;
    case 61: 
      var $269=$__dst3;
      var $270=(($269+4)|0);
      $__dst3=$270;
      HEAP32[(($269)>>2)]=0;
      label = 62; break;
    case 62: 
      var $272=$__n4;
      var $273=((($272)-(1))|0);
      $__n4=$273;
      var $274=(($273)|0)!=0;
      if ($274) { label = 61; break; } else { label = 63; break; }
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $279=$4;
      var $280=((($279)+(1))|0);
      var $281=$1;
      var $282=(($281+($280<<2))|0);
      $1=$282;
      label = 67; break;
    case 67: 
      var $284=$i;
      var $285=((($284)+(1))|0);
      $i=$285;
      label = 23; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $288=$6;
      var $289=(($288)|0)==0;
      var $290=$289 ^ 1;
      var $291=(($290)&1);
      var $292=(($291)|0)!=0;
      var $293=(($292)&1);
      var $294=($293);
      var $295=(($294)|0)!=0;
      if ($295) { label = 70; break; } else { label = 71; break; }
    case 70: 
      ___gmp_assert_fail(((5249420)|0), 699, ((5248540)|0));
      throw "Reached an unreachable!"
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $300=HEAP32[(($__tmp_marker)>>2)];
      var $301=(($300)|0)!=0;
      var $302=(($301)&1);
      var $303=(($302)|0)!=0;
      var $304=(($303)&1);
      var $305=($304);
      var $306=(($305)|0)!=0;
      if ($306) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $308=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($308);
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_mul_fft_decompose["X"]=1;

function _mpn_mul_fft_internal($op, $pl, $k, $Ap, $Bp, $A, $B, $nprime, $l, $Mp, $fft_l, $T, $sqr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $11;
      var $12;
      var $13;
      var $K;
      var $i;
      var $pla;
      var $lo;
      var $sh;
      var $j;
      var $p;
      var $cc;
      var $__dst;
      var $__n;
      var $__dst1;
      var $__n2;
      var $n;
      $1=$op;
      $2=$pl;
      $3=$k;
      $4=$Ap;
      $5=$Bp;
      $6=$A;
      $7=$B;
      $8=$nprime;
      $9=$l;
      $10=$Mp;
      $11=$fft_l;
      $12=$T;
      $13=$sqr;
      var $14=$3;
      var $15=1 << $14;
      $K=$15;
      var $16=$4;
      var $17=$K;
      var $18=$11;
      var $19=$3;
      var $20=(($18+($19<<2))|0);
      var $21=$10;
      var $22=($21<<1);
      var $23=$8;
      var $24=$12;
      _mpn_fft_fft($16, $17, $20, $22, $23, 1, $24);
      var $25=$13;
      var $26=(($25)|0)!=0;
      if ($26) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $28=$5;
      var $29=$K;
      var $30=$11;
      var $31=$3;
      var $32=(($30+($31<<2))|0);
      var $33=$10;
      var $34=($33<<1);
      var $35=$8;
      var $36=$12;
      _mpn_fft_fft($28, $29, $32, $34, $35, 1, $36);
      label = 4; break;
    case 4: 
      var $38=$4;
      var $39=$13;
      var $40=(($39)|0)!=0;
      if ($40) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $42=$4;
      var $46 = $42;label = 7; break;
    case 6: 
      var $44=$5;
      var $46 = $44;label = 7; break;
    case 7: 
      var $46;
      var $47=$8;
      var $48=$K;
      _mpn_fft_mul_modF_K($38, $46, $47, $48);
      var $49=$4;
      var $50=$K;
      var $51=$10;
      var $52=($51<<1);
      var $53=$8;
      var $54=$12;
      _mpn_fft_fftinv($49, $50, $52, $53, $54);
      var $55=$12;
      var $56=$8;
      var $57=(($55+($56<<2))|0);
      var $58=(($57+4)|0);
      var $59=$5;
      var $60=(($59)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$5;
      var $62=(($61)|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=$4;
      var $65=(($64)|0);
      var $66=HEAP32[(($65)>>2)];
      var $67=$3;
      var $68=$8;
      _mpn_fft_div_2exp_modF($63, $66, $67, $68);
      $i=1;
      label = 8; break;
    case 8: 
      var $70=$i;
      var $71=$K;
      var $72=(($70)|0) < (($71)|0);
      if ($72) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $74=$i;
      var $75=((($74)-(1))|0);
      var $76=$4;
      var $77=(($76+($75<<2))|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$i;
      var $80=$5;
      var $81=(($80+($79<<2))|0);
      HEAP32[(($81)>>2)]=$78;
      var $82=$i;
      var $83=$5;
      var $84=(($83+($82<<2))|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$i;
      var $87=$4;
      var $88=(($87+($86<<2))|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=$3;
      var $91=$K;
      var $92=$i;
      var $93=((($91)-($92))|0);
      var $94=$10;
      var $95=Math.imul($93,$94);
      var $96=((($90)+($95))|0);
      var $97=$8;
      _mpn_fft_div_2exp_modF($85, $89, $96, $97);
      label = 10; break;
    case 10: 
      var $99=$i;
      var $100=((($99)+(1))|0);
      $i=$100;
      label = 8; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $105=$8;
      var $106=((($105)+(1))|0);
      var $107=(($106)|0)!=0;
      if ($107) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $109=$12;
      $__dst=$109;
      var $110=$8;
      var $111=((($110)+(1))|0);
      $__n=$111;
      label = 16; break;
    case 16: 
      var $113=$__dst;
      var $114=(($113+4)|0);
      $__dst=$114;
      HEAP32[(($113)>>2)]=0;
      label = 17; break;
    case 17: 
      var $116=$__n;
      var $117=((($116)-(1))|0);
      $__n=$117;
      var $118=(($117)|0)!=0;
      if ($118) { label = 16; break; } else { label = 18; break; }
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $122=$9;
      var $123=$K;
      var $124=((($123)-(1))|0);
      var $125=Math.imul($122,$124);
      var $126=$8;
      var $127=((($125)+($126))|0);
      var $128=((($127)+(1))|0);
      $pla=$128;
      var $129=$7;
      $p=$129;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $133=$pla;
      var $134=(($133)|0)!=0;
      if ($134) { label = 24; break; } else { label = 28; break; }
    case 24: 
      var $136=$p;
      $__dst1=$136;
      var $137=$pla;
      $__n2=$137;
      label = 25; break;
    case 25: 
      var $139=$__dst1;
      var $140=(($139+4)|0);
      $__dst1=$140;
      HEAP32[(($139)>>2)]=0;
      label = 26; break;
    case 26: 
      var $142=$__n2;
      var $143=((($142)-(1))|0);
      $__n2=$143;
      var $144=(($143)|0)!=0;
      if ($144) { label = 25; break; } else { label = 27; break; }
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      $cc=0;
      var $148=$K;
      var $149=((($148)-(1))|0);
      $i=$149;
      var $150=$9;
      var $151=$i;
      var $152=Math.imul($150,$151);
      var $153=$8;
      var $154=((($152)+($153))|0);
      $lo=$154;
      var $155=$9;
      var $156=$i;
      var $157=Math.imul($155,$156);
      $sh=$157;
      label = 30; break;
    case 30: 
      var $159=$i;
      var $160=(($159)|0) >= 0;
      if ($160) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $162=$p;
      var $163=$sh;
      var $164=(($162+($163<<2))|0);
      $n=$164;
      var $165=$K;
      var $166=$i;
      var $167=((($165)-($166))|0);
      var $168=$K;
      var $169=((($168)-(1))|0);
      var $170=$167 & $169;
      $j=$170;
      var $171=$n;
      var $172=$n;
      var $173=$j;
      var $174=$5;
      var $175=(($174+($173<<2))|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=$8;
      var $178=((($177)+(1))|0);
      var $179=___gmpn_add_n($171, $172, $176, $178);
      var $180=(($179)|0)!=0;
      if ($180) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $182=$n;
      var $183=$8;
      var $184=(($182+($183<<2))|0);
      var $185=(($184+4)|0);
      var $186=$n;
      var $187=$8;
      var $188=(($186+($187<<2))|0);
      var $189=(($188+4)|0);
      var $190=$pla;
      var $191=$sh;
      var $192=((($190)-($191))|0);
      var $193=$8;
      var $194=((($192)-($193))|0);
      var $195=((($194)-(1))|0);
      var $196=___gmpn_add_1($185, $189, $195, 1);
      var $197=$cc;
      var $198=((($197)+($196))|0);
      $cc=$198;
      label = 33; break;
    case 33: 
      var $200=$i;
      var $201=((($200)+(1))|0);
      var $202=$9;
      var $203=($202<<1);
      var $204=$12;
      var $205=(($204+($203<<2))|0);
      HEAP32[(($205)>>2)]=$201;
      var $206=$j;
      var $207=$5;
      var $208=(($207+($206<<2))|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=$12;
      var $211=$8;
      var $212=((($211)+(1))|0);
      var $213=___gmpn_cmp($209, $210, $212);
      var $214=(($213)|0) > 0;
      if ($214) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $216=$n;
      var $217=$n;
      var $218=$pla;
      var $219=$sh;
      var $220=((($218)-($219))|0);
      var $221=___gmpn_sub_1($216, $217, $220, 1);
      var $222=$cc;
      var $223=((($222)-($221))|0);
      $cc=$223;
      var $224=$p;
      var $225=$lo;
      var $226=(($224+($225<<2))|0);
      var $227=$p;
      var $228=$lo;
      var $229=(($227+($228<<2))|0);
      var $230=$pla;
      var $231=$lo;
      var $232=((($230)-($231))|0);
      var $233=___gmpn_sub_1($226, $229, $232, 1);
      var $234=$cc;
      var $235=((($234)-($233))|0);
      $cc=$235;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $238=$i;
      var $239=((($238)-(1))|0);
      $i=$239;
      var $240=$9;
      var $241=$lo;
      var $242=((($241)-($240))|0);
      $lo=$242;
      var $243=$9;
      var $244=$sh;
      var $245=((($244)-($243))|0);
      $sh=$245;
      label = 30; break;
    case 37: 
      var $247=$cc;
      var $248=(($247)|0)==-1;
      if ($248) { label = 38; break; } else { label = 41; break; }
    case 38: 
      var $250=$p;
      var $251=$pla;
      var $252=(($250+($251<<2))|0);
      var $253=$2;
      var $254=(((-$253))|0);
      var $255=(($252+($254<<2))|0);
      var $256=$p;
      var $257=$pla;
      var $258=(($256+($257<<2))|0);
      var $259=$2;
      var $260=(((-$259))|0);
      var $261=(($258+($260<<2))|0);
      var $262=$2;
      var $263=___gmpn_add_1($255, $261, $262, 1);
      $cc=$263;
      var $264=(($263)|0)!=0;
      if ($264) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $266=$p;
      var $267=$pla;
      var $268=(($266+($267<<2))|0);
      var $269=$2;
      var $270=(((-$269))|0);
      var $271=(($268+($270<<2))|0);
      var $272=((($271)-(4))|0);
      var $273=$p;
      var $274=$pla;
      var $275=(($273+($274<<2))|0);
      var $276=$2;
      var $277=(((-$276))|0);
      var $278=(($275+($277<<2))|0);
      var $279=((($278)-(4))|0);
      var $280=$2;
      var $281=((($280)+(1))|0);
      var $282=___gmpn_sub_1($272, $279, $281, 1);
      var $283=$p;
      var $284=$pla;
      var $285=(($283+($284<<2))|0);
      var $286=((($285)-(4))|0);
      var $287=$p;
      var $288=$pla;
      var $289=(($287+($288<<2))|0);
      var $290=((($289)-(4))|0);
      var $291=___gmpn_sub_1($286, $290, 1, 1);
      label = 40; break;
    case 40: 
      label = 55; break;
    case 41: 
      var $294=$cc;
      var $295=(($294)|0)==1;
      if ($295) { label = 42; break; } else { label = 51; break; }
    case 42: 
      var $297=$pla;
      var $298=$2;
      var $299=($298<<1);
      var $300=(($297)|0) >= (($299)|0);
      if ($300) { label = 43; break; } else { label = 47; break; }
    case 43: 
      label = 44; break;
    case 44: 
      var $303=$p;
      var $304=$pla;
      var $305=(($303+($304<<2))|0);
      var $306=$2;
      var $307=($306<<1);
      var $308=(((-$307))|0);
      var $309=(($305+($308<<2))|0);
      var $310=$p;
      var $311=$pla;
      var $312=(($310+($311<<2))|0);
      var $313=$2;
      var $314=($313<<1);
      var $315=(((-$314))|0);
      var $316=(($312+($315<<2))|0);
      var $317=$2;
      var $318=($317<<1);
      var $319=$cc;
      var $320=___gmpn_add_1($309, $316, $318, $319);
      $cc=$320;
      var $321=(($320)|0)!=0;
      if ($321) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 44; break;
    case 46: 
      label = 50; break;
    case 47: 
      var $325=$p;
      var $326=$pla;
      var $327=(($325+($326<<2))|0);
      var $328=$2;
      var $329=(((-$328))|0);
      var $330=(($327+($329<<2))|0);
      var $331=$p;
      var $332=$pla;
      var $333=(($331+($332<<2))|0);
      var $334=$2;
      var $335=(((-$334))|0);
      var $336=(($333+($335<<2))|0);
      var $337=$2;
      var $338=$cc;
      var $339=___gmpn_sub_1($330, $336, $337, $338);
      $cc=$339;
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 54; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $348=$1;
      var $349=$2;
      var $350=$p;
      var $351=$pla;
      var $352=_mpn_fft_norm_modF($348, $349, $350, $351);

      return $352;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_mul_fft_internal["X"]=1;

function _mpn_fft_fft($Ap, $K, $ll, $omega, $n, $inc, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $cy;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $j;
      var $lk;
      $1=$Ap;
      $2=$K;
      $3=$ll;
      $4=$omega;
      $5=$n;
      $6=$inc;
      $7=$tp;
      var $8=$2;
      var $9=(($8)|0)==2;
      if ($9) { label = 3; break; } else { label = 25; break; }
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $19=$5;
      var $20=((($19)+(1))|0);
      var $21=(($20)|0)!=0;
      if ($21) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $23=$5;
      var $24=((($23)+(1))|0);
      var $25=((($24)-(1))|0);
      $__n=$25;
      var $26=$7;
      $__dst=$26;
      var $27=$1;
      var $28=(($27)|0);
      var $29=HEAP32[(($28)>>2)];
      $__src=$29;
      var $30=$__src;
      var $31=(($30+4)|0);
      $__src=$31;
      var $32=HEAP32[(($30)>>2)];
      $__x=$32;
      var $33=$__n;
      var $34=(($33)|0)!=0;
      if ($34) { label = 13; break; } else { label = 17; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $37=$__x;
      var $38=$__dst;
      var $39=(($38+4)|0);
      $__dst=$39;
      HEAP32[(($38)>>2)]=$37;
      var $40=$__src;
      var $41=(($40+4)|0);
      $__src=$41;
      var $42=HEAP32[(($40)>>2)];
      $__x=$42;
      label = 15; break;
    case 15: 
      var $44=$__n;
      var $45=((($44)-(1))|0);
      $__n=$45;
      var $46=(($45)|0)!=0;
      if ($46) { label = 14; break; } else { label = 16; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $49=$__x;
      var $50=$__dst;
      var $51=(($50+4)|0);
      $__dst=$51;
      HEAP32[(($50)>>2)]=$49;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $55=$1;
      var $56=(($55)|0);
      var $57=HEAP32[(($56)>>2)];
      var $58=$1;
      var $59=(($58)|0);
      var $60=HEAP32[(($59)>>2)];
      var $61=$6;
      var $62=$1;
      var $63=(($62+($61<<2))|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$5;
      var $66=((($65)+(1))|0);
      var $67=___gmpn_add_n($57, $60, $64, $66);
      var $68=$6;
      var $69=$1;
      var $70=(($69+($68<<2))|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$7;
      var $73=$6;
      var $74=$1;
      var $75=(($74+($73<<2))|0);
      var $76=HEAP32[(($75)>>2)];
      var $77=$5;
      var $78=((($77)+(1))|0);
      var $79=___gmpn_sub_n($71, $72, $76, $78);
      $cy=$79;
      var $80=$5;
      var $81=$1;
      var $82=(($81)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($83+($80<<2))|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($85)>>>0) > 1;
      if ($86) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $88=$1;
      var $89=(($88)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$1;
      var $92=(($91)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=$5;
      var $95=$5;
      var $96=$1;
      var $97=(($96)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=(($98+($95<<2))|0);
      var $100=HEAP32[(($99)>>2)];
      var $101=((($100)-(1))|0);
      var $102=___gmpn_sub_1($90, $93, $94, $101);
      var $103=(((1)-($102))|0);
      var $104=$5;
      var $105=$1;
      var $106=(($105)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=(($107+($104<<2))|0);
      HEAP32[(($108)>>2)]=$103;
      label = 22; break;
    case 22: 
      var $110=$cy;
      var $111=(($110)|0)!=0;
      if ($111) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $113=$6;
      var $114=$1;
      var $115=(($114+($113<<2))|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$6;
      var $118=$1;
      var $119=(($118+($117<<2))|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$5;
      var $122=$5;
      var $123=$6;
      var $124=$1;
      var $125=(($124+($123<<2))|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=(($126+($122<<2))|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=$128 ^ -1;
      var $130=((($129)+(1))|0);
      var $131=___gmpn_add_1($116, $120, $121, $130);
      var $132=$5;
      var $133=$6;
      var $134=$1;
      var $135=(($134+($133<<2))|0);
      var $136=HEAP32[(($135)>>2)];
      var $137=(($136+($132<<2))|0);
      HEAP32[(($137)>>2)]=$131;
      label = 24; break;
    case 24: 
      label = 30; break;
    case 25: 
      var $140=$3;
      var $141=HEAP32[(($140)>>2)];
      $lk=$141;
      var $142=$1;
      var $143=$2;
      var $144=$143 >> 1;
      var $145=$3;
      var $146=((($145)-(4))|0);
      var $147=$4;
      var $148=($147<<1);
      var $149=$5;
      var $150=$6;
      var $151=($150<<1);
      var $152=$7;
      _mpn_fft_fft($142, $144, $146, $148, $149, $151, $152);
      var $153=$1;
      var $154=$6;
      var $155=(($153+($154<<2))|0);
      var $156=$2;
      var $157=$156 >> 1;
      var $158=$3;
      var $159=((($158)-(4))|0);
      var $160=$4;
      var $161=($160<<1);
      var $162=$5;
      var $163=$6;
      var $164=($163<<1);
      var $165=$7;
      _mpn_fft_fft($155, $157, $159, $161, $162, $164, $165);
      $j=0;
      label = 26; break;
    case 26: 
      var $167=$j;
      var $168=$2;
      var $169=$168 >> 1;
      var $170=(($167)|0) < (($169)|0);
      if ($170) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $172=$7;
      var $173=$6;
      var $174=$1;
      var $175=(($174+($173<<2))|0);
      var $176=HEAP32[(($175)>>2)];
      var $177=$lk;
      var $178=(($177)|0);
      var $179=HEAP32[(($178)>>2)];
      var $180=$4;
      var $181=Math.imul($179,$180);
      var $182=$5;
      _mpn_fft_mul_2exp_modF($172, $176, $181, $182);
      var $183=$6;
      var $184=$1;
      var $185=(($184+($183<<2))|0);
      var $186=HEAP32[(($185)>>2)];
      var $187=$1;
      var $188=(($187)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$7;
      var $191=$5;
      _mpn_fft_sub_modF($186, $189, $190, $191);
      var $192=$1;
      var $193=(($192)|0);
      var $194=HEAP32[(($193)>>2)];
      var $195=$1;
      var $196=(($195)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=$7;
      var $199=$5;
      _mpn_fft_add_modF($194, $197, $198, $199);
      label = 28; break;
    case 28: 
      var $201=$j;
      var $202=((($201)+(1))|0);
      $j=$202;
      var $203=$lk;
      var $204=(($203+8)|0);
      $lk=$204;
      var $205=$6;
      var $206=($205<<1);
      var $207=$1;
      var $208=(($207+($206<<2))|0);
      $1=$208;
      label = 26; break;
    case 29: 
      label = 30; break;
    case 30: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_fft["X"]=1;

function _mpn_fft_fftinv($Ap, $K, $omega, $n, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $cy;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $j;
      var $K2;
      $1=$Ap;
      $2=$K;
      $3=$omega;
      $4=$n;
      $5=$tp;
      var $6=$2;
      var $7=(($6)|0)==2;
      if ($7) { label = 3; break; } else { label = 25; break; }
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $17=$4;
      var $18=((($17)+(1))|0);
      var $19=(($18)|0)!=0;
      if ($19) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $21=$4;
      var $22=((($21)+(1))|0);
      var $23=((($22)-(1))|0);
      $__n=$23;
      var $24=$5;
      $__dst=$24;
      var $25=$1;
      var $26=(($25)|0);
      var $27=HEAP32[(($26)>>2)];
      $__src=$27;
      var $28=$__src;
      var $29=(($28+4)|0);
      $__src=$29;
      var $30=HEAP32[(($28)>>2)];
      $__x=$30;
      var $31=$__n;
      var $32=(($31)|0)!=0;
      if ($32) { label = 13; break; } else { label = 17; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $35=$__x;
      var $36=$__dst;
      var $37=(($36+4)|0);
      $__dst=$37;
      HEAP32[(($36)>>2)]=$35;
      var $38=$__src;
      var $39=(($38+4)|0);
      $__src=$39;
      var $40=HEAP32[(($38)>>2)];
      $__x=$40;
      label = 15; break;
    case 15: 
      var $42=$__n;
      var $43=((($42)-(1))|0);
      $__n=$43;
      var $44=(($43)|0)!=0;
      if ($44) { label = 14; break; } else { label = 16; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $47=$__x;
      var $48=$__dst;
      var $49=(($48+4)|0);
      $__dst=$49;
      HEAP32[(($48)>>2)]=$47;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $53=$1;
      var $54=(($53)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$1;
      var $57=(($56)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$1;
      var $60=(($59+4)|0);
      var $61=HEAP32[(($60)>>2)];
      var $62=$4;
      var $63=((($62)+(1))|0);
      var $64=___gmpn_add_n($55, $58, $61, $63);
      var $65=$1;
      var $66=(($65+4)|0);
      var $67=HEAP32[(($66)>>2)];
      var $68=$5;
      var $69=$1;
      var $70=(($69+4)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=$4;
      var $73=((($72)+(1))|0);
      var $74=___gmpn_sub_n($67, $68, $71, $73);
      $cy=$74;
      var $75=$4;
      var $76=$1;
      var $77=(($76)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=(($78+($75<<2))|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=(($80)>>>0) > 1;
      if ($81) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $83=$1;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$1;
      var $87=(($86)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$4;
      var $90=$4;
      var $91=$1;
      var $92=(($91)|0);
      var $93=HEAP32[(($92)>>2)];
      var $94=(($93+($90<<2))|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=((($95)-(1))|0);
      var $97=___gmpn_sub_1($85, $88, $89, $96);
      var $98=(((1)-($97))|0);
      var $99=$4;
      var $100=$1;
      var $101=(($100)|0);
      var $102=HEAP32[(($101)>>2)];
      var $103=(($102+($99<<2))|0);
      HEAP32[(($103)>>2)]=$98;
      label = 22; break;
    case 22: 
      var $105=$cy;
      var $106=(($105)|0)!=0;
      if ($106) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $108=$1;
      var $109=(($108+4)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=$1;
      var $112=(($111+4)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$4;
      var $115=$4;
      var $116=$1;
      var $117=(($116+4)|0);
      var $118=HEAP32[(($117)>>2)];
      var $119=(($118+($115<<2))|0);
      var $120=HEAP32[(($119)>>2)];
      var $121=$120 ^ -1;
      var $122=((($121)+(1))|0);
      var $123=___gmpn_add_1($110, $113, $114, $122);
      var $124=$4;
      var $125=$1;
      var $126=(($125+4)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($127+($124<<2))|0);
      HEAP32[(($128)>>2)]=$123;
      label = 24; break;
    case 24: 
      label = 30; break;
    case 25: 
      var $131=$2;
      var $132=$131 >> 1;
      $K2=$132;
      var $133=$1;
      var $134=$K2;
      var $135=$3;
      var $136=($135<<1);
      var $137=$4;
      var $138=$5;
      _mpn_fft_fftinv($133, $134, $136, $137, $138);
      var $139=$1;
      var $140=$K2;
      var $141=(($139+($140<<2))|0);
      var $142=$K2;
      var $143=$3;
      var $144=($143<<1);
      var $145=$4;
      var $146=$5;
      _mpn_fft_fftinv($141, $142, $144, $145, $146);
      $j=0;
      label = 26; break;
    case 26: 
      var $148=$j;
      var $149=$K2;
      var $150=(($148)|0) < (($149)|0);
      if ($150) { label = 27; break; } else { label = 29; break; }
    case 27: 
      var $152=$5;
      var $153=$K2;
      var $154=$1;
      var $155=(($154+($153<<2))|0);
      var $156=HEAP32[(($155)>>2)];
      var $157=$j;
      var $158=$3;
      var $159=Math.imul($157,$158);
      var $160=$4;
      _mpn_fft_mul_2exp_modF($152, $156, $159, $160);
      var $161=$K2;
      var $162=$1;
      var $163=(($162+($161<<2))|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=$1;
      var $166=(($165)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=$5;
      var $169=$4;
      _mpn_fft_sub_modF($164, $167, $168, $169);
      var $170=$1;
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=$1;
      var $174=(($173)|0);
      var $175=HEAP32[(($174)>>2)];
      var $176=$5;
      var $177=$4;
      _mpn_fft_add_modF($172, $175, $176, $177);
      label = 28; break;
    case 28: 
      var $179=$j;
      var $180=((($179)+(1))|0);
      $j=$180;
      var $181=$1;
      var $182=(($181+4)|0);
      $1=$182;
      label = 26; break;
    case 29: 
      label = 30; break;
    case 30: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_fftinv["X"]=1;

function _mpn_fft_mul_modF_K($ap, $bp, $n, $K) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      var $sqr;
      var $__tmp_marker=__stackBase__;
      var $k;
      var $K2;
      var $nprime2;
      var $Nprime2;
      var $M2;
      var $maxLK;
      var $l;
      var $Mp2;
      var $fft_l;
      var $Ap;
      var $Bp;
      var $A;
      var $B;
      var $T;
      var $K3;
      var $cy;
      var $a;
      var $b;
      var $tp;
      var $tpn;
      var $cc;
      var $n2;
      $1=$ap;
      $2=$bp;
      $3=$n;
      $4=$K;
      var $5=$1;
      var $6=$2;
      var $7=(($5)|0)==(($6)|0);
      var $8=(($7)&1);
      $sqr=$8;
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $9=$3;
      var $10=$sqr;
      var $11=(($10)|0)!=0;
      var $12=$11 ? 360 : 300;
      var $13=(($9)|0) >= (($12)|0);
      if ($13) { label = 3; break; } else { label = 51; break; }
    case 3: 
      var $15=$3;
      var $16=$sqr;
      var $17=___gmpn_fft_best_k($15, $16);
      $k=$17;
      var $18=$k;
      var $19=1 << $18;
      $K2=$19;
      label = 4; break;
    case 4: 
      var $21=$3;
      var $22=$K2;
      var $23=((($22)-(1))|0);
      var $24=$21 & $23;
      var $25=(($24)|0)==0;
      var $26=$25 ^ 1;
      var $27=(($26)&1);
      var $28=(($27)|0)!=0;
      var $29=(($28)&1);
      var $30=($29);
      var $31=(($30)|0)!=0;
      if ($31) { label = 5; break; } else { label = 6; break; }
    case 5: 
      ___gmp_assert_fail(((5249420)|0), 437, ((5248956)|0));
      throw "Reached an unreachable!"
    case 6: 
      label = 7; break;
    case 7: 
      var $35=$K2;
      var $36=(($35)|0) > 32;
      if ($36) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $38=$K2;
      var $41 = $38;label = 10; break;
    case 9: 
      var $41 = 32;label = 10; break;
    case 10: 
      var $41;
      $maxLK=$41;
      var $42=$3;
      var $43=($42<<5);
      var $44=$k;
      var $45=$43 >> (($44)|0);
      $M2=$45;
      var $46=$3;
      var $47=$k;
      var $48=$46 >> (($47)|0);
      $l=$48;
      var $49=$M2;
      var $50=($49<<1);
      var $51=$k;
      var $52=((($50)+($51))|0);
      var $53=((($52)+(2))|0);
      var $54=$maxLK;
      var $55=((($53)+($54))|0);
      var $56=$maxLK;
      var $57=((((($55)|0))/((($56)|0)))&-1);
      var $58=$maxLK;
      var $59=Math.imul($57,$58);
      $Nprime2=$59;
      var $60=$Nprime2;
      var $61=((((($60)|0))/(32))&-1);
      $nprime2=$61;
      var $62=$nprime2;
      var $63=$sqr;
      var $64=(($63)|0)!=0;
      var $65=$64 ? 360 : 300;
      var $66=(($62)|0) >= (($65)|0);
      if ($66) { label = 11; break; } else { label = 16; break; }
    case 11: 
      label = 12; break;
    case 12: 
      var $69=$nprime2;
      var $70=$sqr;
      var $71=___gmpn_fft_best_k($69, $70);
      var $72=1 << $71;
      $K3=$72;
      var $73=$nprime2;
      var $74=$K3;
      var $75=((($74)-(1))|0);
      var $76=$73 & $75;
      var $77=(($76)|0)==0;
      if ($77) { label = 13; break; } else { label = 14; break; }
    case 13: 
      label = 15; break;
    case 14: 
      var $80=$nprime2;
      var $81=$K3;
      var $82=((($80)+($81))|0);
      var $83=((($82)-(1))|0);
      var $84=$K3;
      var $85=(((-$84))|0);
      var $86=$83 & $85;
      $nprime2=$86;
      var $87=$nprime2;
      var $88=($87<<5);
      $Nprime2=$88;
      label = 12; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $92=$nprime2;
      var $93=$3;
      var $94=(($92)|0) < (($93)|0);
      var $95=$94 ^ 1;
      var $96=(($95)&1);
      var $97=(($96)|0)!=0;
      var $98=(($97)&1);
      var $99=($98);
      var $100=(($99)|0)!=0;
      if ($100) { label = 18; break; } else { label = 19; break; }
    case 18: 
      ___gmp_assert_fail(((5249420)|0), 459, ((5248644)|0));
      throw "Reached an unreachable!"
    case 19: 
      label = 20; break;
    case 20: 
      var $104=$Nprime2;
      var $105=$k;
      var $106=$104 >> (($105)|0);
      $Mp2=$106;
      var $107=$K2;
      var $108=($107<<2);
      var $109=(($108)>>>0) < 65536;
      var $110=(($109)&1);
      var $111=(($110)|0)!=0;
      var $112=(($111)&1);
      var $113=($112);
      var $114=(($113)|0)!=0;
      if ($114) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $116=$K2;
      var $117=($116<<2);
      var $118=STACKTOP;STACKTOP = (STACKTOP + $117)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $124 = $118;label = 23; break;
    case 22: 
      var $120=$K2;
      var $121=($120<<2);
      var $122=___gmp_tmp_reentrant_alloc($__tmp_marker, $121);
      var $124 = $122;label = 23; break;
    case 23: 
      var $124;
      var $125=$124;
      $Ap=$125;
      var $126=$K2;
      var $127=($126<<2);
      var $128=(($127)>>>0) < 65536;
      var $129=(($128)&1);
      var $130=(($129)|0)!=0;
      var $131=(($130)&1);
      var $132=($131);
      var $133=(($132)|0)!=0;
      if ($133) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $135=$K2;
      var $136=($135<<2);
      var $137=STACKTOP;STACKTOP = (STACKTOP + $136)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $143 = $137;label = 26; break;
    case 25: 
      var $139=$K2;
      var $140=($139<<2);
      var $141=___gmp_tmp_reentrant_alloc($__tmp_marker, $140);
      var $143 = $141;label = 26; break;
    case 26: 
      var $143;
      var $144=$143;
      $Bp=$144;
      var $145=$nprime2;
      var $146=((($145)+(1))|0);
      var $147=($146<<1);
      var $148=$k;
      var $149=$147 << $148;
      var $150=($149<<2);
      var $151=(($150)>>>0) < 65536;
      var $152=(($151)&1);
      var $153=(($152)|0)!=0;
      var $154=(($153)&1);
      var $155=($154);
      var $156=(($155)|0)!=0;
      if ($156) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $158=$nprime2;
      var $159=((($158)+(1))|0);
      var $160=($159<<1);
      var $161=$k;
      var $162=$160 << $161;
      var $163=($162<<2);
      var $164=STACKTOP;STACKTOP = (STACKTOP + $163)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $174 = $164;label = 29; break;
    case 28: 
      var $166=$nprime2;
      var $167=((($166)+(1))|0);
      var $168=($167<<1);
      var $169=$k;
      var $170=$168 << $169;
      var $171=($170<<2);
      var $172=___gmp_tmp_reentrant_alloc($__tmp_marker, $171);
      var $174 = $172;label = 29; break;
    case 29: 
      var $174;
      var $175=$174;
      $A=$175;
      var $176=$nprime2;
      var $177=((($176)+(1))|0);
      var $178=($177<<1);
      var $179=($178<<2);
      var $180=(($179)>>>0) < 65536;
      var $181=(($180)&1);
      var $182=(($181)|0)!=0;
      var $183=(($182)&1);
      var $184=($183);
      var $185=(($184)|0)!=0;
      if ($185) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $187=$nprime2;
      var $188=((($187)+(1))|0);
      var $189=($188<<1);
      var $190=($189<<2);
      var $191=STACKTOP;STACKTOP = (STACKTOP + $190)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $199 = $191;label = 32; break;
    case 31: 
      var $193=$nprime2;
      var $194=((($193)+(1))|0);
      var $195=($194<<1);
      var $196=($195<<2);
      var $197=___gmp_tmp_reentrant_alloc($__tmp_marker, $196);
      var $199 = $197;label = 32; break;
    case 32: 
      var $199;
      var $200=$199;
      $T=$200;
      var $201=$A;
      var $202=$nprime2;
      var $203=((($202)+(1))|0);
      var $204=$k;
      var $205=$203 << $204;
      var $206=(($201+($205<<2))|0);
      $B=$206;
      var $207=$k;
      var $208=((($207)+(1))|0);
      var $209=($208<<2);
      var $210=(($209)>>>0) < 65536;
      var $211=(($210)&1);
      var $212=(($211)|0)!=0;
      var $213=(($212)&1);
      var $214=($213);
      var $215=(($214)|0)!=0;
      if ($215) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $217=$k;
      var $218=((($217)+(1))|0);
      var $219=($218<<2);
      var $220=STACKTOP;STACKTOP = (STACKTOP + $219)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $227 = $220;label = 35; break;
    case 34: 
      var $222=$k;
      var $223=((($222)+(1))|0);
      var $224=($223<<2);
      var $225=___gmp_tmp_reentrant_alloc($__tmp_marker, $224);
      var $227 = $225;label = 35; break;
    case 35: 
      var $227;
      var $228=$227;
      $fft_l=$228;
      $i=0;
      label = 36; break;
    case 36: 
      var $230=$i;
      var $231=$k;
      var $232=(($230)|0) <= (($231)|0);
      if ($232) { label = 37; break; } else { label = 42; break; }
    case 37: 
      var $234=$i;
      var $235=1 << $234;
      var $236=($235<<2);
      var $237=(($236)>>>0) < 65536;
      var $238=(($237)&1);
      var $239=(($238)|0)!=0;
      var $240=(($239)&1);
      var $241=($240);
      var $242=(($241)|0)!=0;
      if ($242) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $244=$i;
      var $245=1 << $244;
      var $246=($245<<2);
      var $247=STACKTOP;STACKTOP = (STACKTOP + $246)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $254 = $247;label = 40; break;
    case 39: 
      var $249=$i;
      var $250=1 << $249;
      var $251=($250<<2);
      var $252=___gmp_tmp_reentrant_alloc($__tmp_marker, $251);
      var $254 = $252;label = 40; break;
    case 40: 
      var $254;
      var $255=$254;
      var $256=$i;
      var $257=$fft_l;
      var $258=(($257+($256<<2))|0);
      HEAP32[(($258)>>2)]=$255;
      label = 41; break;
    case 41: 
      var $260=$i;
      var $261=((($260)+(1))|0);
      $i=$261;
      label = 36; break;
    case 42: 
      var $263=$fft_l;
      var $264=$k;
      _mpn_fft_initl($263, $264);
      $i=0;
      label = 43; break;
    case 43: 
      var $266=$i;
      var $267=$4;
      var $268=(($266)|0) < (($267)|0);
      if ($268) { label = 44; break; } else { label = 50; break; }
    case 44: 
      var $270=$1;
      var $271=HEAP32[(($270)>>2)];
      var $272=$3;
      _mpn_fft_normalize($271, $272);
      var $273=$sqr;
      var $274=(($273)|0)!=0;
      if ($274) { label = 46; break; } else { label = 45; break; }
    case 45: 
      var $276=$2;
      var $277=HEAP32[(($276)>>2)];
      var $278=$3;
      _mpn_fft_normalize($277, $278);
      label = 46; break;
    case 46: 
      var $280=$A;
      var $281=$Ap;
      var $282=$K2;
      var $283=$nprime2;
      var $284=$1;
      var $285=HEAP32[(($284)>>2)];
      var $286=$l;
      var $287=$k;
      var $288=$286 << $287;
      var $289=((($288)+(1))|0);
      var $290=$l;
      var $291=$Mp2;
      var $292=$T;
      _mpn_mul_fft_decompose($280, $281, $282, $283, $285, $289, $290, $291, $292);
      var $293=$sqr;
      var $294=(($293)|0)!=0;
      if ($294) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $296=$B;
      var $297=$Bp;
      var $298=$K2;
      var $299=$nprime2;
      var $300=$2;
      var $301=HEAP32[(($300)>>2)];
      var $302=$l;
      var $303=$k;
      var $304=$302 << $303;
      var $305=((($304)+(1))|0);
      var $306=$l;
      var $307=$Mp2;
      var $308=$T;
      _mpn_mul_fft_decompose($296, $297, $298, $299, $301, $305, $306, $307, $308);
      label = 48; break;
    case 48: 
      var $310=$1;
      var $311=HEAP32[(($310)>>2)];
      var $312=$3;
      var $313=$k;
      var $314=$Ap;
      var $315=$Bp;
      var $316=$A;
      var $317=$B;
      var $318=$nprime2;
      var $319=$l;
      var $320=$Mp2;
      var $321=$fft_l;
      var $322=$T;
      var $323=$sqr;
      var $324=_mpn_mul_fft_internal($311, $312, $313, $314, $315, $316, $317, $318, $319, $320, $321, $322, $323);
      $cy=$324;
      var $325=$cy;
      var $326=$3;
      var $327=$1;
      var $328=HEAP32[(($327)>>2)];
      var $329=(($328+($326<<2))|0);
      HEAP32[(($329)>>2)]=$325;
      label = 49; break;
    case 49: 
      var $331=$i;
      var $332=((($331)+(1))|0);
      $i=$332;
      var $333=$1;
      var $334=(($333+4)|0);
      $1=$334;
      var $335=$2;
      var $336=(($335+4)|0);
      $2=$336;
      label = 43; break;
    case 50: 
      label = 73; break;
    case 51: 
      var $339=$3;
      var $340=($339<<1);
      $n2=$340;
      var $341=$n2;
      var $342=($341<<2);
      var $343=(($342)>>>0) < 65536;
      var $344=(($343)&1);
      var $345=(($344)|0)!=0;
      var $346=(($345)&1);
      var $347=($346);
      var $348=(($347)|0)!=0;
      if ($348) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $350=$n2;
      var $351=($350<<2);
      var $352=STACKTOP;STACKTOP = (STACKTOP + $351)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $358 = $352;label = 54; break;
    case 53: 
      var $354=$n2;
      var $355=($354<<2);
      var $356=___gmp_tmp_reentrant_alloc($__tmp_marker, $355);
      var $358 = $356;label = 54; break;
    case 54: 
      var $358;
      var $359=$358;
      $tp=$359;
      var $360=$tp;
      var $361=$3;
      var $362=(($360+($361<<2))|0);
      $tpn=$362;
      $i=0;
      label = 55; break;
    case 55: 
      var $364=$i;
      var $365=$4;
      var $366=(($364)|0) < (($365)|0);
      if ($366) { label = 56; break; } else { label = 72; break; }
    case 56: 
      var $368=$1;
      var $369=(($368+4)|0);
      $1=$369;
      var $370=HEAP32[(($368)>>2)];
      $a=$370;
      var $371=$2;
      var $372=(($371+4)|0);
      $2=$372;
      var $373=HEAP32[(($371)>>2)];
      $b=$373;
      var $374=$sqr;
      var $375=(($374)|0)!=0;
      if ($375) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $377=$tp;
      var $378=$a;
      var $379=$3;
      ___gmpn_sqr($377, $378, $379);
      label = 59; break;
    case 58: 
      var $381=$tp;
      var $382=$b;
      var $383=$a;
      var $384=$3;
      ___gmpn_mul_n($381, $382, $383, $384);
      label = 59; break;
    case 59: 
      var $386=$3;
      var $387=$a;
      var $388=(($387+($386<<2))|0);
      var $389=HEAP32[(($388)>>2)];
      var $390=(($389)|0)!=0;
      if ($390) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $392=$tpn;
      var $393=$tpn;
      var $394=$b;
      var $395=$3;
      var $396=___gmpn_add_n($392, $393, $394, $395);
      $cc=$396;
      label = 62; break;
    case 61: 
      $cc=0;
      label = 62; break;
    case 62: 
      var $399=$3;
      var $400=$b;
      var $401=(($400+($399<<2))|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=(($402)|0)!=0;
      if ($403) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $405=$tpn;
      var $406=$tpn;
      var $407=$a;
      var $408=$3;
      var $409=___gmpn_add_n($405, $406, $407, $408);
      var $410=$3;
      var $411=$a;
      var $412=(($411+($410<<2))|0);
      var $413=HEAP32[(($412)>>2)];
      var $414=((($409)+($413))|0);
      var $415=$cc;
      var $416=((($415)+($414))|0);
      $cc=$416;
      label = 64; break;
    case 64: 
      var $418=$cc;
      var $419=(($418)|0)!=0;
      if ($419) { label = 65; break; } else { label = 68; break; }
    case 65: 
      var $421=$tp;
      var $422=$tp;
      var $423=$n2;
      var $424=$cc;
      var $425=___gmpn_add_1($421, $422, $423, $424);
      $cc=$425;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $429=$a;
      var $430=$tp;
      var $431=$tpn;
      var $432=$3;
      var $433=___gmpn_sub_n($429, $430, $431, $432);
      var $434=(($433)|0)!=0;
      if ($434) { label = 69; break; } else { var $442 = 0;label = 70; break; }
    case 69: 
      var $436=$a;
      var $437=$a;
      var $438=$3;
      var $439=___gmpn_add_1($436, $437, $438, 1);
      var $440=(($439)|0)!=0;
      var $442 = $440;label = 70; break;
    case 70: 
      var $442;
      var $443=(($442)&1);
      var $444=$3;
      var $445=$a;
      var $446=(($445+($444<<2))|0);
      HEAP32[(($446)>>2)]=$443;
      label = 71; break;
    case 71: 
      var $448=$i;
      var $449=((($448)+(1))|0);
      $i=$449;
      label = 55; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $453=HEAP32[(($__tmp_marker)>>2)];
      var $454=(($453)|0)!=0;
      var $455=(($454)&1);
      var $456=(($455)|0)!=0;
      var $457=(($456)&1);
      var $458=($457);
      var $459=(($458)|0)!=0;
      if ($459) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $461=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($461);
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_mul_modF_K["X"]=1;

function _mpn_fft_normalize($ap, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $__x;
      var $__p;
      var $__dst;
      var $__n;
      $1=$ap;
      $2=$n;
      var $3=$2;
      var $4=$1;
      var $5=(($4+($3<<2))|0);
      var $6=HEAP32[(($5)>>2)];
      var $7=(($6)|0)!=0;
      if ($7) { label = 3; break; } else { label = 21; break; }
    case 3: 
      label = 4; break;
    case 4: 
      var $10=$1;
      $__p=$10;
      label = 5; break;
    case 5: 
      var $12=$__p;
      var $13=(($12+4)|0);
      $__p=$13;
      var $14=HEAP32[(($12)>>2)];
      var $15=((($14)-(1))|0);
      HEAP32[(($12)>>2)]=$15;
      var $16=(($14)|0)==0;
      if ($16) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 5; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $20=$2;
      var $21=$1;
      var $22=(($21+($20<<2))|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=(($23)|0)==0;
      if ($24) { label = 9; break; } else { label = 19; break; }
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $29=$2;
      var $30=(($29)|0)!=0;
      if ($30) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $32=$1;
      $__dst=$32;
      var $33=$2;
      $__n=$33;
      label = 14; break;
    case 14: 
      var $35=$__dst;
      var $36=(($35+4)|0);
      $__dst=$36;
      HEAP32[(($35)>>2)]=0;
      label = 15; break;
    case 15: 
      var $38=$__n;
      var $39=((($38)-(1))|0);
      $__n=$39;
      var $40=(($39)|0)!=0;
      if ($40) { label = 14; break; } else { label = 16; break; }
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $44=$2;
      var $45=$1;
      var $46=(($45+($44<<2))|0);
      HEAP32[(($46)>>2)]=1;
      label = 20; break;
    case 19: 
      var $48=$2;
      var $49=$1;
      var $50=(($49+($48<<2))|0);
      HEAP32[(($50)>>2)]=0;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_normalize["X"]=1;

function _mpn_fft_div_2exp_modF($r, $a, $k, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $i;
      $1=$r;
      $2=$a;
      $3=$k;
      $4=$n;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $7=$4;
      var $8=($7<<1);
      var $9=($8<<5);
      var $10=$3;
      var $11=((($9)-($10))|0);
      $i=$11;
      var $12=$1;
      var $13=$2;
      var $14=$i;
      var $15=$4;
      _mpn_fft_mul_2exp_modF($12, $13, $14, $15);
      var $16=$1;
      var $17=$4;
      _mpn_fft_normalize($16, $17);

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _mpn_fft_norm_modF($rp, $n, $ap, $an) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $l;
      var $m;
      var $cc;
      var $rpn;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      $1=$rp;
      $2=$n;
      $3=$ap;
      $4=$an;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $7=$4;
      var $8=$2;
      var $9=($8<<1);
      var $10=((($7)-($9))|0);
      $m=$10;
      var $11=$m;
      var $12=(($11)|0) > 0;
      if ($12) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$2;
      $l=$14;
      var $15=$1;
      var $16=$3;
      var $17=$3;
      var $18=$2;
      var $19=($18<<1);
      var $20=(($17+($19<<2))|0);
      var $21=$m;
      var $22=___gmpn_add_n($15, $16, $20, $21);
      $cc=$22;
      var $23=$1;
      var $24=$m;
      var $25=(($23+($24<<2))|0);
      var $26=$3;
      var $27=$m;
      var $28=(($26+($27<<2))|0);
      var $29=$2;
      var $30=$m;
      var $31=((($29)-($30))|0);
      var $32=$cc;
      var $33=___gmpn_add_1($25, $28, $31, $32);
      $rpn=$33;
      label = 24; break;
    case 6: 
      var $35=$4;
      var $36=$2;
      var $37=((($35)-($36))|0);
      $l=$37;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $46=$2;
      var $47=(($46)|0)!=0;
      if ($47) { label = 15; break; } else { label = 21; break; }
    case 15: 
      var $49=$2;
      var $50=((($49)-(1))|0);
      $__n=$50;
      var $51=$1;
      $__dst=$51;
      var $52=$3;
      $__src=$52;
      var $53=$__src;
      var $54=(($53+4)|0);
      $__src=$54;
      var $55=HEAP32[(($53)>>2)];
      $__x=$55;
      var $56=$__n;
      var $57=(($56)|0)!=0;
      if ($57) { label = 16; break; } else { label = 20; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $60=$__x;
      var $61=$__dst;
      var $62=(($61+4)|0);
      $__dst=$62;
      HEAP32[(($61)>>2)]=$60;
      var $63=$__src;
      var $64=(($63+4)|0);
      $__src=$64;
      var $65=HEAP32[(($63)>>2)];
      $__x=$65;
      label = 18; break;
    case 18: 
      var $67=$__n;
      var $68=((($67)-(1))|0);
      $__n=$68;
      var $69=(($68)|0)!=0;
      if ($69) { label = 17; break; } else { label = 19; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $72=$__x;
      var $73=$__dst;
      var $74=(($73+4)|0);
      $__dst=$74;
      HEAP32[(($73)>>2)]=$72;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      $rpn=0;
      label = 24; break;
    case 24: 
      var $79=$1;
      var $80=$1;
      var $81=$3;
      var $82=$2;
      var $83=(($81+($82<<2))|0);
      var $84=$l;
      var $85=___gmpn_sub_n($79, $80, $83, $84);
      $cc=$85;
      var $86=$1;
      var $87=$l;
      var $88=(($86+($87<<2))|0);
      var $89=$1;
      var $90=$l;
      var $91=(($89+($90<<2))|0);
      var $92=$2;
      var $93=$l;
      var $94=((($92)-($93))|0);
      var $95=$cc;
      var $96=___gmpn_sub_1($88, $91, $94, $95);
      var $97=$rpn;
      var $98=((($97)-($96))|0);
      $rpn=$98;
      var $99=$rpn;
      var $100=(($99)|0) < 0;
      if ($100) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $102=$1;
      var $103=$1;
      var $104=$2;
      var $105=___gmpn_add_1($102, $103, $104, 1);
      $rpn=$105;
      label = 26; break;
    case 26: 
      var $107=$rpn;

      return $107;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_norm_modF["X"]=1;

function _mpn_fft_mul_2exp_modF($r, $a, $d, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $sh;
      var $cc;
      var $rd;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__d;
      var $__s;
      var $__n1;
      var $__x2;
      var $__p;
      var $__x3;
      var $__p4;
      var $__d5;
      var $__s6;
      var $__n7;
      var $__n8;
      var $__dst9;
      var $__src10;
      var $__x11;
      $1=$r;
      $2=$a;
      $3=$d;
      $4=$n;
      var $5=$3;
      var $6=((($5)>>>0))%(32);
      $sh=$6;
      var $7=$3;
      var $8=Math.floor(((($7)>>>0))/(32));
      $3=$8;
      var $9=$3;
      var $10=$4;
      var $11=(($9)>>>0) >= (($10)>>>0);
      if ($11) { label = 3; break; } else { label = 50; break; }
    case 3: 
      var $13=$4;
      var $14=$3;
      var $15=((($14)-($13))|0);
      $3=$15;
      var $16=$sh;
      var $17=(($16)|0)!=0;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=$1;
      var $20=$2;
      var $21=$4;
      var $22=(($20+($21<<2))|0);
      var $23=$3;
      var $24=(((-$23))|0);
      var $25=(($22+($24<<2))|0);
      var $26=$3;
      var $27=((($26)+(1))|0);
      var $28=$sh;
      var $29=___gmpn_lshift($19, $25, $27, $28);
      var $30=$3;
      var $31=$1;
      var $32=(($31+($30<<2))|0);
      var $33=HEAP32[(($32)>>2)];
      $rd=$33;
      var $34=$1;
      var $35=$3;
      var $36=(($34+($35<<2))|0);
      var $37=$2;
      var $38=$4;
      var $39=$3;
      var $40=((($38)-($39))|0);
      var $41=$sh;
      var $42=___gmpn_lshiftc($36, $37, $40, $41);
      $cc=$42;
      label = 32; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $52=$3;
      var $53=(($52)|0)!=0;
      if ($53) { label = 14; break; } else { label = 20; break; }
    case 14: 
      var $55=$3;
      var $56=((($55)-(1))|0);
      $__n=$56;
      var $57=$1;
      $__dst=$57;
      var $58=$2;
      var $59=$4;
      var $60=(($58+($59<<2))|0);
      var $61=$3;
      var $62=(((-$61))|0);
      var $63=(($60+($62<<2))|0);
      $__src=$63;
      var $64=$__src;
      var $65=(($64+4)|0);
      $__src=$65;
      var $66=HEAP32[(($64)>>2)];
      $__x=$66;
      var $67=$__n;
      var $68=(($67)|0)!=0;
      if ($68) { label = 15; break; } else { label = 19; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $71=$__x;
      var $72=$__dst;
      var $73=(($72+4)|0);
      $__dst=$73;
      HEAP32[(($72)>>2)]=$71;
      var $74=$__src;
      var $75=(($74+4)|0);
      $__src=$75;
      var $76=HEAP32[(($74)>>2)];
      $__x=$76;
      label = 17; break;
    case 17: 
      var $78=$__n;
      var $79=((($78)-(1))|0);
      $__n=$79;
      var $80=(($79)|0)!=0;
      if ($80) { label = 16; break; } else { label = 18; break; }
    case 18: 
      label = 19; break;
    case 19: 
      var $83=$__x;
      var $84=$__dst;
      var $85=(($84+4)|0);
      $__dst=$85;
      HEAP32[(($84)>>2)]=$83;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $89=$4;
      var $90=$2;
      var $91=(($90+($89<<2))|0);
      var $92=HEAP32[(($91)>>2)];
      $rd=$92;
      label = 23; break;
    case 23: 
      var $94=$1;
      var $95=$3;
      var $96=(($94+($95<<2))|0);
      $__d=$96;
      var $97=$2;
      $__s=$97;
      var $98=$4;
      var $99=$3;
      var $100=((($98)-($99))|0);
      $__n1=$100;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $106=$__s;
      var $107=(($106+4)|0);
      $__s=$107;
      var $108=HEAP32[(($106)>>2)];
      var $109=$108 ^ -1;
      var $110=$__d;
      var $111=(($110+4)|0);
      $__d=$111;
      HEAP32[(($110)>>2)]=$109;
      label = 29; break;
    case 29: 
      var $113=$__n1;
      var $114=((($113)-(1))|0);
      $__n1=$114;
      var $115=(($114)|0)!=0;
      if ($115) { label = 28; break; } else { label = 30; break; }
    case 30: 
      label = 31; break;
    case 31: 
      $cc=0;
      label = 32; break;
    case 32: 
      var $119=$4;
      var $120=$1;
      var $121=(($120+($119<<2))|0);
      HEAP32[(($121)>>2)]=0;
      var $122=$cc;
      var $123=((($122)+(1))|0);
      $cc=$123;
      label = 33; break;
    case 33: 
      var $125=$1;
      $__p=$125;
      var $126=$__p;
      var $127=HEAP32[(($126)>>2)];
      var $128=$cc;
      var $129=((($127)+($128))|0);
      $__x2=$129;
      var $130=$__x2;
      var $131=$__p;
      HEAP32[(($131)>>2)]=$130;
      var $132=$__x2;
      var $133=$cc;
      var $134=(($132)>>>0) < (($133)>>>0);
      if ($134) { label = 34; break; } else { label = 38; break; }
    case 34: 
      label = 35; break;
    case 35: 
      var $137=$__p;
      var $138=(($137+4)|0);
      $__p=$138;
      var $139=HEAP32[(($138)>>2)];
      var $140=((($139)+(1))|0);
      HEAP32[(($138)>>2)]=$140;
      var $141=(($140)|0)==0;
      if ($141) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 35; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $146=$rd;
      var $147=((($146)+(1))|0);
      $rd=$147;
      var $148=$rd;
      var $149=(($148)|0)==0;
      if ($149) { label = 40; break; } else { label = 41; break; }
    case 40: 
      var $154 = 1;label = 42; break;
    case 41: 
      var $152=$rd;
      var $154 = $152;label = 42; break;
    case 42: 
      var $154;
      $cc=$154;
      var $155=$1;
      var $156=$3;
      var $157=(($155+($156<<2))|0);
      var $158=$rd;
      var $159=(($158)|0)==0;
      var $160=(($159)&1);
      var $161=(($157+($160<<2))|0);
      $1=$161;
      label = 43; break;
    case 43: 
      var $163=$1;
      $__p4=$163;
      var $164=$__p4;
      var $165=HEAP32[(($164)>>2)];
      var $166=$cc;
      var $167=((($165)+($166))|0);
      $__x3=$167;
      var $168=$__x3;
      var $169=$__p4;
      HEAP32[(($169)>>2)]=$168;
      var $170=$__x3;
      var $171=$cc;
      var $172=(($170)>>>0) < (($171)>>>0);
      if ($172) { label = 44; break; } else { label = 48; break; }
    case 44: 
      label = 45; break;
    case 45: 
      var $175=$__p4;
      var $176=(($175+4)|0);
      $__p4=$176;
      var $177=HEAP32[(($176)>>2)];
      var $178=((($177)+(1))|0);
      HEAP32[(($176)>>2)]=$178;
      var $179=(($178)|0)==0;
      if ($179) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 45; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 86; break;
    case 50: 
      var $185=$sh;
      var $186=(($185)|0)!=0;
      if ($186) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $188=$1;
      var $189=$2;
      var $190=$4;
      var $191=(($189+($190<<2))|0);
      var $192=$3;
      var $193=(((-$192))|0);
      var $194=(($191+($193<<2))|0);
      var $195=$3;
      var $196=((($195)+(1))|0);
      var $197=$sh;
      var $198=___gmpn_lshiftc($188, $194, $196, $197);
      var $199=$3;
      var $200=$1;
      var $201=(($200+($199<<2))|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=$202 ^ -1;
      $rd=$203;
      var $204=$1;
      var $205=$3;
      var $206=(($204+($205<<2))|0);
      var $207=$2;
      var $208=$4;
      var $209=$3;
      var $210=((($208)-($209))|0);
      var $211=$sh;
      var $212=___gmpn_lshift($206, $207, $210, $211);
      $cc=$212;
      label = 79; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $215=$1;
      $__d5=$215;
      var $216=$2;
      var $217=$4;
      var $218=(($216+($217<<2))|0);
      var $219=$3;
      var $220=(((-$219))|0);
      var $221=(($218+($220<<2))|0);
      $__s6=$221;
      var $222=$3;
      var $223=((($222)+(1))|0);
      $__n7=$223;
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $229=$__s6;
      var $230=(($229+4)|0);
      $__s6=$230;
      var $231=HEAP32[(($229)>>2)];
      var $232=$231 ^ -1;
      var $233=$__d5;
      var $234=(($233+4)|0);
      $__d5=$234;
      HEAP32[(($233)>>2)]=$232;
      label = 59; break;
    case 59: 
      var $236=$__n7;
      var $237=((($236)-(1))|0);
      $__n7=$237;
      var $238=(($237)|0)!=0;
      if ($238) { label = 58; break; } else { label = 60; break; }
    case 60: 
      label = 61; break;
    case 61: 
      var $241=$4;
      var $242=$2;
      var $243=(($242+($241<<2))|0);
      var $244=HEAP32[(($243)>>2)];
      $rd=$244;
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $253=$4;
      var $254=$3;
      var $255=((($253)-($254))|0);
      var $256=(($255)|0)!=0;
      if ($256) { label = 70; break; } else { label = 76; break; }
    case 70: 
      var $258=$4;
      var $259=$3;
      var $260=((($258)-($259))|0);
      var $261=((($260)-(1))|0);
      $__n8=$261;
      var $262=$1;
      var $263=$3;
      var $264=(($262+($263<<2))|0);
      $__dst9=$264;
      var $265=$2;
      $__src10=$265;
      var $266=$__src10;
      var $267=(($266+4)|0);
      $__src10=$267;
      var $268=HEAP32[(($266)>>2)];
      $__x11=$268;
      var $269=$__n8;
      var $270=(($269)|0)!=0;
      if ($270) { label = 71; break; } else { label = 75; break; }
    case 71: 
      label = 72; break;
    case 72: 
      var $273=$__x11;
      var $274=$__dst9;
      var $275=(($274+4)|0);
      $__dst9=$275;
      HEAP32[(($274)>>2)]=$273;
      var $276=$__src10;
      var $277=(($276+4)|0);
      $__src10=$277;
      var $278=HEAP32[(($276)>>2)];
      $__x11=$278;
      label = 73; break;
    case 73: 
      var $280=$__n8;
      var $281=((($280)-(1))|0);
      $__n8=$281;
      var $282=(($281)|0)!=0;
      if ($282) { label = 72; break; } else { label = 74; break; }
    case 74: 
      label = 75; break;
    case 75: 
      var $285=$__x11;
      var $286=$__dst9;
      var $287=(($286+4)|0);
      $__dst9=$287;
      HEAP32[(($286)>>2)]=$285;
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      $cc=0;
      label = 79; break;
    case 79: 
      var $292=$3;
      var $293=(($292)|0)!=0;
      if ($293) { label = 80; break; } else { label = 83; break; }
    case 80: 
      var $295=$cc;
      var $296=((($295)-(1))|0);
      $cc=$296;
      var $297=(($295)|0)==0;
      if ($297) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $299=$1;
      var $300=$1;
      var $301=$4;
      var $302=___gmpn_add_1($299, $300, $301, 1);
      $cc=$302;
      label = 82; break;
    case 82: 
      var $304=$1;
      var $305=$1;
      var $306=$3;
      var $307=$cc;
      var $308=___gmpn_sub_1($304, $305, $306, $307);
      var $309=((($308)+(1))|0);
      $cc=$309;
      label = 83; break;
    case 83: 
      var $311=$1;
      var $312=$3;
      var $313=(($311+($312<<2))|0);
      var $314=$1;
      var $315=$3;
      var $316=(($314+($315<<2))|0);
      var $317=$4;
      var $318=$3;
      var $319=((($317)-($318))|0);
      var $320=$cc;
      var $321=___gmpn_sub_1($313, $316, $319, $320);
      var $322=(((-$321))|0);
      var $323=$4;
      var $324=$1;
      var $325=(($324+($323<<2))|0);
      HEAP32[(($325)>>2)]=$322;
      var $326=$1;
      var $327=$3;
      var $328=(($326+($327<<2))|0);
      var $329=$1;
      var $330=$3;
      var $331=(($329+($330<<2))|0);
      var $332=$4;
      var $333=$3;
      var $334=((($332)-($333))|0);
      var $335=$rd;
      var $336=___gmpn_sub_1($328, $331, $334, $335);
      var $337=$4;
      var $338=$1;
      var $339=(($338+($337<<2))|0);
      var $340=HEAP32[(($339)>>2)];
      var $341=((($340)-($336))|0);
      HEAP32[(($339)>>2)]=$341;
      var $342=$4;
      var $343=$1;
      var $344=(($343+($342<<2))|0);
      var $345=HEAP32[(($344)>>2)];
      var $346=$345 & -2147483648;
      var $347=(($346)|0)!=0;
      if ($347) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $349=$1;
      var $350=$1;
      var $351=$4;
      var $352=___gmpn_add_1($349, $350, $351, 1);
      var $353=$4;
      var $354=$1;
      var $355=(($354+($353<<2))|0);
      HEAP32[(($355)>>2)]=$352;
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_mul_2exp_modF["X"]=1;

function _mpn_fft_sub_modF($r, $a, $b, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $c;
      var $x;
      var $__x;
      var $__p;
      $1=$r;
      $2=$a;
      $3=$b;
      $4=$n;
      var $5=$4;
      var $6=$2;
      var $7=(($6+($5<<2))|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$4;
      var $10=$3;
      var $11=(($10+($9<<2))|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((($8)-($12))|0);
      var $14=$1;
      var $15=$2;
      var $16=$3;
      var $17=$4;
      var $18=___gmpn_sub_n($14, $15, $16, $17);
      var $19=((($13)-($18))|0);
      $c=$19;
      var $20=$c;
      var $21=(((-$20))|0);
      var $22=$c;
      var $23=$22 & -2147483648;
      var $24=(($23)|0)!=0;
      var $25=(($24)&1);
      var $26=(((-$25))|0);
      var $27=$21 & $26;
      $x=$27;
      var $28=$x;
      var $29=$c;
      var $30=((($28)+($29))|0);
      var $31=$4;
      var $32=$1;
      var $33=(($32+($31<<2))|0);
      HEAP32[(($33)>>2)]=$30;
      label = 3; break;
    case 3: 
      var $35=$1;
      $__p=$35;
      var $36=$__p;
      var $37=HEAP32[(($36)>>2)];
      var $38=$x;
      var $39=((($37)+($38))|0);
      $__x=$39;
      var $40=$__x;
      var $41=$__p;
      HEAP32[(($41)>>2)]=$40;
      var $42=$__x;
      var $43=$x;
      var $44=(($42)>>>0) < (($43)>>>0);
      if ($44) { label = 4; break; } else { label = 8; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $47=$__p;
      var $48=(($47+4)|0);
      $__p=$48;
      var $49=HEAP32[(($48)>>2)];
      var $50=((($49)+(1))|0);
      HEAP32[(($48)>>2)]=$50;
      var $51=(($50)|0)==0;
      if ($51) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 5; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_sub_modF["X"]=1;

function _mpn_fft_add_modF($r, $a, $b, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $c;
      var $x;
      var $__x;
      var $__p;
      $1=$r;
      $2=$a;
      $3=$b;
      $4=$n;
      var $5=$4;
      var $6=$2;
      var $7=(($6+($5<<2))|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=$4;
      var $10=$3;
      var $11=(($10+($9<<2))|0);
      var $12=HEAP32[(($11)>>2)];
      var $13=((($8)+($12))|0);
      var $14=$1;
      var $15=$2;
      var $16=$3;
      var $17=$4;
      var $18=___gmpn_add_n($14, $15, $16, $17);
      var $19=((($13)+($18))|0);
      $c=$19;
      var $20=$c;
      var $21=((($20)-(1))|0);
      var $22=$c;
      var $23=(($22)|0)!=0;
      var $24=(($23)&1);
      var $25=(((-$24))|0);
      var $26=$21 & $25;
      $x=$26;
      var $27=$c;
      var $28=$x;
      var $29=((($27)-($28))|0);
      var $30=$4;
      var $31=$1;
      var $32=(($31+($30<<2))|0);
      HEAP32[(($32)>>2)]=$29;
      label = 3; break;
    case 3: 
      var $34=$1;
      $__p=$34;
      var $35=$__p;
      var $36=HEAP32[(($35)>>2)];
      $__x=$36;
      var $37=$__x;
      var $38=$x;
      var $39=((($37)-($38))|0);
      var $40=$__p;
      HEAP32[(($40)>>2)]=$39;
      var $41=$__x;
      var $42=$x;
      var $43=(($41)>>>0) < (($42)>>>0);
      if ($43) { label = 4; break; } else { label = 8; break; }
    case 4: 
      label = 5; break;
    case 5: 
      var $46=$__p;
      var $47=(($46+4)|0);
      $__p=$47;
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)-(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=(($48)|0)==0;
      if ($50) { label = 6; break; } else { label = 7; break; }
    case 6: 
      label = 5; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_fft_add_modF["X"]=1;

function ___gmpn_mul_n($p, $a, $b, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1052)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $ws=__stackBase__;
      var $ws1;
      var $ws2;
      var $ws3;
      var $ws4;
      var $__tmp_marker=(__stackBase__)+(1048);
      $1=$p;
      $2=$a;
      $3=$b;
      $4=$n;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $11=$4;
      var $12=(($11)|0) >= 30;
      if ($12) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $14=$1;
      var $15=$2;
      var $16=$4;
      var $17=$3;
      var $18=$4;
      ___gmpn_mul_basecase($14, $15, $16, $17, $18);
      label = 35; break;
    case 10: 
      var $20=$4;
      var $21=(($20)|0) >= 100;
      if ($21) { label = 14; break; } else { label = 11; break; }
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $25=$1;
      var $26=$2;
      var $27=$4;
      var $28=$3;
      var $29=$4;
      var $30=(($ws)|0);
      ___gmpn_toom22_mul($25, $26, $27, $28, $29, $30);
      label = 34; break;
    case 14: 
      var $32=$4;
      var $33=(($32)|0) >= 300;
      if ($33) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $35=$4;
      var $36=((($35)*(3))&-1);
      var $37=((($36)+(32))|0);
      var $38=($37<<2);
      var $39=STACKTOP;STACKTOP = (STACKTOP + $38)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $40=$39;
      $ws1=$40;
      var $41=$1;
      var $42=$2;
      var $43=$4;
      var $44=$3;
      var $45=$4;
      var $46=$ws1;
      ___gmpn_toom33_mul($41, $42, $43, $44, $45, $46);
      label = 33; break;
    case 16: 
      var $48=$4;
      var $49=(($48)|0) >= 350;
      if ($49) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $51=$4;
      var $52=((($51)*(3))&-1);
      var $53=((($52)+(32))|0);
      var $54=($53<<2);
      var $55=STACKTOP;STACKTOP = (STACKTOP + $54)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $56=$55;
      $ws2=$56;
      var $57=$1;
      var $58=$2;
      var $59=$4;
      var $60=$3;
      var $61=$4;
      var $62=$ws2;
      ___gmpn_toom44_mul($57, $58, $59, $60, $61, $62);
      label = 32; break;
    case 18: 
      var $64=$4;
      var $65=(($64)|0) >= 450;
      if ($65) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $67=$4;
      var $68=((($67)-(350))|0);
      var $69=($68<<1);
      var $70=((($69)+(1082))|0);
      var $71=($70<<2);
      var $72=STACKTOP;STACKTOP = (STACKTOP + $71)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $73=$72;
      $ws3=$73;
      var $74=$1;
      var $75=$2;
      var $76=$4;
      var $77=$3;
      var $78=$4;
      var $79=$ws3;
      ___gmpn_toom6h_mul($74, $75, $76, $77, $78, $79);
      label = 31; break;
    case 20: 
      var $81=$4;
      var $82=(($81)|0) >= 3000;
      if ($82) { label = 29; break; } else { label = 21; break; }
    case 21: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $84=$4;
      var $85=((($84)*(15))&-1);
      var $86=$85 >> 3;
      var $87=((($86)-(843))|0);
      var $88=((($87)+(1282))|0);
      var $89=($88<<2);
      var $90=(($89)>>>0) < 65536;
      var $91=(($90)&1);
      var $92=(($91)|0)!=0;
      var $93=(($92)&1);
      var $94=($93);
      var $95=(($94)|0)!=0;
      if ($95) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $97=$4;
      var $98=((($97)*(15))&-1);
      var $99=$98 >> 3;
      var $100=((($99)-(843))|0);
      var $101=((($100)+(1282))|0);
      var $102=($101<<2);
      var $103=STACKTOP;STACKTOP = (STACKTOP + $102)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $113 = $103;label = 24; break;
    case 23: 
      var $105=$4;
      var $106=((($105)*(15))&-1);
      var $107=$106 >> 3;
      var $108=((($107)-(843))|0);
      var $109=((($108)+(1282))|0);
      var $110=($109<<2);
      var $111=___gmp_tmp_reentrant_alloc($__tmp_marker, $110);
      var $113 = $111;label = 24; break;
    case 24: 
      var $113;
      var $114=$113;
      $ws4=$114;
      var $115=$1;
      var $116=$2;
      var $117=$4;
      var $118=$3;
      var $119=$4;
      var $120=$ws4;
      ___gmpn_toom8h_mul($115, $116, $117, $118, $119, $120);
      label = 25; break;
    case 25: 
      var $122=HEAP32[(($__tmp_marker)>>2)];
      var $123=(($122)|0)!=0;
      var $124=(($123)&1);
      var $125=(($124)|0)!=0;
      var $126=(($125)&1);
      var $127=($126);
      var $128=(($127)|0)!=0;
      if ($128) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $130=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($130);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 30; break;
    case 29: 
      var $134=$1;
      var $135=$2;
      var $136=$4;
      var $137=$3;
      var $138=$4;
      ___gmpn_nussbaumer_mul($134, $135, $136, $137, $138);
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mul_n["X"]=1;

function ___gmpn_sqr($p, $a, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 1212)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $ws=__stackBase__;
      var $ws1;
      var $ws2;
      var $ws3;
      var $ws4;
      var $__tmp_marker=(__stackBase__)+(1208);
      $1=$p;
      $2=$a;
      $3=$n;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $8=$3;
      var $9=(($8)|0) >= 50;
      if ($9) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $11=$1;
      var $12=$2;
      var $13=$3;
      ___gmpn_sqr_basecase($11, $12, $13);
      label = 33; break;
    case 8: 
      var $15=$3;
      var $16=(($15)|0) >= 120;
      if ($16) { label = 12; break; } else { label = 9; break; }
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $20=$1;
      var $21=$2;
      var $22=$3;
      var $23=(($ws)|0);
      ___gmpn_toom2_sqr($20, $21, $22, $23);
      label = 32; break;
    case 12: 
      var $25=$3;
      var $26=(($25)|0) >= 400;
      if ($26) { label = 14; break; } else { label = 13; break; }
    case 13: 
      var $28=$3;
      var $29=((($28)*(3))&-1);
      var $30=((($29)+(32))|0);
      var $31=($30<<2);
      var $32=STACKTOP;STACKTOP = (STACKTOP + $31)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $33=$32;
      $ws1=$33;
      var $34=$1;
      var $35=$2;
      var $36=$3;
      var $37=$ws1;
      ___gmpn_toom3_sqr($34, $35, $36, $37);
      label = 31; break;
    case 14: 
      var $39=$3;
      var $40=(($39)|0) >= 350;
      if ($40) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $42=$3;
      var $43=((($42)*(3))&-1);
      var $44=((($43)+(32))|0);
      var $45=($44<<2);
      var $46=STACKTOP;STACKTOP = (STACKTOP + $45)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $47=$46;
      $ws2=$47;
      var $48=$1;
      var $49=$2;
      var $50=$3;
      var $51=$ws2;
      ___gmpn_toom4_sqr($48, $49, $50, $51);
      label = 30; break;
    case 16: 
      var $53=$3;
      var $54=(($53)|0) >= 450;
      if ($54) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $56=$3;
      var $57=((($56)-(350))|0);
      var $58=($57<<1);
      var $59=((($58)+(1082))|0);
      var $60=($59<<2);
      var $61=STACKTOP;STACKTOP = (STACKTOP + $60)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $62=$61;
      $ws3=$62;
      var $63=$1;
      var $64=$2;
      var $65=$3;
      var $66=$ws3;
      ___gmpn_toom6_sqr($63, $64, $65, $66);
      label = 29; break;
    case 18: 
      var $68=$3;
      var $69=(($68)|0) >= 3600;
      if ($69) { label = 27; break; } else { label = 19; break; }
    case 19: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $71=$3;
      var $72=((($71)*(15))&-1);
      var $73=$72 >> 3;
      var $74=((($73)-(843))|0);
      var $75=((($74)+(1282))|0);
      var $76=($75<<2);
      var $77=(($76)>>>0) < 65536;
      var $78=(($77)&1);
      var $79=(($78)|0)!=0;
      var $80=(($79)&1);
      var $81=($80);
      var $82=(($81)|0)!=0;
      if ($82) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $84=$3;
      var $85=((($84)*(15))&-1);
      var $86=$85 >> 3;
      var $87=((($86)-(843))|0);
      var $88=((($87)+(1282))|0);
      var $89=($88<<2);
      var $90=STACKTOP;STACKTOP = (STACKTOP + $89)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $100 = $90;label = 22; break;
    case 21: 
      var $92=$3;
      var $93=((($92)*(15))&-1);
      var $94=$93 >> 3;
      var $95=((($94)-(843))|0);
      var $96=((($95)+(1282))|0);
      var $97=($96<<2);
      var $98=___gmp_tmp_reentrant_alloc($__tmp_marker, $97);
      var $100 = $98;label = 22; break;
    case 22: 
      var $100;
      var $101=$100;
      $ws4=$101;
      var $102=$1;
      var $103=$2;
      var $104=$3;
      var $105=$ws4;
      ___gmpn_toom8_sqr($102, $103, $104, $105);
      label = 23; break;
    case 23: 
      var $107=HEAP32[(($__tmp_marker)>>2)];
      var $108=(($107)|0)!=0;
      var $109=(($108)&1);
      var $110=(($109)|0)!=0;
      var $111=(($110)&1);
      var $112=($111);
      var $113=(($112)|0)!=0;
      if ($113) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $115=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($115);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 28; break;
    case 27: 
      var $119=$1;
      var $120=$2;
      var $121=$3;
      var $122=$2;
      var $123=$3;
      ___gmpn_nussbaumer_mul($119, $120, $121, $122, $123);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sqr["X"]=1;

function ___gmpn_mul_basecase($rp, $up, $un, $vp, $vn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      $1=$rp;
      $2=$up;
      $3=$un;
      $4=$vp;
      $5=$vn;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $14=$1;
      var $15=$2;
      var $16=$3;
      var $17=$4;
      var $18=(($17)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=___gmpn_mul_1($14, $15, $16, $19);
      var $21=$3;
      var $22=$1;
      var $23=(($22+($21<<2))|0);
      HEAP32[(($23)>>2)]=$20;
      var $24=$1;
      var $25=(($24+4)|0);
      $1=$25;
      var $26=$4;
      var $27=(($26+4)|0);
      $4=$27;
      var $28=$5;
      var $29=((($28)-(1))|0);
      $5=$29;
      label = 11; break;
    case 11: 
      var $31=$5;
      var $32=(($31)|0) >= 1;
      if ($32) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $34=$1;
      var $35=$2;
      var $36=$3;
      var $37=$4;
      var $38=(($37)|0);
      var $39=HEAP32[(($38)>>2)];
      var $40=___gmpn_addmul_1($34, $35, $36, $39);
      var $41=$3;
      var $42=$1;
      var $43=(($42+($41<<2))|0);
      HEAP32[(($43)>>2)]=$40;
      var $44=$1;
      var $45=(($44+4)|0);
      $1=$45;
      var $46=$4;
      var $47=(($46+4)|0);
      $4=$47;
      var $48=$5;
      var $49=((($48)-(1))|0);
      $5=$49;
      label = 11; break;
    case 13: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mul_basecase["X"]=1;

function _mpn_sqrmod_bnm1_itch($rn, $an) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $n;
      var $itch;
      $1=$rn;
      $2=$an;
      var $3=$1;
      var $4=$3 >> 1;
      $n=$4;
      var $5=$1;
      var $6=((($5)+(3))|0);
      var $7=$2;
      var $8=$n;
      var $9=(($7)|0) > (($8)|0);
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$2;
      var $14 = $11;label = 5; break;
    case 4: 
      var $14 = 0;label = 5; break;
    case 5: 
      var $14;
      var $15=((($6)+($14))|0);
      $itch=$15;
      var $16=$itch;

      return $16;
    default: assert(0, "bad label: " + label);
  }

}


function _mpn_mulmod_bnm1_itch($rn, $an, $bn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $itch;
      $1=$rn;
      $2=$an;
      $3=$bn;
      var $4=$1;
      var $5=$4 >> 1;
      $n=$5;
      var $6=$1;
      var $7=((($6)+(4))|0);
      var $8=$2;
      var $9=$n;
      var $10=(($8)|0) > (($9)|0);
      if ($10) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $12=$3;
      var $13=$n;
      var $14=(($12)|0) > (($13)|0);
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$1;
      var $20 = $16;label = 6; break;
    case 5: 
      var $18=$n;
      var $20 = $18;label = 6; break;
    case 6: 
      var $20;
      var $23 = $20;label = 8; break;
    case 7: 
      var $23 = 0;label = 8; break;
    case 8: 
      var $23;
      var $24=((($7)+($23))|0);
      $itch=$24;
      var $25=$itch;

      return $25;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_sqr_basecase($rp, $up, $n) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 400)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      var $ul;
      var $lpl;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $tarr=__stackBase__;
      var $tp;
      var $cy;
      var $cy1;
      var $cy2;
      var $_i;
      var $ul3;
      var $lpl4;
      var $__x05;
      var $__x16;
      var $__x27;
      var $__x38;
      var $__ul9;
      var $__vl10;
      var $__uh11;
      var $__vh12;
      var $__u13;
      var $__v14;
      $1=$rp;
      $2=$up;
      $3=$n;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $8=$2;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      $ul=$10;
      label = 7; break;
    case 7: 
      var $12=$ul;
      $__u=$12;
      var $13=$ul;
      var $14=$13 << 0;
      $__v=$14;
      var $15=$__u;
      var $16=$15 & 65535;
      $__ul=$16;
      var $17=$__u;
      var $18=$17 >>> 16;
      $__uh=$18;
      var $19=$__v;
      var $20=$19 & 65535;
      $__vl=$20;
      var $21=$__v;
      var $22=$21 >>> 16;
      $__vh=$22;
      var $23=$__ul;
      var $24=$__vl;
      var $25=Math.imul($23,$24);
      $__x0=$25;
      var $26=$__ul;
      var $27=$__vh;
      var $28=Math.imul($26,$27);
      $__x1=$28;
      var $29=$__uh;
      var $30=$__vl;
      var $31=Math.imul($29,$30);
      $__x2=$31;
      var $32=$__uh;
      var $33=$__vh;
      var $34=Math.imul($32,$33);
      $__x3=$34;
      var $35=$__x0;
      var $36=$35 >>> 16;
      var $37=$__x1;
      var $38=((($37)+($36))|0);
      $__x1=$38;
      var $39=$__x2;
      var $40=$__x1;
      var $41=((($40)+($39))|0);
      $__x1=$41;
      var $42=$__x1;
      var $43=$__x2;
      var $44=(($42)>>>0) < (($43)>>>0);
      if ($44) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $46=$__x3;
      var $47=((($46)+(65536))|0);
      $__x3=$47;
      label = 9; break;
    case 9: 
      var $49=$__x3;
      var $50=$__x1;
      var $51=$50 >>> 16;
      var $52=((($49)+($51))|0);
      var $53=$1;
      var $54=(($53+4)|0);
      HEAP32[(($54)>>2)]=$52;
      var $55=$__x1;
      var $56=$55 << 16;
      var $57=$__x0;
      var $58=$57 & 65535;
      var $59=((($56)+($58))|0);
      $lpl=$59;
      label = 10; break;
    case 10: 
      var $61=$lpl;
      var $62=$61 >>> 0;
      var $63=$1;
      var $64=(($63)|0);
      HEAP32[(($64)>>2)]=$62;
      var $65=$3;
      var $66=(($65)|0) > 1;
      if ($66) { label = 11; break; } else { label = 30; break; }
    case 11: 
      var $68=(($tarr)|0);
      $tp=$68;
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $71=$tp;
      var $72=$2;
      var $73=(($72+4)|0);
      var $74=$3;
      var $75=((($74)-(1))|0);
      var $76=$2;
      var $77=(($76)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=___gmpn_mul_1($71, $73, $75, $78);
      $cy=$79;
      var $80=$cy;
      var $81=$3;
      var $82=((($81)-(1))|0);
      var $83=$tp;
      var $84=(($83+($82<<2))|0);
      HEAP32[(($84)>>2)]=$80;
      $i=2;
      label = 14; break;
    case 14: 
      var $86=$i;
      var $87=$3;
      var $88=(($86)|0) < (($87)|0);
      if ($88) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $90=$tp;
      var $91=$i;
      var $92=($91<<1);
      var $93=(($90+($92<<2))|0);
      var $94=((($93)-(8))|0);
      var $95=$2;
      var $96=$i;
      var $97=(($95+($96<<2))|0);
      var $98=$3;
      var $99=$i;
      var $100=((($98)-($99))|0);
      var $101=$i;
      var $102=((($101)-(1))|0);
      var $103=$2;
      var $104=(($103+($102<<2))|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=___gmpn_addmul_1($94, $97, $100, $105);
      $cy1=$106;
      var $107=$cy1;
      var $108=$3;
      var $109=$i;
      var $110=((($108)+($109))|0);
      var $111=((($110)-(2))|0);
      var $112=$tp;
      var $113=(($112+($111<<2))|0);
      HEAP32[(($113)>>2)]=$107;
      label = 16; break;
    case 16: 
      var $115=$i;
      var $116=((($115)+(1))|0);
      $i=$116;
      label = 14; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      $_i=0;
      label = 20; break;
    case 20: 
      var $121=$_i;
      var $122=$3;
      var $123=(($121)|0) < (($122)|0);
      if ($123) { label = 21; break; } else { label = 27; break; }
    case 21: 
      var $125=$_i;
      var $126=$2;
      var $127=(($126+($125<<2))|0);
      var $128=HEAP32[(($127)>>2)];
      $ul3=$128;
      label = 22; break;
    case 22: 
      var $130=$ul3;
      $__u13=$130;
      var $131=$ul3;
      var $132=$131 << 0;
      $__v14=$132;
      var $133=$__u13;
      var $134=$133 & 65535;
      $__ul9=$134;
      var $135=$__u13;
      var $136=$135 >>> 16;
      $__uh11=$136;
      var $137=$__v14;
      var $138=$137 & 65535;
      $__vl10=$138;
      var $139=$__v14;
      var $140=$139 >>> 16;
      $__vh12=$140;
      var $141=$__ul9;
      var $142=$__vl10;
      var $143=Math.imul($141,$142);
      $__x05=$143;
      var $144=$__ul9;
      var $145=$__vh12;
      var $146=Math.imul($144,$145);
      $__x16=$146;
      var $147=$__uh11;
      var $148=$__vl10;
      var $149=Math.imul($147,$148);
      $__x27=$149;
      var $150=$__uh11;
      var $151=$__vh12;
      var $152=Math.imul($150,$151);
      $__x38=$152;
      var $153=$__x05;
      var $154=$153 >>> 16;
      var $155=$__x16;
      var $156=((($155)+($154))|0);
      $__x16=$156;
      var $157=$__x27;
      var $158=$__x16;
      var $159=((($158)+($157))|0);
      $__x16=$159;
      var $160=$__x16;
      var $161=$__x27;
      var $162=(($160)>>>0) < (($161)>>>0);
      if ($162) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $164=$__x38;
      var $165=((($164)+(65536))|0);
      $__x38=$165;
      label = 24; break;
    case 24: 
      var $167=$__x38;
      var $168=$__x16;
      var $169=$168 >>> 16;
      var $170=((($167)+($169))|0);
      var $171=$_i;
      var $172=($171<<1);
      var $173=((($172)+(1))|0);
      var $174=$1;
      var $175=(($174+($173<<2))|0);
      HEAP32[(($175)>>2)]=$170;
      var $176=$__x16;
      var $177=$176 << 16;
      var $178=$__x05;
      var $179=$178 & 65535;
      var $180=((($177)+($179))|0);
      $lpl4=$180;
      label = 25; break;
    case 25: 
      var $182=$lpl4;
      var $183=$182 >>> 0;
      var $184=$_i;
      var $185=($184<<1);
      var $186=$1;
      var $187=(($186+($185<<2))|0);
      HEAP32[(($187)>>2)]=$183;
      label = 26; break;
    case 26: 
      var $189=$_i;
      var $190=((($189)+(1))|0);
      $_i=$190;
      label = 20; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $193=$tp;
      var $194=$tp;
      var $195=$3;
      var $196=($195<<1);
      var $197=((($196)-(2))|0);
      var $198=___gmpn_lshift($193, $194, $197, 1);
      $cy2=$198;
      var $199=$1;
      var $200=(($199+4)|0);
      var $201=$1;
      var $202=(($201+4)|0);
      var $203=$tp;
      var $204=$3;
      var $205=($204<<1);
      var $206=((($205)-(2))|0);
      var $207=___gmpn_add_n($200, $202, $203, $206);
      var $208=$cy2;
      var $209=((($208)+($207))|0);
      $cy2=$209;
      var $210=$cy2;
      var $211=$3;
      var $212=($211<<1);
      var $213=((($212)-(1))|0);
      var $214=$1;
      var $215=(($214+($213<<2))|0);
      var $216=HEAP32[(($215)>>2)];
      var $217=((($216)+($210))|0);
      HEAP32[(($215)>>2)]=$217;
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sqr_basecase["X"]=1;

function ___gmpn_nussbaumer_mul($pp, $ap, $an, $bp, $bn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $rn;
      var $tp;
      var $__tmp_marker=__stackBase__;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $10=$2;
      var $11=$4;
      var $12=(($10)|0)==(($11)|0);
      if ($12) { label = 7; break; } else { label = 12; break; }
    case 7: 
      var $14=$3;
      var $15=$5;
      var $16=(($14)|0)==(($15)|0);
      if ($16) { label = 8; break; } else { label = 12; break; }
    case 8: 
      var $18=$3;
      var $19=($18<<1);
      var $20=___gmpn_sqrmod_bnm1_next_size($19);
      $rn=$20;
      var $21=$rn;
      var $22=$3;
      var $23=_mpn_sqrmod_bnm1_itch($21, $22);
      var $24=($23<<2);
      var $25=(($24)>>>0) < 65536;
      var $26=(($25)&1);
      var $27=(($26)|0)!=0;
      var $28=(($27)&1);
      var $29=($28);
      var $30=(($29)|0)!=0;
      if ($30) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $32=$rn;
      var $33=$3;
      var $34=_mpn_sqrmod_bnm1_itch($32, $33);
      var $35=($34<<2);
      var $36=STACKTOP;STACKTOP = (STACKTOP + $35)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $44 = $36;label = 11; break;
    case 10: 
      var $38=$rn;
      var $39=$3;
      var $40=_mpn_sqrmod_bnm1_itch($38, $39);
      var $41=($40<<2);
      var $42=___gmp_tmp_reentrant_alloc($__tmp_marker, $41);
      var $44 = $42;label = 11; break;
    case 11: 
      var $44;
      var $45=$44;
      $tp=$45;
      var $46=$1;
      var $47=$rn;
      var $48=$2;
      var $49=$3;
      var $50=$tp;
      ___gmpn_sqrmod_bnm1($46, $47, $48, $49, $50);
      label = 16; break;
    case 12: 
      var $52=$3;
      var $53=$5;
      var $54=((($52)+($53))|0);
      var $55=___gmpn_mulmod_bnm1_next_size($54);
      $rn=$55;
      var $56=$rn;
      var $57=$3;
      var $58=$5;
      var $59=_mpn_mulmod_bnm1_itch($56, $57, $58);
      var $60=($59<<2);
      var $61=(($60)>>>0) < 65536;
      var $62=(($61)&1);
      var $63=(($62)|0)!=0;
      var $64=(($63)&1);
      var $65=($64);
      var $66=(($65)|0)!=0;
      if ($66) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $68=$rn;
      var $69=$3;
      var $70=$5;
      var $71=_mpn_mulmod_bnm1_itch($68, $69, $70);
      var $72=($71<<2);
      var $73=STACKTOP;STACKTOP = (STACKTOP + $72)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $82 = $73;label = 15; break;
    case 14: 
      var $75=$rn;
      var $76=$3;
      var $77=$5;
      var $78=_mpn_mulmod_bnm1_itch($75, $76, $77);
      var $79=($78<<2);
      var $80=___gmp_tmp_reentrant_alloc($__tmp_marker, $79);
      var $82 = $80;label = 15; break;
    case 15: 
      var $82;
      var $83=$82;
      $tp=$83;
      var $84=$1;
      var $85=$rn;
      var $86=$2;
      var $87=$3;
      var $88=$4;
      var $89=$5;
      var $90=$tp;
      ___gmpn_mulmod_bnm1($84, $85, $86, $87, $88, $89, $90);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $93=HEAP32[(($__tmp_marker)>>2)];
      var $94=(($93)|0)!=0;
      var $95=(($94)&1);
      var $96=(($95)|0)!=0;
      var $97=(($96)&1);
      var $98=($97);
      var $99=(($98)|0)!=0;
      if ($99) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $101=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($101);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_nussbaumer_mul["X"]=1;

function ___gmpn_get_str($str, $base, $up, $un) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 776)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $powtab_mem;
      var $powtab_mem_ptr;
      var $big_base=__stackBase__;
      var $digits_in_base;
      var $powtab=(__stackBase__)+(4);
      var $pi;
      var $n;
      var $p;
      var $t;
      var $out_len;
      var $tmp;
      var $__tmp_marker=(__stackBase__)+(644);
      var $n1;
      var $n0;
      var $bits_per_digit;
      var $cnt;
      var $bit_pos;
      var $i;
      var $s;
      var $bits;
      var $__xr;
      var $__a;
      var $n_pows;
      var $xn;
      var $pn;
      var $exptab=(__stackBase__)+(648);
      var $bexp;
      var $cy;
      var $shift;
      var $ndig;
      var $_ph;
      var $_pl;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      $2=$str;
      $3=$base;
      $4=$up;
      $5=$un;
      var $6=$5;
      var $7=(($6)|0)==0;
      if ($7) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $9=$2;
      var $10=(($9)|0);
      HEAP8[($10)]=0;
      $1=1;
      label = 56; break;
    case 4: 
      var $12=$3;
      var $13=$3;
      var $14=((($13)-(1))|0);
      var $15=$12 & $14;
      var $16=(($15)|0)==0;
      if ($16) { label = 5; break; } else { label = 20; break; }
    case 5: 
      var $18=$3;
      var $19=((5250556+((($18)*(20))&-1))|0);
      var $20=(($19+12)|0);
      var $21=HEAP32[(($20)>>2)];
      $bits_per_digit=$21;
      var $22=$2;
      $s=$22;
      var $23=$5;
      var $24=((($23)-(1))|0);
      var $25=$4;
      var $26=(($25+($24<<2))|0);
      var $27=HEAP32[(($26)>>2)];
      $n1=$27;
      label = 6; break;
    case 6: 
      var $29=$n1;
      $__xr=$29;
      var $30=$__xr;
      var $31=(($30)>>>0) < 65536;
      if ($31) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $33=$__xr;
      var $34=(($33)>>>0) < 256;
      var $35=$34 ? 1 : 9;
      var $41 = $35;label = 9; break;
    case 8: 
      var $37=$__xr;
      var $38=(($37)>>>0) < 16777216;
      var $39=$38 ? 17 : 25;
      var $41 = $39;label = 9; break;
    case 9: 
      var $41;
      $__a=$41;
      var $42=$__a;
      var $43=(((33)-($42))|0);
      var $44=$__xr;
      var $45=$__a;
      var $46=$44 >>> (($45)>>>0);
      var $47=((5250424+$46)|0);
      var $48=HEAP8[($47)];
      var $49=(($48)&255);
      var $50=((($43)-($49))|0);
      $cnt=$50;
      label = 10; break;
    case 10: 
      var $52=$5;
      var $53=($52<<5);
      var $54=$cnt;
      var $55=((($53)-($54))|0);
      var $56=(($55)|0);
      $bits=$56;
      var $57=$bits;
      var $58=$bits_per_digit;
      var $59=((($57)>>>0))%((($58)>>>0));
      $cnt=$59;
      var $60=$cnt;
      var $61=(($60)|0)!=0;
      if ($61) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $63=$bits_per_digit;
      var $64=$cnt;
      var $65=((($63)-($64))|0);
      var $66=$bits;
      var $67=((($66)+($65))|0);
      $bits=$67;
      label = 12; break;
    case 12: 
      var $69=$bits;
      var $70=$5;
      var $71=((($70)-(1))|0);
      var $72=($71<<5);
      var $73=((($69)-($72))|0);
      $bit_pos=$73;
      var $74=$5;
      var $75=((($74)-(1))|0);
      $i=$75;
      label = 13; break;
    case 13: 
      var $77=$bits_per_digit;
      var $78=$bit_pos;
      var $79=((($78)-($77))|0);
      $bit_pos=$79;
      label = 14; break;
    case 14: 
      var $81=$bit_pos;
      var $82=(($81)|0) >= 0;
      if ($82) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $84=$n1;
      var $85=$bit_pos;
      var $86=$84 >>> (($85)>>>0);
      var $87=$bits_per_digit;
      var $88=1 << $87;
      var $89=((($88)-(1))|0);
      var $90=$86 & $89;
      var $91=(($90) & 255);
      var $92=$s;
      var $93=(($92+1)|0);
      $s=$93;
      HEAP8[($92)]=$91;
      var $94=$bits_per_digit;
      var $95=$bit_pos;
      var $96=((($95)-($94))|0);
      $bit_pos=$96;
      label = 14; break;
    case 16: 
      var $98=$i;
      var $99=((($98)-(1))|0);
      $i=$99;
      var $100=$i;
      var $101=(($100)|0) < 0;
      if ($101) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 19; break;
    case 18: 
      var $104=$n1;
      var $105=$bit_pos;
      var $106=(((-$105))|0);
      var $107=$104 << $106;
      var $108=$bits_per_digit;
      var $109=1 << $108;
      var $110=((($109)-(1))|0);
      var $111=$107 & $110;
      $n0=$111;
      var $112=$i;
      var $113=$4;
      var $114=(($113+($112<<2))|0);
      var $115=HEAP32[(($114)>>2)];
      $n1=$115;
      var $116=$bit_pos;
      var $117=((($116)+(32))|0);
      $bit_pos=$117;
      var $118=$n0;
      var $119=$n1;
      var $120=$bit_pos;
      var $121=$119 >>> (($120)>>>0);
      var $122=$118 | $121;
      var $123=(($122) & 255);
      var $124=$s;
      var $125=(($124+1)|0);
      $s=$125;
      HEAP8[($124)]=$123;
      label = 13; break;
    case 19: 
      var $127=$s;
      var $128=$2;
      var $129=$127;
      var $130=$128;
      var $131=((($129)-($130))|0);
      $1=$131;
      label = 56; break;
    case 20: 
      var $133=$5;
      var $134=(($133)|0) >= 35;
      if ($134) { label = 22; break; } else { label = 21; break; }
    case 21: 
      var $136=$2;
      var $137=$4;
      var $138=$5;
      var $139=$3;
      var $140=_mpn_sb_get_str($136, 0, $137, $138, $139);
      var $141=$2;
      var $142=$140;
      var $143=$141;
      var $144=((($142)-($143))|0);
      $1=$144;
      label = 56; break;
    case 22: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $146=$5;
      var $147=((($146)+(64))|0);
      var $148=($147<<2);
      var $149=___gmp_tmp_reentrant_alloc($__tmp_marker, $148);
      var $150=$149;
      $powtab_mem=$150;
      var $151=$powtab_mem;
      $powtab_mem_ptr=$151;
      var $152=$3;
      var $153=((5250556+((($152)*(20))&-1))|0);
      var $154=(($153+12)|0);
      var $155=HEAP32[(($154)>>2)];
      HEAP32[(($big_base)>>2)]=$155;
      var $156=$3;
      var $157=((5250556+((($156)*(20))&-1))|0);
      var $158=(($157)|0);
      var $159=HEAP32[(($158)>>2)];
      $digits_in_base=$159;
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $162=$3;
      var $163=((5250556+((($162)*(20))&-1))|0);
      var $164=(($163+4)|0);
      var $165=HEAP32[(($164)>>2)];
      $__u=$165;
      var $166=$5;
      var $167=($166<<5);
      $__v=$167;
      var $168=$__u;
      var $169=$168 & 65535;
      $__ul=$169;
      var $170=$__u;
      var $171=$170 >>> 16;
      $__uh=$171;
      var $172=$__v;
      var $173=$172 & 65535;
      $__vl=$173;
      var $174=$__v;
      var $175=$174 >>> 16;
      $__vh=$175;
      var $176=$__ul;
      var $177=$__vl;
      var $178=Math.imul($176,$177);
      $__x0=$178;
      var $179=$__ul;
      var $180=$__vh;
      var $181=Math.imul($179,$180);
      $__x1=$181;
      var $182=$__uh;
      var $183=$__vl;
      var $184=Math.imul($182,$183);
      $__x2=$184;
      var $185=$__uh;
      var $186=$__vh;
      var $187=Math.imul($185,$186);
      $__x3=$187;
      var $188=$__x0;
      var $189=$188 >>> 16;
      var $190=$__x1;
      var $191=((($190)+($189))|0);
      $__x1=$191;
      var $192=$__x2;
      var $193=$__x1;
      var $194=((($193)+($192))|0);
      $__x1=$194;
      var $195=$__x1;
      var $196=$__x2;
      var $197=(($195)>>>0) < (($196)>>>0);
      if ($197) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $199=$__x3;
      var $200=((($199)+(65536))|0);
      $__x3=$200;
      label = 26; break;
    case 26: 
      var $202=$__x3;
      var $203=$__x1;
      var $204=$203 >>> 16;
      var $205=((($202)+($204))|0);
      $_ph=$205;
      var $206=$__x1;
      var $207=$206 << 16;
      var $208=$__x0;
      var $209=$208 & 65535;
      var $210=((($207)+($209))|0);
      $_pl=$210;
      label = 27; break;
    case 27: 
      var $212=$_ph;
      $ndig=$212;
      label = 28; break;
    case 28: 
      var $214=$ndig;
      var $215=$3;
      var $216=((5250556+((($215)*(20))&-1))|0);
      var $217=(($216)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=Math.floor(((($214)>>>0))/((($218)>>>0)));
      var $220=((($219)+(1))|0);
      $xn=$220;
      $n_pows=0;
      var $221=$xn;
      $pn=$221;
      label = 29; break;
    case 29: 
      var $223=$pn;
      var $224=(($223)|0)!=1;
      if ($224) { label = 30; break; } else { label = 32; break; }
    case 30: 
      var $226=$pn;
      var $227=$n_pows;
      var $228=(($exptab+($227<<2))|0);
      HEAP32[(($228)>>2)]=$226;
      var $229=$n_pows;
      var $230=((($229)+(1))|0);
      $n_pows=$230;
      label = 31; break;
    case 31: 
      var $232=$pn;
      var $233=((($232)+(1))|0);
      var $234=$233 >> 1;
      $pn=$234;
      label = 29; break;
    case 32: 
      var $236=$n_pows;
      var $237=(($exptab+($236<<2))|0);
      HEAP32[(($237)>>2)]=1;
      var $238=(($powtab)|0);
      var $239=(($238)|0);
      HEAP32[(($239)>>2)]=$big_base;
      var $240=(($powtab)|0);
      var $241=(($240+4)|0);
      HEAP32[(($241)>>2)]=1;
      var $242=$digits_in_base;
      var $243=(($powtab)|0);
      var $244=(($243+12)|0);
      HEAP32[(($244)>>2)]=$242;
      var $245=$3;
      var $246=(($powtab)|0);
      var $247=(($246+16)|0);
      HEAP32[(($247)>>2)]=$245;
      var $248=(($powtab)|0);
      var $249=(($248+8)|0);
      HEAP32[(($249)>>2)]=0;
      var $250=$powtab_mem_ptr;
      var $251=(($powtab+20)|0);
      var $252=(($251)|0);
      HEAP32[(($252)>>2)]=$250;
      var $253=$powtab_mem_ptr;
      var $254=(($253+8)|0);
      $powtab_mem_ptr=$254;
      var $255=HEAP32[(($big_base)>>2)];
      var $256=(($powtab+20)|0);
      var $257=(($256)|0);
      var $258=HEAP32[(($257)>>2)];
      var $259=(($258)|0);
      HEAP32[(($259)>>2)]=$255;
      var $260=(($powtab+20)|0);
      var $261=(($260+4)|0);
      HEAP32[(($261)>>2)]=1;
      var $262=$digits_in_base;
      var $263=(($powtab+20)|0);
      var $264=(($263+12)|0);
      HEAP32[(($264)>>2)]=$262;
      var $265=$3;
      var $266=(($powtab+20)|0);
      var $267=(($266+16)|0);
      HEAP32[(($267)>>2)]=$265;
      var $268=(($powtab+20)|0);
      var $269=(($268+8)|0);
      HEAP32[(($269)>>2)]=0;
      $n=1;
      $p=$big_base;
      $bexp=1;
      $shift=0;
      $pi=2;
      label = 33; break;
    case 33: 
      var $271=$pi;
      var $272=$n_pows;
      var $273=(($271)|0) < (($272)|0);
      if ($273) { label = 34; break; } else { label = 45; break; }
    case 34: 
      var $275=$powtab_mem_ptr;
      $t=$275;
      var $276=$n;
      var $277=($276<<1);
      var $278=((($277)+(2))|0);
      var $279=$powtab_mem_ptr;
      var $280=(($279+($278<<2))|0);
      $powtab_mem_ptr=$280;
      label = 35; break;
    case 35: 
      var $282=$powtab_mem_ptr;
      var $283=$powtab_mem;
      var $284=$5;
      var $285=((($284)+(64))|0);
      var $286=(($283+($285<<2))|0);
      var $287=(($282)>>>0) < (($286)>>>0);
      var $288=$287 ^ 1;
      var $289=(($288)&1);
      var $290=(($289)|0)!=0;
      var $291=(($290)&1);
      var $292=($291);
      var $293=(($292)|0)!=0;
      if ($293) { label = 36; break; } else { label = 37; break; }
    case 36: 
      ___gmp_assert_fail(((5249312)|0), 478, ((5249744)|0));
      throw "Reached an unreachable!"
    case 37: 
      label = 38; break;
    case 38: 
      var $297=$t;
      var $298=$p;
      var $299=$n;
      ___gmpn_sqr($297, $298, $299);
      var $300=$digits_in_base;
      var $301=($300<<1);
      $digits_in_base=$301;
      var $302=$n;
      var $303=($302<<1);
      $n=$303;
      var $304=$n;
      var $305=((($304)-(1))|0);
      var $306=$t;
      var $307=(($306+($305<<2))|0);
      var $308=HEAP32[(($307)>>2)];
      var $309=(($308)|0)==0;
      var $310=(($309)&1);
      var $311=$n;
      var $312=((($311)-($310))|0);
      $n=$312;
      var $313=$bexp;
      var $314=($313<<1);
      $bexp=$314;
      var $315=$bexp;
      var $316=((($315)+(1))|0);
      var $317=$n_pows;
      var $318=$pi;
      var $319=((($317)-($318))|0);
      var $320=(($exptab+($319<<2))|0);
      var $321=HEAP32[(($320)>>2)];
      var $322=(($316)|0) < (($321)|0);
      if ($322) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $324=$3;
      var $325=((5250556+((($324)*(20))&-1))|0);
      var $326=(($325)|0);
      var $327=HEAP32[(($326)>>2)];
      var $328=$digits_in_base;
      var $329=((($328)+($327))|0);
      $digits_in_base=$329;
      var $330=$t;
      var $331=$t;
      var $332=$n;
      var $333=HEAP32[(($big_base)>>2)];
      var $334=___gmpn_mul_1($330, $331, $332, $333);
      $cy=$334;
      var $335=$cy;
      var $336=$n;
      var $337=$t;
      var $338=(($337+($336<<2))|0);
      HEAP32[(($338)>>2)]=$335;
      var $339=$cy;
      var $340=(($339)|0)!=0;
      var $341=(($340)&1);
      var $342=$n;
      var $343=((($342)+($341))|0);
      $n=$343;
      var $344=$bexp;
      var $345=((($344)+(1))|0);
      $bexp=$345;
      label = 40; break;
    case 40: 
      var $347=$shift;
      var $348=($347<<1);
      $shift=$348;
      label = 41; break;
    case 41: 
      var $350=$t;
      var $351=(($350)|0);
      var $352=HEAP32[(($351)>>2)];
      var $353=(($352)|0)==0;
      if ($353) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $355=$t;
      var $356=(($355+4)|0);
      $t=$356;
      var $357=$n;
      var $358=((($357)-(1))|0);
      $n=$358;
      var $359=$shift;
      var $360=((($359)+(1))|0);
      $shift=$360;
      label = 41; break;
    case 43: 
      var $362=$t;
      $p=$362;
      var $363=$p;
      var $364=$pi;
      var $365=(($powtab+((($364)*(20))&-1))|0);
      var $366=(($365)|0);
      HEAP32[(($366)>>2)]=$363;
      var $367=$n;
      var $368=$pi;
      var $369=(($powtab+((($368)*(20))&-1))|0);
      var $370=(($369+4)|0);
      HEAP32[(($370)>>2)]=$367;
      var $371=$digits_in_base;
      var $372=$pi;
      var $373=(($powtab+((($372)*(20))&-1))|0);
      var $374=(($373+12)|0);
      HEAP32[(($374)>>2)]=$371;
      var $375=$3;
      var $376=$pi;
      var $377=(($powtab+((($376)*(20))&-1))|0);
      var $378=(($377+16)|0);
      HEAP32[(($378)>>2)]=$375;
      var $379=$shift;
      var $380=$pi;
      var $381=(($powtab+((($380)*(20))&-1))|0);
      var $382=(($381+8)|0);
      HEAP32[(($382)>>2)]=$379;
      label = 44; break;
    case 44: 
      var $384=$pi;
      var $385=((($384)+(1))|0);
      $pi=$385;
      label = 33; break;
    case 45: 
      $pi=1;
      label = 46; break;
    case 46: 
      var $388=$pi;
      var $389=$n_pows;
      var $390=(($388)|0) < (($389)|0);
      if ($390) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $392=$pi;
      var $393=(($powtab+((($392)*(20))&-1))|0);
      var $394=(($393)|0);
      var $395=HEAP32[(($394)>>2)];
      $t=$395;
      var $396=$pi;
      var $397=(($powtab+((($396)*(20))&-1))|0);
      var $398=(($397+4)|0);
      var $399=HEAP32[(($398)>>2)];
      $n=$399;
      var $400=$t;
      var $401=$t;
      var $402=$n;
      var $403=HEAP32[(($big_base)>>2)];
      var $404=___gmpn_mul_1($400, $401, $402, $403);
      $cy=$404;
      var $405=$cy;
      var $406=$n;
      var $407=$t;
      var $408=(($407+($406<<2))|0);
      HEAP32[(($408)>>2)]=$405;
      var $409=$cy;
      var $410=(($409)|0)!=0;
      var $411=(($410)&1);
      var $412=$n;
      var $413=((($412)+($411))|0);
      $n=$413;
      var $414=$t;
      var $415=(($414)|0);
      var $416=HEAP32[(($415)>>2)];
      var $417=(($416)|0)==0;
      if ($417) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $419=$t;
      var $420=(($419+4)|0);
      var $421=$pi;
      var $422=(($powtab+((($421)*(20))&-1))|0);
      var $423=(($422)|0);
      HEAP32[(($423)>>2)]=$420;
      var $424=$n;
      var $425=((($424)-(1))|0);
      $n=$425;
      var $426=$pi;
      var $427=(($powtab+((($426)*(20))&-1))|0);
      var $428=(($427+8)|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=((($429)+(1))|0);
      HEAP32[(($428)>>2)]=$430;
      label = 49; break;
    case 49: 
      var $432=$n;
      var $433=$pi;
      var $434=(($powtab+((($433)*(20))&-1))|0);
      var $435=(($434+4)|0);
      HEAP32[(($435)>>2)]=$432;
      var $436=$3;
      var $437=((5250556+((($436)*(20))&-1))|0);
      var $438=(($437)|0);
      var $439=HEAP32[(($438)>>2)];
      var $440=$pi;
      var $441=(($powtab+((($440)*(20))&-1))|0);
      var $442=(($441+12)|0);
      var $443=HEAP32[(($442)>>2)];
      var $444=((($443)+($439))|0);
      HEAP32[(($442)>>2)]=$444;
      label = 50; break;
    case 50: 
      var $446=$pi;
      var $447=((($446)+(1))|0);
      $pi=$447;
      label = 46; break;
    case 51: 
      var $449=$5;
      var $450=((($449)+(32))|0);
      var $451=($450<<2);
      var $452=___gmp_tmp_reentrant_alloc($__tmp_marker, $451);
      var $453=$452;
      $tmp=$453;
      var $454=$2;
      var $455=$4;
      var $456=$5;
      var $457=(($powtab)|0);
      var $458=((($457)-(20))|0);
      var $459=$pi;
      var $460=(($458+((($459)*(20))&-1))|0);
      var $461=$tmp;
      var $462=_mpn_dc_get_str($454, 0, $455, $456, $460, $461);
      var $463=$2;
      var $464=$462;
      var $465=$463;
      var $466=((($464)-($465))|0);
      $out_len=$466;
      label = 52; break;
    case 52: 
      var $468=HEAP32[(($__tmp_marker)>>2)];
      var $469=(($468)|0)!=0;
      var $470=(($469)&1);
      var $471=(($470)|0)!=0;
      var $472=(($471)&1);
      var $473=($472);
      var $474=(($473)|0)!=0;
      if ($474) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $476=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($476);
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $479=$out_len;
      $1=$479;
      label = 56; break;
    case 56: 
      var $481=$1;
      STACKTOP = __stackBase__;
      return $481;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_get_str["X"]=1;

function _mpn_sb_get_str($str, $len, $up, $un, $base) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 852)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $rl;
      var $ul;
      var $s;
      var $l;
      var $buf=__stackBase__;
      var $rp=(__stackBase__)+(712);
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $i;
      var $frac;
      var $digit;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x01;
      var $__x12;
      var $__x23;
      var $__x34;
      var $__ul5;
      var $__vl6;
      var $__uh7;
      var $__vh8;
      var $__u9;
      var $__v10;
      var $__q;
      var $__r;
      var $chars_per_limb;
      var $big_base;
      var $big_base_inverted;
      var $normalization_steps;
      var $__xr;
      var $__a;
      var $__n11;
      var $__dst12;
      var $__src13;
      var $__x14;
      var $i15;
      var $frac16;
      var $digit17;
      var $__x018;
      var $__x119;
      var $__x220;
      var $__x321;
      var $__ul22;
      var $__vl23;
      var $__uh24;
      var $__vh25;
      var $__u26;
      var $__v27;
      var $__q28;
      var $__r29;
      $1=$str;
      $2=$len;
      $3=$up;
      $4=$un;
      $5=$base;
      var $6=$5;
      var $7=(($6)|0)==10;
      if ($7) { label = 3; break; } else { label = 40; break; }
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $17=$4;
      var $18=(($17)|0)!=0;
      if ($18) { label = 12; break; } else { label = 18; break; }
    case 12: 
      var $20=$4;
      var $21=((($20)-(1))|0);
      $__n=$21;
      var $22=(($rp)|0);
      var $23=(($22+4)|0);
      $__dst=$23;
      var $24=$3;
      $__src=$24;
      var $25=$__src;
      var $26=(($25+4)|0);
      $__src=$26;
      var $27=HEAP32[(($25)>>2)];
      $__x=$27;
      var $28=$__n;
      var $29=(($28)|0)!=0;
      if ($29) { label = 13; break; } else { label = 17; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $32=$__x;
      var $33=$__dst;
      var $34=(($33+4)|0);
      $__dst=$34;
      HEAP32[(($33)>>2)]=$32;
      var $35=$__src;
      var $36=(($35+4)|0);
      $__src=$36;
      var $37=HEAP32[(($35)>>2)];
      $__x=$37;
      label = 15; break;
    case 15: 
      var $39=$__n;
      var $40=((($39)-(1))|0);
      $__n=$40;
      var $41=(($40)|0)!=0;
      if ($41) { label = 14; break; } else { label = 16; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $44=$__x;
      var $45=$__dst;
      var $46=(($45+4)|0);
      $__dst=$46;
      HEAP32[(($45)>>2)]=$44;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $50=(($buf)|0);
      var $51=(($50+712)|0);
      $s=$51;
      label = 21; break;
    case 21: 
      var $53=$4;
      var $54=(($53)|0) > 1;
      if ($54) { label = 22; break; } else { label = 34; break; }
    case 22: 
      var $56=(($rp)|0);
      var $57=(($rp)|0);
      var $58=(($57+4)|0);
      var $59=$4;
      var $60=___gmpn_preinv_divrem_1($56, 1, $58, $59, 1000000000, 316718722, 2);
      var $61=$4;
      var $62=(($rp+($61<<2))|0);
      var $63=HEAP32[(($62)>>2)];
      var $64=(($63)|0)==0;
      var $65=(($64)&1);
      var $66=$4;
      var $67=((($66)-($65))|0);
      $4=$67;
      var $68=(($rp)|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($69)+(1))|0);
      var $71=$70 << 0;
      $frac=$71;
      var $72=$s;
      var $73=((($72)-(9))|0);
      $s=$73;
      label = 23; break;
    case 23: 
      var $75=$frac;
      $__u=$75;
      $__v=10;
      var $76=$__u;
      var $77=$76 & 65535;
      $__ul=$77;
      var $78=$__u;
      var $79=$78 >>> 16;
      $__uh=$79;
      var $80=$__v;
      var $81=$80 & 65535;
      $__vl=$81;
      var $82=$__v;
      var $83=$82 >>> 16;
      $__vh=$83;
      var $84=$__ul;
      var $85=$__vl;
      var $86=Math.imul($84,$85);
      $__x0=$86;
      var $87=$__ul;
      var $88=$__vh;
      var $89=Math.imul($87,$88);
      $__x1=$89;
      var $90=$__uh;
      var $91=$__vl;
      var $92=Math.imul($90,$91);
      $__x2=$92;
      var $93=$__uh;
      var $94=$__vh;
      var $95=Math.imul($93,$94);
      $__x3=$95;
      var $96=$__x0;
      var $97=$96 >>> 16;
      var $98=$__x1;
      var $99=((($98)+($97))|0);
      $__x1=$99;
      var $100=$__x2;
      var $101=$__x1;
      var $102=((($101)+($100))|0);
      $__x1=$102;
      var $103=$__x1;
      var $104=$__x2;
      var $105=(($103)>>>0) < (($104)>>>0);
      if ($105) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $107=$__x3;
      var $108=((($107)+(65536))|0);
      $__x3=$108;
      label = 25; break;
    case 25: 
      var $110=$__x3;
      var $111=$__x1;
      var $112=$111 >>> 16;
      var $113=((($110)+($112))|0);
      $digit=$113;
      var $114=$__x1;
      var $115=$114 << 16;
      var $116=$__x0;
      var $117=$116 & 65535;
      var $118=((($115)+($117))|0);
      $frac=$118;
      label = 26; break;
    case 26: 
      var $120=$digit;
      var $121=(($120) & 255);
      var $122=$s;
      var $123=(($122+1)|0);
      $s=$123;
      HEAP8[($122)]=$121;
      label = 27; break;
    case 27: 
      var $125=$frac;
      $__u9=$125;
      $__v10=10;
      var $126=$__u9;
      var $127=$126 & 65535;
      $__ul5=$127;
      var $128=$__u9;
      var $129=$128 >>> 16;
      $__uh7=$129;
      var $130=$__v10;
      var $131=$130 & 65535;
      $__vl6=$131;
      var $132=$__v10;
      var $133=$132 >>> 16;
      $__vh8=$133;
      var $134=$__ul5;
      var $135=$__vl6;
      var $136=Math.imul($134,$135);
      $__x01=$136;
      var $137=$__ul5;
      var $138=$__vh8;
      var $139=Math.imul($137,$138);
      $__x12=$139;
      var $140=$__uh7;
      var $141=$__vl6;
      var $142=Math.imul($140,$141);
      $__x23=$142;
      var $143=$__uh7;
      var $144=$__vh8;
      var $145=Math.imul($143,$144);
      $__x34=$145;
      var $146=$__x01;
      var $147=$146 >>> 16;
      var $148=$__x12;
      var $149=((($148)+($147))|0);
      $__x12=$149;
      var $150=$__x23;
      var $151=$__x12;
      var $152=((($151)+($150))|0);
      $__x12=$152;
      var $153=$__x12;
      var $154=$__x23;
      var $155=(($153)>>>0) < (($154)>>>0);
      if ($155) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $157=$__x34;
      var $158=((($157)+(65536))|0);
      $__x34=$158;
      label = 29; break;
    case 29: 
      var $160=$__x34;
      var $161=$__x12;
      var $162=$161 >>> 16;
      var $163=((($160)+($162))|0);
      $digit=$163;
      var $164=$__x12;
      var $165=$164 << 16;
      var $166=$__x01;
      var $167=$166 & 65535;
      var $168=((($165)+($167))|0);
      $frac=$168;
      label = 30; break;
    case 30: 
      var $170=$digit;
      var $171=(($170) & 255);
      var $172=$s;
      var $173=(($172+1)|0);
      $s=$173;
      HEAP8[($172)]=$171;
      $i=7;
      var $174=$frac;
      var $175=((($174)+(15))|0);
      var $176=$175 >>> 4;
      $frac=$176;
      label = 31; break;
    case 31: 
      var $178=$frac;
      var $179=((($178)*(10))&-1);
      $frac=$179;
      var $180=$frac;
      var $181=$180 >>> 28;
      $digit=$181;
      var $182=$digit;
      var $183=(($182) & 255);
      var $184=$s;
      var $185=(($184+1)|0);
      $s=$185;
      HEAP8[($184)]=$183;
      var $186=$frac;
      var $187=$186 & 268435455;
      $frac=$187;
      label = 32; break;
    case 32: 
      var $189=$i;
      var $190=((($189)-(1))|0);
      $i=$190;
      var $191=(($190)|0)!=0;
      if ($191) { label = 31; break; } else { label = 33; break; }
    case 33: 
      var $193=$s;
      var $194=((($193)-(9))|0);
      $s=$194;
      label = 21; break;
    case 34: 
      var $196=(($rp+4)|0);
      var $197=HEAP32[(($196)>>2)];
      $ul=$197;
      label = 35; break;
    case 35: 
      var $199=$ul;
      var $200=(($199)|0)!=0;
      if ($200) { label = 36; break; } else { label = 39; break; }
    case 36: 
      label = 37; break;
    case 37: 
      var $203=$ul;
      var $204=Math.floor(((($203)>>>0))/(10));
      $__q=$204;
      var $205=$ul;
      var $206=$__q;
      var $207=((($206)*(10))&-1);
      var $208=((($205)-($207))|0);
      $__r=$208;
      var $209=$__q;
      $ul=$209;
      var $210=$__r;
      $rl=$210;
      label = 38; break;
    case 38: 
      var $212=$rl;
      var $213=(($212) & 255);
      var $214=$s;
      var $215=((($214)-(1))|0);
      $s=$215;
      HEAP8[($215)]=$213;
      label = 35; break;
    case 39: 
      label = 78; break;
    case 40: 
      var $218=$5;
      var $219=((5250556+((($218)*(20))&-1))|0);
      var $220=(($219)|0);
      var $221=HEAP32[(($220)>>2)];
      $chars_per_limb=$221;
      var $222=$5;
      var $223=((5250556+((($222)*(20))&-1))|0);
      var $224=(($223+12)|0);
      var $225=HEAP32[(($224)>>2)];
      $big_base=$225;
      var $226=$5;
      var $227=((5250556+((($226)*(20))&-1))|0);
      var $228=(($227+16)|0);
      var $229=HEAP32[(($228)>>2)];
      $big_base_inverted=$229;
      label = 41; break;
    case 41: 
      var $231=$big_base;
      $__xr=$231;
      var $232=$__xr;
      var $233=(($232)>>>0) < 65536;
      if ($233) { label = 42; break; } else { label = 43; break; }
    case 42: 
      var $235=$__xr;
      var $236=(($235)>>>0) < 256;
      var $237=$236 ? 1 : 9;
      var $243 = $237;label = 44; break;
    case 43: 
      var $239=$__xr;
      var $240=(($239)>>>0) < 16777216;
      var $241=$240 ? 17 : 25;
      var $243 = $241;label = 44; break;
    case 44: 
      var $243;
      $__a=$243;
      var $244=$__a;
      var $245=(((33)-($244))|0);
      var $246=$__xr;
      var $247=$__a;
      var $248=$246 >>> (($247)>>>0);
      var $249=((5250424+$248)|0);
      var $250=HEAP8[($249)];
      var $251=(($250)&255);
      var $252=((($245)-($251))|0);
      $normalization_steps=$252;
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $262=$4;
      var $263=(($262)|0)!=0;
      if ($263) { label = 54; break; } else { label = 60; break; }
    case 54: 
      var $265=$4;
      var $266=((($265)-(1))|0);
      $__n11=$266;
      var $267=(($rp)|0);
      var $268=(($267+4)|0);
      $__dst12=$268;
      var $269=$3;
      $__src13=$269;
      var $270=$__src13;
      var $271=(($270+4)|0);
      $__src13=$271;
      var $272=HEAP32[(($270)>>2)];
      $__x14=$272;
      var $273=$__n11;
      var $274=(($273)|0)!=0;
      if ($274) { label = 55; break; } else { label = 59; break; }
    case 55: 
      label = 56; break;
    case 56: 
      var $277=$__x14;
      var $278=$__dst12;
      var $279=(($278+4)|0);
      $__dst12=$279;
      HEAP32[(($278)>>2)]=$277;
      var $280=$__src13;
      var $281=(($280+4)|0);
      $__src13=$281;
      var $282=HEAP32[(($280)>>2)];
      $__x14=$282;
      label = 57; break;
    case 57: 
      var $284=$__n11;
      var $285=((($284)-(1))|0);
      $__n11=$285;
      var $286=(($285)|0)!=0;
      if ($286) { label = 56; break; } else { label = 58; break; }
    case 58: 
      label = 59; break;
    case 59: 
      var $289=$__x14;
      var $290=$__dst12;
      var $291=(($290+4)|0);
      $__dst12=$291;
      HEAP32[(($290)>>2)]=$289;
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $295=(($buf)|0);
      var $296=(($295+712)|0);
      $s=$296;
      label = 63; break;
    case 63: 
      var $298=$4;
      var $299=(($298)|0) > 1;
      if ($299) { label = 64; break; } else { label = 72; break; }
    case 64: 
      var $301=(($rp)|0);
      var $302=(($rp)|0);
      var $303=(($302+4)|0);
      var $304=$4;
      var $305=$big_base;
      var $306=$big_base_inverted;
      var $307=$normalization_steps;
      var $308=___gmpn_preinv_divrem_1($301, 1, $303, $304, $305, $306, $307);
      var $309=$4;
      var $310=(($rp+($309<<2))|0);
      var $311=HEAP32[(($310)>>2)];
      var $312=(($311)|0)==0;
      var $313=(($312)&1);
      var $314=$4;
      var $315=((($314)-($313))|0);
      $4=$315;
      var $316=(($rp)|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=((($317)+(1))|0);
      var $319=$318 << 0;
      $frac16=$319;
      var $320=$chars_per_limb;
      var $321=$s;
      var $322=(((-$320))|0);
      var $323=(($321+$322)|0);
      $s=$323;
      var $324=$chars_per_limb;
      $i15=$324;
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $327=$frac16;
      $__u26=$327;
      var $328=$5;
      $__v27=$328;
      var $329=$__u26;
      var $330=$329 & 65535;
      $__ul22=$330;
      var $331=$__u26;
      var $332=$331 >>> 16;
      $__uh24=$332;
      var $333=$__v27;
      var $334=$333 & 65535;
      $__vl23=$334;
      var $335=$__v27;
      var $336=$335 >>> 16;
      $__vh25=$336;
      var $337=$__ul22;
      var $338=$__vl23;
      var $339=Math.imul($337,$338);
      $__x018=$339;
      var $340=$__ul22;
      var $341=$__vh25;
      var $342=Math.imul($340,$341);
      $__x119=$342;
      var $343=$__uh24;
      var $344=$__vl23;
      var $345=Math.imul($343,$344);
      $__x220=$345;
      var $346=$__uh24;
      var $347=$__vh25;
      var $348=Math.imul($346,$347);
      $__x321=$348;
      var $349=$__x018;
      var $350=$349 >>> 16;
      var $351=$__x119;
      var $352=((($351)+($350))|0);
      $__x119=$352;
      var $353=$__x220;
      var $354=$__x119;
      var $355=((($354)+($353))|0);
      $__x119=$355;
      var $356=$__x119;
      var $357=$__x220;
      var $358=(($356)>>>0) < (($357)>>>0);
      if ($358) { label = 67; break; } else { label = 68; break; }
    case 67: 
      var $360=$__x321;
      var $361=((($360)+(65536))|0);
      $__x321=$361;
      label = 68; break;
    case 68: 
      var $363=$__x321;
      var $364=$__x119;
      var $365=$364 >>> 16;
      var $366=((($363)+($365))|0);
      $digit17=$366;
      var $367=$__x119;
      var $368=$367 << 16;
      var $369=$__x018;
      var $370=$369 & 65535;
      var $371=((($368)+($370))|0);
      $frac16=$371;
      label = 69; break;
    case 69: 
      var $373=$digit17;
      var $374=(($373) & 255);
      var $375=$s;
      var $376=(($375+1)|0);
      $s=$376;
      HEAP8[($375)]=$374;
      label = 70; break;
    case 70: 
      var $378=$i15;
      var $379=((($378)-(1))|0);
      $i15=$379;
      var $380=(($379)|0)!=0;
      if ($380) { label = 65; break; } else { label = 71; break; }
    case 71: 
      var $382=$chars_per_limb;
      var $383=$s;
      var $384=(((-$382))|0);
      var $385=(($383+$384)|0);
      $s=$385;
      label = 63; break;
    case 72: 
      var $387=(($rp+4)|0);
      var $388=HEAP32[(($387)>>2)];
      $ul=$388;
      label = 73; break;
    case 73: 
      var $390=$ul;
      var $391=(($390)|0)!=0;
      if ($391) { label = 74; break; } else { label = 77; break; }
    case 74: 
      label = 75; break;
    case 75: 
      var $394=$ul;
      var $395=$5;
      var $396=Math.floor(((($394)>>>0))/((($395)>>>0)));
      $__q28=$396;
      var $397=$ul;
      var $398=$__q28;
      var $399=$5;
      var $400=Math.imul($398,$399);
      var $401=((($397)-($400))|0);
      $__r29=$401;
      var $402=$__q28;
      $ul=$402;
      var $403=$__r29;
      $rl=$403;
      label = 76; break;
    case 76: 
      var $405=$rl;
      var $406=(($405) & 255);
      var $407=$s;
      var $408=((($407)-(1))|0);
      $s=$408;
      HEAP8[($408)]=$406;
      label = 73; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $411=(($buf)|0);
      var $412=(($411+712)|0);
      var $413=$s;
      var $414=$412;
      var $415=$413;
      var $416=((($414)-($415))|0);
      $l=$416;
      label = 79; break;
    case 79: 
      var $418=$l;
      var $419=$2;
      var $420=(($418)>>>0) < (($419)>>>0);
      if ($420) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $422=$1;
      var $423=(($422+1)|0);
      $1=$423;
      HEAP8[($422)]=0;
      var $424=$2;
      var $425=((($424)-(1))|0);
      $2=$425;
      label = 79; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $428=$l;
      var $429=(($428)|0)!=0;
      if ($429) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $431=$s;
      var $432=(($431+1)|0);
      $s=$432;
      var $433=HEAP8[($431)];
      var $434=$1;
      var $435=(($434+1)|0);
      $1=$435;
      HEAP8[($434)]=$433;
      var $436=$l;
      var $437=((($436)-(1))|0);
      $l=$437;
      label = 82; break;
    case 84: 
      var $439=$1;
      STACKTOP = __stackBase__;
      return $439;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_sb_get_str["X"]=1;

function _mpn_dc_get_str($str, $len, $up, $un, $powtab, $tmp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $pwp;
      var $qp;
      var $rp;
      var $pwn;
      var $qn;
      var $sn;
      $1=$str;
      $2=$len;
      $3=$up;
      $4=$un;
      $5=$powtab;
      $6=$tmp;
      var $7=$4;
      var $8=(($7)|0) >= 18;
      if ($8) { label = 10; break; } else { label = 3; break; }
    case 3: 
      var $10=$4;
      var $11=(($10)|0)!=0;
      if ($11) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $13=$1;
      var $14=$2;
      var $15=$3;
      var $16=$4;
      var $17=$5;
      var $18=(($17+16)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=_mpn_sb_get_str($13, $14, $15, $16, $19);
      $1=$20;
      label = 9; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $23=$2;
      var $24=(($23)|0)!=0;
      if ($24) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $26=$1;
      var $27=(($26+1)|0);
      $1=$27;
      HEAP8[($26)]=0;
      var $28=$2;
      var $29=((($28)-(1))|0);
      $2=$29;
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 20; break;
    case 10: 
      var $33=$5;
      var $34=(($33)|0);
      var $35=HEAP32[(($34)>>2)];
      $pwp=$35;
      var $36=$5;
      var $37=(($36+4)|0);
      var $38=HEAP32[(($37)>>2)];
      $pwn=$38;
      var $39=$5;
      var $40=(($39+8)|0);
      var $41=HEAP32[(($40)>>2)];
      $sn=$41;
      var $42=$4;
      var $43=$pwn;
      var $44=$sn;
      var $45=((($43)+($44))|0);
      var $46=(($42)|0) < (($45)|0);
      if ($46) { label = 13; break; } else { label = 11; break; }
    case 11: 
      var $48=$4;
      var $49=$pwn;
      var $50=$sn;
      var $51=((($49)+($50))|0);
      var $52=(($48)|0)==(($51)|0);
      if ($52) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $54=$3;
      var $55=$sn;
      var $56=(($54+($55<<2))|0);
      var $57=$pwp;
      var $58=$4;
      var $59=$sn;
      var $60=((($58)-($59))|0);
      var $61=___gmpn_cmp($56, $57, $60);
      var $62=(($61)|0) < 0;
      if ($62) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $64=$1;
      var $65=$2;
      var $66=$3;
      var $67=$4;
      var $68=$5;
      var $69=((($68)-(20))|0);
      var $70=$6;
      var $71=_mpn_dc_get_str($64, $65, $66, $67, $69, $70);
      $1=$71;
      label = 19; break;
    case 14: 
      var $73=$6;
      $qp=$73;
      var $74=$3;
      $rp=$74;
      var $75=$qp;
      var $76=$rp;
      var $77=$sn;
      var $78=(($76+($77<<2))|0);
      var $79=$3;
      var $80=$sn;
      var $81=(($79+($80<<2))|0);
      var $82=$4;
      var $83=$sn;
      var $84=((($82)-($83))|0);
      var $85=$pwp;
      var $86=$pwn;
      ___gmpn_tdiv_qr($75, $78, 0, $81, $84, $85, $86);
      var $87=$4;
      var $88=$sn;
      var $89=((($87)-($88))|0);
      var $90=$pwn;
      var $91=((($89)-($90))|0);
      $qn=$91;
      var $92=$qn;
      var $93=$qp;
      var $94=(($93+($92<<2))|0);
      var $95=HEAP32[(($94)>>2)];
      var $96=(($95)|0)!=0;
      var $97=(($96)&1);
      var $98=$qn;
      var $99=((($98)+($97))|0);
      $qn=$99;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $102=$2;
      var $103=(($102)|0)!=0;
      if ($103) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $105=$2;
      var $106=$5;
      var $107=(($106+12)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($105)-($108))|0);
      $2=$109;
      label = 18; break;
    case 18: 
      var $111=$1;
      var $112=$2;
      var $113=$qp;
      var $114=$qn;
      var $115=$5;
      var $116=((($115)-(20))|0);
      var $117=$6;
      var $118=$qn;
      var $119=(($117+($118<<2))|0);
      var $120=_mpn_dc_get_str($111, $112, $113, $114, $116, $119);
      $1=$120;
      var $121=$1;
      var $122=$5;
      var $123=(($122+12)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$rp;
      var $126=$pwn;
      var $127=$sn;
      var $128=((($126)+($127))|0);
      var $129=$5;
      var $130=((($129)-(20))|0);
      var $131=$6;
      var $132=_mpn_dc_get_str($121, $124, $125, $128, $130, $131);
      $1=$132;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $135=$1;

      return $135;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_dc_get_str["X"]=1;

function ___gmpn_popcount($up, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $result;
      var $p0;
      var $p1;
      var $p2;
      var $p3;
      var $x;
      var $p01;
      var $p23;
      var $i;
      $1=$up;
      $2=$n;
      $result=0;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $5=$2;
      var $6=$5 >> 2;
      $i=$6;
      label = 5; break;
    case 5: 
      var $8=$i;
      var $9=(($8)|0)!=0;
      if ($9) { label = 6; break; } else { label = 8; break; }
    case 6: 
      var $11=$1;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      $p0=$13;
      var $14=$p0;
      var $15=$14 >>> 1;
      var $16=$15 & 1431655765;
      var $17=$p0;
      var $18=((($17)-($16))|0);
      $p0=$18;
      var $19=$p0;
      var $20=$19 >>> 2;
      var $21=$20 & 858993459;
      var $22=$p0;
      var $23=$22 & 858993459;
      var $24=((($21)+($23))|0);
      $p0=$24;
      var $25=$1;
      var $26=(($25+4)|0);
      var $27=HEAP32[(($26)>>2)];
      $p1=$27;
      var $28=$p1;
      var $29=$28 >>> 1;
      var $30=$29 & 1431655765;
      var $31=$p1;
      var $32=((($31)-($30))|0);
      $p1=$32;
      var $33=$p1;
      var $34=$33 >>> 2;
      var $35=$34 & 858993459;
      var $36=$p1;
      var $37=$36 & 858993459;
      var $38=((($35)+($37))|0);
      $p1=$38;
      var $39=$p0;
      var $40=$p1;
      var $41=((($39)+($40))|0);
      $p01=$41;
      var $42=$p01;
      var $43=$42 >>> 4;
      var $44=$43 & 252645135;
      var $45=$p01;
      var $46=$45 & 252645135;
      var $47=((($44)+($46))|0);
      $p01=$47;
      var $48=$1;
      var $49=(($48+8)|0);
      var $50=HEAP32[(($49)>>2)];
      $p2=$50;
      var $51=$p2;
      var $52=$51 >>> 1;
      var $53=$52 & 1431655765;
      var $54=$p2;
      var $55=((($54)-($53))|0);
      $p2=$55;
      var $56=$p2;
      var $57=$56 >>> 2;
      var $58=$57 & 858993459;
      var $59=$p2;
      var $60=$59 & 858993459;
      var $61=((($58)+($60))|0);
      $p2=$61;
      var $62=$1;
      var $63=(($62+12)|0);
      var $64=HEAP32[(($63)>>2)];
      $p3=$64;
      var $65=$p3;
      var $66=$65 >>> 1;
      var $67=$66 & 1431655765;
      var $68=$p3;
      var $69=((($68)-($67))|0);
      $p3=$69;
      var $70=$p3;
      var $71=$70 >>> 2;
      var $72=$71 & 858993459;
      var $73=$p3;
      var $74=$73 & 858993459;
      var $75=((($72)+($74))|0);
      $p3=$75;
      var $76=$p2;
      var $77=$p3;
      var $78=((($76)+($77))|0);
      $p23=$78;
      var $79=$p23;
      var $80=$79 >>> 4;
      var $81=$80 & 252645135;
      var $82=$p23;
      var $83=$82 & 252645135;
      var $84=((($81)+($83))|0);
      $p23=$84;
      var $85=$p01;
      var $86=$p23;
      var $87=((($85)+($86))|0);
      $x=$87;
      var $88=$x;
      var $89=$88 >>> 8;
      var $90=$x;
      var $91=((($89)+($90))|0);
      $x=$91;
      var $92=$x;
      var $93=$92 >>> 16;
      var $94=$x;
      var $95=((($93)+($94))|0);
      $x=$95;
      var $96=$x;
      var $97=$96 & 255;
      var $98=$result;
      var $99=((($98)+($97))|0);
      $result=$99;
      var $100=$1;
      var $101=(($100+16)|0);
      $1=$101;
      label = 7; break;
    case 7: 
      var $103=$i;
      var $104=((($103)-(1))|0);
      $i=$104;
      label = 5; break;
    case 8: 
      var $106=$2;
      var $107=$106 & 3;
      $2=$107;
      var $108=$2;
      var $109=(($108)|0)!=0;
      if ($109) { label = 9; break; } else { label = 13; break; }
    case 9: 
      $x=0;
      label = 10; break;
    case 10: 
      var $112=$1;
      var $113=(($112)|0);
      var $114=HEAP32[(($113)>>2)];
      $p0=$114;
      var $115=$p0;
      var $116=$115 >>> 1;
      var $117=$116 & 1431655765;
      var $118=$p0;
      var $119=((($118)-($117))|0);
      $p0=$119;
      var $120=$p0;
      var $121=$120 >>> 2;
      var $122=$121 & 858993459;
      var $123=$p0;
      var $124=$123 & 858993459;
      var $125=((($122)+($124))|0);
      $p0=$125;
      var $126=$p0;
      var $127=$126 >>> 4;
      var $128=$p0;
      var $129=((($127)+($128))|0);
      var $130=$129 & 252645135;
      $p0=$130;
      var $131=$p0;
      var $132=$x;
      var $133=((($132)+($131))|0);
      $x=$133;
      var $134=$1;
      var $135=(($134+4)|0);
      $1=$135;
      label = 11; break;
    case 11: 
      var $137=$2;
      var $138=((($137)-(1))|0);
      $2=$138;
      var $139=(($138)|0)!=0;
      if ($139) { label = 10; break; } else { label = 12; break; }
    case 12: 
      var $141=$x;
      var $142=$141 >>> 8;
      var $143=$x;
      var $144=((($142)+($143))|0);
      $x=$144;
      var $145=$x;
      var $146=$145 >>> 16;
      var $147=$x;
      var $148=((($146)+($147))|0);
      $x=$148;
      var $149=$x;
      var $150=$149 & 255;
      var $151=$result;
      var $152=((($151)+($150))|0);
      $result=$152;
      label = 13; break;
    case 13: 
      var $154=$result;

      return $154;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_popcount["X"]=1;

function ___gmpn_cmp($__gmp_xp, $__gmp_yp, $__gmp_size) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $__gmp_result;
      var $__gmp_i;
      var $__gmp_x;
      var $__gmp_y;
      $1=$__gmp_xp;
      $2=$__gmp_yp;
      $3=$__gmp_size;
      label = 3; break;
    case 3: 
      $__gmp_result=0;
      var $5=$3;
      $__gmp_i=$5;
      label = 4; break;
    case 4: 
      var $7=$__gmp_i;
      var $8=((($7)-(1))|0);
      $__gmp_i=$8;
      var $9=(($8)|0) >= 0;
      if ($9) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $11=$__gmp_i;
      var $12=$1;
      var $13=(($12+($11<<2))|0);
      var $14=HEAP32[(($13)>>2)];
      $__gmp_x=$14;
      var $15=$__gmp_i;
      var $16=$2;
      var $17=(($16+($15<<2))|0);
      var $18=HEAP32[(($17)>>2)];
      $__gmp_y=$18;
      var $19=$__gmp_x;
      var $20=$__gmp_y;
      var $21=(($19)|0)!=(($20)|0);
      if ($21) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $23=$__gmp_x;
      var $24=$__gmp_y;
      var $25=(($23)>>>0) > (($24)>>>0);
      var $26=$25 ? 1 : -1;
      $__gmp_result=$26;
      label = 8; break;
    case 7: 
      label = 4; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $30=$__gmp_result;

      return $30;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_scan1($up, $starting_bit) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $starting_word;
      var $alimb;
      var $cnt;
      var $p;
      var $__ctz_x;
      var $__ctz_c;
      $1=$up;
      $2=$starting_bit;
      var $3=$2;
      var $4=Math.floor(((($3)>>>0))/(32));
      $starting_word=$4;
      var $5=$1;
      var $6=$starting_word;
      var $7=(($5+($6<<2))|0);
      $p=$7;
      var $8=$p;
      var $9=(($8+4)|0);
      $p=$9;
      var $10=HEAP32[(($8)>>2)];
      $alimb=$10;
      var $11=$2;
      var $12=((($11)>>>0))%(32);
      var $13=-1 << $12;
      var $14=$alimb;
      var $15=$14 & $13;
      $alimb=$15;
      label = 3; break;
    case 3: 
      var $17=$alimb;
      var $18=(($17)|0)==0;
      if ($18) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $20=$p;
      var $21=(($20+4)|0);
      $p=$21;
      var $22=HEAP32[(($20)>>2)];
      $alimb=$22;
      label = 3; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $25=$alimb;
      $__ctz_x=$25;
      var $26=$__ctz_x;
      var $27=$26 & 255;
      var $28=(($27)|0)!=0;
      var $29=(($28)&1);
      var $30=(($29)|0)!=0;
      var $31=(($30)&1);
      var $32=($31);
      var $33=(($32)|0)!=0;
      if ($33) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $35=$__ctz_x;
      var $36=$__ctz_x;
      var $37=(((-$36))|0);
      var $38=$35 & $37;
      var $39=((5250424+$38)|0);
      var $40=HEAP8[($39)];
      var $41=(($40)&255);
      var $42=((($41)-(2))|0);
      $cnt=$42;
      label = 15; break;
    case 8: 
      $__ctz_c=6;
      label = 9; break;
    case 9: 
      var $45=$__ctz_c;
      var $46=(($45)|0) < 30;
      if ($46) { label = 10; break; } else { label = 14; break; }
    case 10: 
      var $48=$__ctz_x;
      var $49=$48 >>> 8;
      $__ctz_x=$49;
      var $50=$__ctz_x;
      var $51=$50 & 255;
      var $52=(($51)|0)!=0;
      var $53=(($52)&1);
      var $54=(($53)|0)!=0;
      var $55=(($54)&1);
      var $56=($55);
      var $57=(($56)|0)!=0;
      if ($57) { label = 11; break; } else { label = 12; break; }
    case 11: 
      label = 14; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $61=$__ctz_c;
      var $62=((($61)+(8))|0);
      $__ctz_c=$62;
      label = 9; break;
    case 14: 
      var $64=$__ctz_c;
      var $65=$__ctz_x;
      var $66=$__ctz_x;
      var $67=(((-$66))|0);
      var $68=$65 & $67;
      var $69=((5250424+$68)|0);
      var $70=HEAP8[($69)];
      var $71=(($70)&255);
      var $72=((($64)+($71))|0);
      $cnt=$72;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $75=$p;
      var $76=$1;
      var $77=$75;
      var $78=$76;
      var $79=((($77)-($78))|0);
      var $80=((((($79)|0))/(4))&-1);
      var $81=((($80)-(1))|0);
      var $82=($81<<5);
      var $83=$cnt;
      var $84=((($82)+($83))|0);

      return $84;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_scan1["X"]=1;

function ___gmpn_tdiv_qr($qp, $rp, $qxn, $np, $nn, $dp, $dn) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 20)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $n2p;
      var $d2p;
      var $qhl;
      var $cy;
      var $__tmp_marker=__stackBase__;
      var $cnt;
      var $dtmp=(__stackBase__)+(4);
      var $__xr;
      var $__a;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $adjust;
      var $dinv=(__stackBase__)+(12);
      var $__tmp_marker1=(__stackBase__)+(16);
      var $n2p2;
      var $d2p3;
      var $cy4;
      var $cnt5;
      var $__xr6;
      var $__a7;
      var $__n8;
      var $__dst9;
      var $__src10;
      var $__x11;
      var $_v;
      var $_p;
      var $_t1;
      var $_t0;
      var $_mask;
      var $_dummy;
      var $__d1;
      var $__d0;
      var $__q1;
      var $__q0;
      var $__r1;
      var $__r0;
      var $__m;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $itch;
      var $scratch;
      var $__n12;
      var $__dst13;
      var $__src14;
      var $__x15;
      var $qn;
      var $n2p16;
      var $d2p17;
      var $tp;
      var $cy18;
      var $in;
      var $rn;
      var $quotient_too_large;
      var $cnt19;
      var $__n20;
      var $__dst21;
      var $__src22;
      var $__x23;
      var $__xr24;
      var $__a25;
      var $__n26;
      var $__dst27;
      var $__src28;
      var $__x29;
      var $q0;
      var $r0;
      var $__d130;
      var $__d031;
      var $__q132;
      var $__q033;
      var $__r134;
      var $__r035;
      var $__m36;
      var $_v37;
      var $_p38;
      var $_t139;
      var $_t040;
      var $_mask41;
      var $_dummy42;
      var $__d143;
      var $__d044;
      var $__q145;
      var $__q046;
      var $__r147;
      var $__r048;
      var $__m49;
      var $__x050;
      var $__x151;
      var $__x252;
      var $__x353;
      var $__ul54;
      var $__vl55;
      var $__uh56;
      var $__vh57;
      var $__u58;
      var $__v59;
      var $itch60;
      var $scratch61;
      var $r2p;
      var $__n62;
      var $__dst63;
      var $__src64;
      var $__x65;
      var $dl;
      var $x;
      var $h;
      var $dummy;
      var $__x066;
      var $__x167;
      var $__x268;
      var $__x369;
      var $__ul70;
      var $__vl71;
      var $__uh72;
      var $__vh73;
      var $__u74;
      var $__v75;
      var $cy76;
      var $__x77;
      var $__p;
      var $cy1;
      var $cy2;
      var $__n78;
      var $__dst79;
      var $__src80;
      var $__x81;
      var $__n82;
      var $__dst83;
      var $__src84;
      var $__x85;
      var $__x86;
      var $__p87;
      $1=$qp;
      $2=$rp;
      $3=$qxn;
      $4=$np;
      $5=$nn;
      $6=$dp;
      $7=$dn;
      label = 3; break;
    case 3: 
      var $9=$3;
      var $10=(($9)|0)==0;
      var $11=$10 ^ 1;
      var $12=(($11)&1);
      var $13=(($12)|0)!=0;
      var $14=(($13)&1);
      var $15=($14);
      var $16=(($15)|0)!=0;
      if ($16) { label = 4; break; } else { label = 5; break; }
    case 4: 
      ___gmp_assert_fail(((5249124)|0), 40, ((5249724)|0));
      throw "Reached an unreachable!"
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $30=$7;
      if ((($30)|0)==0) {
        label = 17; break;
      }
      else if ((($30)|0)==1) {
        label = 18; break;
      }
      else if ((($30)|0)==2) {
        label = 19; break;
      }
      else {
      label = 57; break;
      }
      
    case 17: 
      ___gmp_divide_by_zero();
      throw "Reached an unreachable!"
    case 18: 
      var $33=$1;
      var $34=$4;
      var $35=$5;
      var $36=$6;
      var $37=(($36)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=___gmpn_divrem_1($33, 0, $34, $35, $38);
      var $40=$2;
      var $41=(($40)|0);
      HEAP32[(($41)>>2)]=$39;
      label = 400; break;
    case 19: 
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $43=$6;
      var $44=(($43+4)|0);
      var $45=HEAP32[(($44)>>2)];
      var $46=$45 & -2147483648;
      var $47=(($46)|0)==0;
      if ($47) { label = 20; break; } else { label = 31; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $50=$6;
      var $51=(($50+4)|0);
      var $52=HEAP32[(($51)>>2)];
      $__xr=$52;
      var $53=$__xr;
      var $54=(($53)>>>0) < 65536;
      if ($54) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $56=$__xr;
      var $57=(($56)>>>0) < 256;
      var $58=$57 ? 1 : 9;
      var $64 = $58;label = 24; break;
    case 23: 
      var $60=$__xr;
      var $61=(($60)>>>0) < 16777216;
      var $62=$61 ? 17 : 25;
      var $64 = $62;label = 24; break;
    case 24: 
      var $64;
      $__a=$64;
      var $65=$__a;
      var $66=(((33)-($65))|0);
      var $67=$__xr;
      var $68=$__a;
      var $69=$67 >>> (($68)>>>0);
      var $70=((5250424+$69)|0);
      var $71=HEAP8[($70)];
      var $72=(($71)&255);
      var $73=((($66)-($72))|0);
      $cnt=$73;
      label = 25; break;
    case 25: 
      var $75=$cnt;
      var $76=(($75)|0);
      $cnt=$76;
      var $77=(($dtmp)|0);
      $d2p=$77;
      var $78=$6;
      var $79=(($78+4)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$cnt;
      var $82=$80 << $81;
      var $83=$6;
      var $84=(($83)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=$cnt;
      var $87=(((32)-($86))|0);
      var $88=$85 >>> (($87)>>>0);
      var $89=$82 | $88;
      var $90=$d2p;
      var $91=(($90+4)|0);
      HEAP32[(($91)>>2)]=$89;
      var $92=$6;
      var $93=(($92)|0);
      var $94=HEAP32[(($93)>>2)];
      var $95=$cnt;
      var $96=$94 << $95;
      var $97=$d2p;
      var $98=(($97)|0);
      HEAP32[(($98)>>2)]=$96;
      var $99=$5;
      var $100=((($99)+(1))|0);
      var $101=($100<<2);
      var $102=(($101)>>>0) < 65536;
      var $103=(($102)&1);
      var $104=(($103)|0)!=0;
      var $105=(($104)&1);
      var $106=($105);
      var $107=(($106)|0)!=0;
      if ($107) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $109=$5;
      var $110=((($109)+(1))|0);
      var $111=($110<<2);
      var $112=STACKTOP;STACKTOP = (STACKTOP + $111)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $119 = $112;label = 28; break;
    case 27: 
      var $114=$5;
      var $115=((($114)+(1))|0);
      var $116=($115<<2);
      var $117=___gmp_tmp_reentrant_alloc($__tmp_marker, $116);
      var $119 = $117;label = 28; break;
    case 28: 
      var $119;
      var $120=$119;
      $n2p=$120;
      var $121=$n2p;
      var $122=$4;
      var $123=$5;
      var $124=$cnt;
      var $125=___gmpn_lshift($121, $122, $123, $124);
      $cy=$125;
      var $126=$cy;
      var $127=$5;
      var $128=$n2p;
      var $129=(($128+($127<<2))|0);
      HEAP32[(($129)>>2)]=$126;
      var $130=$1;
      var $131=$n2p;
      var $132=$5;
      var $133=$cy;
      var $134=(($133)|0)!=0;
      var $135=(($134)&1);
      var $136=((($132)+($135))|0);
      var $137=$d2p;
      var $138=___gmpn_divrem_2($130, 0, $131, $136, $137);
      $qhl=$138;
      var $139=$cy;
      var $140=(($139)|0)==0;
      if ($140) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $142=$qhl;
      var $143=$5;
      var $144=((($143)-(2))|0);
      var $145=$1;
      var $146=(($145+($144<<2))|0);
      HEAP32[(($146)>>2)]=$142;
      label = 30; break;
    case 30: 
      var $148=$n2p;
      var $149=(($148)|0);
      var $150=HEAP32[(($149)>>2)];
      var $151=$cnt;
      var $152=$150 >>> (($151)>>>0);
      var $153=$n2p;
      var $154=(($153+4)|0);
      var $155=HEAP32[(($154)>>2)];
      var $156=$cnt;
      var $157=(((32)-($156))|0);
      var $158=$155 << $157;
      var $159=$152 | $158;
      var $160=$2;
      var $161=(($160)|0);
      HEAP32[(($161)>>2)]=$159;
      var $162=$n2p;
      var $163=(($162+4)|0);
      var $164=HEAP32[(($163)>>2)];
      var $165=$cnt;
      var $166=$164 >>> (($165)>>>0);
      var $167=$2;
      var $168=(($167+4)|0);
      HEAP32[(($168)>>2)]=$166;
      label = 52; break;
    case 31: 
      var $170=$6;
      $d2p=$170;
      var $171=$5;
      var $172=($171<<2);
      var $173=(($172)>>>0) < 65536;
      var $174=(($173)&1);
      var $175=(($174)|0)!=0;
      var $176=(($175)&1);
      var $177=($176);
      var $178=(($177)|0)!=0;
      if ($178) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $180=$5;
      var $181=($180<<2);
      var $182=STACKTOP;STACKTOP = (STACKTOP + $181)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $188 = $182;label = 34; break;
    case 33: 
      var $184=$5;
      var $185=($184<<2);
      var $186=___gmp_tmp_reentrant_alloc($__tmp_marker, $185);
      var $188 = $186;label = 34; break;
    case 34: 
      var $188;
      var $189=$188;
      $n2p=$189;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $198=$5;
      var $199=(($198)|0)!=0;
      if ($199) { label = 43; break; } else { label = 49; break; }
    case 43: 
      var $201=$5;
      var $202=((($201)-(1))|0);
      $__n=$202;
      var $203=$n2p;
      $__dst=$203;
      var $204=$4;
      $__src=$204;
      var $205=$__src;
      var $206=(($205+4)|0);
      $__src=$206;
      var $207=HEAP32[(($205)>>2)];
      $__x=$207;
      var $208=$__n;
      var $209=(($208)|0)!=0;
      if ($209) { label = 44; break; } else { label = 48; break; }
    case 44: 
      label = 45; break;
    case 45: 
      var $212=$__x;
      var $213=$__dst;
      var $214=(($213+4)|0);
      $__dst=$214;
      HEAP32[(($213)>>2)]=$212;
      var $215=$__src;
      var $216=(($215+4)|0);
      $__src=$216;
      var $217=HEAP32[(($215)>>2)];
      $__x=$217;
      label = 46; break;
    case 46: 
      var $219=$__n;
      var $220=((($219)-(1))|0);
      $__n=$220;
      var $221=(($220)|0)!=0;
      if ($221) { label = 45; break; } else { label = 47; break; }
    case 47: 
      label = 48; break;
    case 48: 
      var $224=$__x;
      var $225=$__dst;
      var $226=(($225+4)|0);
      $__dst=$226;
      HEAP32[(($225)>>2)]=$224;
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $230=$1;
      var $231=$n2p;
      var $232=$5;
      var $233=$d2p;
      var $234=___gmpn_divrem_2($230, 0, $231, $232, $233);
      $qhl=$234;
      var $235=$qhl;
      var $236=$5;
      var $237=((($236)-(2))|0);
      var $238=$1;
      var $239=(($238+($237<<2))|0);
      HEAP32[(($239)>>2)]=$235;
      var $240=$n2p;
      var $241=(($240)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=$2;
      var $244=(($243)|0);
      HEAP32[(($244)>>2)]=$242;
      var $245=$n2p;
      var $246=(($245+4)|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=$2;
      var $249=(($248+4)|0);
      HEAP32[(($249)>>2)]=$247;
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $252=HEAP32[(($__tmp_marker)>>2)];
      var $253=(($252)|0)!=0;
      var $254=(($253)&1);
      var $255=(($254)|0)!=0;
      var $256=(($255)&1);
      var $257=($256);
      var $258=(($257)|0)!=0;
      if ($258) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $260=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($260);
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 400; break;
    case 57: 
      HEAP32[(($__tmp_marker1)>>2)]=0;
      var $264=$5;
      var $265=((($264)-(1))|0);
      var $266=$4;
      var $267=(($266+($265<<2))|0);
      var $268=HEAP32[(($267)>>2)];
      var $269=$7;
      var $270=((($269)-(1))|0);
      var $271=$6;
      var $272=(($271+($270<<2))|0);
      var $273=HEAP32[(($272)>>2)];
      var $274=(($268)>>>0) >= (($273)>>>0);
      var $275=(($274)&1);
      $adjust=$275;
      var $276=$5;
      var $277=$adjust;
      var $278=((($276)+($277))|0);
      var $279=$7;
      var $280=($279<<1);
      var $281=(($278)|0) >= (($280)|0);
      if ($281) { label = 58; break; } else { label = 165; break; }
    case 58: 
      var $283=$5;
      var $284=$7;
      var $285=((($283)-($284))|0);
      var $286=$1;
      var $287=(($286+($285<<2))|0);
      HEAP32[(($287)>>2)]=0;
      var $288=$7;
      var $289=((($288)-(1))|0);
      var $290=$6;
      var $291=(($290+($289<<2))|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=$292 & -2147483648;
      var $294=(($293)|0)==0;
      if ($294) { label = 59; break; } else { label = 71; break; }
    case 59: 
      label = 60; break;
    case 60: 
      var $297=$7;
      var $298=((($297)-(1))|0);
      var $299=$6;
      var $300=(($299+($298<<2))|0);
      var $301=HEAP32[(($300)>>2)];
      $__xr6=$301;
      var $302=$__xr6;
      var $303=(($302)>>>0) < 65536;
      if ($303) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $305=$__xr6;
      var $306=(($305)>>>0) < 256;
      var $307=$306 ? 1 : 9;
      var $313 = $307;label = 63; break;
    case 62: 
      var $309=$__xr6;
      var $310=(($309)>>>0) < 16777216;
      var $311=$310 ? 17 : 25;
      var $313 = $311;label = 63; break;
    case 63: 
      var $313;
      $__a7=$313;
      var $314=$__a7;
      var $315=(((33)-($314))|0);
      var $316=$__xr6;
      var $317=$__a7;
      var $318=$316 >>> (($317)>>>0);
      var $319=((5250424+$318)|0);
      var $320=HEAP8[($319)];
      var $321=(($320)&255);
      var $322=((($315)-($321))|0);
      $cnt5=$322;
      label = 64; break;
    case 64: 
      var $324=$cnt5;
      var $325=(($324)|0);
      $cnt5=$325;
      var $326=$7;
      var $327=($326<<2);
      var $328=(($327)>>>0) < 65536;
      var $329=(($328)&1);
      var $330=(($329)|0)!=0;
      var $331=(($330)&1);
      var $332=($331);
      var $333=(($332)|0)!=0;
      if ($333) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $335=$7;
      var $336=($335<<2);
      var $337=STACKTOP;STACKTOP = (STACKTOP + $336)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $343 = $337;label = 67; break;
    case 66: 
      var $339=$7;
      var $340=($339<<2);
      var $341=___gmp_tmp_reentrant_alloc($__tmp_marker1, $340);
      var $343 = $341;label = 67; break;
    case 67: 
      var $343;
      var $344=$343;
      $d2p3=$344;
      var $345=$d2p3;
      var $346=$6;
      var $347=$7;
      var $348=$cnt5;
      var $349=___gmpn_lshift($345, $346, $347, $348);
      var $350=$5;
      var $351=((($350)+(1))|0);
      var $352=($351<<2);
      var $353=(($352)>>>0) < 65536;
      var $354=(($353)&1);
      var $355=(($354)|0)!=0;
      var $356=(($355)&1);
      var $357=($356);
      var $358=(($357)|0)!=0;
      if ($358) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $360=$5;
      var $361=((($360)+(1))|0);
      var $362=($361<<2);
      var $363=STACKTOP;STACKTOP = (STACKTOP + $362)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $370 = $363;label = 70; break;
    case 69: 
      var $365=$5;
      var $366=((($365)+(1))|0);
      var $367=($366<<2);
      var $368=___gmp_tmp_reentrant_alloc($__tmp_marker1, $367);
      var $370 = $368;label = 70; break;
    case 70: 
      var $370;
      var $371=$370;
      $n2p2=$371;
      var $372=$n2p2;
      var $373=$4;
      var $374=$5;
      var $375=$cnt5;
      var $376=___gmpn_lshift($372, $373, $374, $375);
      $cy4=$376;
      var $377=$cy4;
      var $378=$5;
      var $379=$n2p2;
      var $380=(($379+($378<<2))|0);
      HEAP32[(($380)>>2)]=$377;
      var $381=$adjust;
      var $382=$5;
      var $383=((($382)+($381))|0);
      $5=$383;
      label = 92; break;
    case 71: 
      $cnt5=0;
      var $385=$6;
      $d2p3=$385;
      var $386=$5;
      var $387=((($386)+(1))|0);
      var $388=($387<<2);
      var $389=(($388)>>>0) < 65536;
      var $390=(($389)&1);
      var $391=(($390)|0)!=0;
      var $392=(($391)&1);
      var $393=($392);
      var $394=(($393)|0)!=0;
      if ($394) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $396=$5;
      var $397=((($396)+(1))|0);
      var $398=($397<<2);
      var $399=STACKTOP;STACKTOP = (STACKTOP + $398)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $406 = $399;label = 74; break;
    case 73: 
      var $401=$5;
      var $402=((($401)+(1))|0);
      var $403=($402<<2);
      var $404=___gmp_tmp_reentrant_alloc($__tmp_marker1, $403);
      var $406 = $404;label = 74; break;
    case 74: 
      var $406;
      var $407=$406;
      $n2p2=$407;
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $416=$5;
      var $417=(($416)|0)!=0;
      if ($417) { label = 83; break; } else { label = 89; break; }
    case 83: 
      var $419=$5;
      var $420=((($419)-(1))|0);
      $__n8=$420;
      var $421=$n2p2;
      $__dst9=$421;
      var $422=$4;
      $__src10=$422;
      var $423=$__src10;
      var $424=(($423+4)|0);
      $__src10=$424;
      var $425=HEAP32[(($423)>>2)];
      $__x11=$425;
      var $426=$__n8;
      var $427=(($426)|0)!=0;
      if ($427) { label = 84; break; } else { label = 88; break; }
    case 84: 
      label = 85; break;
    case 85: 
      var $430=$__x11;
      var $431=$__dst9;
      var $432=(($431+4)|0);
      $__dst9=$432;
      HEAP32[(($431)>>2)]=$430;
      var $433=$__src10;
      var $434=(($433+4)|0);
      $__src10=$434;
      var $435=HEAP32[(($433)>>2)];
      $__x11=$435;
      label = 86; break;
    case 86: 
      var $437=$__n8;
      var $438=((($437)-(1))|0);
      $__n8=$438;
      var $439=(($438)|0)!=0;
      if ($439) { label = 85; break; } else { label = 87; break; }
    case 87: 
      label = 88; break;
    case 88: 
      var $442=$__x11;
      var $443=$__dst9;
      var $444=(($443+4)|0);
      $__dst9=$444;
      HEAP32[(($443)>>2)]=$442;
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $448=$5;
      var $449=$n2p2;
      var $450=(($449+($448<<2))|0);
      HEAP32[(($450)>>2)]=0;
      var $451=$adjust;
      var $452=$5;
      var $453=((($452)+($451))|0);
      $5=$453;
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      var $464=$7;
      var $465=((($464)-(1))|0);
      var $466=$d2p3;
      var $467=(($466+($465<<2))|0);
      var $468=HEAP32[(($467)>>2)];
      var $469=$468 >>> 16;
      $__d1=$469;
      var $470=$7;
      var $471=((($470)-(1))|0);
      var $472=$d2p3;
      var $473=(($472+($471<<2))|0);
      var $474=HEAP32[(($473)>>2)];
      var $475=$474 & 65535;
      $__d0=$475;
      var $476=$7;
      var $477=((($476)-(1))|0);
      var $478=$d2p3;
      var $479=(($478+($477<<2))|0);
      var $480=HEAP32[(($479)>>2)];
      var $481=$480 ^ -1;
      var $482=$__d1;
      var $483=Math.floor(((($481)>>>0))/((($482)>>>0)));
      $__q1=$483;
      var $484=$7;
      var $485=((($484)-(1))|0);
      var $486=$d2p3;
      var $487=(($486+($485<<2))|0);
      var $488=HEAP32[(($487)>>2)];
      var $489=$488 ^ -1;
      var $490=$__q1;
      var $491=$__d1;
      var $492=Math.imul($490,$491);
      var $493=((($489)-($492))|0);
      $__r1=$493;
      var $494=$__q1;
      var $495=$__d0;
      var $496=Math.imul($494,$495);
      $__m=$496;
      var $497=$__r1;
      var $498=($497<<16);
      var $499=$498 | 65535;
      $__r1=$499;
      var $500=$__r1;
      var $501=$__m;
      var $502=(($500)>>>0) < (($501)>>>0);
      if ($502) { label = 102; break; } else { label = 107; break; }
    case 102: 
      var $504=$__q1;
      var $505=((($504)-(1))|0);
      $__q1=$505;
      var $506=$7;
      var $507=((($506)-(1))|0);
      var $508=$d2p3;
      var $509=(($508+($507<<2))|0);
      var $510=HEAP32[(($509)>>2)];
      var $511=$__r1;
      var $512=((($511)+($510))|0);
      $__r1=$512;
      var $513=$__r1;
      var $514=$7;
      var $515=((($514)-(1))|0);
      var $516=$d2p3;
      var $517=(($516+($515<<2))|0);
      var $518=HEAP32[(($517)>>2)];
      var $519=(($513)>>>0) >= (($518)>>>0);
      if ($519) { label = 103; break; } else { label = 106; break; }
    case 103: 
      var $521=$__r1;
      var $522=$__m;
      var $523=(($521)>>>0) < (($522)>>>0);
      if ($523) { label = 104; break; } else { label = 105; break; }
    case 104: 
      var $525=$__q1;
      var $526=((($525)-(1))|0);
      $__q1=$526;
      var $527=$7;
      var $528=((($527)-(1))|0);
      var $529=$d2p3;
      var $530=(($529+($528<<2))|0);
      var $531=HEAP32[(($530)>>2)];
      var $532=$__r1;
      var $533=((($532)+($531))|0);
      $__r1=$533;
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      var $537=$__m;
      var $538=$__r1;
      var $539=((($538)-($537))|0);
      $__r1=$539;
      var $540=$__r1;
      var $541=$__d1;
      var $542=Math.floor(((($540)>>>0))/((($541)>>>0)));
      $__q0=$542;
      var $543=$__r1;
      var $544=$__q0;
      var $545=$__d1;
      var $546=Math.imul($544,$545);
      var $547=((($543)-($546))|0);
      $__r0=$547;
      var $548=$__q0;
      var $549=$__d0;
      var $550=Math.imul($548,$549);
      $__m=$550;
      var $551=$__r0;
      var $552=($551<<16);
      var $553=$552 | 65535;
      $__r0=$553;
      var $554=$__r0;
      var $555=$__m;
      var $556=(($554)>>>0) < (($555)>>>0);
      if ($556) { label = 108; break; } else { label = 113; break; }
    case 108: 
      var $558=$__q0;
      var $559=((($558)-(1))|0);
      $__q0=$559;
      var $560=$7;
      var $561=((($560)-(1))|0);
      var $562=$d2p3;
      var $563=(($562+($561<<2))|0);
      var $564=HEAP32[(($563)>>2)];
      var $565=$__r0;
      var $566=((($565)+($564))|0);
      $__r0=$566;
      var $567=$__r0;
      var $568=$7;
      var $569=((($568)-(1))|0);
      var $570=$d2p3;
      var $571=(($570+($569<<2))|0);
      var $572=HEAP32[(($571)>>2)];
      var $573=(($567)>>>0) >= (($572)>>>0);
      if ($573) { label = 109; break; } else { label = 112; break; }
    case 109: 
      var $575=$__r0;
      var $576=$__m;
      var $577=(($575)>>>0) < (($576)>>>0);
      if ($577) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $579=$__q0;
      var $580=((($579)-(1))|0);
      $__q0=$580;
      var $581=$7;
      var $582=((($581)-(1))|0);
      var $583=$d2p3;
      var $584=(($583+($582<<2))|0);
      var $585=HEAP32[(($584)>>2)];
      var $586=$__r0;
      var $587=((($586)+($585))|0);
      $__r0=$587;
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      var $591=$__m;
      var $592=$__r0;
      var $593=((($592)-($591))|0);
      $__r0=$593;
      var $594=$__q1;
      var $595=($594<<16);
      var $596=$__q0;
      var $597=$595 | $596;
      $_v=$597;
      var $598=$__r0;
      $_dummy=$598;
      label = 114; break;
    case 114: 
      label = 115; break;
    case 115: 
      var $601=$7;
      var $602=((($601)-(1))|0);
      var $603=$d2p3;
      var $604=(($603+($602<<2))|0);
      var $605=HEAP32[(($604)>>2)];
      var $606=$_v;
      var $607=Math.imul($605,$606);
      $_p=$607;
      var $608=$7;
      var $609=((($608)-(2))|0);
      var $610=$d2p3;
      var $611=(($610+($609<<2))|0);
      var $612=HEAP32[(($611)>>2)];
      var $613=$_p;
      var $614=((($613)+($612))|0);
      $_p=$614;
      var $615=$_p;
      var $616=$7;
      var $617=((($616)-(2))|0);
      var $618=$d2p3;
      var $619=(($618+($617<<2))|0);
      var $620=HEAP32[(($619)>>2)];
      var $621=(($615)>>>0) < (($620)>>>0);
      if ($621) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $623=$_v;
      var $624=((($623)-(1))|0);
      $_v=$624;
      var $625=$_p;
      var $626=$7;
      var $627=((($626)-(1))|0);
      var $628=$d2p3;
      var $629=(($628+($627<<2))|0);
      var $630=HEAP32[(($629)>>2)];
      var $631=(($625)>>>0) >= (($630)>>>0);
      var $632=(($631)&1);
      var $633=(((-$632))|0);
      $_mask=$633;
      var $634=$7;
      var $635=((($634)-(1))|0);
      var $636=$d2p3;
      var $637=(($636+($635<<2))|0);
      var $638=HEAP32[(($637)>>2)];
      var $639=$_p;
      var $640=((($639)-($638))|0);
      $_p=$640;
      var $641=$_mask;
      var $642=$_v;
      var $643=((($642)+($641))|0);
      $_v=$643;
      var $644=$_mask;
      var $645=$7;
      var $646=((($645)-(1))|0);
      var $647=$d2p3;
      var $648=(($647+($646<<2))|0);
      var $649=HEAP32[(($648)>>2)];
      var $650=$644 & $649;
      var $651=$_p;
      var $652=((($651)-($650))|0);
      $_p=$652;
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      var $655=$7;
      var $656=((($655)-(2))|0);
      var $657=$d2p3;
      var $658=(($657+($656<<2))|0);
      var $659=HEAP32[(($658)>>2)];
      $__u=$659;
      var $660=$_v;
      $__v=$660;
      var $661=$__u;
      var $662=$661 & 65535;
      $__ul=$662;
      var $663=$__u;
      var $664=$663 >>> 16;
      $__uh=$664;
      var $665=$__v;
      var $666=$665 & 65535;
      $__vl=$666;
      var $667=$__v;
      var $668=$667 >>> 16;
      $__vh=$668;
      var $669=$__ul;
      var $670=$__vl;
      var $671=Math.imul($669,$670);
      $__x0=$671;
      var $672=$__ul;
      var $673=$__vh;
      var $674=Math.imul($672,$673);
      $__x1=$674;
      var $675=$__uh;
      var $676=$__vl;
      var $677=Math.imul($675,$676);
      $__x2=$677;
      var $678=$__uh;
      var $679=$__vh;
      var $680=Math.imul($678,$679);
      $__x3=$680;
      var $681=$__x0;
      var $682=$681 >>> 16;
      var $683=$__x1;
      var $684=((($683)+($682))|0);
      $__x1=$684;
      var $685=$__x2;
      var $686=$__x1;
      var $687=((($686)+($685))|0);
      $__x1=$687;
      var $688=$__x1;
      var $689=$__x2;
      var $690=(($688)>>>0) < (($689)>>>0);
      if ($690) { label = 119; break; } else { label = 120; break; }
    case 119: 
      var $692=$__x3;
      var $693=((($692)+(65536))|0);
      $__x3=$693;
      label = 120; break;
    case 120: 
      var $695=$__x3;
      var $696=$__x1;
      var $697=$696 >>> 16;
      var $698=((($695)+($697))|0);
      $_t1=$698;
      var $699=$__x1;
      var $700=$699 << 16;
      var $701=$__x0;
      var $702=$701 & 65535;
      var $703=((($700)+($702))|0);
      $_t0=$703;
      label = 121; break;
    case 121: 
      var $705=$_t1;
      var $706=$_p;
      var $707=((($706)+($705))|0);
      $_p=$707;
      var $708=$_p;
      var $709=$_t1;
      var $710=(($708)>>>0) < (($709)>>>0);
      if ($710) { label = 122; break; } else { label = 128; break; }
    case 122: 
      var $712=$_v;
      var $713=((($712)-(1))|0);
      $_v=$713;
      var $714=$_p;
      var $715=$7;
      var $716=((($715)-(1))|0);
      var $717=$d2p3;
      var $718=(($717+($716<<2))|0);
      var $719=HEAP32[(($718)>>2)];
      var $720=(($714)>>>0) >= (($719)>>>0);
      var $721=(($720)&1);
      var $722=(($721)|0)!=0;
      var $723=(($722)&1);
      var $724=($723);
      var $725=(($724)|0)!=0;
      if ($725) { label = 123; break; } else { label = 127; break; }
    case 123: 
      var $727=$_p;
      var $728=$7;
      var $729=((($728)-(1))|0);
      var $730=$d2p3;
      var $731=(($730+($729<<2))|0);
      var $732=HEAP32[(($731)>>2)];
      var $733=(($727)>>>0) > (($732)>>>0);
      if ($733) { label = 125; break; } else { label = 124; break; }
    case 124: 
      var $735=$_t0;
      var $736=$7;
      var $737=((($736)-(2))|0);
      var $738=$d2p3;
      var $739=(($738+($737<<2))|0);
      var $740=HEAP32[(($739)>>2)];
      var $741=(($735)>>>0) >= (($740)>>>0);
      if ($741) { label = 125; break; } else { label = 126; break; }
    case 125: 
      var $743=$_v;
      var $744=((($743)-(1))|0);
      $_v=$744;
      label = 126; break;
    case 126: 
      label = 127; break;
    case 127: 
      label = 128; break;
    case 128: 
      var $748=$_v;
      var $749=(($dinv)|0);
      HEAP32[(($749)>>2)]=$748;
      label = 129; break;
    case 129: 
      var $751=$7;
      var $752=(($751)|0) >= 50;
      if ($752) { label = 131; break; } else { label = 130; break; }
    case 130: 
      var $754=$1;
      var $755=$n2p2;
      var $756=$5;
      var $757=$d2p3;
      var $758=$7;
      var $759=(($dinv)|0);
      var $760=HEAP32[(($759)>>2)];
      var $761=___gmpn_sbpi1_div_qr($754, $755, $756, $757, $758, $760);
      label = 140; break;
    case 131: 
      var $763=$7;
      var $764=(($763)|0) >= 200;
      if ($764) { label = 132; break; } else { label = 134; break; }
    case 132: 
      var $766=$5;
      var $767=(($766)|0) >= 4000;
      if ($767) { label = 133; break; } else { label = 134; break; }
    case 133: 
      var $769=$7;
      var $770=(($769)|0);
      var $771=($770)*(3600);
      var $772=$5;
      var $773=(($772)|0);
      var $774=($773)*(200);
      var $775=($771)+($774);
      var $776=$7;
      var $777=(($776)|0);
      var $778=$5;
      var $779=(($778)|0);
      var $780=($777)*($779);
      var $781=$775 > $780;
      if ($781) { label = 134; break; } else { label = 135; break; }
    case 134: 
      var $783=$1;
      var $784=$n2p2;
      var $785=$5;
      var $786=$d2p3;
      var $787=$7;
      var $788=___gmpn_dcpi1_div_qr($783, $784, $785, $786, $787, $dinv);
      label = 139; break;
    case 135: 
      var $790=$5;
      var $791=$7;
      var $792=___gmpn_mu_div_qr_itch($790, $791, 0);
      $itch=$792;
      var $793=$itch;
      var $794=($793<<2);
      var $795=(($794)>>>0) < 65536;
      var $796=(($795)&1);
      var $797=(($796)|0)!=0;
      var $798=(($797)&1);
      var $799=($798);
      var $800=(($799)|0)!=0;
      if ($800) { label = 136; break; } else { label = 137; break; }
    case 136: 
      var $802=$itch;
      var $803=($802<<2);
      var $804=STACKTOP;STACKTOP = (STACKTOP + $803)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $810 = $804;label = 138; break;
    case 137: 
      var $806=$itch;
      var $807=($806<<2);
      var $808=___gmp_tmp_reentrant_alloc($__tmp_marker1, $807);
      var $810 = $808;label = 138; break;
    case 138: 
      var $810;
      var $811=$810;
      $scratch=$811;
      var $812=$1;
      var $813=$2;
      var $814=$n2p2;
      var $815=$5;
      var $816=$d2p3;
      var $817=$7;
      var $818=$scratch;
      var $819=___gmpn_mu_div_qr($812, $813, $814, $815, $816, $817, $818);
      var $820=$2;
      $n2p2=$820;
      label = 139; break;
    case 139: 
      label = 140; break;
    case 140: 
      var $823=$cnt5;
      var $824=(($823)|0)!=0;
      if ($824) { label = 141; break; } else { label = 142; break; }
    case 141: 
      var $826=$2;
      var $827=$n2p2;
      var $828=$7;
      var $829=$cnt5;
      var $830=___gmpn_rshift($826, $827, $828, $829);
      label = 160; break;
    case 142: 
      label = 143; break;
    case 143: 
      label = 144; break;
    case 144: 
      label = 145; break;
    case 145: 
      label = 146; break;
    case 146: 
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      label = 149; break;
    case 149: 
      label = 150; break;
    case 150: 
      var $840=$7;
      var $841=(($840)|0)!=0;
      if ($841) { label = 151; break; } else { label = 157; break; }
    case 151: 
      var $843=$7;
      var $844=((($843)-(1))|0);
      $__n12=$844;
      var $845=$2;
      $__dst13=$845;
      var $846=$n2p2;
      $__src14=$846;
      var $847=$__src14;
      var $848=(($847+4)|0);
      $__src14=$848;
      var $849=HEAP32[(($847)>>2)];
      $__x15=$849;
      var $850=$__n12;
      var $851=(($850)|0)!=0;
      if ($851) { label = 152; break; } else { label = 156; break; }
    case 152: 
      label = 153; break;
    case 153: 
      var $854=$__x15;
      var $855=$__dst13;
      var $856=(($855+4)|0);
      $__dst13=$856;
      HEAP32[(($855)>>2)]=$854;
      var $857=$__src14;
      var $858=(($857+4)|0);
      $__src14=$858;
      var $859=HEAP32[(($857)>>2)];
      $__x15=$859;
      label = 154; break;
    case 154: 
      var $861=$__n12;
      var $862=((($861)-(1))|0);
      $__n12=$862;
      var $863=(($862)|0)!=0;
      if ($863) { label = 153; break; } else { label = 155; break; }
    case 155: 
      label = 156; break;
    case 156: 
      var $866=$__x15;
      var $867=$__dst13;
      var $868=(($867+4)|0);
      $__dst13=$868;
      HEAP32[(($867)>>2)]=$866;
      label = 157; break;
    case 157: 
      label = 158; break;
    case 158: 
      label = 159; break;
    case 159: 
      label = 160; break;
    case 160: 
      label = 161; break;
    case 161: 
      var $874=HEAP32[(($__tmp_marker1)>>2)];
      var $875=(($874)|0)!=0;
      var $876=(($875)&1);
      var $877=(($876)|0)!=0;
      var $878=(($877)&1);
      var $879=($878);
      var $880=(($879)|0)!=0;
      if ($880) { label = 162; break; } else { label = 163; break; }
    case 162: 
      var $882=HEAP32[(($__tmp_marker1)>>2)];
      ___gmp_tmp_reentrant_free($882);
      label = 163; break;
    case 163: 
      label = 164; break;
    case 164: 
      label = 400; break;
    case 165: 
      var $886=$5;
      var $887=$7;
      var $888=((($886)-($887))|0);
      $qn=$888;
      var $889=$qn;
      var $890=$1;
      var $891=(($890+($889<<2))|0);
      HEAP32[(($891)>>2)]=0;
      var $892=$adjust;
      var $893=$qn;
      var $894=((($893)+($892))|0);
      $qn=$894;
      var $895=$qn;
      var $896=(($895)|0)==0;
      if ($896) { label = 166; break; } else { label = 188; break; }
    case 166: 
      label = 167; break;
    case 167: 
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      label = 170; break;
    case 170: 
      label = 171; break;
    case 171: 
      label = 172; break;
    case 172: 
      label = 173; break;
    case 173: 
      label = 174; break;
    case 174: 
      var $906=$7;
      var $907=(($906)|0)!=0;
      if ($907) { label = 175; break; } else { label = 181; break; }
    case 175: 
      var $909=$7;
      var $910=((($909)-(1))|0);
      $__n20=$910;
      var $911=$2;
      $__dst21=$911;
      var $912=$4;
      $__src22=$912;
      var $913=$__src22;
      var $914=(($913+4)|0);
      $__src22=$914;
      var $915=HEAP32[(($913)>>2)];
      $__x23=$915;
      var $916=$__n20;
      var $917=(($916)|0)!=0;
      if ($917) { label = 176; break; } else { label = 180; break; }
    case 176: 
      label = 177; break;
    case 177: 
      var $920=$__x23;
      var $921=$__dst21;
      var $922=(($921+4)|0);
      $__dst21=$922;
      HEAP32[(($921)>>2)]=$920;
      var $923=$__src22;
      var $924=(($923+4)|0);
      $__src22=$924;
      var $925=HEAP32[(($923)>>2)];
      $__x23=$925;
      label = 178; break;
    case 178: 
      var $927=$__n20;
      var $928=((($927)-(1))|0);
      $__n20=$928;
      var $929=(($928)|0)!=0;
      if ($929) { label = 177; break; } else { label = 179; break; }
    case 179: 
      label = 180; break;
    case 180: 
      var $932=$__x23;
      var $933=$__dst21;
      var $934=(($933+4)|0);
      $__dst21=$934;
      HEAP32[(($933)>>2)]=$932;
      label = 181; break;
    case 181: 
      label = 182; break;
    case 182: 
      label = 183; break;
    case 183: 
      label = 184; break;
    case 184: 
      var $939=HEAP32[(($__tmp_marker1)>>2)];
      var $940=(($939)|0)!=0;
      var $941=(($940)&1);
      var $942=(($941)|0)!=0;
      var $943=(($942)&1);
      var $944=($943);
      var $945=(($944)|0)!=0;
      if ($945) { label = 185; break; } else { label = 186; break; }
    case 185: 
      var $947=HEAP32[(($__tmp_marker1)>>2)];
      ___gmp_tmp_reentrant_free($947);
      label = 186; break;
    case 186: 
      label = 187; break;
    case 187: 
      label = 400; break;
    case 188: 
      var $951=$7;
      var $952=$qn;
      var $953=((($951)-($952))|0);
      $in=$953;
      var $954=$7;
      var $955=((($954)-(1))|0);
      var $956=$6;
      var $957=(($956+($955<<2))|0);
      var $958=HEAP32[(($957)>>2)];
      var $959=$958 & -2147483648;
      var $960=(($959)|0)==0;
      if ($960) { label = 189; break; } else { label = 204; break; }
    case 189: 
      label = 190; break;
    case 190: 
      var $963=$7;
      var $964=((($963)-(1))|0);
      var $965=$6;
      var $966=(($965+($964<<2))|0);
      var $967=HEAP32[(($966)>>2)];
      $__xr24=$967;
      var $968=$__xr24;
      var $969=(($968)>>>0) < 65536;
      if ($969) { label = 191; break; } else { label = 192; break; }
    case 191: 
      var $971=$__xr24;
      var $972=(($971)>>>0) < 256;
      var $973=$972 ? 1 : 9;
      var $979 = $973;label = 193; break;
    case 192: 
      var $975=$__xr24;
      var $976=(($975)>>>0) < 16777216;
      var $977=$976 ? 17 : 25;
      var $979 = $977;label = 193; break;
    case 193: 
      var $979;
      $__a25=$979;
      var $980=$__a25;
      var $981=(((33)-($980))|0);
      var $982=$__xr24;
      var $983=$__a25;
      var $984=$982 >>> (($983)>>>0);
      var $985=((5250424+$984)|0);
      var $986=HEAP8[($985)];
      var $987=(($986)&255);
      var $988=((($981)-($987))|0);
      $cnt19=$988;
      label = 194; break;
    case 194: 
      var $990=$cnt19;
      var $991=(($990)|0);
      $cnt19=$991;
      var $992=$qn;
      var $993=($992<<2);
      var $994=(($993)>>>0) < 65536;
      var $995=(($994)&1);
      var $996=(($995)|0)!=0;
      var $997=(($996)&1);
      var $998=($997);
      var $999=(($998)|0)!=0;
      if ($999) { label = 195; break; } else { label = 196; break; }
    case 195: 
      var $1001=$qn;
      var $1002=($1001<<2);
      var $1003=STACKTOP;STACKTOP = (STACKTOP + $1002)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1009 = $1003;label = 197; break;
    case 196: 
      var $1005=$qn;
      var $1006=($1005<<2);
      var $1007=___gmp_tmp_reentrant_alloc($__tmp_marker1, $1006);
      var $1009 = $1007;label = 197; break;
    case 197: 
      var $1009;
      var $1010=$1009;
      $d2p17=$1010;
      var $1011=$d2p17;
      var $1012=$6;
      var $1013=$in;
      var $1014=(($1012+($1013<<2))|0);
      var $1015=$qn;
      var $1016=$cnt19;
      var $1017=___gmpn_lshift($1011, $1014, $1015, $1016);
      var $1018=$in;
      var $1019=((($1018)-(1))|0);
      var $1020=$6;
      var $1021=(($1020+($1019<<2))|0);
      var $1022=HEAP32[(($1021)>>2)];
      var $1023=$cnt19;
      var $1024=(((32)-($1023))|0);
      var $1025=$1022 >>> (($1024)>>>0);
      var $1026=$d2p17;
      var $1027=(($1026)|0);
      var $1028=HEAP32[(($1027)>>2)];
      var $1029=$1028 | $1025;
      HEAP32[(($1027)>>2)]=$1029;
      var $1030=$qn;
      var $1031=($1030<<1);
      var $1032=((($1031)+(1))|0);
      var $1033=($1032<<2);
      var $1034=(($1033)>>>0) < 65536;
      var $1035=(($1034)&1);
      var $1036=(($1035)|0)!=0;
      var $1037=(($1036)&1);
      var $1038=($1037);
      var $1039=(($1038)|0)!=0;
      if ($1039) { label = 198; break; } else { label = 199; break; }
    case 198: 
      var $1041=$qn;
      var $1042=($1041<<1);
      var $1043=((($1042)+(1))|0);
      var $1044=($1043<<2);
      var $1045=STACKTOP;STACKTOP = (STACKTOP + $1044)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1053 = $1045;label = 200; break;
    case 199: 
      var $1047=$qn;
      var $1048=($1047<<1);
      var $1049=((($1048)+(1))|0);
      var $1050=($1049<<2);
      var $1051=___gmp_tmp_reentrant_alloc($__tmp_marker1, $1050);
      var $1053 = $1051;label = 200; break;
    case 200: 
      var $1053;
      var $1054=$1053;
      $n2p16=$1054;
      var $1055=$n2p16;
      var $1056=$4;
      var $1057=$5;
      var $1058=(($1056+($1057<<2))|0);
      var $1059=$qn;
      var $1060=($1059<<1);
      var $1061=(((-$1060))|0);
      var $1062=(($1058+($1061<<2))|0);
      var $1063=$qn;
      var $1064=($1063<<1);
      var $1065=$cnt19;
      var $1066=___gmpn_lshift($1055, $1062, $1064, $1065);
      $cy18=$1066;
      var $1067=$adjust;
      var $1068=(($1067)|0)!=0;
      if ($1068) { label = 201; break; } else { label = 202; break; }
    case 201: 
      var $1070=$cy18;
      var $1071=$qn;
      var $1072=($1071<<1);
      var $1073=$n2p16;
      var $1074=(($1073+($1072<<2))|0);
      HEAP32[(($1074)>>2)]=$1070;
      var $1075=$n2p16;
      var $1076=(($1075+4)|0);
      $n2p16=$1076;
      label = 203; break;
    case 202: 
      var $1078=$5;
      var $1079=$qn;
      var $1080=($1079<<1);
      var $1081=((($1078)-($1080))|0);
      var $1082=((($1081)-(1))|0);
      var $1083=$4;
      var $1084=(($1083+($1082<<2))|0);
      var $1085=HEAP32[(($1084)>>2)];
      var $1086=$cnt19;
      var $1087=(((32)-($1086))|0);
      var $1088=$1085 >>> (($1087)>>>0);
      var $1089=$n2p16;
      var $1090=(($1089)|0);
      var $1091=HEAP32[(($1090)>>2)];
      var $1092=$1091 | $1088;
      HEAP32[(($1090)>>2)]=$1092;
      label = 203; break;
    case 203: 
      label = 227; break;
    case 204: 
      $cnt19=0;
      var $1095=$6;
      var $1096=$in;
      var $1097=(($1095+($1096<<2))|0);
      $d2p17=$1097;
      var $1098=$qn;
      var $1099=($1098<<1);
      var $1100=((($1099)+(1))|0);
      var $1101=($1100<<2);
      var $1102=(($1101)>>>0) < 65536;
      var $1103=(($1102)&1);
      var $1104=(($1103)|0)!=0;
      var $1105=(($1104)&1);
      var $1106=($1105);
      var $1107=(($1106)|0)!=0;
      if ($1107) { label = 205; break; } else { label = 206; break; }
    case 205: 
      var $1109=$qn;
      var $1110=($1109<<1);
      var $1111=((($1110)+(1))|0);
      var $1112=($1111<<2);
      var $1113=STACKTOP;STACKTOP = (STACKTOP + $1112)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1121 = $1113;label = 207; break;
    case 206: 
      var $1115=$qn;
      var $1116=($1115<<1);
      var $1117=((($1116)+(1))|0);
      var $1118=($1117<<2);
      var $1119=___gmp_tmp_reentrant_alloc($__tmp_marker1, $1118);
      var $1121 = $1119;label = 207; break;
    case 207: 
      var $1121;
      var $1122=$1121;
      $n2p16=$1122;
      label = 208; break;
    case 208: 
      label = 209; break;
    case 209: 
      label = 210; break;
    case 210: 
      label = 211; break;
    case 211: 
      label = 212; break;
    case 212: 
      label = 213; break;
    case 213: 
      label = 214; break;
    case 214: 
      label = 215; break;
    case 215: 
      var $1131=$qn;
      var $1132=($1131<<1);
      var $1133=(($1132)|0)!=0;
      if ($1133) { label = 216; break; } else { label = 222; break; }
    case 216: 
      var $1135=$qn;
      var $1136=($1135<<1);
      var $1137=((($1136)-(1))|0);
      $__n26=$1137;
      var $1138=$n2p16;
      $__dst27=$1138;
      var $1139=$4;
      var $1140=$5;
      var $1141=(($1139+($1140<<2))|0);
      var $1142=$qn;
      var $1143=($1142<<1);
      var $1144=(((-$1143))|0);
      var $1145=(($1141+($1144<<2))|0);
      $__src28=$1145;
      var $1146=$__src28;
      var $1147=(($1146+4)|0);
      $__src28=$1147;
      var $1148=HEAP32[(($1146)>>2)];
      $__x29=$1148;
      var $1149=$__n26;
      var $1150=(($1149)|0)!=0;
      if ($1150) { label = 217; break; } else { label = 221; break; }
    case 217: 
      label = 218; break;
    case 218: 
      var $1153=$__x29;
      var $1154=$__dst27;
      var $1155=(($1154+4)|0);
      $__dst27=$1155;
      HEAP32[(($1154)>>2)]=$1153;
      var $1156=$__src28;
      var $1157=(($1156+4)|0);
      $__src28=$1157;
      var $1158=HEAP32[(($1156)>>2)];
      $__x29=$1158;
      label = 219; break;
    case 219: 
      var $1160=$__n26;
      var $1161=((($1160)-(1))|0);
      $__n26=$1161;
      var $1162=(($1161)|0)!=0;
      if ($1162) { label = 218; break; } else { label = 220; break; }
    case 220: 
      label = 221; break;
    case 221: 
      var $1165=$__x29;
      var $1166=$__dst27;
      var $1167=(($1166+4)|0);
      $__dst27=$1167;
      HEAP32[(($1166)>>2)]=$1165;
      label = 222; break;
    case 222: 
      label = 223; break;
    case 223: 
      label = 224; break;
    case 224: 
      var $1171=$adjust;
      var $1172=(($1171)|0)!=0;
      if ($1172) { label = 225; break; } else { label = 226; break; }
    case 225: 
      var $1174=$qn;
      var $1175=($1174<<1);
      var $1176=$n2p16;
      var $1177=(($1176+($1175<<2))|0);
      HEAP32[(($1177)>>2)]=0;
      var $1178=$n2p16;
      var $1179=(($1178+4)|0);
      $n2p16=$1179;
      label = 226; break;
    case 226: 
      label = 227; break;
    case 227: 
      var $1182=$qn;
      var $1183=(($1182)|0)==1;
      if ($1183) { label = 228; break; } else { label = 247; break; }
    case 228: 
      label = 229; break;
    case 229: 
      label = 230; break;
    case 230: 
      label = 231; break;
    case 231: 
      label = 232; break;
    case 232: 
      label = 233; break;
    case 233: 
      var $1190=$d2p17;
      var $1191=(($1190)|0);
      var $1192=HEAP32[(($1191)>>2)];
      var $1193=$1192 << 0;
      var $1194=$1193 >>> 16;
      $__d130=$1194;
      var $1195=$d2p17;
      var $1196=(($1195)|0);
      var $1197=HEAP32[(($1196)>>2)];
      var $1198=$1197 << 0;
      var $1199=$1198 & 65535;
      $__d031=$1199;
      var $1200=$n2p16;
      var $1201=(($1200+4)|0);
      var $1202=HEAP32[(($1201)>>2)];
      var $1203=$__d130;
      var $1204=Math.floor(((($1202)>>>0))/((($1203)>>>0)));
      $__q132=$1204;
      var $1205=$n2p16;
      var $1206=(($1205+4)|0);
      var $1207=HEAP32[(($1206)>>2)];
      var $1208=$__q132;
      var $1209=$__d130;
      var $1210=Math.imul($1208,$1209);
      var $1211=((($1207)-($1210))|0);
      $__r134=$1211;
      var $1212=$__q132;
      var $1213=$__d031;
      var $1214=Math.imul($1212,$1213);
      $__m36=$1214;
      var $1215=$__r134;
      var $1216=($1215<<16);
      var $1217=$n2p16;
      var $1218=(($1217)|0);
      var $1219=HEAP32[(($1218)>>2)];
      var $1220=$1219 << 0;
      var $1221=$1220 >>> 16;
      var $1222=$1216 | $1221;
      $__r134=$1222;
      var $1223=$__r134;
      var $1224=$__m36;
      var $1225=(($1223)>>>0) < (($1224)>>>0);
      if ($1225) { label = 234; break; } else { label = 239; break; }
    case 234: 
      var $1227=$__q132;
      var $1228=((($1227)-(1))|0);
      $__q132=$1228;
      var $1229=$d2p17;
      var $1230=(($1229)|0);
      var $1231=HEAP32[(($1230)>>2)];
      var $1232=$1231 << 0;
      var $1233=$__r134;
      var $1234=((($1233)+($1232))|0);
      $__r134=$1234;
      var $1235=$__r134;
      var $1236=$d2p17;
      var $1237=(($1236)|0);
      var $1238=HEAP32[(($1237)>>2)];
      var $1239=$1238 << 0;
      var $1240=(($1235)>>>0) >= (($1239)>>>0);
      if ($1240) { label = 235; break; } else { label = 238; break; }
    case 235: 
      var $1242=$__r134;
      var $1243=$__m36;
      var $1244=(($1242)>>>0) < (($1243)>>>0);
      if ($1244) { label = 236; break; } else { label = 237; break; }
    case 236: 
      var $1246=$__q132;
      var $1247=((($1246)-(1))|0);
      $__q132=$1247;
      var $1248=$d2p17;
      var $1249=(($1248)|0);
      var $1250=HEAP32[(($1249)>>2)];
      var $1251=$1250 << 0;
      var $1252=$__r134;
      var $1253=((($1252)+($1251))|0);
      $__r134=$1253;
      label = 237; break;
    case 237: 
      label = 238; break;
    case 238: 
      label = 239; break;
    case 239: 
      var $1257=$__m36;
      var $1258=$__r134;
      var $1259=((($1258)-($1257))|0);
      $__r134=$1259;
      var $1260=$__r134;
      var $1261=$__d130;
      var $1262=Math.floor(((($1260)>>>0))/((($1261)>>>0)));
      $__q033=$1262;
      var $1263=$__r134;
      var $1264=$__q033;
      var $1265=$__d130;
      var $1266=Math.imul($1264,$1265);
      var $1267=((($1263)-($1266))|0);
      $__r035=$1267;
      var $1268=$__q033;
      var $1269=$__d031;
      var $1270=Math.imul($1268,$1269);
      $__m36=$1270;
      var $1271=$__r035;
      var $1272=($1271<<16);
      var $1273=$n2p16;
      var $1274=(($1273)|0);
      var $1275=HEAP32[(($1274)>>2)];
      var $1276=$1275 << 0;
      var $1277=$1276 & 65535;
      var $1278=$1272 | $1277;
      $__r035=$1278;
      var $1279=$__r035;
      var $1280=$__m36;
      var $1281=(($1279)>>>0) < (($1280)>>>0);
      if ($1281) { label = 240; break; } else { label = 245; break; }
    case 240: 
      var $1283=$__q033;
      var $1284=((($1283)-(1))|0);
      $__q033=$1284;
      var $1285=$d2p17;
      var $1286=(($1285)|0);
      var $1287=HEAP32[(($1286)>>2)];
      var $1288=$1287 << 0;
      var $1289=$__r035;
      var $1290=((($1289)+($1288))|0);
      $__r035=$1290;
      var $1291=$__r035;
      var $1292=$d2p17;
      var $1293=(($1292)|0);
      var $1294=HEAP32[(($1293)>>2)];
      var $1295=$1294 << 0;
      var $1296=(($1291)>>>0) >= (($1295)>>>0);
      if ($1296) { label = 241; break; } else { label = 244; break; }
    case 241: 
      var $1298=$__r035;
      var $1299=$__m36;
      var $1300=(($1298)>>>0) < (($1299)>>>0);
      if ($1300) { label = 242; break; } else { label = 243; break; }
    case 242: 
      var $1302=$__q033;
      var $1303=((($1302)-(1))|0);
      $__q033=$1303;
      var $1304=$d2p17;
      var $1305=(($1304)|0);
      var $1306=HEAP32[(($1305)>>2)];
      var $1307=$1306 << 0;
      var $1308=$__r035;
      var $1309=((($1308)+($1307))|0);
      $__r035=$1309;
      label = 243; break;
    case 243: 
      label = 244; break;
    case 244: 
      label = 245; break;
    case 245: 
      var $1313=$__m36;
      var $1314=$__r035;
      var $1315=((($1314)-($1313))|0);
      $__r035=$1315;
      var $1316=$__q132;
      var $1317=($1316<<16);
      var $1318=$__q033;
      var $1319=$1317 | $1318;
      $q0=$1319;
      var $1320=$__r035;
      $r0=$1320;
      label = 246; break;
    case 246: 
      var $1322=$r0;
      var $1323=$1322 >>> 0;
      var $1324=$n2p16;
      var $1325=(($1324)|0);
      HEAP32[(($1325)>>2)]=$1323;
      var $1326=$q0;
      var $1327=$1;
      var $1328=(($1327)|0);
      HEAP32[(($1328)>>2)]=$1326;
      label = 316; break;
    case 247: 
      var $1330=$qn;
      var $1331=(($1330)|0)==2;
      if ($1331) { label = 248; break; } else { label = 249; break; }
    case 248: 
      var $1333=$1;
      var $1334=$n2p16;
      var $1335=$d2p17;
      var $1336=___gmpn_divrem_2($1333, 0, $1334, 4, $1335);
      label = 315; break;
    case 249: 
      label = 250; break;
    case 250: 
      label = 251; break;
    case 251: 
      label = 252; break;
    case 252: 
      label = 253; break;
    case 253: 
      label = 254; break;
    case 254: 
      label = 255; break;
    case 255: 
      label = 256; break;
    case 256: 
      label = 257; break;
    case 257: 
      label = 258; break;
    case 258: 
      var $1347=$qn;
      var $1348=((($1347)-(1))|0);
      var $1349=$d2p17;
      var $1350=(($1349+($1348<<2))|0);
      var $1351=HEAP32[(($1350)>>2)];
      var $1352=$1351 >>> 16;
      $__d143=$1352;
      var $1353=$qn;
      var $1354=((($1353)-(1))|0);
      var $1355=$d2p17;
      var $1356=(($1355+($1354<<2))|0);
      var $1357=HEAP32[(($1356)>>2)];
      var $1358=$1357 & 65535;
      $__d044=$1358;
      var $1359=$qn;
      var $1360=((($1359)-(1))|0);
      var $1361=$d2p17;
      var $1362=(($1361+($1360<<2))|0);
      var $1363=HEAP32[(($1362)>>2)];
      var $1364=$1363 ^ -1;
      var $1365=$__d143;
      var $1366=Math.floor(((($1364)>>>0))/((($1365)>>>0)));
      $__q145=$1366;
      var $1367=$qn;
      var $1368=((($1367)-(1))|0);
      var $1369=$d2p17;
      var $1370=(($1369+($1368<<2))|0);
      var $1371=HEAP32[(($1370)>>2)];
      var $1372=$1371 ^ -1;
      var $1373=$__q145;
      var $1374=$__d143;
      var $1375=Math.imul($1373,$1374);
      var $1376=((($1372)-($1375))|0);
      $__r147=$1376;
      var $1377=$__q145;
      var $1378=$__d044;
      var $1379=Math.imul($1377,$1378);
      $__m49=$1379;
      var $1380=$__r147;
      var $1381=($1380<<16);
      var $1382=$1381 | 65535;
      $__r147=$1382;
      var $1383=$__r147;
      var $1384=$__m49;
      var $1385=(($1383)>>>0) < (($1384)>>>0);
      if ($1385) { label = 259; break; } else { label = 264; break; }
    case 259: 
      var $1387=$__q145;
      var $1388=((($1387)-(1))|0);
      $__q145=$1388;
      var $1389=$qn;
      var $1390=((($1389)-(1))|0);
      var $1391=$d2p17;
      var $1392=(($1391+($1390<<2))|0);
      var $1393=HEAP32[(($1392)>>2)];
      var $1394=$__r147;
      var $1395=((($1394)+($1393))|0);
      $__r147=$1395;
      var $1396=$__r147;
      var $1397=$qn;
      var $1398=((($1397)-(1))|0);
      var $1399=$d2p17;
      var $1400=(($1399+($1398<<2))|0);
      var $1401=HEAP32[(($1400)>>2)];
      var $1402=(($1396)>>>0) >= (($1401)>>>0);
      if ($1402) { label = 260; break; } else { label = 263; break; }
    case 260: 
      var $1404=$__r147;
      var $1405=$__m49;
      var $1406=(($1404)>>>0) < (($1405)>>>0);
      if ($1406) { label = 261; break; } else { label = 262; break; }
    case 261: 
      var $1408=$__q145;
      var $1409=((($1408)-(1))|0);
      $__q145=$1409;
      var $1410=$qn;
      var $1411=((($1410)-(1))|0);
      var $1412=$d2p17;
      var $1413=(($1412+($1411<<2))|0);
      var $1414=HEAP32[(($1413)>>2)];
      var $1415=$__r147;
      var $1416=((($1415)+($1414))|0);
      $__r147=$1416;
      label = 262; break;
    case 262: 
      label = 263; break;
    case 263: 
      label = 264; break;
    case 264: 
      var $1420=$__m49;
      var $1421=$__r147;
      var $1422=((($1421)-($1420))|0);
      $__r147=$1422;
      var $1423=$__r147;
      var $1424=$__d143;
      var $1425=Math.floor(((($1423)>>>0))/((($1424)>>>0)));
      $__q046=$1425;
      var $1426=$__r147;
      var $1427=$__q046;
      var $1428=$__d143;
      var $1429=Math.imul($1427,$1428);
      var $1430=((($1426)-($1429))|0);
      $__r048=$1430;
      var $1431=$__q046;
      var $1432=$__d044;
      var $1433=Math.imul($1431,$1432);
      $__m49=$1433;
      var $1434=$__r048;
      var $1435=($1434<<16);
      var $1436=$1435 | 65535;
      $__r048=$1436;
      var $1437=$__r048;
      var $1438=$__m49;
      var $1439=(($1437)>>>0) < (($1438)>>>0);
      if ($1439) { label = 265; break; } else { label = 270; break; }
    case 265: 
      var $1441=$__q046;
      var $1442=((($1441)-(1))|0);
      $__q046=$1442;
      var $1443=$qn;
      var $1444=((($1443)-(1))|0);
      var $1445=$d2p17;
      var $1446=(($1445+($1444<<2))|0);
      var $1447=HEAP32[(($1446)>>2)];
      var $1448=$__r048;
      var $1449=((($1448)+($1447))|0);
      $__r048=$1449;
      var $1450=$__r048;
      var $1451=$qn;
      var $1452=((($1451)-(1))|0);
      var $1453=$d2p17;
      var $1454=(($1453+($1452<<2))|0);
      var $1455=HEAP32[(($1454)>>2)];
      var $1456=(($1450)>>>0) >= (($1455)>>>0);
      if ($1456) { label = 266; break; } else { label = 269; break; }
    case 266: 
      var $1458=$__r048;
      var $1459=$__m49;
      var $1460=(($1458)>>>0) < (($1459)>>>0);
      if ($1460) { label = 267; break; } else { label = 268; break; }
    case 267: 
      var $1462=$__q046;
      var $1463=((($1462)-(1))|0);
      $__q046=$1463;
      var $1464=$qn;
      var $1465=((($1464)-(1))|0);
      var $1466=$d2p17;
      var $1467=(($1466+($1465<<2))|0);
      var $1468=HEAP32[(($1467)>>2)];
      var $1469=$__r048;
      var $1470=((($1469)+($1468))|0);
      $__r048=$1470;
      label = 268; break;
    case 268: 
      label = 269; break;
    case 269: 
      label = 270; break;
    case 270: 
      var $1474=$__m49;
      var $1475=$__r048;
      var $1476=((($1475)-($1474))|0);
      $__r048=$1476;
      var $1477=$__q145;
      var $1478=($1477<<16);
      var $1479=$__q046;
      var $1480=$1478 | $1479;
      $_v37=$1480;
      var $1481=$__r048;
      $_dummy42=$1481;
      label = 271; break;
    case 271: 
      label = 272; break;
    case 272: 
      var $1484=$qn;
      var $1485=((($1484)-(1))|0);
      var $1486=$d2p17;
      var $1487=(($1486+($1485<<2))|0);
      var $1488=HEAP32[(($1487)>>2)];
      var $1489=$_v37;
      var $1490=Math.imul($1488,$1489);
      $_p38=$1490;
      var $1491=$qn;
      var $1492=((($1491)-(2))|0);
      var $1493=$d2p17;
      var $1494=(($1493+($1492<<2))|0);
      var $1495=HEAP32[(($1494)>>2)];
      var $1496=$_p38;
      var $1497=((($1496)+($1495))|0);
      $_p38=$1497;
      var $1498=$_p38;
      var $1499=$qn;
      var $1500=((($1499)-(2))|0);
      var $1501=$d2p17;
      var $1502=(($1501+($1500<<2))|0);
      var $1503=HEAP32[(($1502)>>2)];
      var $1504=(($1498)>>>0) < (($1503)>>>0);
      if ($1504) { label = 273; break; } else { label = 274; break; }
    case 273: 
      var $1506=$_v37;
      var $1507=((($1506)-(1))|0);
      $_v37=$1507;
      var $1508=$_p38;
      var $1509=$qn;
      var $1510=((($1509)-(1))|0);
      var $1511=$d2p17;
      var $1512=(($1511+($1510<<2))|0);
      var $1513=HEAP32[(($1512)>>2)];
      var $1514=(($1508)>>>0) >= (($1513)>>>0);
      var $1515=(($1514)&1);
      var $1516=(((-$1515))|0);
      $_mask41=$1516;
      var $1517=$qn;
      var $1518=((($1517)-(1))|0);
      var $1519=$d2p17;
      var $1520=(($1519+($1518<<2))|0);
      var $1521=HEAP32[(($1520)>>2)];
      var $1522=$_p38;
      var $1523=((($1522)-($1521))|0);
      $_p38=$1523;
      var $1524=$_mask41;
      var $1525=$_v37;
      var $1526=((($1525)+($1524))|0);
      $_v37=$1526;
      var $1527=$_mask41;
      var $1528=$qn;
      var $1529=((($1528)-(1))|0);
      var $1530=$d2p17;
      var $1531=(($1530+($1529<<2))|0);
      var $1532=HEAP32[(($1531)>>2)];
      var $1533=$1527 & $1532;
      var $1534=$_p38;
      var $1535=((($1534)-($1533))|0);
      $_p38=$1535;
      label = 274; break;
    case 274: 
      label = 275; break;
    case 275: 
      var $1538=$qn;
      var $1539=((($1538)-(2))|0);
      var $1540=$d2p17;
      var $1541=(($1540+($1539<<2))|0);
      var $1542=HEAP32[(($1541)>>2)];
      $__u58=$1542;
      var $1543=$_v37;
      $__v59=$1543;
      var $1544=$__u58;
      var $1545=$1544 & 65535;
      $__ul54=$1545;
      var $1546=$__u58;
      var $1547=$1546 >>> 16;
      $__uh56=$1547;
      var $1548=$__v59;
      var $1549=$1548 & 65535;
      $__vl55=$1549;
      var $1550=$__v59;
      var $1551=$1550 >>> 16;
      $__vh57=$1551;
      var $1552=$__ul54;
      var $1553=$__vl55;
      var $1554=Math.imul($1552,$1553);
      $__x050=$1554;
      var $1555=$__ul54;
      var $1556=$__vh57;
      var $1557=Math.imul($1555,$1556);
      $__x151=$1557;
      var $1558=$__uh56;
      var $1559=$__vl55;
      var $1560=Math.imul($1558,$1559);
      $__x252=$1560;
      var $1561=$__uh56;
      var $1562=$__vh57;
      var $1563=Math.imul($1561,$1562);
      $__x353=$1563;
      var $1564=$__x050;
      var $1565=$1564 >>> 16;
      var $1566=$__x151;
      var $1567=((($1566)+($1565))|0);
      $__x151=$1567;
      var $1568=$__x252;
      var $1569=$__x151;
      var $1570=((($1569)+($1568))|0);
      $__x151=$1570;
      var $1571=$__x151;
      var $1572=$__x252;
      var $1573=(($1571)>>>0) < (($1572)>>>0);
      if ($1573) { label = 276; break; } else { label = 277; break; }
    case 276: 
      var $1575=$__x353;
      var $1576=((($1575)+(65536))|0);
      $__x353=$1576;
      label = 277; break;
    case 277: 
      var $1578=$__x353;
      var $1579=$__x151;
      var $1580=$1579 >>> 16;
      var $1581=((($1578)+($1580))|0);
      $_t139=$1581;
      var $1582=$__x151;
      var $1583=$1582 << 16;
      var $1584=$__x050;
      var $1585=$1584 & 65535;
      var $1586=((($1583)+($1585))|0);
      $_t040=$1586;
      label = 278; break;
    case 278: 
      var $1588=$_t139;
      var $1589=$_p38;
      var $1590=((($1589)+($1588))|0);
      $_p38=$1590;
      var $1591=$_p38;
      var $1592=$_t139;
      var $1593=(($1591)>>>0) < (($1592)>>>0);
      if ($1593) { label = 279; break; } else { label = 285; break; }
    case 279: 
      var $1595=$_v37;
      var $1596=((($1595)-(1))|0);
      $_v37=$1596;
      var $1597=$_p38;
      var $1598=$qn;
      var $1599=((($1598)-(1))|0);
      var $1600=$d2p17;
      var $1601=(($1600+($1599<<2))|0);
      var $1602=HEAP32[(($1601)>>2)];
      var $1603=(($1597)>>>0) >= (($1602)>>>0);
      var $1604=(($1603)&1);
      var $1605=(($1604)|0)!=0;
      var $1606=(($1605)&1);
      var $1607=($1606);
      var $1608=(($1607)|0)!=0;
      if ($1608) { label = 280; break; } else { label = 284; break; }
    case 280: 
      var $1610=$_p38;
      var $1611=$qn;
      var $1612=((($1611)-(1))|0);
      var $1613=$d2p17;
      var $1614=(($1613+($1612<<2))|0);
      var $1615=HEAP32[(($1614)>>2)];
      var $1616=(($1610)>>>0) > (($1615)>>>0);
      if ($1616) { label = 282; break; } else { label = 281; break; }
    case 281: 
      var $1618=$_t040;
      var $1619=$qn;
      var $1620=((($1619)-(2))|0);
      var $1621=$d2p17;
      var $1622=(($1621+($1620<<2))|0);
      var $1623=HEAP32[(($1622)>>2)];
      var $1624=(($1618)>>>0) >= (($1623)>>>0);
      if ($1624) { label = 282; break; } else { label = 283; break; }
    case 282: 
      var $1626=$_v37;
      var $1627=((($1626)-(1))|0);
      $_v37=$1627;
      label = 283; break;
    case 283: 
      label = 284; break;
    case 284: 
      label = 285; break;
    case 285: 
      var $1631=$_v37;
      var $1632=(($dinv)|0);
      HEAP32[(($1632)>>2)]=$1631;
      label = 286; break;
    case 286: 
      var $1634=$qn;
      var $1635=(($1634)|0) >= 50;
      if ($1635) { label = 288; break; } else { label = 287; break; }
    case 287: 
      var $1637=$1;
      var $1638=$n2p16;
      var $1639=$qn;
      var $1640=($1639<<1);
      var $1641=$d2p17;
      var $1642=$qn;
      var $1643=(($dinv)|0);
      var $1644=HEAP32[(($1643)>>2)];
      var $1645=___gmpn_sbpi1_div_qr($1637, $1638, $1640, $1641, $1642, $1644);
      label = 314; break;
    case 288: 
      var $1647=$qn;
      var $1648=(($1647)|0) >= 2000;
      if ($1648) { label = 290; break; } else { label = 289; break; }
    case 289: 
      var $1650=$1;
      var $1651=$n2p16;
      var $1652=$qn;
      var $1653=($1652<<1);
      var $1654=$d2p17;
      var $1655=$qn;
      var $1656=___gmpn_dcpi1_div_qr($1650, $1651, $1653, $1654, $1655, $dinv);
      label = 313; break;
    case 290: 
      var $1658=$qn;
      var $1659=($1658<<1);
      var $1660=$qn;
      var $1661=___gmpn_mu_div_qr_itch($1659, $1660, 0);
      $itch60=$1661;
      var $1662=$itch60;
      var $1663=($1662<<2);
      var $1664=(($1663)>>>0) < 65536;
      var $1665=(($1664)&1);
      var $1666=(($1665)|0)!=0;
      var $1667=(($1666)&1);
      var $1668=($1667);
      var $1669=(($1668)|0)!=0;
      if ($1669) { label = 291; break; } else { label = 292; break; }
    case 291: 
      var $1671=$itch60;
      var $1672=($1671<<2);
      var $1673=STACKTOP;STACKTOP = (STACKTOP + $1672)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1679 = $1673;label = 293; break;
    case 292: 
      var $1675=$itch60;
      var $1676=($1675<<2);
      var $1677=___gmp_tmp_reentrant_alloc($__tmp_marker1, $1676);
      var $1679 = $1677;label = 293; break;
    case 293: 
      var $1679;
      var $1680=$1679;
      $scratch61=$1680;
      var $1681=$2;
      $r2p=$1681;
      var $1682=$4;
      var $1683=$r2p;
      var $1684=(($1682)|0)==(($1683)|0);
      if ($1684) { label = 294; break; } else { label = 295; break; }
    case 294: 
      var $1686=$5;
      var $1687=$qn;
      var $1688=((($1686)-($1687))|0);
      var $1689=$r2p;
      var $1690=(($1689+($1688<<2))|0);
      $r2p=$1690;
      label = 295; break;
    case 295: 
      var $1692=$1;
      var $1693=$r2p;
      var $1694=$n2p16;
      var $1695=$qn;
      var $1696=($1695<<1);
      var $1697=$d2p17;
      var $1698=$qn;
      var $1699=$scratch61;
      var $1700=___gmpn_mu_div_qr($1692, $1693, $1694, $1696, $1697, $1698, $1699);
      label = 296; break;
    case 296: 
      label = 297; break;
    case 297: 
      label = 298; break;
    case 298: 
      label = 299; break;
    case 299: 
      label = 300; break;
    case 300: 
      label = 301; break;
    case 301: 
      label = 302; break;
    case 302: 
      label = 303; break;
    case 303: 
      var $1709=$qn;
      var $1710=(($1709)|0)!=0;
      if ($1710) { label = 304; break; } else { label = 310; break; }
    case 304: 
      var $1712=$qn;
      var $1713=((($1712)-(1))|0);
      $__n62=$1713;
      var $1714=$n2p16;
      $__dst63=$1714;
      var $1715=$r2p;
      $__src64=$1715;
      var $1716=$__src64;
      var $1717=(($1716+4)|0);
      $__src64=$1717;
      var $1718=HEAP32[(($1716)>>2)];
      $__x65=$1718;
      var $1719=$__n62;
      var $1720=(($1719)|0)!=0;
      if ($1720) { label = 305; break; } else { label = 309; break; }
    case 305: 
      label = 306; break;
    case 306: 
      var $1723=$__x65;
      var $1724=$__dst63;
      var $1725=(($1724+4)|0);
      $__dst63=$1725;
      HEAP32[(($1724)>>2)]=$1723;
      var $1726=$__src64;
      var $1727=(($1726+4)|0);
      $__src64=$1727;
      var $1728=HEAP32[(($1726)>>2)];
      $__x65=$1728;
      label = 307; break;
    case 307: 
      var $1730=$__n62;
      var $1731=((($1730)-(1))|0);
      $__n62=$1731;
      var $1732=(($1731)|0)!=0;
      if ($1732) { label = 306; break; } else { label = 308; break; }
    case 308: 
      label = 309; break;
    case 309: 
      var $1735=$__x65;
      var $1736=$__dst63;
      var $1737=(($1736+4)|0);
      $__dst63=$1737;
      HEAP32[(($1736)>>2)]=$1735;
      label = 310; break;
    case 310: 
      label = 311; break;
    case 311: 
      label = 312; break;
    case 312: 
      label = 313; break;
    case 313: 
      label = 314; break;
    case 314: 
      label = 315; break;
    case 315: 
      label = 316; break;
    case 316: 
      var $1745=$qn;
      $rn=$1745;
      var $1746=$in;
      var $1747=((($1746)-(2))|0);
      var $1748=(($1747)|0) < 0;
      if ($1748) { label = 317; break; } else { label = 318; break; }
    case 317: 
      $dl=0;
      label = 319; break;
    case 318: 
      var $1751=$in;
      var $1752=((($1751)-(2))|0);
      var $1753=$6;
      var $1754=(($1753+($1752<<2))|0);
      var $1755=HEAP32[(($1754)>>2)];
      $dl=$1755;
      label = 319; break;
    case 319: 
      var $1757=$in;
      var $1758=((($1757)-(1))|0);
      var $1759=$6;
      var $1760=(($1759+($1758<<2))|0);
      var $1761=HEAP32[(($1760)>>2)];
      var $1762=$cnt19;
      var $1763=$1761 << $1762;
      var $1764=$dl;
      var $1765=$1764 >>> 1;
      var $1766=$cnt19;
      var $1767=$1766 ^ -1;
      var $1768=((($1767)>>>0))%(32);
      var $1769=$1765 >>> (($1768)>>>0);
      var $1770=$1763 | $1769;
      $x=$1770;
      label = 320; break;
    case 320: 
      var $1772=$x;
      $__u74=$1772;
      var $1773=$qn;
      var $1774=((($1773)-(1))|0);
      var $1775=$1;
      var $1776=(($1775+($1774<<2))|0);
      var $1777=HEAP32[(($1776)>>2)];
      var $1778=$1777 << 0;
      $__v75=$1778;
      var $1779=$__u74;
      var $1780=$1779 & 65535;
      $__ul70=$1780;
      var $1781=$__u74;
      var $1782=$1781 >>> 16;
      $__uh72=$1782;
      var $1783=$__v75;
      var $1784=$1783 & 65535;
      $__vl71=$1784;
      var $1785=$__v75;
      var $1786=$1785 >>> 16;
      $__vh73=$1786;
      var $1787=$__ul70;
      var $1788=$__vl71;
      var $1789=Math.imul($1787,$1788);
      $__x066=$1789;
      var $1790=$__ul70;
      var $1791=$__vh73;
      var $1792=Math.imul($1790,$1791);
      $__x167=$1792;
      var $1793=$__uh72;
      var $1794=$__vl71;
      var $1795=Math.imul($1793,$1794);
      $__x268=$1795;
      var $1796=$__uh72;
      var $1797=$__vh73;
      var $1798=Math.imul($1796,$1797);
      $__x369=$1798;
      var $1799=$__x066;
      var $1800=$1799 >>> 16;
      var $1801=$__x167;
      var $1802=((($1801)+($1800))|0);
      $__x167=$1802;
      var $1803=$__x268;
      var $1804=$__x167;
      var $1805=((($1804)+($1803))|0);
      $__x167=$1805;
      var $1806=$__x167;
      var $1807=$__x268;
      var $1808=(($1806)>>>0) < (($1807)>>>0);
      if ($1808) { label = 321; break; } else { label = 322; break; }
    case 321: 
      var $1810=$__x369;
      var $1811=((($1810)+(65536))|0);
      $__x369=$1811;
      label = 322; break;
    case 322: 
      var $1813=$__x369;
      var $1814=$__x167;
      var $1815=$1814 >>> 16;
      var $1816=((($1813)+($1815))|0);
      $h=$1816;
      var $1817=$__x167;
      var $1818=$1817 << 16;
      var $1819=$__x066;
      var $1820=$1819 & 65535;
      var $1821=((($1818)+($1820))|0);
      $dummy=$1821;
      label = 323; break;
    case 323: 
      var $1823=$qn;
      var $1824=((($1823)-(1))|0);
      var $1825=$n2p16;
      var $1826=(($1825+($1824<<2))|0);
      var $1827=HEAP32[(($1826)>>2)];
      var $1828=$h;
      var $1829=(($1827)>>>0) < (($1828)>>>0);
      if ($1829) { label = 324; break; } else { label = 332; break; }
    case 324: 
      label = 325; break;
    case 325: 
      var $1832=$1;
      $__p=$1832;
      label = 326; break;
    case 326: 
      var $1834=$__p;
      var $1835=(($1834+4)|0);
      $__p=$1835;
      var $1836=HEAP32[(($1834)>>2)];
      var $1837=((($1836)-(1))|0);
      HEAP32[(($1834)>>2)]=$1837;
      var $1838=(($1836)|0)==0;
      if ($1838) { label = 327; break; } else { label = 328; break; }
    case 327: 
      label = 326; break;
    case 328: 
      label = 329; break;
    case 329: 
      var $1842=$n2p16;
      var $1843=$n2p16;
      var $1844=$d2p17;
      var $1845=$qn;
      var $1846=___gmpn_add_n($1842, $1843, $1844, $1845);
      $cy76=$1846;
      var $1847=$cy76;
      var $1848=(($1847)|0)!=0;
      if ($1848) { label = 330; break; } else { label = 331; break; }
    case 330: 
      var $1850=$cy76;
      var $1851=$qn;
      var $1852=$n2p16;
      var $1853=(($1852+($1851<<2))|0);
      HEAP32[(($1853)>>2)]=$1850;
      var $1854=$rn;
      var $1855=((($1854)+(1))|0);
      $rn=$1855;
      label = 331; break;
    case 331: 
      label = 332; break;
    case 332: 
      $quotient_too_large=0;
      var $1858=$cnt19;
      var $1859=(($1858)|0)!=0;
      if ($1859) { label = 333; break; } else { label = 341; break; }
    case 333: 
      var $1861=$n2p16;
      var $1862=$n2p16;
      var $1863=$rn;
      var $1864=$cnt19;
      var $1865=(((32)-($1864))|0);
      var $1866=___gmpn_lshift($1861, $1862, $1863, $1865);
      $cy1=$1866;
      var $1867=$in;
      var $1868=((($1867)-(1))|0);
      var $1869=$4;
      var $1870=(($1869+($1868<<2))|0);
      var $1871=HEAP32[(($1870)>>2)];
      var $1872=$cnt19;
      var $1873=-1 >>> (($1872)>>>0);
      var $1874=$1871 & $1873;
      var $1875=$n2p16;
      var $1876=(($1875)|0);
      var $1877=HEAP32[(($1876)>>2)];
      var $1878=$1877 | $1874;
      HEAP32[(($1876)>>2)]=$1878;
      var $1879=$n2p16;
      var $1880=$1;
      var $1881=$qn;
      var $1882=$in;
      var $1883=((($1882)-(1))|0);
      var $1884=$6;
      var $1885=(($1884+($1883<<2))|0);
      var $1886=HEAP32[(($1885)>>2)];
      var $1887=$cnt19;
      var $1888=-1 >>> (($1887)>>>0);
      var $1889=$1886 & $1888;
      var $1890=___gmpn_submul_1($1879, $1880, $1881, $1889);
      $cy2=$1890;
      var $1891=$qn;
      var $1892=$rn;
      var $1893=(($1891)|0)!=(($1892)|0);
      if ($1893) { label = 334; break; } else { label = 339; break; }
    case 334: 
      label = 335; break;
    case 335: 
      var $1896=$qn;
      var $1897=$n2p16;
      var $1898=(($1897+($1896<<2))|0);
      var $1899=HEAP32[(($1898)>>2)];
      var $1900=$cy2;
      var $1901=(($1899)>>>0) >= (($1900)>>>0);
      var $1902=$1901 ^ 1;
      var $1903=(($1902)&1);
      var $1904=(($1903)|0)!=0;
      var $1905=(($1904)&1);
      var $1906=($1905);
      var $1907=(($1906)|0)!=0;
      if ($1907) { label = 336; break; } else { label = 337; break; }
    case 336: 
      ___gmp_assert_fail(((5249124)|0), 332, ((5249240)|0));
      throw "Reached an unreachable!"
    case 337: 
      label = 338; break;
    case 338: 
      var $1911=$cy2;
      var $1912=$qn;
      var $1913=$n2p16;
      var $1914=(($1913+($1912<<2))|0);
      var $1915=HEAP32[(($1914)>>2)];
      var $1916=((($1915)-($1911))|0);
      HEAP32[(($1914)>>2)]=$1916;
      label = 340; break;
    case 339: 
      var $1918=$cy1;
      var $1919=$cy2;
      var $1920=((($1918)-($1919))|0);
      var $1921=$qn;
      var $1922=$n2p16;
      var $1923=(($1922+($1921<<2))|0);
      HEAP32[(($1923)>>2)]=$1920;
      var $1924=$cy1;
      var $1925=$cy2;
      var $1926=(($1924)>>>0) < (($1925)>>>0);
      var $1927=(($1926)&1);
      $quotient_too_large=$1927;
      var $1928=$rn;
      var $1929=((($1928)+(1))|0);
      $rn=$1929;
      label = 340; break;
    case 340: 
      var $1931=$in;
      var $1932=((($1931)-(1))|0);
      $in=$1932;
      label = 341; break;
    case 341: 
      var $1934=$7;
      var $1935=($1934<<2);
      var $1936=(($1935)>>>0) < 65536;
      var $1937=(($1936)&1);
      var $1938=(($1937)|0)!=0;
      var $1939=(($1938)&1);
      var $1940=($1939);
      var $1941=(($1940)|0)!=0;
      if ($1941) { label = 342; break; } else { label = 343; break; }
    case 342: 
      var $1943=$7;
      var $1944=($1943<<2);
      var $1945=STACKTOP;STACKTOP = (STACKTOP + $1944)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $1951 = $1945;label = 344; break;
    case 343: 
      var $1947=$7;
      var $1948=($1947<<2);
      var $1949=___gmp_tmp_reentrant_alloc($__tmp_marker1, $1948);
      var $1951 = $1949;label = 344; break;
    case 344: 
      var $1951;
      var $1952=$1951;
      $tp=$1952;
      var $1953=$in;
      var $1954=$qn;
      var $1955=(($1953)|0) < (($1954)|0);
      if ($1955) { label = 345; break; } else { label = 369; break; }
    case 345: 
      var $1957=$in;
      var $1958=(($1957)|0)==0;
      if ($1958) { label = 346; break; } else { label = 368; break; }
    case 346: 
      label = 347; break;
    case 347: 
      label = 348; break;
    case 348: 
      label = 349; break;
    case 349: 
      label = 350; break;
    case 350: 
      label = 351; break;
    case 351: 
      label = 352; break;
    case 352: 
      label = 353; break;
    case 353: 
      label = 354; break;
    case 354: 
      var $1968=$rn;
      var $1969=(($1968)|0)!=0;
      if ($1969) { label = 355; break; } else { label = 361; break; }
    case 355: 
      var $1971=$rn;
      var $1972=((($1971)-(1))|0);
      $__n78=$1972;
      var $1973=$2;
      $__dst79=$1973;
      var $1974=$n2p16;
      $__src80=$1974;
      var $1975=$__src80;
      var $1976=(($1975+4)|0);
      $__src80=$1976;
      var $1977=HEAP32[(($1975)>>2)];
      $__x81=$1977;
      var $1978=$__n78;
      var $1979=(($1978)|0)!=0;
      if ($1979) { label = 356; break; } else { label = 360; break; }
    case 356: 
      label = 357; break;
    case 357: 
      var $1982=$__x81;
      var $1983=$__dst79;
      var $1984=(($1983+4)|0);
      $__dst79=$1984;
      HEAP32[(($1983)>>2)]=$1982;
      var $1985=$__src80;
      var $1986=(($1985+4)|0);
      $__src80=$1986;
      var $1987=HEAP32[(($1985)>>2)];
      $__x81=$1987;
      label = 358; break;
    case 358: 
      var $1989=$__n78;
      var $1990=((($1989)-(1))|0);
      $__n78=$1990;
      var $1991=(($1990)|0)!=0;
      if ($1991) { label = 357; break; } else { label = 359; break; }
    case 359: 
      label = 360; break;
    case 360: 
      var $1994=$__x81;
      var $1995=$__dst79;
      var $1996=(($1995+4)|0);
      $__dst79=$1996;
      HEAP32[(($1995)>>2)]=$1994;
      label = 361; break;
    case 361: 
      label = 362; break;
    case 362: 
      label = 363; break;
    case 363: 
      label = 364; break;
    case 364: 
      var $2001=$rn;
      var $2002=$7;
      var $2003=(($2001)|0)==(($2002)|0);
      var $2004=$2003 ^ 1;
      var $2005=(($2004)&1);
      var $2006=(($2005)|0)!=0;
      var $2007=(($2006)&1);
      var $2008=($2007);
      var $2009=(($2008)|0)!=0;
      if ($2009) { label = 365; break; } else { label = 366; break; }
    case 365: 
      ___gmp_assert_fail(((5249124)|0), 353, ((5248900)|0));
      throw "Reached an unreachable!"
    case 366: 
      label = 367; break;
    case 367: 
      label = 388; break;
    case 368: 
      var $2014=$tp;
      var $2015=$1;
      var $2016=$qn;
      var $2017=$6;
      var $2018=$in;
      var $2019=___gmpn_mul($2014, $2015, $2016, $2017, $2018);
      label = 370; break;
    case 369: 
      var $2021=$tp;
      var $2022=$6;
      var $2023=$in;
      var $2024=$1;
      var $2025=$qn;
      var $2026=___gmpn_mul($2021, $2022, $2023, $2024, $2025);
      label = 370; break;
    case 370: 
      var $2028=$n2p16;
      var $2029=$n2p16;
      var $2030=$rn;
      var $2031=$tp;
      var $2032=$in;
      var $2033=(($2031+($2032<<2))|0);
      var $2034=$qn;
      var $2035=___gmpn_sub($2028, $2029, $2030, $2033, $2034);
      $cy18=$2035;
      label = 371; break;
    case 371: 
      label = 372; break;
    case 372: 
      label = 373; break;
    case 373: 
      label = 374; break;
    case 374: 
      label = 375; break;
    case 375: 
      label = 376; break;
    case 376: 
      label = 377; break;
    case 377: 
      label = 378; break;
    case 378: 
      var $2044=$7;
      var $2045=$in;
      var $2046=((($2044)-($2045))|0);
      var $2047=(($2046)|0)!=0;
      if ($2047) { label = 379; break; } else { label = 385; break; }
    case 379: 
      var $2049=$7;
      var $2050=$in;
      var $2051=((($2049)-($2050))|0);
      var $2052=((($2051)-(1))|0);
      $__n82=$2052;
      var $2053=$2;
      var $2054=$in;
      var $2055=(($2053+($2054<<2))|0);
      $__dst83=$2055;
      var $2056=$n2p16;
      $__src84=$2056;
      var $2057=$__src84;
      var $2058=(($2057+4)|0);
      $__src84=$2058;
      var $2059=HEAP32[(($2057)>>2)];
      $__x85=$2059;
      var $2060=$__n82;
      var $2061=(($2060)|0)!=0;
      if ($2061) { label = 380; break; } else { label = 384; break; }
    case 380: 
      label = 381; break;
    case 381: 
      var $2064=$__x85;
      var $2065=$__dst83;
      var $2066=(($2065+4)|0);
      $__dst83=$2066;
      HEAP32[(($2065)>>2)]=$2064;
      var $2067=$__src84;
      var $2068=(($2067+4)|0);
      $__src84=$2068;
      var $2069=HEAP32[(($2067)>>2)];
      $__x85=$2069;
      label = 382; break;
    case 382: 
      var $2071=$__n82;
      var $2072=((($2071)-(1))|0);
      $__n82=$2072;
      var $2073=(($2072)|0)!=0;
      if ($2073) { label = 381; break; } else { label = 383; break; }
    case 383: 
      label = 384; break;
    case 384: 
      var $2076=$__x85;
      var $2077=$__dst83;
      var $2078=(($2077+4)|0);
      $__dst83=$2078;
      HEAP32[(($2077)>>2)]=$2076;
      label = 385; break;
    case 385: 
      label = 386; break;
    case 386: 
      label = 387; break;
    case 387: 
      var $2082=$cy18;
      var $2083=$quotient_too_large;
      var $2084=$2083 | $2082;
      $quotient_too_large=$2084;
      var $2085=$2;
      var $2086=$4;
      var $2087=$tp;
      var $2088=$in;
      var $2089=___gmpn_sub_n($2085, $2086, $2087, $2088);
      $cy18=$2089;
      var $2090=$2;
      var $2091=$in;
      var $2092=(($2090+($2091<<2))|0);
      var $2093=$2;
      var $2094=$in;
      var $2095=(($2093+($2094<<2))|0);
      var $2096=$rn;
      var $2097=$cy18;
      var $2098=___gmpn_sub_1($2092, $2095, $2096, $2097);
      $cy18=$2098;
      var $2099=$cy18;
      var $2100=$quotient_too_large;
      var $2101=$2100 | $2099;
      $quotient_too_large=$2101;
      label = 388; break;
    case 388: 
      var $2103=$quotient_too_large;
      var $2104=(($2103)|0)!=0;
      if ($2104) { label = 389; break; } else { label = 395; break; }
    case 389: 
      label = 390; break;
    case 390: 
      var $2107=$1;
      $__p87=$2107;
      label = 391; break;
    case 391: 
      var $2109=$__p87;
      var $2110=(($2109+4)|0);
      $__p87=$2110;
      var $2111=HEAP32[(($2109)>>2)];
      var $2112=((($2111)-(1))|0);
      HEAP32[(($2109)>>2)]=$2112;
      var $2113=(($2111)|0)==0;
      if ($2113) { label = 392; break; } else { label = 393; break; }
    case 392: 
      label = 391; break;
    case 393: 
      label = 394; break;
    case 394: 
      var $2117=$2;
      var $2118=$2;
      var $2119=$6;
      var $2120=$7;
      var $2121=___gmpn_add_n($2117, $2118, $2119, $2120);
      label = 395; break;
    case 395: 
      label = 396; break;
    case 396: 
      var $2124=HEAP32[(($__tmp_marker1)>>2)];
      var $2125=(($2124)|0)!=0;
      var $2126=(($2125)&1);
      var $2127=(($2126)|0)!=0;
      var $2128=(($2127)&1);
      var $2129=($2128);
      var $2130=(($2129)|0)!=0;
      if ($2130) { label = 397; break; } else { label = 398; break; }
    case 397: 
      var $2132=HEAP32[(($__tmp_marker1)>>2)];
      ___gmp_tmp_reentrant_free($2132);
      label = 398; break;
    case 398: 
      label = 399; break;
    case 399: 
      label = 400; break;
    case 400: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_tdiv_qr["X"]=1;

function _mpn_zero_p281($ap, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$ap;
      $3=$n;
      var $4=$3;
      var $5=((($4)-(1))|0);
      $i=$5;
      label = 3; break;
    case 3: 
      var $7=$i;
      var $8=(($7)|0) >= 0;
      if ($8) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $10=$i;
      var $11=$2;
      var $12=(($11+($10<<2))|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)!=0;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $18=$i;
      var $19=((($18)-(1))|0);
      $i=$19;
      label = 3; break;
    case 8: 
      $1=1;
      label = 9; break;
    case 9: 
      var $22=$1;

      return $22;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_toom22_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $__gmpn_cpuvec_initialized;
      var $n;
      var $s;
      var $t;
      var $vm1_neg;
      var $cy;
      var $cy2;
      var $asm1;
      var $bsm1;
      var $__dst;
      var $__n;
      var $__dst1;
      var $__n2;
      var $__x;
      var $__p;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      $__gmpn_cpuvec_initialized=1;
      var $7=$3;
      var $8=$7 >> 1;
      $s=$8;
      var $9=$3;
      var $10=$s;
      var $11=((($9)-($10))|0);
      $n=$11;
      var $12=$5;
      var $13=$n;
      var $14=((($12)-($13))|0);
      $t=$14;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $21=$1;
      $asm1=$21;
      var $22=$1;
      var $23=$n;
      var $24=(($22+($23<<2))|0);
      $bsm1=$24;
      $vm1_neg=0;
      var $25=$s;
      var $26=$n;
      var $27=(($25)|0)==(($26)|0);
      if ($27) { label = 9; break; } else { label = 13; break; }
    case 9: 
      var $29=$2;
      var $30=$2;
      var $31=$n;
      var $32=(($30+($31<<2))|0);
      var $33=$n;
      var $34=___gmpn_cmp($29, $32, $33);
      var $35=(($34)|0) < 0;
      if ($35) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $37=$asm1;
      var $38=$2;
      var $39=$n;
      var $40=(($38+($39<<2))|0);
      var $41=$2;
      var $42=$n;
      var $43=___gmpn_sub_n($37, $40, $41, $42);
      $vm1_neg=1;
      label = 12; break;
    case 11: 
      var $45=$asm1;
      var $46=$2;
      var $47=$2;
      var $48=$n;
      var $49=(($47+($48<<2))|0);
      var $50=$n;
      var $51=___gmpn_sub_n($45, $46, $49, $50);
      label = 12; break;
    case 12: 
      label = 27; break;
    case 13: 
      var $54=$2;
      var $55=$s;
      var $56=(($54+($55<<2))|0);
      var $57=$n;
      var $58=$s;
      var $59=((($57)-($58))|0);
      var $60=_mpn_zero_p281($56, $59);
      var $61=(($60)|0)!=0;
      if ($61) { label = 14; break; } else { label = 25; break; }
    case 14: 
      var $63=$2;
      var $64=$2;
      var $65=$n;
      var $66=(($64+($65<<2))|0);
      var $67=$s;
      var $68=___gmpn_cmp($63, $66, $67);
      var $69=(($68)|0) < 0;
      if ($69) { label = 15; break; } else { label = 25; break; }
    case 15: 
      var $71=$asm1;
      var $72=$2;
      var $73=$n;
      var $74=(($72+($73<<2))|0);
      var $75=$2;
      var $76=$s;
      var $77=___gmpn_sub_n($71, $74, $75, $76);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $81=$n;
      var $82=$s;
      var $83=((($81)-($82))|0);
      var $84=(($83)|0)!=0;
      if ($84) { label = 19; break; } else { label = 23; break; }
    case 19: 
      var $86=$asm1;
      var $87=$s;
      var $88=(($86+($87<<2))|0);
      $__dst=$88;
      var $89=$n;
      var $90=$s;
      var $91=((($89)-($90))|0);
      $__n=$91;
      label = 20; break;
    case 20: 
      var $93=$__dst;
      var $94=(($93+4)|0);
      $__dst=$94;
      HEAP32[(($93)>>2)]=0;
      label = 21; break;
    case 21: 
      var $96=$__n;
      var $97=((($96)-(1))|0);
      $__n=$97;
      var $98=(($97)|0)!=0;
      if ($98) { label = 20; break; } else { label = 22; break; }
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      $vm1_neg=1;
      label = 26; break;
    case 25: 
      var $103=$asm1;
      var $104=$2;
      var $105=$n;
      var $106=$2;
      var $107=$n;
      var $108=(($106+($107<<2))|0);
      var $109=$s;
      var $110=___gmpn_sub($103, $104, $105, $108, $109);
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $113=$t;
      var $114=$n;
      var $115=(($113)|0)==(($114)|0);
      if ($115) { label = 28; break; } else { label = 32; break; }
    case 28: 
      var $117=$4;
      var $118=$4;
      var $119=$n;
      var $120=(($118+($119<<2))|0);
      var $121=$n;
      var $122=___gmpn_cmp($117, $120, $121);
      var $123=(($122)|0) < 0;
      if ($123) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $125=$bsm1;
      var $126=$4;
      var $127=$n;
      var $128=(($126+($127<<2))|0);
      var $129=$4;
      var $130=$n;
      var $131=___gmpn_sub_n($125, $128, $129, $130);
      var $132=$vm1_neg;
      var $133=$132 ^ 1;
      $vm1_neg=$133;
      label = 31; break;
    case 30: 
      var $135=$bsm1;
      var $136=$4;
      var $137=$4;
      var $138=$n;
      var $139=(($137+($138<<2))|0);
      var $140=$n;
      var $141=___gmpn_sub_n($135, $136, $139, $140);
      label = 31; break;
    case 31: 
      label = 46; break;
    case 32: 
      var $144=$4;
      var $145=$t;
      var $146=(($144+($145<<2))|0);
      var $147=$n;
      var $148=$t;
      var $149=((($147)-($148))|0);
      var $150=_mpn_zero_p281($146, $149);
      var $151=(($150)|0)!=0;
      if ($151) { label = 33; break; } else { label = 44; break; }
    case 33: 
      var $153=$4;
      var $154=$4;
      var $155=$n;
      var $156=(($154+($155<<2))|0);
      var $157=$t;
      var $158=___gmpn_cmp($153, $156, $157);
      var $159=(($158)|0) < 0;
      if ($159) { label = 34; break; } else { label = 44; break; }
    case 34: 
      var $161=$bsm1;
      var $162=$4;
      var $163=$n;
      var $164=(($162+($163<<2))|0);
      var $165=$4;
      var $166=$t;
      var $167=___gmpn_sub_n($161, $164, $165, $166);
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $171=$n;
      var $172=$t;
      var $173=((($171)-($172))|0);
      var $174=(($173)|0)!=0;
      if ($174) { label = 38; break; } else { label = 42; break; }
    case 38: 
      var $176=$bsm1;
      var $177=$t;
      var $178=(($176+($177<<2))|0);
      $__dst1=$178;
      var $179=$n;
      var $180=$t;
      var $181=((($179)-($180))|0);
      $__n2=$181;
      label = 39; break;
    case 39: 
      var $183=$__dst1;
      var $184=(($183+4)|0);
      $__dst1=$184;
      HEAP32[(($183)>>2)]=0;
      label = 40; break;
    case 40: 
      var $186=$__n2;
      var $187=((($186)-(1))|0);
      $__n2=$187;
      var $188=(($187)|0)!=0;
      if ($188) { label = 39; break; } else { label = 41; break; }
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $192=$vm1_neg;
      var $193=$192 ^ 1;
      $vm1_neg=$193;
      label = 45; break;
    case 44: 
      var $195=$bsm1;
      var $196=$4;
      var $197=$n;
      var $198=$4;
      var $199=$n;
      var $200=(($198+($199<<2))|0);
      var $201=$t;
      var $202=___gmpn_sub($195, $196, $197, $200, $201);
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $206=$n;
      var $207=(($206)|0) >= 30;
      if ($207) { label = 49; break; } else { label = 48; break; }
    case 48: 
      var $209=$6;
      var $210=$asm1;
      var $211=$n;
      var $212=$bsm1;
      var $213=$n;
      ___gmpn_mul_basecase($209, $210, $211, $212, $213);
      label = 50; break;
    case 49: 
      var $215=$6;
      var $216=$asm1;
      var $217=$n;
      var $218=$bsm1;
      var $219=$n;
      var $220=$6;
      var $221=$n;
      var $222=($221<<1);
      var $223=(($220+($222<<2))|0);
      ___gmpn_toom22_mul($215, $216, $217, $218, $219, $223);
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      var $226=$s;
      var $227=$t;
      var $228=(($226)|0) > (($227)|0);
      if ($228) { label = 52; break; } else { label = 61; break; }
    case 52: 
      label = 53; break;
    case 53: 
      var $231=$t;
      var $232=(($231)|0) >= 30;
      if ($232) { label = 55; break; } else { label = 54; break; }
    case 54: 
      var $234=$1;
      var $235=$n;
      var $236=($235<<1);
      var $237=(($234+($236<<2))|0);
      var $238=$2;
      var $239=$n;
      var $240=(($238+($239<<2))|0);
      var $241=$s;
      var $242=$4;
      var $243=$n;
      var $244=(($242+($243<<2))|0);
      var $245=$t;
      ___gmpn_mul_basecase($237, $240, $241, $244, $245);
      label = 59; break;
    case 55: 
      var $247=$s;
      var $248=($247<<2);
      var $249=$t;
      var $250=((($249)*(5))&-1);
      var $251=(($248)|0) < (($250)|0);
      if ($251) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $253=$1;
      var $254=$n;
      var $255=($254<<1);
      var $256=(($253+($255<<2))|0);
      var $257=$2;
      var $258=$n;
      var $259=(($257+($258<<2))|0);
      var $260=$s;
      var $261=$4;
      var $262=$n;
      var $263=(($261+($262<<2))|0);
      var $264=$t;
      var $265=$6;
      var $266=$n;
      var $267=($266<<1);
      var $268=(($265+($267<<2))|0);
      ___gmpn_toom22_mul($256, $259, $260, $263, $264, $268);
      label = 58; break;
    case 57: 
      var $270=$1;
      var $271=$n;
      var $272=($271<<1);
      var $273=(($270+($272<<2))|0);
      var $274=$2;
      var $275=$n;
      var $276=(($274+($275<<2))|0);
      var $277=$s;
      var $278=$4;
      var $279=$n;
      var $280=(($278+($279<<2))|0);
      var $281=$t;
      var $282=$6;
      var $283=$n;
      var $284=($283<<1);
      var $285=(($282+($284<<2))|0);
      ___gmpn_toom32_mul($273, $276, $277, $280, $281, $285);
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 67; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $291=$s;
      var $292=(($291)|0) >= 30;
      if ($292) { label = 64; break; } else { label = 63; break; }
    case 63: 
      var $294=$1;
      var $295=$n;
      var $296=($295<<1);
      var $297=(($294+($296<<2))|0);
      var $298=$2;
      var $299=$n;
      var $300=(($298+($299<<2))|0);
      var $301=$s;
      var $302=$4;
      var $303=$n;
      var $304=(($302+($303<<2))|0);
      var $305=$s;
      ___gmpn_mul_basecase($297, $300, $301, $304, $305);
      label = 65; break;
    case 64: 
      var $307=$1;
      var $308=$n;
      var $309=($308<<1);
      var $310=(($307+($309<<2))|0);
      var $311=$2;
      var $312=$n;
      var $313=(($311+($312<<2))|0);
      var $314=$s;
      var $315=$4;
      var $316=$n;
      var $317=(($315+($316<<2))|0);
      var $318=$s;
      var $319=$6;
      var $320=$n;
      var $321=($320<<1);
      var $322=(($319+($321<<2))|0);
      ___gmpn_toom22_mul($310, $313, $314, $317, $318, $322);
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $327=$n;
      var $328=(($327)|0) >= 30;
      if ($328) { label = 70; break; } else { label = 69; break; }
    case 69: 
      var $330=$1;
      var $331=$2;
      var $332=$n;
      var $333=$4;
      var $334=$n;
      ___gmpn_mul_basecase($330, $331, $332, $333, $334);
      label = 71; break;
    case 70: 
      var $336=$1;
      var $337=$2;
      var $338=$n;
      var $339=$4;
      var $340=$n;
      var $341=$6;
      var $342=$n;
      var $343=($342<<1);
      var $344=(($341+($343<<2))|0);
      ___gmpn_toom22_mul($336, $337, $338, $339, $340, $344);
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $347=$1;
      var $348=$n;
      var $349=($348<<1);
      var $350=(($347+($349<<2))|0);
      var $351=$1;
      var $352=$n;
      var $353=(($351+($352<<2))|0);
      var $354=$1;
      var $355=$n;
      var $356=($355<<1);
      var $357=(($354+($356<<2))|0);
      var $358=$n;
      var $359=___gmpn_add_n($350, $353, $357, $358);
      $cy=$359;
      var $360=$cy;
      var $361=$1;
      var $362=$n;
      var $363=(($361+($362<<2))|0);
      var $364=$1;
      var $365=$n;
      var $366=($365<<1);
      var $367=(($364+($366<<2))|0);
      var $368=$1;
      var $369=$n;
      var $370=___gmpn_add_n($363, $367, $368, $369);
      var $371=((($360)+($370))|0);
      $cy2=$371;
      var $372=$1;
      var $373=$n;
      var $374=($373<<1);
      var $375=(($372+($374<<2))|0);
      var $376=$1;
      var $377=$n;
      var $378=($377<<1);
      var $379=(($376+($378<<2))|0);
      var $380=$n;
      var $381=$1;
      var $382=$n;
      var $383=($382<<1);
      var $384=(($381+($383<<2))|0);
      var $385=$n;
      var $386=(($384+($385<<2))|0);
      var $387=$s;
      var $388=$t;
      var $389=((($387)+($388))|0);
      var $390=$n;
      var $391=((($389)-($390))|0);
      var $392=___gmpn_add($375, $379, $380, $386, $391);
      var $393=$cy;
      var $394=((($393)+($392))|0);
      $cy=$394;
      var $395=$vm1_neg;
      var $396=(($395)|0)!=0;
      if ($396) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $398=$1;
      var $399=$n;
      var $400=(($398+($399<<2))|0);
      var $401=$1;
      var $402=$n;
      var $403=(($401+($402<<2))|0);
      var $404=$6;
      var $405=$n;
      var $406=($405<<1);
      var $407=___gmpn_add_n($400, $403, $404, $406);
      var $408=$cy;
      var $409=((($408)+($407))|0);
      $cy=$409;
      label = 75; break;
    case 74: 
      var $411=$1;
      var $412=$n;
      var $413=(($411+($412<<2))|0);
      var $414=$1;
      var $415=$n;
      var $416=(($414+($415<<2))|0);
      var $417=$6;
      var $418=$n;
      var $419=($418<<1);
      var $420=___gmpn_sub_n($413, $416, $417, $419);
      var $421=$cy;
      var $422=((($421)-($420))|0);
      $cy=$422;
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      var $429=$1;
      var $430=$n;
      var $431=($430<<1);
      var $432=(($429+($431<<2))|0);
      $__p=$432;
      var $433=$__p;
      var $434=HEAP32[(($433)>>2)];
      var $435=$cy2;
      var $436=((($434)+($435))|0);
      $__x=$436;
      var $437=$__x;
      var $438=$__p;
      HEAP32[(($438)>>2)]=$437;
      var $439=$__x;
      var $440=$cy2;
      var $441=(($439)>>>0) < (($440)>>>0);
      if ($441) { label = 81; break; } else { label = 85; break; }
    case 81: 
      label = 82; break;
    case 82: 
      var $444=$__p;
      var $445=(($444+4)|0);
      $__p=$445;
      var $446=HEAP32[(($445)>>2)];
      var $447=((($446)+(1))|0);
      HEAP32[(($445)>>2)]=$447;
      var $448=(($447)|0)==0;
      if ($448) { label = 83; break; } else { label = 84; break; }
    case 83: 
      label = 82; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $453=$cy;
      var $454=(($453)>>>0) <= 2;
      var $455=(($454)&1);
      var $456=(($455)|0)!=0;
      var $457=(($456)&1);
      var $458=($457);
      var $459=(($458)|0)!=0;
      if ($459) { label = 87; break; } else { label = 95; break; }
    case 87: 
      label = 88; break;
    case 88: 
      var $462=$1;
      var $463=$n;
      var $464=((($463)*(3))&-1);
      var $465=(($462+($464<<2))|0);
      $__p4=$465;
      var $466=$__p4;
      var $467=HEAP32[(($466)>>2)];
      var $468=$cy;
      var $469=((($467)+($468))|0);
      $__x3=$469;
      var $470=$__x3;
      var $471=$__p4;
      HEAP32[(($471)>>2)]=$470;
      var $472=$__x3;
      var $473=$cy;
      var $474=(($472)>>>0) < (($473)>>>0);
      if ($474) { label = 89; break; } else { label = 93; break; }
    case 89: 
      label = 90; break;
    case 90: 
      var $477=$__p4;
      var $478=(($477+4)|0);
      $__p4=$478;
      var $479=HEAP32[(($478)>>2)];
      var $480=((($479)+(1))|0);
      HEAP32[(($478)>>2)]=$480;
      var $481=(($480)|0)==0;
      if ($481) { label = 91; break; } else { label = 92; break; }
    case 91: 
      label = 90; break;
    case 92: 
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      label = 101; break;
    case 95: 
      label = 96; break;
    case 96: 
      var $488=$1;
      var $489=$n;
      var $490=((($489)*(3))&-1);
      var $491=(($488+($490<<2))|0);
      $__p6=$491;
      label = 97; break;
    case 97: 
      var $493=$__p6;
      var $494=(($493+4)|0);
      $__p6=$494;
      var $495=HEAP32[(($493)>>2)];
      var $496=((($495)-(1))|0);
      HEAP32[(($493)>>2)]=$496;
      var $497=(($495)|0)==0;
      if ($497) { label = 98; break; } else { label = 99; break; }
    case 98: 
      label = 97; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom22_mul["X"]=1;

function ___gmpn_toom32_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $vm1_neg;
      var $cy;
      var $hi;
      var $ap1_hi;
      var $bp1_hi;
      var $__dst;
      var $__n;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      var $__x7;
      var $__p8;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $9=$3;
      var $10=($9<<1);
      var $11=$5;
      var $12=((($11)*(3))&-1);
      var $13=(($10)|0) >= (($12)|0);
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $15=$3;
      var $16=((($15)-(1))|0);
      var $17=Math.floor(((($16)>>>0))/(3));
      var $23 = $17;label = 7; break;
    case 6: 
      var $19=$5;
      var $20=((($19)-(1))|0);
      var $21=$20 >> 1;
      var $23 = $21;label = 7; break;
    case 7: 
      var $23;
      var $24=((($23)+(1))|0);
      $n=$24;
      var $25=$3;
      var $26=$n;
      var $27=($26<<1);
      var $28=((($25)-($27))|0);
      $s=$28;
      var $29=$5;
      var $30=$n;
      var $31=((($29)-($30))|0);
      $t=$31;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $38=$1;
      var $39=$2;
      var $40=$n;
      var $41=$2;
      var $42=$n;
      var $43=($42<<1);
      var $44=(($41+($43<<2))|0);
      var $45=$s;
      var $46=___gmpn_add($38, $39, $40, $44, $45);
      $ap1_hi=$46;
      var $47=$ap1_hi;
      var $48=(($47)|0)==0;
      if ($48) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $50=$1;
      var $51=$2;
      var $52=$n;
      var $53=(($51+($52<<2))|0);
      var $54=$n;
      var $55=___gmpn_cmp($50, $53, $54);
      var $56=(($55)|0) < 0;
      if ($56) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $58=$1;
      var $59=$n;
      var $60=($59<<1);
      var $61=(($58+($60<<2))|0);
      var $62=$2;
      var $63=$n;
      var $64=(($62+($63<<2))|0);
      var $65=$1;
      var $66=$n;
      var $67=___gmpn_sub_n($61, $64, $65, $66);
      $hi=0;
      $vm1_neg=1;
      label = 17; break;
    case 16: 
      var $69=$ap1_hi;
      var $70=$1;
      var $71=$n;
      var $72=($71<<1);
      var $73=(($70+($72<<2))|0);
      var $74=$1;
      var $75=$2;
      var $76=$n;
      var $77=(($75+($76<<2))|0);
      var $78=$n;
      var $79=___gmpn_sub_n($73, $74, $77, $78);
      var $80=((($69)-($79))|0);
      $hi=$80;
      $vm1_neg=0;
      label = 17; break;
    case 17: 
      var $82=$1;
      var $83=$1;
      var $84=$2;
      var $85=$n;
      var $86=(($84+($85<<2))|0);
      var $87=$n;
      var $88=___gmpn_add_n($82, $83, $86, $87);
      var $89=$ap1_hi;
      var $90=((($89)+($88))|0);
      $ap1_hi=$90;
      var $91=$t;
      var $92=$n;
      var $93=(($91)|0)==(($92)|0);
      if ($93) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $95=$1;
      var $96=$n;
      var $97=(($95+($96<<2))|0);
      var $98=$4;
      var $99=$4;
      var $100=$n;
      var $101=(($99+($100<<2))|0);
      var $102=$n;
      var $103=___gmpn_add_n($97, $98, $101, $102);
      $bp1_hi=$103;
      var $104=$4;
      var $105=$4;
      var $106=$n;
      var $107=(($105+($106<<2))|0);
      var $108=$n;
      var $109=___gmpn_cmp($104, $107, $108);
      var $110=(($109)|0) < 0;
      if ($110) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $112=$1;
      var $113=$n;
      var $114=((($113)*(3))&-1);
      var $115=(($112+($114<<2))|0);
      var $116=$4;
      var $117=$n;
      var $118=(($116+($117<<2))|0);
      var $119=$4;
      var $120=$n;
      var $121=___gmpn_sub_n($115, $118, $119, $120);
      var $122=$vm1_neg;
      var $123=$122 ^ 1;
      $vm1_neg=$123;
      label = 21; break;
    case 20: 
      var $125=$1;
      var $126=$n;
      var $127=((($126)*(3))&-1);
      var $128=(($125+($127<<2))|0);
      var $129=$4;
      var $130=$4;
      var $131=$n;
      var $132=(($130+($131<<2))|0);
      var $133=$n;
      var $134=___gmpn_sub_n($128, $129, $132, $133);
      label = 21; break;
    case 21: 
      label = 36; break;
    case 22: 
      var $137=$1;
      var $138=$n;
      var $139=(($137+($138<<2))|0);
      var $140=$4;
      var $141=$n;
      var $142=$4;
      var $143=$n;
      var $144=(($142+($143<<2))|0);
      var $145=$t;
      var $146=___gmpn_add($139, $140, $141, $144, $145);
      $bp1_hi=$146;
      var $147=$4;
      var $148=$t;
      var $149=(($147+($148<<2))|0);
      var $150=$n;
      var $151=$t;
      var $152=((($150)-($151))|0);
      var $153=_mpn_zero_p284($149, $152);
      var $154=(($153)|0)!=0;
      if ($154) { label = 23; break; } else { label = 34; break; }
    case 23: 
      var $156=$4;
      var $157=$4;
      var $158=$n;
      var $159=(($157+($158<<2))|0);
      var $160=$t;
      var $161=___gmpn_cmp($156, $159, $160);
      var $162=(($161)|0) < 0;
      if ($162) { label = 24; break; } else { label = 34; break; }
    case 24: 
      var $164=$1;
      var $165=$n;
      var $166=((($165)*(3))&-1);
      var $167=(($164+($166<<2))|0);
      var $168=$4;
      var $169=$n;
      var $170=(($168+($169<<2))|0);
      var $171=$4;
      var $172=$t;
      var $173=___gmpn_sub_n($167, $170, $171, $172);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $177=$n;
      var $178=$t;
      var $179=((($177)-($178))|0);
      var $180=(($179)|0)!=0;
      if ($180) { label = 28; break; } else { label = 32; break; }
    case 28: 
      var $182=$1;
      var $183=$n;
      var $184=((($183)*(3))&-1);
      var $185=(($182+($184<<2))|0);
      var $186=$t;
      var $187=(($185+($186<<2))|0);
      $__dst=$187;
      var $188=$n;
      var $189=$t;
      var $190=((($188)-($189))|0);
      $__n=$190;
      label = 29; break;
    case 29: 
      var $192=$__dst;
      var $193=(($192+4)|0);
      $__dst=$193;
      HEAP32[(($192)>>2)]=0;
      label = 30; break;
    case 30: 
      var $195=$__n;
      var $196=((($195)-(1))|0);
      $__n=$196;
      var $197=(($196)|0)!=0;
      if ($197) { label = 29; break; } else { label = 31; break; }
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $201=$vm1_neg;
      var $202=$201 ^ 1;
      $vm1_neg=$202;
      label = 35; break;
    case 34: 
      var $204=$1;
      var $205=$n;
      var $206=((($205)*(3))&-1);
      var $207=(($204+($206<<2))|0);
      var $208=$4;
      var $209=$n;
      var $210=$4;
      var $211=$n;
      var $212=(($210+($211<<2))|0);
      var $213=$t;
      var $214=___gmpn_sub($207, $208, $209, $212, $213);
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $218=$6;
      var $219=$1;
      var $220=$1;
      var $221=$n;
      var $222=(($220+($221<<2))|0);
      var $223=$n;
      ___gmpn_mul_n($218, $219, $222, $223);
      label = 38; break;
    case 38: 
      var $225=$ap1_hi;
      var $226=(($225)|0)==1;
      if ($226) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $228=$bp1_hi;
      var $229=$6;
      var $230=$n;
      var $231=(($229+($230<<2))|0);
      var $232=$6;
      var $233=$n;
      var $234=(($232+($233<<2))|0);
      var $235=$1;
      var $236=$n;
      var $237=(($235+($236<<2))|0);
      var $238=$n;
      var $239=___gmpn_add_n($231, $234, $237, $238);
      var $240=((($228)+($239))|0);
      $cy=$240;
      label = 44; break;
    case 40: 
      var $242=$ap1_hi;
      var $243=(($242)|0)==2;
      if ($243) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $245=$bp1_hi;
      var $246=($245<<1);
      var $247=$6;
      var $248=$n;
      var $249=(($247+($248<<2))|0);
      var $250=$1;
      var $251=$n;
      var $252=(($250+($251<<2))|0);
      var $253=$n;
      var $254=___gmpn_addmul_1($249, $252, $253, 2);
      var $255=((($246)+($254))|0);
      $cy=$255;
      label = 43; break;
    case 42: 
      $cy=0;
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $259=$bp1_hi;
      var $260=(($259)|0)!=0;
      if ($260) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $262=$6;
      var $263=$n;
      var $264=(($262+($263<<2))|0);
      var $265=$6;
      var $266=$n;
      var $267=(($265+($266<<2))|0);
      var $268=$1;
      var $269=$n;
      var $270=___gmpn_add_n($264, $267, $268, $269);
      var $271=$cy;
      var $272=((($271)+($270))|0);
      $cy=$272;
      label = 46; break;
    case 46: 
      var $274=$cy;
      var $275=$n;
      var $276=($275<<1);
      var $277=$6;
      var $278=(($277+($276<<2))|0);
      HEAP32[(($278)>>2)]=$274;
      label = 47; break;
    case 47: 
      var $280=$1;
      var $281=$1;
      var $282=$n;
      var $283=($282<<1);
      var $284=(($281+($283<<2))|0);
      var $285=$1;
      var $286=$n;
      var $287=((($286)*(3))&-1);
      var $288=(($285+($287<<2))|0);
      var $289=$n;
      ___gmpn_mul_n($280, $284, $288, $289);
      label = 48; break;
    case 48: 
      var $291=$hi;
      var $292=(($291)|0)!=0;
      if ($292) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $294=$1;
      var $295=$n;
      var $296=(($294+($295<<2))|0);
      var $297=$1;
      var $298=$n;
      var $299=(($297+($298<<2))|0);
      var $300=$1;
      var $301=$n;
      var $302=((($301)*(3))&-1);
      var $303=(($300+($302<<2))|0);
      var $304=$n;
      var $305=___gmpn_add_n($296, $299, $303, $304);
      $hi=$305;
      label = 50; break;
    case 50: 
      var $307=$hi;
      var $308=$n;
      var $309=($308<<1);
      var $310=$1;
      var $311=(($310+($309<<2))|0);
      HEAP32[(($311)>>2)]=$307;
      var $312=$vm1_neg;
      var $313=(($312)|0)!=0;
      if ($313) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $315=$6;
      var $316=$6;
      var $317=$1;
      var $318=$n;
      var $319=($318<<1);
      var $320=((($319)+(1))|0);
      var $321=___gmpn_sub_n($315, $316, $317, $320);
      var $322=$6;
      var $323=$6;
      var $324=$n;
      var $325=($324<<1);
      var $326=((($325)+(1))|0);
      var $327=___gmpn_rshift($322, $323, $326, 1);
      label = 53; break;
    case 52: 
      var $329=$6;
      var $330=$6;
      var $331=$1;
      var $332=$n;
      var $333=($332<<1);
      var $334=((($333)+(1))|0);
      var $335=___gmpn_add_n($329, $330, $331, $334);
      var $336=$6;
      var $337=$6;
      var $338=$n;
      var $339=($338<<1);
      var $340=((($339)+(1))|0);
      var $341=___gmpn_rshift($336, $337, $340, 1);
      label = 53; break;
    case 53: 
      var $343=$n;
      var $344=($343<<1);
      var $345=$1;
      var $346=(($345+($344<<2))|0);
      var $347=HEAP32[(($346)>>2)];
      $hi=$347;
      var $348=$1;
      var $349=$n;
      var $350=($349<<1);
      var $351=(($348+($350<<2))|0);
      var $352=$6;
      var $353=$6;
      var $354=$n;
      var $355=(($353+($354<<2))|0);
      var $356=$n;
      var $357=___gmpn_add_n($351, $352, $355, $356);
      $cy=$357;
      label = 54; break;
    case 54: 
      var $359=$6;
      var $360=$n;
      var $361=(($359+($360<<2))|0);
      $__p=$361;
      var $362=$__p;
      var $363=HEAP32[(($362)>>2)];
      var $364=$cy;
      var $365=$n;
      var $366=($365<<1);
      var $367=$6;
      var $368=(($367+($366<<2))|0);
      var $369=HEAP32[(($368)>>2)];
      var $370=((($364)+($369))|0);
      var $371=((($363)+($370))|0);
      $__x=$371;
      var $372=$__x;
      var $373=$__p;
      HEAP32[(($373)>>2)]=$372;
      var $374=$__x;
      var $375=$cy;
      var $376=$n;
      var $377=($376<<1);
      var $378=$6;
      var $379=(($378+($377<<2))|0);
      var $380=HEAP32[(($379)>>2)];
      var $381=((($375)+($380))|0);
      var $382=(($374)>>>0) < (($381)>>>0);
      if ($382) { label = 55; break; } else { label = 59; break; }
    case 55: 
      label = 56; break;
    case 56: 
      var $385=$__p;
      var $386=(($385+4)|0);
      $__p=$386;
      var $387=HEAP32[(($386)>>2)];
      var $388=((($387)+(1))|0);
      HEAP32[(($386)>>2)]=$388;
      var $389=(($388)|0)==0;
      if ($389) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 56; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $394=$vm1_neg;
      var $395=(($394)|0)!=0;
      if ($395) { label = 61; break; } else { label = 69; break; }
    case 61: 
      var $397=$6;
      var $398=$6;
      var $399=$1;
      var $400=$n;
      var $401=___gmpn_add_n($397, $398, $399, $400);
      $cy=$401;
      var $402=$1;
      var $403=$n;
      var $404=($403<<1);
      var $405=(($402+($404<<2))|0);
      var $406=$1;
      var $407=$n;
      var $408=($407<<1);
      var $409=(($406+($408<<2))|0);
      var $410=$1;
      var $411=$n;
      var $412=(($410+($411<<2))|0);
      var $413=$n;
      var $414=$cy;
      var $415=_mpn_add_nc($405, $409, $412, $413, $414);
      var $416=$hi;
      var $417=((($416)+($415))|0);
      $hi=$417;
      label = 62; break;
    case 62: 
      var $419=$6;
      var $420=$n;
      var $421=(($419+($420<<2))|0);
      $__p2=$421;
      var $422=$__p2;
      var $423=HEAP32[(($422)>>2)];
      var $424=$hi;
      var $425=((($423)+($424))|0);
      $__x1=$425;
      var $426=$__x1;
      var $427=$__p2;
      HEAP32[(($427)>>2)]=$426;
      var $428=$__x1;
      var $429=$hi;
      var $430=(($428)>>>0) < (($429)>>>0);
      if ($430) { label = 63; break; } else { label = 67; break; }
    case 63: 
      label = 64; break;
    case 64: 
      var $433=$__p2;
      var $434=(($433+4)|0);
      $__p2=$434;
      var $435=HEAP32[(($434)>>2)];
      var $436=((($435)+(1))|0);
      HEAP32[(($434)>>2)]=$436;
      var $437=(($436)|0)==0;
      if ($437) { label = 65; break; } else { label = 66; break; }
    case 65: 
      label = 64; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 77; break;
    case 69: 
      var $443=$6;
      var $444=$6;
      var $445=$1;
      var $446=$n;
      var $447=___gmpn_sub_n($443, $444, $445, $446);
      $cy=$447;
      var $448=$1;
      var $449=$n;
      var $450=($449<<1);
      var $451=(($448+($450<<2))|0);
      var $452=$1;
      var $453=$n;
      var $454=($453<<1);
      var $455=(($452+($454<<2))|0);
      var $456=$1;
      var $457=$n;
      var $458=(($456+($457<<2))|0);
      var $459=$n;
      var $460=$cy;
      var $461=_mpn_sub_nc($451, $455, $458, $459, $460);
      var $462=$hi;
      var $463=((($462)+($461))|0);
      $hi=$463;
      label = 70; break;
    case 70: 
      var $465=$6;
      var $466=$n;
      var $467=(($465+($466<<2))|0);
      $__p4=$467;
      var $468=$__p4;
      var $469=HEAP32[(($468)>>2)];
      $__x3=$469;
      var $470=$__x3;
      var $471=$hi;
      var $472=((($470)-($471))|0);
      var $473=$__p4;
      HEAP32[(($473)>>2)]=$472;
      var $474=$__x3;
      var $475=$hi;
      var $476=(($474)>>>0) < (($475)>>>0);
      if ($476) { label = 71; break; } else { label = 75; break; }
    case 71: 
      label = 72; break;
    case 72: 
      var $479=$__p4;
      var $480=(($479+4)|0);
      $__p4=$480;
      var $481=HEAP32[(($480)>>2)];
      var $482=((($481)-(1))|0);
      HEAP32[(($480)>>2)]=$482;
      var $483=(($481)|0)==0;
      if ($483) { label = 73; break; } else { label = 74; break; }
    case 73: 
      label = 72; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $490=$1;
      var $491=$2;
      var $492=$4;
      var $493=$n;
      ___gmpn_mul_n($490, $491, $492, $493);
      label = 79; break;
    case 79: 
      var $495=$s;
      var $496=$t;
      var $497=(($495)|0) > (($496)|0);
      if ($497) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $499=$1;
      var $500=$n;
      var $501=((($500)*(3))&-1);
      var $502=(($499+($501<<2))|0);
      var $503=$2;
      var $504=$n;
      var $505=($504<<1);
      var $506=(($503+($505<<2))|0);
      var $507=$s;
      var $508=$4;
      var $509=$n;
      var $510=(($508+($509<<2))|0);
      var $511=$t;
      var $512=___gmpn_mul($502, $506, $507, $510, $511);
      label = 82; break;
    case 81: 
      var $514=$1;
      var $515=$n;
      var $516=((($515)*(3))&-1);
      var $517=(($514+($516<<2))|0);
      var $518=$4;
      var $519=$n;
      var $520=(($518+($519<<2))|0);
      var $521=$t;
      var $522=$2;
      var $523=$n;
      var $524=($523<<1);
      var $525=(($522+($524<<2))|0);
      var $526=$s;
      var $527=___gmpn_mul($517, $520, $521, $525, $526);
      label = 82; break;
    case 82: 
      var $529=$1;
      var $530=$n;
      var $531=(($529+($530<<2))|0);
      var $532=$1;
      var $533=$n;
      var $534=(($532+($533<<2))|0);
      var $535=$1;
      var $536=$n;
      var $537=((($536)*(3))&-1);
      var $538=(($535+($537<<2))|0);
      var $539=$n;
      var $540=___gmpn_sub_n($531, $534, $538, $539);
      $cy=$540;
      var $541=$n;
      var $542=($541<<1);
      var $543=$6;
      var $544=(($543+($542<<2))|0);
      var $545=HEAP32[(($544)>>2)];
      var $546=$cy;
      var $547=((($545)+($546))|0);
      $hi=$547;
      var $548=$1;
      var $549=$n;
      var $550=($549<<1);
      var $551=(($548+($550<<2))|0);
      var $552=$1;
      var $553=$n;
      var $554=($553<<1);
      var $555=(($552+($554<<2))|0);
      var $556=$1;
      var $557=$n;
      var $558=$cy;
      var $559=_mpn_sub_nc($551, $555, $556, $557, $558);
      $cy=$559;
      var $560=$1;
      var $561=$n;
      var $562=((($561)*(3))&-1);
      var $563=(($560+($562<<2))|0);
      var $564=$6;
      var $565=$n;
      var $566=(($564+($565<<2))|0);
      var $567=$1;
      var $568=$n;
      var $569=(($567+($568<<2))|0);
      var $570=$n;
      var $571=$cy;
      var $572=_mpn_sub_nc($563, $566, $569, $570, $571);
      var $573=$hi;
      var $574=((($573)-($572))|0);
      $hi=$574;
      var $575=$1;
      var $576=$n;
      var $577=(($575+($576<<2))|0);
      var $578=$1;
      var $579=$n;
      var $580=(($578+($579<<2))|0);
      var $581=$n;
      var $582=((($581)*(3))&-1);
      var $583=$6;
      var $584=$n;
      var $585=___gmpn_add($577, $580, $582, $583, $584);
      var $586=$hi;
      var $587=((($586)+($585))|0);
      $hi=$587;
      var $588=$s;
      var $589=$t;
      var $590=((($588)+($589))|0);
      var $591=$n;
      var $592=(($590)|0) > (($591)|0);
      var $593=(($592)&1);
      var $594=(($593)|0)!=0;
      var $595=(($594)&1);
      var $596=($595);
      var $597=(($596)|0)!=0;
      if ($597) { label = 83; break; } else { label = 101; break; }
    case 83: 
      var $599=$1;
      var $600=$n;
      var $601=($600<<1);
      var $602=(($599+($601<<2))|0);
      var $603=$1;
      var $604=$n;
      var $605=($604<<1);
      var $606=(($603+($605<<2))|0);
      var $607=$n;
      var $608=($607<<1);
      var $609=$1;
      var $610=$n;
      var $611=($610<<2);
      var $612=(($609+($611<<2))|0);
      var $613=$s;
      var $614=$t;
      var $615=((($613)+($614))|0);
      var $616=$n;
      var $617=((($615)-($616))|0);
      var $618=___gmpn_sub($602, $606, $608, $612, $617);
      var $619=$hi;
      var $620=((($619)-($618))|0);
      $hi=$620;
      var $621=$hi;
      var $622=(($621)|0) < 0;
      if ($622) { label = 84; break; } else { label = 92; break; }
    case 84: 
      label = 85; break;
    case 85: 
      var $625=$1;
      var $626=$n;
      var $627=($626<<2);
      var $628=(($625+($627<<2))|0);
      $__p6=$628;
      var $629=$__p6;
      var $630=HEAP32[(($629)>>2)];
      $__x5=$630;
      var $631=$__x5;
      var $632=$hi;
      var $633=(((-$632))|0);
      var $634=((($631)-($633))|0);
      var $635=$__p6;
      HEAP32[(($635)>>2)]=$634;
      var $636=$__x5;
      var $637=$hi;
      var $638=(((-$637))|0);
      var $639=(($636)>>>0) < (($638)>>>0);
      if ($639) { label = 86; break; } else { label = 90; break; }
    case 86: 
      label = 87; break;
    case 87: 
      var $642=$__p6;
      var $643=(($642+4)|0);
      $__p6=$643;
      var $644=HEAP32[(($643)>>2)];
      var $645=((($644)-(1))|0);
      HEAP32[(($643)>>2)]=$645;
      var $646=(($644)|0)==0;
      if ($646) { label = 88; break; } else { label = 89; break; }
    case 88: 
      label = 87; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      label = 100; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $653=$1;
      var $654=$n;
      var $655=($654<<2);
      var $656=(($653+($655<<2))|0);
      $__p8=$656;
      var $657=$__p8;
      var $658=HEAP32[(($657)>>2)];
      var $659=$hi;
      var $660=((($658)+($659))|0);
      $__x7=$660;
      var $661=$__x7;
      var $662=$__p8;
      HEAP32[(($662)>>2)]=$661;
      var $663=$__x7;
      var $664=$hi;
      var $665=(($663)>>>0) < (($664)>>>0);
      if ($665) { label = 94; break; } else { label = 98; break; }
    case 94: 
      label = 95; break;
    case 95: 
      var $668=$__p8;
      var $669=(($668+4)|0);
      $__p8=$669;
      var $670=HEAP32[(($669)>>2)];
      var $671=((($670)+(1))|0);
      HEAP32[(($669)>>2)]=$671;
      var $672=(($671)|0)==0;
      if ($672) { label = 96; break; } else { label = 97; break; }
    case 96: 
      label = 95; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 104; break;
    case 101: 
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom32_mul["X"]=1;

function _mpn_zero_p284($ap, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$ap;
      $3=$n;
      var $4=$3;
      var $5=((($4)-(1))|0);
      $i=$5;
      label = 3; break;
    case 3: 
      var $7=$i;
      var $8=(($7)|0) >= 0;
      if ($8) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $10=$i;
      var $11=$2;
      var $12=(($11+($10<<2))|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)!=0;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $18=$i;
      var $19=((($18)-(1))|0);
      $i=$19;
      label = 3; break;
    case 8: 
      $1=1;
      label = 9; break;
    case 9: 
      var $22=$1;

      return $22;
    default: assert(0, "bad label: " + label);
  }

}


function _mpn_zero_p287($ap, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$ap;
      $3=$n;
      var $4=$3;
      var $5=((($4)-(1))|0);
      $i=$5;
      label = 3; break;
    case 3: 
      var $7=$i;
      var $8=(($7)|0) >= 0;
      if ($8) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $10=$i;
      var $11=$2;
      var $12=(($11+($10<<2))|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)!=0;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $18=$i;
      var $19=((($18)-(1))|0);
      $i=$19;
      label = 3; break;
    case 8: 
      $1=1;
      label = 9; break;
    case 9: 
      var $22=$1;

      return $22;
    default: assert(0, "bad label: " + label);
  }

}


function _mpn_add_nc($rp, $up, $vp, $n, $ci) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $co;
  $1=$rp;
  $2=$up;
  $3=$vp;
  $4=$n;
  $5=$ci;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_add_n($6, $7, $8, $9);
  $co=$10;
  var $11=$1;
  var $12=$1;
  var $13=$4;
  var $14=$5;
  var $15=___gmpn_add_1($11, $12, $13, $14);
  var $16=$co;
  var $17=((($16)+($15))|0);
  $co=$17;
  var $18=$co;

  return $18;
}


function _mpn_sub_nc($rp, $up, $vp, $n, $ci) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $co;
  $1=$rp;
  $2=$up;
  $3=$vp;
  $4=$n;
  $5=$ci;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_sub_n($6, $7, $8, $9);
  $co=$10;
  var $11=$1;
  var $12=$1;
  var $13=$4;
  var $14=$5;
  var $15=___gmpn_sub_1($11, $12, $13, $14);
  var $16=$co;
  var $17=((($16)+($15))|0);
  $co=$17;
  var $18=$co;

  return $18;
}


function ___gmpn_toom42_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $vm1_neg;
      var $cy;
      var $vinf0;
      var $a0_a2;
      var $as1;
      var $asm1;
      var $as2;
      var $bs1;
      var $bsm1;
      var $bs2;
      var $__tmp_marker;
      var $__dst;
      var $__n;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      var $7=$3;
      var $8=$5;
      var $9=($8<<1);
      var $10=(($7)|0) >= (($9)|0);
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $12=$3;
      var $13=((($12)+(3))|0);
      var $14=$13 >> 2;
      var $20 = $14;label = 5; break;
    case 4: 
      var $16=$5;
      var $17=((($16)+(1))|0);
      var $18=$17 >> 1;
      var $20 = $18;label = 5; break;
    case 5: 
      var $20;
      $n=$20;
      var $21=$3;
      var $22=$n;
      var $23=((($22)*(3))&-1);
      var $24=((($21)-($23))|0);
      $s=$24;
      var $25=$5;
      var $26=$n;
      var $27=((($25)-($26))|0);
      $t=$27;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      $__tmp_marker=0;
      var $32=$n;
      var $33=((($32)+(1))|0);
      var $34=($33<<2);
      var $35=STACKTOP;STACKTOP = (STACKTOP + $34)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $36=$35;
      $as1=$36;
      var $37=$n;
      var $38=((($37)+(1))|0);
      var $39=($38<<2);
      var $40=STACKTOP;STACKTOP = (STACKTOP + $39)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $41=$40;
      $asm1=$41;
      var $42=$n;
      var $43=((($42)+(1))|0);
      var $44=($43<<2);
      var $45=STACKTOP;STACKTOP = (STACKTOP + $44)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $46=$45;
      $as2=$46;
      var $47=$n;
      var $48=((($47)+(1))|0);
      var $49=($48<<2);
      var $50=STACKTOP;STACKTOP = (STACKTOP + $49)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $51=$50;
      $bs1=$51;
      var $52=$n;
      var $53=($52<<2);
      var $54=STACKTOP;STACKTOP = (STACKTOP + $53)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $55=$54;
      $bsm1=$55;
      var $56=$n;
      var $57=((($56)+(1))|0);
      var $58=($57<<2);
      var $59=STACKTOP;STACKTOP = (STACKTOP + $58)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $60=$59;
      $bs2=$60;
      var $61=$1;
      $a0_a2=$61;
      var $62=$as1;
      var $63=$asm1;
      var $64=$2;
      var $65=$n;
      var $66=$s;
      var $67=$a0_a2;
      var $68=___gmpn_toom_eval_dgr3_pm1($62, $63, $64, $65, $66, $67);
      var $69=$68 & 1;
      $vm1_neg=$69;
      var $70=$as2;
      var $71=$2;
      var $72=$n;
      var $73=((($72)*(3))&-1);
      var $74=(($71+($73<<2))|0);
      var $75=$s;
      var $76=___gmpn_lshift($70, $74, $75, 1);
      $cy=$76;
      var $77=$as2;
      var $78=$2;
      var $79=$n;
      var $80=($79<<1);
      var $81=(($78+($80<<2))|0);
      var $82=$as2;
      var $83=$s;
      var $84=___gmpn_add_n($77, $81, $82, $83);
      var $85=$cy;
      var $86=((($85)+($84))|0);
      $cy=$86;
      var $87=$s;
      var $88=$n;
      var $89=(($87)|0)!=(($88)|0);
      if ($89) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $91=$as2;
      var $92=$s;
      var $93=(($91+($92<<2))|0);
      var $94=$2;
      var $95=$n;
      var $96=($95<<1);
      var $97=(($94+($96<<2))|0);
      var $98=$s;
      var $99=(($97+($98<<2))|0);
      var $100=$n;
      var $101=$s;
      var $102=((($100)-($101))|0);
      var $103=$cy;
      var $104=___gmpn_add_1($93, $99, $102, $103);
      $cy=$104;
      label = 11; break;
    case 11: 
      var $106=$cy;
      var $107=($106<<1);
      var $108=$as2;
      var $109=$as2;
      var $110=$n;
      var $111=___gmpn_lshift($108, $109, $110, 1);
      var $112=((($107)+($111))|0);
      $cy=$112;
      var $113=$as2;
      var $114=$2;
      var $115=$n;
      var $116=(($114+($115<<2))|0);
      var $117=$as2;
      var $118=$n;
      var $119=___gmpn_add_n($113, $116, $117, $118);
      var $120=$cy;
      var $121=((($120)+($119))|0);
      $cy=$121;
      var $122=$cy;
      var $123=($122<<1);
      var $124=$as2;
      var $125=$as2;
      var $126=$n;
      var $127=___gmpn_lshift($124, $125, $126, 1);
      var $128=((($123)+($127))|0);
      $cy=$128;
      var $129=$as2;
      var $130=$2;
      var $131=$as2;
      var $132=$n;
      var $133=___gmpn_add_n($129, $130, $131, $132);
      var $134=$cy;
      var $135=((($134)+($133))|0);
      $cy=$135;
      var $136=$cy;
      var $137=$n;
      var $138=$as2;
      var $139=(($138+($137<<2))|0);
      HEAP32[(($139)>>2)]=$136;
      var $140=$t;
      var $141=$n;
      var $142=(($140)|0)==(($141)|0);
      if ($142) { label = 12; break; } else { label = 16; break; }
    case 12: 
      var $144=$bs1;
      var $145=$4;
      var $146=$4;
      var $147=$n;
      var $148=(($146+($147<<2))|0);
      var $149=$n;
      var $150=___gmpn_add_n($144, $145, $148, $149);
      var $151=$n;
      var $152=$bs1;
      var $153=(($152+($151<<2))|0);
      HEAP32[(($153)>>2)]=$150;
      var $154=$4;
      var $155=$4;
      var $156=$n;
      var $157=(($155+($156<<2))|0);
      var $158=$n;
      var $159=___gmpn_cmp($154, $157, $158);
      var $160=(($159)|0) < 0;
      if ($160) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $162=$bsm1;
      var $163=$4;
      var $164=$n;
      var $165=(($163+($164<<2))|0);
      var $166=$4;
      var $167=$n;
      var $168=___gmpn_sub_n($162, $165, $166, $167);
      var $169=$vm1_neg;
      var $170=$169 ^ 1;
      $vm1_neg=$170;
      label = 15; break;
    case 14: 
      var $172=$bsm1;
      var $173=$4;
      var $174=$4;
      var $175=$n;
      var $176=(($174+($175<<2))|0);
      var $177=$n;
      var $178=___gmpn_sub_n($172, $173, $176, $177);
      label = 15; break;
    case 15: 
      label = 30; break;
    case 16: 
      var $181=$bs1;
      var $182=$4;
      var $183=$n;
      var $184=$4;
      var $185=$n;
      var $186=(($184+($185<<2))|0);
      var $187=$t;
      var $188=___gmpn_add($181, $182, $183, $186, $187);
      var $189=$n;
      var $190=$bs1;
      var $191=(($190+($189<<2))|0);
      HEAP32[(($191)>>2)]=$188;
      var $192=$4;
      var $193=$t;
      var $194=(($192+($193<<2))|0);
      var $195=$n;
      var $196=$t;
      var $197=((($195)-($196))|0);
      var $198=_mpn_zero_p287($194, $197);
      var $199=(($198)|0)!=0;
      if ($199) { label = 17; break; } else { label = 28; break; }
    case 17: 
      var $201=$4;
      var $202=$4;
      var $203=$n;
      var $204=(($202+($203<<2))|0);
      var $205=$t;
      var $206=___gmpn_cmp($201, $204, $205);
      var $207=(($206)|0) < 0;
      if ($207) { label = 18; break; } else { label = 28; break; }
    case 18: 
      var $209=$bsm1;
      var $210=$4;
      var $211=$n;
      var $212=(($210+($211<<2))|0);
      var $213=$4;
      var $214=$t;
      var $215=___gmpn_sub_n($209, $212, $213, $214);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $219=$n;
      var $220=$t;
      var $221=((($219)-($220))|0);
      var $222=(($221)|0)!=0;
      if ($222) { label = 22; break; } else { label = 26; break; }
    case 22: 
      var $224=$bsm1;
      var $225=$t;
      var $226=(($224+($225<<2))|0);
      $__dst=$226;
      var $227=$n;
      var $228=$t;
      var $229=((($227)-($228))|0);
      $__n=$229;
      label = 23; break;
    case 23: 
      var $231=$__dst;
      var $232=(($231+4)|0);
      $__dst=$232;
      HEAP32[(($231)>>2)]=0;
      label = 24; break;
    case 24: 
      var $234=$__n;
      var $235=((($234)-(1))|0);
      $__n=$235;
      var $236=(($235)|0)!=0;
      if ($236) { label = 23; break; } else { label = 25; break; }
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $240=$vm1_neg;
      var $241=$240 ^ 1;
      $vm1_neg=$241;
      label = 29; break;
    case 28: 
      var $243=$bsm1;
      var $244=$4;
      var $245=$n;
      var $246=$4;
      var $247=$n;
      var $248=(($246+($247<<2))|0);
      var $249=$t;
      var $250=___gmpn_sub($243, $244, $245, $248, $249);
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $253=$bs2;
      var $254=$bs1;
      var $255=$n;
      var $256=((($255)+(1))|0);
      var $257=$4;
      var $258=$n;
      var $259=(($257+($258<<2))|0);
      var $260=$t;
      var $261=___gmpn_add($253, $254, $256, $259, $260);
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $273=$6;
      var $274=$asm1;
      var $275=$bsm1;
      var $276=$n;
      ___gmpn_mul_n($273, $274, $275, $276);
      label = 42; break;
    case 42: 
      $cy=0;
      var $278=$n;
      var $279=$asm1;
      var $280=(($279+($278<<2))|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=(($281)|0)!=0;
      if ($282) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $284=$6;
      var $285=$n;
      var $286=(($284+($285<<2))|0);
      var $287=$6;
      var $288=$n;
      var $289=(($287+($288<<2))|0);
      var $290=$bsm1;
      var $291=$n;
      var $292=___gmpn_add_n($286, $289, $290, $291);
      $cy=$292;
      label = 44; break;
    case 44: 
      var $294=$cy;
      var $295=$n;
      var $296=($295<<1);
      var $297=$6;
      var $298=(($297+($296<<2))|0);
      HEAP32[(($298)>>2)]=$294;
      label = 45; break;
    case 45: 
      var $300=$6;
      var $301=$n;
      var $302=($301<<1);
      var $303=(($300+($302<<2))|0);
      var $304=(($303+4)|0);
      var $305=$as2;
      var $306=$bs2;
      var $307=$n;
      var $308=((($307)+(1))|0);
      ___gmpn_mul_n($304, $305, $306, $308);
      label = 46; break;
    case 46: 
      var $310=$s;
      var $311=$t;
      var $312=(($310)|0) > (($311)|0);
      if ($312) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $314=$1;
      var $315=$n;
      var $316=($315<<2);
      var $317=(($314+($316<<2))|0);
      var $318=$2;
      var $319=$n;
      var $320=((($319)*(3))&-1);
      var $321=(($318+($320<<2))|0);
      var $322=$s;
      var $323=$4;
      var $324=$n;
      var $325=(($323+($324<<2))|0);
      var $326=$t;
      var $327=___gmpn_mul($317, $321, $322, $325, $326);
      label = 49; break;
    case 48: 
      var $329=$1;
      var $330=$n;
      var $331=($330<<2);
      var $332=(($329+($331<<2))|0);
      var $333=$4;
      var $334=$n;
      var $335=(($333+($334<<2))|0);
      var $336=$t;
      var $337=$2;
      var $338=$n;
      var $339=((($338)*(3))&-1);
      var $340=(($337+($339<<2))|0);
      var $341=$s;
      var $342=___gmpn_mul($332, $335, $336, $340, $341);
      label = 49; break;
    case 49: 
      var $344=$1;
      var $345=$n;
      var $346=($345<<2);
      var $347=(($344+($346<<2))|0);
      var $348=(($347)|0);
      var $349=HEAP32[(($348)>>2)];
      $vinf0=$349;
      label = 50; break;
    case 50: 
      var $351=$1;
      var $352=$n;
      var $353=($352<<1);
      var $354=(($351+($353<<2))|0);
      var $355=$as1;
      var $356=$bs1;
      var $357=$n;
      ___gmpn_mul_n($354, $355, $356, $357);
      label = 51; break;
    case 51: 
      var $359=$n;
      var $360=$as1;
      var $361=(($360+($359<<2))|0);
      var $362=HEAP32[(($361)>>2)];
      var $363=(($362)|0)==1;
      if ($363) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $365=$n;
      var $366=$bs1;
      var $367=(($366+($365<<2))|0);
      var $368=HEAP32[(($367)>>2)];
      var $369=$1;
      var $370=$n;
      var $371=($370<<1);
      var $372=(($369+($371<<2))|0);
      var $373=$n;
      var $374=(($372+($373<<2))|0);
      var $375=$1;
      var $376=$n;
      var $377=($376<<1);
      var $378=(($375+($377<<2))|0);
      var $379=$n;
      var $380=(($378+($379<<2))|0);
      var $381=$bs1;
      var $382=$n;
      var $383=___gmpn_add_n($374, $380, $381, $382);
      var $384=((($368)+($383))|0);
      $cy=$384;
      label = 60; break;
    case 53: 
      var $386=$n;
      var $387=$as1;
      var $388=(($387+($386<<2))|0);
      var $389=HEAP32[(($388)>>2)];
      var $390=(($389)|0)==2;
      if ($390) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $392=$n;
      var $393=$bs1;
      var $394=(($393+($392<<2))|0);
      var $395=HEAP32[(($394)>>2)];
      var $396=($395<<1);
      var $397=$1;
      var $398=$n;
      var $399=($398<<1);
      var $400=(($397+($399<<2))|0);
      var $401=$n;
      var $402=(($400+($401<<2))|0);
      var $403=$bs1;
      var $404=$n;
      var $405=___gmpn_addmul_1($402, $403, $404, 2);
      var $406=((($396)+($405))|0);
      $cy=$406;
      label = 59; break;
    case 55: 
      var $408=$n;
      var $409=$as1;
      var $410=(($409+($408<<2))|0);
      var $411=HEAP32[(($410)>>2)];
      var $412=(($411)|0)==3;
      if ($412) { label = 56; break; } else { label = 57; break; }
    case 56: 
      var $414=$n;
      var $415=$bs1;
      var $416=(($415+($414<<2))|0);
      var $417=HEAP32[(($416)>>2)];
      var $418=((($417)*(3))&-1);
      var $419=$1;
      var $420=$n;
      var $421=($420<<1);
      var $422=(($419+($421<<2))|0);
      var $423=$n;
      var $424=(($422+($423<<2))|0);
      var $425=$bs1;
      var $426=$n;
      var $427=___gmpn_addmul_1($424, $425, $426, 3);
      var $428=((($418)+($427))|0);
      $cy=$428;
      label = 58; break;
    case 57: 
      $cy=0;
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $433=$n;
      var $434=$bs1;
      var $435=(($434+($433<<2))|0);
      var $436=HEAP32[(($435)>>2)];
      var $437=(($436)|0)!=0;
      if ($437) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $439=$1;
      var $440=$n;
      var $441=($440<<1);
      var $442=(($439+($441<<2))|0);
      var $443=$n;
      var $444=(($442+($443<<2))|0);
      var $445=$1;
      var $446=$n;
      var $447=($446<<1);
      var $448=(($445+($447<<2))|0);
      var $449=$n;
      var $450=(($448+($449<<2))|0);
      var $451=$as1;
      var $452=$n;
      var $453=___gmpn_add_n($444, $450, $451, $452);
      var $454=$cy;
      var $455=((($454)+($453))|0);
      $cy=$455;
      label = 62; break;
    case 62: 
      var $457=$cy;
      var $458=$n;
      var $459=($458<<1);
      var $460=$1;
      var $461=$n;
      var $462=($461<<1);
      var $463=(($460+($462<<2))|0);
      var $464=(($463+($459<<2))|0);
      HEAP32[(($464)>>2)]=$457;
      label = 63; break;
    case 63: 
      var $466=$1;
      var $467=$2;
      var $468=$4;
      var $469=$n;
      ___gmpn_mul_n($466, $467, $468, $469);
      label = 64; break;
    case 64: 
      var $471=$1;
      var $472=$6;
      var $473=$n;
      var $474=($473<<1);
      var $475=(($472+($474<<2))|0);
      var $476=(($475+4)|0);
      var $477=$6;
      var $478=$n;
      var $479=$s;
      var $480=$t;
      var $481=((($479)+($480))|0);
      var $482=$vm1_neg;
      var $483=$vinf0;
      ___gmpn_toom_interpolate_5pts($471, $476, $477, $478, $481, $482, $483);
      label = 65; break;
    case 65: 
      var $485=$__tmp_marker;
      var $486=(($485)|0)!=0;
      var $487=(($486)&1);
      var $488=(($487)|0)!=0;
      var $489=(($488)&1);
      var $490=($489);
      var $491=(($490)|0)!=0;
      if ($491) { label = 66; break; } else { label = 67; break; }
    case 66: 
      var $493=$__tmp_marker;
      ___gmp_tmp_reentrant_free($493);
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom42_mul["X"]=1;

function ___gmpn_toom33_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $__gmpn_cpuvec_initialized;
      var $n;
      var $s;
      var $t;
      var $vm1_neg;
      var $cy;
      var $vinf0;
      var $gp;
      var $as1;
      var $asm1;
      var $as2;
      var $bs1;
      var $bsm1;
      var $bs2;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      $__gmpn_cpuvec_initialized=1;
      var $7=$3;
      var $8=((($7)+(2))|0);
      var $9=Math.floor(((($8)>>>0))/(3));
      $n=$9;
      var $10=$3;
      var $11=$n;
      var $12=($11<<1);
      var $13=((($10)-($12))|0);
      $s=$13;
      var $14=$5;
      var $15=$n;
      var $16=($15<<1);
      var $17=((($14)-($16))|0);
      $t=$17;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $24=$6;
      var $25=$n;
      var $26=($25<<2);
      var $27=(($24+($26<<2))|0);
      var $28=(($27+16)|0);
      $as1=$28;
      var $29=$6;
      var $30=$n;
      var $31=($30<<1);
      var $32=(($29+($31<<2))|0);
      var $33=(($32+8)|0);
      $asm1=$33;
      var $34=$1;
      var $35=$n;
      var $36=(($34+($35<<2))|0);
      var $37=(($36+4)|0);
      $as2=$37;
      var $38=$1;
      $bs1=$38;
      var $39=$6;
      var $40=$n;
      var $41=((($40)*(3))&-1);
      var $42=(($39+($41<<2))|0);
      var $43=(($42+12)|0);
      $bsm1=$43;
      var $44=$1;
      var $45=$n;
      var $46=($45<<1);
      var $47=(($44+($46<<2))|0);
      var $48=(($47+8)|0);
      $bs2=$48;
      var $49=$6;
      $gp=$49;
      $vm1_neg=0;
      var $50=$gp;
      var $51=$2;
      var $52=$n;
      var $53=$2;
      var $54=$n;
      var $55=($54<<1);
      var $56=(($53+($55<<2))|0);
      var $57=$s;
      var $58=___gmpn_add($50, $51, $52, $56, $57);
      $cy=$58;
      var $59=$cy;
      var $60=$as1;
      var $61=$gp;
      var $62=$2;
      var $63=$n;
      var $64=(($62+($63<<2))|0);
      var $65=$n;
      var $66=___gmpn_add_n($60, $61, $64, $65);
      var $67=((($59)+($66))|0);
      var $68=$n;
      var $69=$as1;
      var $70=(($69+($68<<2))|0);
      HEAP32[(($70)>>2)]=$67;
      var $71=$cy;
      var $72=(($71)|0)==0;
      if ($72) { label = 9; break; } else { label = 11; break; }
    case 9: 
      var $74=$gp;
      var $75=$2;
      var $76=$n;
      var $77=(($75+($76<<2))|0);
      var $78=$n;
      var $79=___gmpn_cmp($74, $77, $78);
      var $80=(($79)|0) < 0;
      if ($80) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $82=$asm1;
      var $83=$2;
      var $84=$n;
      var $85=(($83+($84<<2))|0);
      var $86=$gp;
      var $87=$n;
      var $88=___gmpn_sub_n($82, $85, $86, $87);
      var $89=$n;
      var $90=$asm1;
      var $91=(($90+($89<<2))|0);
      HEAP32[(($91)>>2)]=0;
      $vm1_neg=1;
      label = 12; break;
    case 11: 
      var $93=$asm1;
      var $94=$gp;
      var $95=$2;
      var $96=$n;
      var $97=(($95+($96<<2))|0);
      var $98=$n;
      var $99=___gmpn_sub_n($93, $94, $97, $98);
      var $100=$cy;
      var $101=((($100)-($99))|0);
      $cy=$101;
      var $102=$cy;
      var $103=$n;
      var $104=$asm1;
      var $105=(($104+($103<<2))|0);
      HEAP32[(($105)>>2)]=$102;
      label = 12; break;
    case 12: 
      var $107=$as2;
      var $108=$2;
      var $109=$n;
      var $110=($109<<1);
      var $111=(($108+($110<<2))|0);
      var $112=$as1;
      var $113=$s;
      var $114=___gmpn_add_n($107, $111, $112, $113);
      $cy=$114;
      var $115=$s;
      var $116=$n;
      var $117=(($115)|0)!=(($116)|0);
      if ($117) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $119=$as2;
      var $120=$s;
      var $121=(($119+($120<<2))|0);
      var $122=$as1;
      var $123=$s;
      var $124=(($122+($123<<2))|0);
      var $125=$n;
      var $126=$s;
      var $127=((($125)-($126))|0);
      var $128=$cy;
      var $129=___gmpn_add_1($121, $124, $127, $128);
      $cy=$129;
      label = 14; break;
    case 14: 
      var $131=$n;
      var $132=$as1;
      var $133=(($132+($131<<2))|0);
      var $134=HEAP32[(($133)>>2)];
      var $135=$cy;
      var $136=((($135)+($134))|0);
      $cy=$136;
      var $137=$cy;
      var $138=($137<<1);
      var $139=$as2;
      var $140=$as2;
      var $141=$n;
      var $142=___gmpn_lshift($139, $140, $141, 1);
      var $143=((($138)+($142))|0);
      $cy=$143;
      var $144=$as2;
      var $145=$as2;
      var $146=$2;
      var $147=$n;
      var $148=___gmpn_sub_n($144, $145, $146, $147);
      var $149=$cy;
      var $150=((($149)-($148))|0);
      $cy=$150;
      var $151=$cy;
      var $152=$n;
      var $153=$as2;
      var $154=(($153+($152<<2))|0);
      HEAP32[(($154)>>2)]=$151;
      var $155=$gp;
      var $156=$4;
      var $157=$n;
      var $158=$4;
      var $159=$n;
      var $160=($159<<1);
      var $161=(($158+($160<<2))|0);
      var $162=$t;
      var $163=___gmpn_add($155, $156, $157, $161, $162);
      $cy=$163;
      var $164=$cy;
      var $165=$bs1;
      var $166=$gp;
      var $167=$4;
      var $168=$n;
      var $169=(($167+($168<<2))|0);
      var $170=$n;
      var $171=___gmpn_add_n($165, $166, $169, $170);
      var $172=((($164)+($171))|0);
      var $173=$n;
      var $174=$bs1;
      var $175=(($174+($173<<2))|0);
      HEAP32[(($175)>>2)]=$172;
      var $176=$cy;
      var $177=(($176)|0)==0;
      if ($177) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $179=$gp;
      var $180=$4;
      var $181=$n;
      var $182=(($180+($181<<2))|0);
      var $183=$n;
      var $184=___gmpn_cmp($179, $182, $183);
      var $185=(($184)|0) < 0;
      if ($185) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $187=$bsm1;
      var $188=$4;
      var $189=$n;
      var $190=(($188+($189<<2))|0);
      var $191=$gp;
      var $192=$n;
      var $193=___gmpn_sub_n($187, $190, $191, $192);
      var $194=$n;
      var $195=$bsm1;
      var $196=(($195+($194<<2))|0);
      HEAP32[(($196)>>2)]=0;
      var $197=$vm1_neg;
      var $198=$197 ^ 1;
      $vm1_neg=$198;
      label = 18; break;
    case 17: 
      var $200=$bsm1;
      var $201=$gp;
      var $202=$4;
      var $203=$n;
      var $204=(($202+($203<<2))|0);
      var $205=$n;
      var $206=___gmpn_sub_n($200, $201, $204, $205);
      var $207=$cy;
      var $208=((($207)-($206))|0);
      $cy=$208;
      var $209=$cy;
      var $210=$n;
      var $211=$bsm1;
      var $212=(($211+($210<<2))|0);
      HEAP32[(($212)>>2)]=$209;
      label = 18; break;
    case 18: 
      var $214=$bs2;
      var $215=$bs1;
      var $216=$4;
      var $217=$n;
      var $218=($217<<1);
      var $219=(($216+($218<<2))|0);
      var $220=$t;
      var $221=___gmpn_add_n($214, $215, $219, $220);
      $cy=$221;
      var $222=$t;
      var $223=$n;
      var $224=(($222)|0)!=(($223)|0);
      if ($224) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $226=$bs2;
      var $227=$t;
      var $228=(($226+($227<<2))|0);
      var $229=$bs1;
      var $230=$t;
      var $231=(($229+($230<<2))|0);
      var $232=$n;
      var $233=$t;
      var $234=((($232)-($233))|0);
      var $235=$cy;
      var $236=___gmpn_add_1($228, $231, $234, $235);
      $cy=$236;
      label = 20; break;
    case 20: 
      var $238=$n;
      var $239=$bs1;
      var $240=(($239+($238<<2))|0);
      var $241=HEAP32[(($240)>>2)];
      var $242=$cy;
      var $243=((($242)+($241))|0);
      $cy=$243;
      var $244=$cy;
      var $245=($244<<1);
      var $246=$bs2;
      var $247=$bs2;
      var $248=$n;
      var $249=___gmpn_lshift($246, $247, $248, 1);
      var $250=((($245)+($249))|0);
      $cy=$250;
      var $251=$bs2;
      var $252=$bs2;
      var $253=$4;
      var $254=$n;
      var $255=___gmpn_sub_n($251, $252, $253, $254);
      var $256=$cy;
      var $257=((($256)-($255))|0);
      $cy=$257;
      var $258=$cy;
      var $259=$n;
      var $260=$bs2;
      var $261=(($260+($259<<2))|0);
      HEAP32[(($261)>>2)]=$258;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $275=$n;
      var $276=((($275)+(1))|0);
      var $277=(($276)|0) >= 100;
      if ($277) { label = 35; break; } else { label = 34; break; }
    case 34: 
      var $279=$6;
      var $280=$asm1;
      var $281=$n;
      var $282=((($281)+(1))|0);
      var $283=$bsm1;
      var $284=$n;
      var $285=((($284)+(1))|0);
      var $286=$6;
      var $287=$n;
      var $288=((($287)*(5))&-1);
      var $289=(($286+($288<<2))|0);
      var $290=(($289+20)|0);
      ___gmpn_toom22_mul($279, $280, $282, $283, $285, $290);
      label = 36; break;
    case 35: 
      var $292=$6;
      var $293=$asm1;
      var $294=$n;
      var $295=((($294)+(1))|0);
      var $296=$bsm1;
      var $297=$n;
      var $298=((($297)+(1))|0);
      var $299=$6;
      var $300=$n;
      var $301=((($300)*(5))&-1);
      var $302=(($299+($301<<2))|0);
      var $303=(($302+20)|0);
      ___gmpn_toom33_mul($292, $293, $295, $296, $298, $303);
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $307=$n;
      var $308=((($307)+(1))|0);
      var $309=(($308)|0) >= 100;
      if ($309) { label = 40; break; } else { label = 39; break; }
    case 39: 
      var $311=$6;
      var $312=$n;
      var $313=($312<<1);
      var $314=(($311+($313<<2))|0);
      var $315=(($314+4)|0);
      var $316=$as2;
      var $317=$n;
      var $318=((($317)+(1))|0);
      var $319=$bs2;
      var $320=$n;
      var $321=((($320)+(1))|0);
      var $322=$6;
      var $323=$n;
      var $324=((($323)*(5))&-1);
      var $325=(($322+($324<<2))|0);
      var $326=(($325+20)|0);
      ___gmpn_toom22_mul($315, $316, $318, $319, $321, $326);
      label = 41; break;
    case 40: 
      var $328=$6;
      var $329=$n;
      var $330=($329<<1);
      var $331=(($328+($330<<2))|0);
      var $332=(($331+4)|0);
      var $333=$as2;
      var $334=$n;
      var $335=((($334)+(1))|0);
      var $336=$bs2;
      var $337=$n;
      var $338=((($337)+(1))|0);
      var $339=$6;
      var $340=$n;
      var $341=((($340)*(5))&-1);
      var $342=(($339+($341<<2))|0);
      var $343=(($342+20)|0);
      ___gmpn_toom33_mul($332, $333, $335, $336, $338, $343);
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $346=$s;
      var $347=$t;
      var $348=(($346)|0) > (($347)|0);
      if ($348) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $350=$1;
      var $351=$n;
      var $352=($351<<2);
      var $353=(($350+($352<<2))|0);
      var $354=$2;
      var $355=$n;
      var $356=($355<<1);
      var $357=(($354+($356<<2))|0);
      var $358=$s;
      var $359=$4;
      var $360=$n;
      var $361=($360<<1);
      var $362=(($359+($361<<2))|0);
      var $363=$t;
      var $364=___gmpn_mul($353, $357, $358, $362, $363);
      label = 50; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $367=$s;
      var $368=(($367)|0) >= 100;
      if ($368) { label = 47; break; } else { label = 46; break; }
    case 46: 
      var $370=$1;
      var $371=$n;
      var $372=($371<<2);
      var $373=(($370+($372<<2))|0);
      var $374=$2;
      var $375=$n;
      var $376=($375<<1);
      var $377=(($374+($376<<2))|0);
      var $378=$s;
      var $379=$4;
      var $380=$n;
      var $381=($380<<1);
      var $382=(($379+($381<<2))|0);
      var $383=$s;
      var $384=$6;
      var $385=$n;
      var $386=((($385)*(5))&-1);
      var $387=(($384+($386<<2))|0);
      var $388=(($387+20)|0);
      ___gmpn_toom22_mul($373, $377, $378, $382, $383, $388);
      label = 48; break;
    case 47: 
      var $390=$1;
      var $391=$n;
      var $392=($391<<2);
      var $393=(($390+($392<<2))|0);
      var $394=$2;
      var $395=$n;
      var $396=($395<<1);
      var $397=(($394+($396<<2))|0);
      var $398=$s;
      var $399=$4;
      var $400=$n;
      var $401=($400<<1);
      var $402=(($399+($401<<2))|0);
      var $403=$s;
      var $404=$6;
      var $405=$n;
      var $406=((($405)*(5))&-1);
      var $407=(($404+($406<<2))|0);
      var $408=(($407+20)|0);
      ___gmpn_toom33_mul($393, $397, $398, $402, $403, $408);
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $412=$1;
      var $413=$n;
      var $414=($413<<2);
      var $415=(($412+($414<<2))|0);
      var $416=(($415)|0);
      var $417=HEAP32[(($416)>>2)];
      $vinf0=$417;
      var $418=$1;
      var $419=$n;
      var $420=($419<<2);
      var $421=(($418+($420<<2))|0);
      var $422=(($421+4)|0);
      var $423=HEAP32[(($422)>>2)];
      $cy=$423;
      label = 51; break;
    case 51: 
      var $425=$n;
      var $426=((($425)+(1))|0);
      var $427=(($426)|0) >= 100;
      if ($427) { label = 53; break; } else { label = 52; break; }
    case 52: 
      var $429=$1;
      var $430=$n;
      var $431=($430<<1);
      var $432=(($429+($431<<2))|0);
      var $433=$as1;
      var $434=$n;
      var $435=((($434)+(1))|0);
      var $436=$bs1;
      var $437=$n;
      var $438=((($437)+(1))|0);
      var $439=$6;
      var $440=$n;
      var $441=((($440)*(5))&-1);
      var $442=(($439+($441<<2))|0);
      var $443=(($442+20)|0);
      ___gmpn_toom22_mul($432, $433, $435, $436, $438, $443);
      label = 54; break;
    case 53: 
      var $445=$1;
      var $446=$n;
      var $447=($446<<1);
      var $448=(($445+($447<<2))|0);
      var $449=$as1;
      var $450=$n;
      var $451=((($450)+(1))|0);
      var $452=$bs1;
      var $453=$n;
      var $454=((($453)+(1))|0);
      var $455=$6;
      var $456=$n;
      var $457=((($456)*(5))&-1);
      var $458=(($455+($457<<2))|0);
      var $459=(($458+20)|0);
      ___gmpn_toom33_mul($448, $449, $451, $452, $454, $459);
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $462=$cy;
      var $463=$1;
      var $464=$n;
      var $465=($464<<2);
      var $466=(($463+($465<<2))|0);
      var $467=(($466+4)|0);
      HEAP32[(($467)>>2)]=$462;
      label = 56; break;
    case 56: 
      var $469=$n;
      var $470=(($469)|0) >= 100;
      if ($470) { label = 58; break; } else { label = 57; break; }
    case 57: 
      var $472=$1;
      var $473=$2;
      var $474=$n;
      var $475=$4;
      var $476=$n;
      var $477=$6;
      var $478=$n;
      var $479=((($478)*(5))&-1);
      var $480=(($477+($479<<2))|0);
      var $481=(($480+20)|0);
      ___gmpn_toom22_mul($472, $473, $474, $475, $476, $481);
      label = 59; break;
    case 58: 
      var $483=$1;
      var $484=$2;
      var $485=$n;
      var $486=$4;
      var $487=$n;
      var $488=$6;
      var $489=$n;
      var $490=((($489)*(5))&-1);
      var $491=(($488+($490<<2))|0);
      var $492=(($491+20)|0);
      ___gmpn_toom33_mul($483, $484, $485, $486, $487, $492);
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $495=$1;
      var $496=$6;
      var $497=$n;
      var $498=($497<<1);
      var $499=(($496+($498<<2))|0);
      var $500=(($499+4)|0);
      var $501=$6;
      var $502=$n;
      var $503=$s;
      var $504=$t;
      var $505=((($503)+($504))|0);
      var $506=$vm1_neg;
      var $507=$vinf0;
      ___gmpn_toom_interpolate_5pts($495, $500, $501, $502, $505, $506, $507);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom33_mul["X"]=1;

function ___gmpn_toom43_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $flags;
      var $cy;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      var $7=$3;
      var $8=((($7)*(3))&-1);
      var $9=$5;
      var $10=($9<<2);
      var $11=(($8)|0) >= (($10)|0);
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$3;
      var $14=((($13)-(1))|0);
      var $15=$14 >> 2;
      var $21 = $15;label = 5; break;
    case 4: 
      var $17=$5;
      var $18=((($17)-(1))|0);
      var $19=Math.floor(((($18)>>>0))/(3));
      var $21 = $19;label = 5; break;
    case 5: 
      var $21;
      var $22=((($21)+(1))|0);
      $n=$22;
      var $23=$3;
      var $24=$n;
      var $25=((($24)*(3))&-1);
      var $26=((($23)-($25))|0);
      $s=$26;
      var $27=$5;
      var $28=$n;
      var $29=($28<<1);
      var $30=((($27)-($29))|0);
      $t=$30;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      var $37=$1;
      var $38=$n;
      var $39=((($38)*(3))&-1);
      var $40=(($37+($39<<2))|0);
      var $41=(($40+12)|0);
      var $42=$6;
      var $43=$n;
      var $44=($43<<2);
      var $45=(($42+($44<<2))|0);
      var $46=(($45+16)|0);
      var $47=$2;
      var $48=$n;
      var $49=$s;
      var $50=$6;
      var $51=$n;
      var $52=((($51)*(3))&-1);
      var $53=(($50+($52<<2))|0);
      var $54=(($53+12)|0);
      var $55=___gmpn_toom_eval_dgr3_pm2($41, $46, $47, $48, $49, $54);
      var $56=2 & $55;
      $flags=$56;
      var $57=$6;
      var $58=$n;
      var $59=($58<<1);
      var $60=(($57+($59<<2))|0);
      var $61=(($60+8)|0);
      var $62=$4;
      var $63=$n;
      var $64=(($62+($63<<2))|0);
      var $65=$n;
      var $66=___gmpn_lshift($61, $64, $65, 1);
      var $67=$n;
      var $68=$6;
      var $69=$n;
      var $70=($69<<1);
      var $71=(($68+($70<<2))|0);
      var $72=(($71+8)|0);
      var $73=(($72+($67<<2))|0);
      HEAP32[(($73)>>2)]=$66;
      var $74=$6;
      var $75=$4;
      var $76=$n;
      var $77=($76<<1);
      var $78=(($75+($77<<2))|0);
      var $79=$t;
      var $80=___gmpn_lshift($74, $78, $79, 2);
      $cy=$80;
      var $81=$6;
      var $82=$6;
      var $83=$4;
      var $84=$t;
      var $85=___gmpn_add_n($81, $82, $83, $84);
      var $86=$cy;
      var $87=((($86)+($85))|0);
      $cy=$87;
      var $88=$t;
      var $89=$n;
      var $90=(($88)|0)!=(($89)|0);
      if ($90) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $92=$6;
      var $93=$t;
      var $94=(($92+($93<<2))|0);
      var $95=$4;
      var $96=$t;
      var $97=(($95+($96<<2))|0);
      var $98=$n;
      var $99=$t;
      var $100=((($98)-($99))|0);
      var $101=$cy;
      var $102=___gmpn_add_1($94, $97, $100, $101);
      $cy=$102;
      label = 13; break;
    case 13: 
      var $104=$cy;
      var $105=$n;
      var $106=$6;
      var $107=(($106+($105<<2))|0);
      HEAP32[(($107)>>2)]=$104;
      var $108=$1;
      var $109=$n;
      var $110=($109<<1);
      var $111=(($108+($110<<2))|0);
      var $112=(($111+8)|0);
      var $113=$6;
      var $114=$6;
      var $115=$n;
      var $116=($115<<1);
      var $117=(($114+($116<<2))|0);
      var $118=(($117+8)|0);
      var $119=$n;
      var $120=((($119)+(1))|0);
      var $121=___gmpn_add_n($112, $113, $118, $120);
      var $122=$6;
      var $123=$6;
      var $124=$n;
      var $125=($124<<1);
      var $126=(($123+($125<<2))|0);
      var $127=(($126+8)|0);
      var $128=$n;
      var $129=((($128)+(1))|0);
      var $130=___gmpn_cmp($122, $127, $129);
      var $131=(($130)|0) < 0;
      if ($131) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $133=$1;
      var $134=$n;
      var $135=(($133+($134<<2))|0);
      var $136=(($135+4)|0);
      var $137=$6;
      var $138=$n;
      var $139=($138<<1);
      var $140=(($137+($139<<2))|0);
      var $141=(($140+8)|0);
      var $142=$6;
      var $143=$n;
      var $144=((($143)+(1))|0);
      var $145=___gmpn_sub_n($136, $141, $142, $144);
      var $146=$flags;
      var $147=$146 ^ 2;
      $flags=$147;
      label = 16; break;
    case 15: 
      var $149=$1;
      var $150=$n;
      var $151=(($149+($150<<2))|0);
      var $152=(($151+4)|0);
      var $153=$6;
      var $154=$6;
      var $155=$n;
      var $156=($155<<1);
      var $157=(($154+($156<<2))|0);
      var $158=(($157+8)|0);
      var $159=$n;
      var $160=((($159)+(1))|0);
      var $161=___gmpn_sub_n($152, $153, $158, $160);
      label = 16; break;
    case 16: 
      var $163=$flags;
      var $164=$1;
      var $165=$n;
      var $166=($165<<2);
      var $167=(($164+($166<<2))|0);
      var $168=(($167+16)|0);
      var $169=$6;
      var $170=$n;
      var $171=((($170)*(3))&-1);
      var $172=(($169+($171<<2))|0);
      var $173=(($172+12)|0);
      var $174=$2;
      var $175=$n;
      var $176=$s;
      var $177=$6;
      var $178=___gmpn_toom_eval_dgr3_pm1($168, $173, $174, $175, $176, $177);
      var $179=1 & $178;
      var $180=$163 ^ $179;
      $flags=$180;
      var $181=$6;
      var $182=$n;
      var $183=($182<<1);
      var $184=(($181+($183<<2))|0);
      var $185=(($184+8)|0);
      var $186=$4;
      var $187=$n;
      var $188=$4;
      var $189=$n;
      var $190=($189<<1);
      var $191=(($188+($190<<2))|0);
      var $192=$t;
      var $193=___gmpn_add($185, $186, $187, $191, $192);
      var $194=$n;
      var $195=$6;
      var $196=$n;
      var $197=($196<<1);
      var $198=(($195+($197<<2))|0);
      var $199=(($198+8)|0);
      var $200=(($199+($194<<2))|0);
      HEAP32[(($200)>>2)]=$193;
      var $201=$n;
      var $202=$6;
      var $203=$n;
      var $204=($203<<1);
      var $205=(($202+($204<<2))|0);
      var $206=(($205+8)|0);
      var $207=(($206+($201<<2))|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=$1;
      var $210=$6;
      var $211=$n;
      var $212=($211<<1);
      var $213=(($210+($212<<2))|0);
      var $214=(($213+8)|0);
      var $215=$4;
      var $216=$n;
      var $217=(($215+($216<<2))|0);
      var $218=$n;
      var $219=___gmpn_add_n($209, $214, $217, $218);
      var $220=((($208)+($219))|0);
      var $221=$n;
      var $222=$1;
      var $223=(($222+($221<<2))|0);
      HEAP32[(($223)>>2)]=$220;
      var $224=$n;
      var $225=$6;
      var $226=$n;
      var $227=($226<<1);
      var $228=(($225+($227<<2))|0);
      var $229=(($228+8)|0);
      var $230=(($229+($224<<2))|0);
      var $231=HEAP32[(($230)>>2)];
      var $232=(($231)|0)==0;
      if ($232) { label = 17; break; } else { label = 19; break; }
    case 17: 
      var $234=$6;
      var $235=$n;
      var $236=($235<<1);
      var $237=(($234+($236<<2))|0);
      var $238=(($237+8)|0);
      var $239=$4;
      var $240=$n;
      var $241=(($239+($240<<2))|0);
      var $242=$n;
      var $243=___gmpn_cmp($238, $241, $242);
      var $244=(($243)|0) < 0;
      if ($244) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $246=$6;
      var $247=$n;
      var $248=($247<<1);
      var $249=(($246+($248<<2))|0);
      var $250=(($249+8)|0);
      var $251=$4;
      var $252=$n;
      var $253=(($251+($252<<2))|0);
      var $254=$6;
      var $255=$n;
      var $256=($255<<1);
      var $257=(($254+($256<<2))|0);
      var $258=(($257+8)|0);
      var $259=$n;
      var $260=___gmpn_sub_n($250, $253, $258, $259);
      var $261=$flags;
      var $262=$261 ^ 1;
      $flags=$262;
      label = 20; break;
    case 19: 
      var $264=$6;
      var $265=$n;
      var $266=($265<<1);
      var $267=(($264+($266<<2))|0);
      var $268=(($267+8)|0);
      var $269=$6;
      var $270=$n;
      var $271=($270<<1);
      var $272=(($269+($271<<2))|0);
      var $273=(($272+8)|0);
      var $274=$4;
      var $275=$n;
      var $276=(($274+($275<<2))|0);
      var $277=$n;
      var $278=___gmpn_sub_n($268, $273, $276, $277);
      var $279=$n;
      var $280=$6;
      var $281=$n;
      var $282=($281<<1);
      var $283=(($280+($282<<2))|0);
      var $284=(($283+8)|0);
      var $285=(($284+($279<<2))|0);
      var $286=HEAP32[(($285)>>2)];
      var $287=((($286)-($278))|0);
      HEAP32[(($285)>>2)]=$287;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $305=$6;
      var $306=$6;
      var $307=$n;
      var $308=((($307)*(3))&-1);
      var $309=(($306+($308<<2))|0);
      var $310=(($309+12)|0);
      var $311=$6;
      var $312=$n;
      var $313=($312<<1);
      var $314=(($311+($313<<2))|0);
      var $315=(($314+8)|0);
      var $316=$n;
      var $317=((($316)+(1))|0);
      ___gmpn_mul_n($305, $310, $315, $317);
      var $318=$6;
      var $319=$n;
      var $320=($319<<1);
      var $321=(($318+($320<<2))|0);
      var $322=(($321+4)|0);
      var $323=$6;
      var $324=$n;
      var $325=($324<<2);
      var $326=(($323+($325<<2))|0);
      var $327=(($326+16)|0);
      var $328=$1;
      var $329=$n;
      var $330=(($328+($329<<2))|0);
      var $331=(($330+4)|0);
      var $332=$n;
      var $333=((($332)+(1))|0);
      ___gmpn_mul_n($322, $327, $331, $333);
      var $334=$6;
      var $335=$n;
      var $336=($335<<2);
      var $337=(($334+($336<<2))|0);
      var $338=(($337+8)|0);
      var $339=$1;
      var $340=$n;
      var $341=((($340)*(3))&-1);
      var $342=(($339+($341<<2))|0);
      var $343=(($342+12)|0);
      var $344=$1;
      var $345=$n;
      var $346=($345<<1);
      var $347=(($344+($346<<2))|0);
      var $348=(($347+8)|0);
      var $349=$n;
      var $350=((($349)+(1))|0);
      ___gmpn_mul_n($338, $343, $348, $350);
      var $351=$1;
      var $352=$n;
      var $353=($352<<1);
      var $354=(($351+($353<<2))|0);
      var $355=$1;
      var $356=$n;
      var $357=($356<<2);
      var $358=(($355+($357<<2))|0);
      var $359=(($358+16)|0);
      var $360=$1;
      var $361=$n;
      var $362=((($361)+(1))|0);
      ___gmpn_mul_n($354, $359, $360, $362);
      var $363=$s;
      var $364=$t;
      var $365=(($363)|0) > (($364)|0);
      if ($365) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $367=$1;
      var $368=$n;
      var $369=((($368)*(5))&-1);
      var $370=(($367+($369<<2))|0);
      var $371=$2;
      var $372=$n;
      var $373=((($372)*(3))&-1);
      var $374=(($371+($373<<2))|0);
      var $375=$s;
      var $376=$4;
      var $377=$n;
      var $378=($377<<1);
      var $379=(($376+($378<<2))|0);
      var $380=$t;
      var $381=___gmpn_mul($370, $374, $375, $379, $380);
      label = 39; break;
    case 38: 
      var $383=$1;
      var $384=$n;
      var $385=((($384)*(5))&-1);
      var $386=(($383+($385<<2))|0);
      var $387=$4;
      var $388=$n;
      var $389=($388<<1);
      var $390=(($387+($389<<2))|0);
      var $391=$t;
      var $392=$2;
      var $393=$n;
      var $394=((($393)*(3))&-1);
      var $395=(($392+($394<<2))|0);
      var $396=$s;
      var $397=___gmpn_mul($386, $390, $391, $395, $396);
      label = 39; break;
    case 39: 
      var $399=$1;
      var $400=$2;
      var $401=$4;
      var $402=$n;
      ___gmpn_mul_n($399, $400, $401, $402);
      var $403=$1;
      var $404=$n;
      var $405=$flags;
      var $406=$6;
      var $407=$6;
      var $408=$n;
      var $409=($408<<1);
      var $410=(($407+($409<<2))|0);
      var $411=(($410+4)|0);
      var $412=$6;
      var $413=$n;
      var $414=($413<<2);
      var $415=(($412+($414<<2))|0);
      var $416=(($415+8)|0);
      var $417=$t;
      var $418=$s;
      var $419=((($417)+($418))|0);
      ___gmpn_toom_interpolate_6pts($403, $404, $405, $406, $411, $416, $419);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom43_mul["X"]=1;

function ___gmpn_toom53_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $cy;
      var $gp;
      var $as1;
      var $asm1;
      var $as2;
      var $asm2;
      var $ash;
      var $bs1;
      var $bsm1;
      var $bs2;
      var $bsm2;
      var $bsh;
      var $flags;
      var $__tmp_marker;
      var $__x;
      var $__p;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      var $7=$3;
      var $8=((($7)*(3))&-1);
      var $9=$5;
      var $10=((($9)*(5))&-1);
      var $11=(($8)|0) >= (($10)|0);
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $13=$3;
      var $14=((($13)-(1))|0);
      var $15=Math.floor(((($14)>>>0))/(5));
      var $21 = $15;label = 5; break;
    case 4: 
      var $17=$5;
      var $18=((($17)-(1))|0);
      var $19=Math.floor(((($18)>>>0))/(3));
      var $21 = $19;label = 5; break;
    case 5: 
      var $21;
      var $22=((($21)+(1))|0);
      $n=$22;
      var $23=$3;
      var $24=$n;
      var $25=($24<<2);
      var $26=((($23)-($25))|0);
      $s=$26;
      var $27=$5;
      var $28=$n;
      var $29=($28<<1);
      var $30=((($27)-($29))|0);
      $t=$30;
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      $__tmp_marker=0;
      var $35=$n;
      var $36=((($35)+(1))|0);
      var $37=($36<<2);
      var $38=STACKTOP;STACKTOP = (STACKTOP + $37)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $39=$38;
      $as1=$39;
      var $40=$n;
      var $41=((($40)+(1))|0);
      var $42=($41<<2);
      var $43=STACKTOP;STACKTOP = (STACKTOP + $42)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $44=$43;
      $asm1=$44;
      var $45=$n;
      var $46=((($45)+(1))|0);
      var $47=($46<<2);
      var $48=STACKTOP;STACKTOP = (STACKTOP + $47)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $49=$48;
      $as2=$49;
      var $50=$n;
      var $51=((($50)+(1))|0);
      var $52=($51<<2);
      var $53=STACKTOP;STACKTOP = (STACKTOP + $52)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $54=$53;
      $asm2=$54;
      var $55=$n;
      var $56=((($55)+(1))|0);
      var $57=($56<<2);
      var $58=STACKTOP;STACKTOP = (STACKTOP + $57)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $59=$58;
      $ash=$59;
      var $60=$n;
      var $61=((($60)+(1))|0);
      var $62=($61<<2);
      var $63=STACKTOP;STACKTOP = (STACKTOP + $62)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $64=$63;
      $bs1=$64;
      var $65=$n;
      var $66=((($65)+(1))|0);
      var $67=($66<<2);
      var $68=STACKTOP;STACKTOP = (STACKTOP + $67)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $69=$68;
      $bsm1=$69;
      var $70=$n;
      var $71=((($70)+(1))|0);
      var $72=($71<<2);
      var $73=STACKTOP;STACKTOP = (STACKTOP + $72)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $74=$73;
      $bs2=$74;
      var $75=$n;
      var $76=((($75)+(1))|0);
      var $77=($76<<2);
      var $78=STACKTOP;STACKTOP = (STACKTOP + $77)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $79=$78;
      $bsm2=$79;
      var $80=$n;
      var $81=((($80)+(1))|0);
      var $82=($81<<2);
      var $83=STACKTOP;STACKTOP = (STACKTOP + $82)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $84=$83;
      $bsh=$84;
      var $85=$1;
      $gp=$85;
      var $86=$as1;
      var $87=$asm1;
      var $88=$2;
      var $89=$n;
      var $90=$s;
      var $91=$gp;
      var $92=___gmpn_toom_eval_pm1($86, $87, 4, $88, $89, $90, $91);
      var $93=2 & $92;
      $flags=$93;
      var $94=$flags;
      var $95=$as2;
      var $96=$asm2;
      var $97=$2;
      var $98=$n;
      var $99=$s;
      var $100=$gp;
      var $101=___gmpn_toom_eval_pm2($95, $96, 4, $97, $98, $99, $100);
      var $102=1 & $101;
      var $103=$94 | $102;
      $flags=$103;
      var $104=$ash;
      var $105=$2;
      var $106=$n;
      var $107=___gmpn_lshift($104, $105, $106, 1);
      $cy=$107;
      var $108=$ash;
      var $109=$ash;
      var $110=$2;
      var $111=$n;
      var $112=(($110+($111<<2))|0);
      var $113=$n;
      var $114=___gmpn_add_n($108, $109, $112, $113);
      var $115=$cy;
      var $116=((($115)+($114))|0);
      $cy=$116;
      var $117=$cy;
      var $118=($117<<1);
      var $119=$ash;
      var $120=$ash;
      var $121=$n;
      var $122=___gmpn_lshift($119, $120, $121, 1);
      var $123=((($118)+($122))|0);
      $cy=$123;
      var $124=$ash;
      var $125=$ash;
      var $126=$2;
      var $127=$n;
      var $128=($127<<1);
      var $129=(($126+($128<<2))|0);
      var $130=$n;
      var $131=___gmpn_add_n($124, $125, $129, $130);
      var $132=$cy;
      var $133=((($132)+($131))|0);
      $cy=$133;
      var $134=$cy;
      var $135=($134<<1);
      var $136=$ash;
      var $137=$ash;
      var $138=$n;
      var $139=___gmpn_lshift($136, $137, $138, 1);
      var $140=((($135)+($139))|0);
      $cy=$140;
      var $141=$ash;
      var $142=$ash;
      var $143=$2;
      var $144=$n;
      var $145=((($144)*(3))&-1);
      var $146=(($143+($145<<2))|0);
      var $147=$n;
      var $148=___gmpn_add_n($141, $142, $146, $147);
      var $149=$cy;
      var $150=((($149)+($148))|0);
      $cy=$150;
      var $151=$cy;
      var $152=($151<<1);
      var $153=$ash;
      var $154=$ash;
      var $155=$n;
      var $156=___gmpn_lshift($153, $154, $155, 1);
      var $157=((($152)+($156))|0);
      $cy=$157;
      var $158=$cy;
      var $159=$ash;
      var $160=$ash;
      var $161=$n;
      var $162=$2;
      var $163=$n;
      var $164=($163<<2);
      var $165=(($162+($164<<2))|0);
      var $166=$s;
      var $167=___gmpn_add($159, $160, $161, $165, $166);
      var $168=((($158)+($167))|0);
      var $169=$n;
      var $170=$ash;
      var $171=(($170+($169<<2))|0);
      HEAP32[(($171)>>2)]=$168;
      var $172=$bs1;
      var $173=$4;
      var $174=$n;
      var $175=$4;
      var $176=$n;
      var $177=($176<<1);
      var $178=(($175+($177<<2))|0);
      var $179=$t;
      var $180=___gmpn_add($172, $173, $174, $178, $179);
      var $181=$n;
      var $182=$bs1;
      var $183=(($182+($181<<2))|0);
      HEAP32[(($183)>>2)]=$180;
      var $184=$n;
      var $185=$bs1;
      var $186=(($185+($184<<2))|0);
      var $187=HEAP32[(($186)>>2)];
      var $188=(($187)|0)==0;
      if ($188) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $190=$bs1;
      var $191=$4;
      var $192=$n;
      var $193=(($191+($192<<2))|0);
      var $194=$n;
      var $195=___gmpn_cmp($190, $193, $194);
      var $196=(($195)|0) < 0;
      if ($196) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $198=$bsm1;
      var $199=$4;
      var $200=$n;
      var $201=(($199+($200<<2))|0);
      var $202=$bs1;
      var $203=$n;
      var $204=___gmpn_sub_n($198, $201, $202, $203);
      var $205=$n;
      var $206=$bsm1;
      var $207=(($206+($205<<2))|0);
      HEAP32[(($207)>>2)]=0;
      var $208=$flags;
      var $209=$208 ^ 2;
      $flags=$209;
      label = 13; break;
    case 12: 
      var $211=$n;
      var $212=$bs1;
      var $213=(($212+($211<<2))|0);
      var $214=HEAP32[(($213)>>2)];
      var $215=$bsm1;
      var $216=$bs1;
      var $217=$4;
      var $218=$n;
      var $219=(($217+($218<<2))|0);
      var $220=$n;
      var $221=___gmpn_sub_n($215, $216, $219, $220);
      var $222=((($214)-($221))|0);
      var $223=$n;
      var $224=$bsm1;
      var $225=(($224+($223<<2))|0);
      HEAP32[(($225)>>2)]=$222;
      label = 13; break;
    case 13: 
      var $227=$bs1;
      var $228=$bs1;
      var $229=$4;
      var $230=$n;
      var $231=(($229+($230<<2))|0);
      var $232=$n;
      var $233=___gmpn_add_n($227, $228, $231, $232);
      var $234=$n;
      var $235=$bs1;
      var $236=(($235+($234<<2))|0);
      var $237=HEAP32[(($236)>>2)];
      var $238=((($237)+($233))|0);
      HEAP32[(($236)>>2)]=$238;
      var $239=$gp;
      var $240=$4;
      var $241=$n;
      var $242=($241<<1);
      var $243=(($240+($242<<2))|0);
      var $244=$t;
      var $245=___gmpn_lshift($239, $243, $244, 2);
      $cy=$245;
      var $246=$bs2;
      var $247=$4;
      var $248=$n;
      var $249=$gp;
      var $250=$t;
      var $251=___gmpn_add($246, $247, $248, $249, $250);
      var $252=$n;
      var $253=$bs2;
      var $254=(($253+($252<<2))|0);
      HEAP32[(($254)>>2)]=$251;
      label = 14; break;
    case 14: 
      var $256=$bs2;
      var $257=$t;
      var $258=(($256+($257<<2))|0);
      $__p=$258;
      var $259=$__p;
      var $260=HEAP32[(($259)>>2)];
      var $261=$cy;
      var $262=((($260)+($261))|0);
      $__x=$262;
      var $263=$__x;
      var $264=$__p;
      HEAP32[(($264)>>2)]=$263;
      var $265=$__x;
      var $266=$cy;
      var $267=(($265)>>>0) < (($266)>>>0);
      if ($267) { label = 15; break; } else { label = 19; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $270=$__p;
      var $271=(($270+4)|0);
      $__p=$271;
      var $272=HEAP32[(($271)>>2)];
      var $273=((($272)+(1))|0);
      HEAP32[(($271)>>2)]=$273;
      var $274=(($273)|0)==0;
      if ($274) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 16; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $279=$gp;
      var $280=$4;
      var $281=$n;
      var $282=(($280+($281<<2))|0);
      var $283=$n;
      var $284=___gmpn_lshift($279, $282, $283, 1);
      var $285=$n;
      var $286=$gp;
      var $287=(($286+($285<<2))|0);
      HEAP32[(($287)>>2)]=$284;
      var $288=$bs2;
      var $289=$gp;
      var $290=$n;
      var $291=((($290)+(1))|0);
      var $292=___gmpn_cmp($288, $289, $291);
      var $293=(($292)|0) < 0;
      if ($293) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $295=$bsm2;
      var $296=$gp;
      var $297=$bs2;
      var $298=$n;
      var $299=((($298)+(1))|0);
      var $300=___gmpn_sub_n($295, $296, $297, $299);
      var $301=$flags;
      var $302=$301 ^ 1;
      $flags=$302;
      label = 23; break;
    case 22: 
      var $304=$bsm2;
      var $305=$bs2;
      var $306=$gp;
      var $307=$n;
      var $308=((($307)+(1))|0);
      var $309=___gmpn_sub_n($304, $305, $306, $308);
      label = 23; break;
    case 23: 
      var $311=$bs2;
      var $312=$bs2;
      var $313=$gp;
      var $314=$n;
      var $315=((($314)+(1))|0);
      var $316=___gmpn_add_n($311, $312, $313, $315);
      var $317=$bsh;
      var $318=$4;
      var $319=$n;
      var $320=___gmpn_lshift($317, $318, $319, 1);
      $cy=$320;
      var $321=$bsh;
      var $322=$bsh;
      var $323=$4;
      var $324=$n;
      var $325=(($323+($324<<2))|0);
      var $326=$n;
      var $327=___gmpn_add_n($321, $322, $325, $326);
      var $328=$cy;
      var $329=((($328)+($327))|0);
      $cy=$329;
      var $330=$cy;
      var $331=($330<<1);
      var $332=$bsh;
      var $333=$bsh;
      var $334=$n;
      var $335=___gmpn_lshift($332, $333, $334, 1);
      var $336=((($331)+($335))|0);
      $cy=$336;
      var $337=$cy;
      var $338=$bsh;
      var $339=$bsh;
      var $340=$n;
      var $341=$4;
      var $342=$n;
      var $343=($342<<1);
      var $344=(($341+($343<<2))|0);
      var $345=$t;
      var $346=___gmpn_add($338, $339, $340, $344, $345);
      var $347=((($337)+($346))|0);
      var $348=$n;
      var $349=$bsh;
      var $350=(($349+($348<<2))|0);
      HEAP32[(($350)>>2)]=$347;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $371=$6;
      var $372=$as2;
      var $373=$bs2;
      var $374=$n;
      var $375=((($374)+(1))|0);
      ___gmpn_mul_n($371, $372, $373, $375);
      var $376=$6;
      var $377=$n;
      var $378=($377<<1);
      var $379=(($376+($378<<2))|0);
      var $380=(($379+4)|0);
      var $381=$asm2;
      var $382=$bsm2;
      var $383=$n;
      var $384=((($383)+(1))|0);
      ___gmpn_mul_n($380, $381, $382, $384);
      var $385=$6;
      var $386=$n;
      var $387=($386<<2);
      var $388=(($385+($387<<2))|0);
      var $389=(($388+8)|0);
      var $390=$ash;
      var $391=$bsh;
      var $392=$n;
      var $393=((($392)+(1))|0);
      ___gmpn_mul_n($389, $390, $391, $393);
      var $394=$n;
      var $395=($394<<1);
      var $396=$6;
      var $397=$n;
      var $398=((($397)*(6))&-1);
      var $399=(($396+($398<<2))|0);
      var $400=(($399+12)|0);
      var $401=(($400+($395<<2))|0);
      HEAP32[(($401)>>2)]=0;
      var $402=$6;
      var $403=$n;
      var $404=((($403)*(6))&-1);
      var $405=(($402+($404<<2))|0);
      var $406=(($405+12)|0);
      var $407=$asm1;
      var $408=$bsm1;
      var $409=$n;
      var $410=$n;
      var $411=$asm1;
      var $412=(($411+($410<<2))|0);
      var $413=HEAP32[(($412)>>2)];
      var $414=$n;
      var $415=$bsm1;
      var $416=(($415+($414<<2))|0);
      var $417=HEAP32[(($416)>>2)];
      var $418=$413 | $417;
      var $419=(($418)|0)!=0;
      var $420=(($419)&1);
      var $421=((($409)+($420))|0);
      ___gmpn_mul_n($406, $407, $408, $421);
      var $422=$n;
      var $423=($422<<1);
      var $424=$1;
      var $425=$n;
      var $426=($425<<1);
      var $427=(($424+($426<<2))|0);
      var $428=(($427+($423<<2))|0);
      HEAP32[(($428)>>2)]=0;
      var $429=$1;
      var $430=$n;
      var $431=($430<<1);
      var $432=(($429+($431<<2))|0);
      var $433=$as1;
      var $434=$bs1;
      var $435=$n;
      var $436=$n;
      var $437=$as1;
      var $438=(($437+($436<<2))|0);
      var $439=HEAP32[(($438)>>2)];
      var $440=$n;
      var $441=$bs1;
      var $442=(($441+($440<<2))|0);
      var $443=HEAP32[(($442)>>2)];
      var $444=$439 | $443;
      var $445=(($444)|0)!=0;
      var $446=(($445)&1);
      var $447=((($435)+($446))|0);
      ___gmpn_mul_n($432, $433, $434, $447);
      var $448=$1;
      var $449=$2;
      var $450=$4;
      var $451=$n;
      ___gmpn_mul_n($448, $449, $450, $451);
      var $452=$s;
      var $453=$t;
      var $454=(($452)|0) > (($453)|0);
      if ($454) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $456=$1;
      var $457=$n;
      var $458=((($457)*(6))&-1);
      var $459=(($456+($458<<2))|0);
      var $460=$2;
      var $461=$n;
      var $462=($461<<2);
      var $463=(($460+($462<<2))|0);
      var $464=$s;
      var $465=$4;
      var $466=$n;
      var $467=($466<<1);
      var $468=(($465+($467<<2))|0);
      var $469=$t;
      var $470=___gmpn_mul($459, $463, $464, $468, $469);
      label = 46; break;
    case 45: 
      var $472=$1;
      var $473=$n;
      var $474=((($473)*(6))&-1);
      var $475=(($472+($474<<2))|0);
      var $476=$4;
      var $477=$n;
      var $478=($477<<1);
      var $479=(($476+($478<<2))|0);
      var $480=$t;
      var $481=$2;
      var $482=$n;
      var $483=($482<<2);
      var $484=(($481+($483<<2))|0);
      var $485=$s;
      var $486=___gmpn_mul($475, $479, $480, $484, $485);
      label = 46; break;
    case 46: 
      var $488=$1;
      var $489=$n;
      var $490=$flags;
      var $491=$6;
      var $492=$n;
      var $493=($492<<1);
      var $494=(($491+($493<<2))|0);
      var $495=(($494+4)|0);
      var $496=$6;
      var $497=$n;
      var $498=((($497)*(6))&-1);
      var $499=(($496+($498<<2))|0);
      var $500=(($499+12)|0);
      var $501=$6;
      var $502=$6;
      var $503=$n;
      var $504=($503<<2);
      var $505=(($502+($504<<2))|0);
      var $506=(($505+8)|0);
      var $507=$s;
      var $508=$t;
      var $509=((($507)+($508))|0);
      var $510=$6;
      var $511=$n;
      var $512=($511<<3);
      var $513=(($510+($512<<2))|0);
      var $514=(($513+16)|0);
      ___gmpn_toom_interpolate_7pts($488, $489, $490, $495, $500, $501, $506, $509, $514);
      label = 47; break;
    case 47: 
      var $516=$__tmp_marker;
      var $517=(($516)|0)!=0;
      var $518=(($517)&1);
      var $519=(($518)|0)!=0;
      var $520=(($519)&1);
      var $521=($520);
      var $522=(($521)|0)!=0;
      if ($522) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $524=$__tmp_marker;
      ___gmp_tmp_reentrant_free($524);
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom53_mul["X"]=1;

function ___gmpn_toom63_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $cy;
      var $sign;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $9=$3;
      var $10=$5;
      var $11=($10<<1);
      var $12=(($9)|0) >= (($11)|0);
      if ($12) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $14=$3;
      var $15=((($14)-(1))|0);
      var $16=Math.floor(((($15)>>>0))/(6));
      var $22 = $16;label = 7; break;
    case 6: 
      var $18=$5;
      var $19=((($18)-(1))|0);
      var $20=Math.floor(((($19)>>>0))/(3));
      var $22 = $20;label = 7; break;
    case 7: 
      var $22;
      var $23=((($22)+(1))|0);
      $n=$23;
      var $24=$3;
      var $25=$n;
      var $26=((($25)*(5))&-1);
      var $27=((($24)-($26))|0);
      $s=$27;
      var $28=$5;
      var $29=$n;
      var $30=($29<<1);
      var $31=((($28)-($30))|0);
      $t=$31;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $42=$1;
      var $43=$n;
      var $44=((($43)*(5))&-1);
      var $45=(($42+($44<<2))|0);
      var $46=(($45+8)|0);
      var $47=$1;
      var $48=$n;
      var $49=((($48)*(3))&-1);
      var $50=(($47+($49<<2))|0);
      var $51=$2;
      var $52=$n;
      var $53=$s;
      var $54=$1;
      var $55=___gmpn_toom_eval_pm2exp($46, $50, 5, $51, $52, $53, 2, $54);
      $sign=$55;
      var $56=$1;
      var $57=$4;
      var $58=$n;
      var $59=$58;
      var $60=(($57+($59<<2))|0);
      var $61=$n;
      var $62=___gmpn_lshift($56, $60, $61, 2);
      var $63=$n;
      var $64=$1;
      var $65=(($64+($63<<2))|0);
      HEAP32[(($65)>>2)]=$62;
      var $66=$1;
      var $67=$n;
      var $68=((($67)*(6))&-1);
      var $69=(($66+($68<<2))|0);
      var $70=(($69+12)|0);
      var $71=$4;
      var $72=$n;
      var $73=($72<<1);
      var $74=(($71+($73<<2))|0);
      var $75=$t;
      var $76=___gmpn_lshift($70, $74, $75, 4);
      var $77=$t;
      var $78=$1;
      var $79=$n;
      var $80=((($79)*(6))&-1);
      var $81=(($78+($80<<2))|0);
      var $82=(($81+12)|0);
      var $83=(($82+($77<<2))|0);
      HEAP32[(($83)>>2)]=$76;
      var $84=$n;
      var $85=$t;
      var $86=(($84)|0)==(($85)|0);
      if ($86) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $88=$1;
      var $89=$n;
      var $90=((($89)*(6))&-1);
      var $91=(($88+($90<<2))|0);
      var $92=(($91+12)|0);
      var $93=$1;
      var $94=$n;
      var $95=((($94)*(6))&-1);
      var $96=(($93+($95<<2))|0);
      var $97=(($96+12)|0);
      var $98=$4;
      var $99=$n;
      var $100=0;
      var $101=(($98+($100<<2))|0);
      var $102=$n;
      var $103=___gmpn_add_n($92, $97, $101, $102);
      var $104=$n;
      var $105=$1;
      var $106=$n;
      var $107=((($106)*(6))&-1);
      var $108=(($105+($107<<2))|0);
      var $109=(($108+12)|0);
      var $110=(($109+($104<<2))|0);
      var $111=HEAP32[(($110)>>2)];
      var $112=((($111)+($103))|0);
      HEAP32[(($110)>>2)]=$112;
      label = 20; break;
    case 19: 
      var $114=$1;
      var $115=$n;
      var $116=((($115)*(6))&-1);
      var $117=(($114+($116<<2))|0);
      var $118=(($117+12)|0);
      var $119=$4;
      var $120=$n;
      var $121=0;
      var $122=(($119+($121<<2))|0);
      var $123=$n;
      var $124=$1;
      var $125=$n;
      var $126=((($125)*(6))&-1);
      var $127=(($124+($126<<2))|0);
      var $128=(($127+12)|0);
      var $129=$t;
      var $130=((($129)+(1))|0);
      var $131=___gmpn_add($118, $122, $123, $128, $130);
      var $132=$n;
      var $133=$1;
      var $134=$n;
      var $135=((($134)*(6))&-1);
      var $136=(($133+($135<<2))|0);
      var $137=(($136+12)|0);
      var $138=(($137+($132<<2))|0);
      HEAP32[(($138)>>2)]=$131;
      label = 20; break;
    case 20: 
      var $140=$1;
      var $141=$n;
      var $142=($141<<2);
      var $143=(($140+($142<<2))|0);
      var $144=(($143+4)|0);
      var $145=$1;
      var $146=$n;
      var $147=((($146)*(6))&-1);
      var $148=(($145+($147<<2))|0);
      var $149=(($148+12)|0);
      var $150=$1;
      var $151=$n;
      var $152=((($151)+(1))|0);
      var $153=_abs_sub_add_n($144, $149, $150, $152);
      var $154=$sign;
      var $155=$154 ^ $153;
      $sign=$155;
      label = 21; break;
    case 21: 
      var $157=$1;
      var $158=$1;
      var $159=$n;
      var $160=((($159)*(3))&-1);
      var $161=(($158+($160<<2))|0);
      var $162=$1;
      var $163=$n;
      var $164=($163<<2);
      var $165=(($162+($164<<2))|0);
      var $166=(($165+4)|0);
      var $167=$n;
      var $168=((($167)+(1))|0);
      ___gmpn_mul_n($157, $161, $166, $168);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $171=$6;
      var $172=$n;
      var $173=((($172)*(3))&-1);
      var $174=(($171+($173<<2))|0);
      var $175=(($174+4)|0);
      var $176=$1;
      var $177=$n;
      var $178=((($177)*(5))&-1);
      var $179=(($176+($178<<2))|0);
      var $180=(($179+8)|0);
      var $181=$1;
      var $182=$n;
      var $183=((($182)*(6))&-1);
      var $184=(($181+($183<<2))|0);
      var $185=(($184+12)|0);
      var $186=$n;
      var $187=((($186)+(1))|0);
      ___gmpn_mul_n($175, $180, $185, $187);
      label = 24; break;
    case 24: 
      var $189=$6;
      var $190=$n;
      var $191=((($190)*(3))&-1);
      var $192=(($189+($191<<2))|0);
      var $193=(($192+4)|0);
      var $194=$n;
      var $195=($194<<1);
      var $196=((($195)+(1))|0);
      var $197=$1;
      var $198=$sign;
      var $199=$n;
      ___gmpn_toom_couple_handling($193, $196, $197, $198, $199, 2, 4);
      var $200=$1;
      var $201=$n;
      var $202=((($201)*(5))&-1);
      var $203=(($200+($202<<2))|0);
      var $204=(($203+8)|0);
      var $205=$1;
      var $206=$n;
      var $207=((($206)*(3))&-1);
      var $208=(($205+($207<<2))|0);
      var $209=$2;
      var $210=$n;
      var $211=$s;
      var $212=$1;
      var $213=___gmpn_toom_eval_pm1($204, $208, 5, $209, $210, $211, $212);
      $sign=$213;
      var $214=$6;
      var $215=$n;
      var $216=((($215)*(6))&-1);
      var $217=(($214+($216<<2))|0);
      var $218=(($217+8)|0);
      var $219=$4;
      var $220=$n;
      var $221=0;
      var $222=(($219+($221<<2))|0);
      var $223=$n;
      var $224=$4;
      var $225=$n;
      var $226=($225<<1);
      var $227=(($224+($226<<2))|0);
      var $228=$t;
      var $229=___gmpn_add($218, $222, $223, $227, $228);
      $cy=$229;
      var $230=$cy;
      var $231=$1;
      var $232=$n;
      var $233=((($232)*(6))&-1);
      var $234=(($231+($233<<2))|0);
      var $235=(($234+12)|0);
      var $236=$6;
      var $237=$n;
      var $238=((($237)*(6))&-1);
      var $239=(($236+($238<<2))|0);
      var $240=(($239+8)|0);
      var $241=$4;
      var $242=$n;
      var $243=$242;
      var $244=(($241+($243<<2))|0);
      var $245=$n;
      var $246=___gmpn_add_n($235, $240, $244, $245);
      var $247=((($230)+($246))|0);
      var $248=$n;
      var $249=$1;
      var $250=$n;
      var $251=((($250)*(6))&-1);
      var $252=(($249+($251<<2))|0);
      var $253=(($252+12)|0);
      var $254=(($253+($248<<2))|0);
      HEAP32[(($254)>>2)]=$247;
      var $255=$cy;
      var $256=(($255)|0)==0;
      if ($256) { label = 25; break; } else { label = 27; break; }
    case 25: 
      var $258=$6;
      var $259=$n;
      var $260=((($259)*(6))&-1);
      var $261=(($258+($260<<2))|0);
      var $262=(($261+8)|0);
      var $263=$4;
      var $264=$n;
      var $265=$264;
      var $266=(($263+($265<<2))|0);
      var $267=$n;
      var $268=___gmpn_cmp($262, $266, $267);
      var $269=(($268)|0) < 0;
      if ($269) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $271=$1;
      var $272=$n;
      var $273=($272<<2);
      var $274=(($271+($273<<2))|0);
      var $275=(($274+4)|0);
      var $276=$4;
      var $277=$n;
      var $278=$277;
      var $279=(($276+($278<<2))|0);
      var $280=$6;
      var $281=$n;
      var $282=((($281)*(6))&-1);
      var $283=(($280+($282<<2))|0);
      var $284=(($283+8)|0);
      var $285=$n;
      var $286=___gmpn_sub_n($275, $279, $284, $285);
      var $287=$n;
      var $288=$1;
      var $289=$n;
      var $290=($289<<2);
      var $291=(($288+($290<<2))|0);
      var $292=(($291+4)|0);
      var $293=(($292+($287<<2))|0);
      HEAP32[(($293)>>2)]=0;
      var $294=$sign;
      var $295=$294 ^ -1;
      $sign=$295;
      label = 28; break;
    case 27: 
      var $297=$1;
      var $298=$n;
      var $299=($298<<2);
      var $300=(($297+($299<<2))|0);
      var $301=(($300+4)|0);
      var $302=$6;
      var $303=$n;
      var $304=((($303)*(6))&-1);
      var $305=(($302+($304<<2))|0);
      var $306=(($305+8)|0);
      var $307=$4;
      var $308=$n;
      var $309=$308;
      var $310=(($307+($309<<2))|0);
      var $311=$n;
      var $312=___gmpn_sub_n($301, $306, $310, $311);
      var $313=$cy;
      var $314=((($313)-($312))|0);
      $cy=$314;
      var $315=$cy;
      var $316=$n;
      var $317=$1;
      var $318=$n;
      var $319=($318<<2);
      var $320=(($317+($319<<2))|0);
      var $321=(($320+4)|0);
      var $322=(($321+($316<<2))|0);
      HEAP32[(($322)>>2)]=$315;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $325=$1;
      var $326=$1;
      var $327=$n;
      var $328=((($327)*(3))&-1);
      var $329=(($326+($328<<2))|0);
      var $330=$1;
      var $331=$n;
      var $332=($331<<2);
      var $333=(($330+($332<<2))|0);
      var $334=(($333+4)|0);
      var $335=$n;
      var $336=((($335)+(1))|0);
      ___gmpn_mul_n($325, $329, $334, $336);
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $339=$6;
      var $340=$1;
      var $341=$n;
      var $342=((($341)*(5))&-1);
      var $343=(($340+($342<<2))|0);
      var $344=(($343+8)|0);
      var $345=$1;
      var $346=$n;
      var $347=((($346)*(6))&-1);
      var $348=(($345+($347<<2))|0);
      var $349=(($348+12)|0);
      var $350=$n;
      var $351=((($350)+(1))|0);
      ___gmpn_mul_n($339, $344, $349, $351);
      label = 32; break;
    case 32: 
      var $353=$6;
      var $354=$n;
      var $355=($354<<1);
      var $356=((($355)+(1))|0);
      var $357=$1;
      var $358=$sign;
      var $359=$n;
      ___gmpn_toom_couple_handling($353, $356, $357, $358, $359, 0, 0);
      var $360=$1;
      var $361=$n;
      var $362=((($361)*(5))&-1);
      var $363=(($360+($362<<2))|0);
      var $364=(($363+8)|0);
      var $365=$1;
      var $366=$n;
      var $367=((($366)*(3))&-1);
      var $368=(($365+($367<<2))|0);
      var $369=$2;
      var $370=$n;
      var $371=$s;
      var $372=$1;
      var $373=___gmpn_toom_eval_pm2($364, $368, 5, $369, $370, $371, $372);
      $sign=$373;
      var $374=$1;
      var $375=$4;
      var $376=$n;
      var $377=$376;
      var $378=(($375+($377<<2))|0);
      var $379=$n;
      var $380=___gmpn_lshift($374, $378, $379, 1);
      var $381=$n;
      var $382=$1;
      var $383=(($382+($381<<2))|0);
      HEAP32[(($383)>>2)]=$380;
      var $384=$1;
      var $385=$n;
      var $386=((($385)*(6))&-1);
      var $387=(($384+($386<<2))|0);
      var $388=(($387+12)|0);
      var $389=$4;
      var $390=$n;
      var $391=($390<<1);
      var $392=(($389+($391<<2))|0);
      var $393=$t;
      var $394=___gmpn_lshift($388, $392, $393, 2);
      var $395=$t;
      var $396=$1;
      var $397=$n;
      var $398=((($397)*(6))&-1);
      var $399=(($396+($398<<2))|0);
      var $400=(($399+12)|0);
      var $401=(($400+($395<<2))|0);
      HEAP32[(($401)>>2)]=$394;
      var $402=$n;
      var $403=$t;
      var $404=(($402)|0)==(($403)|0);
      if ($404) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $406=$1;
      var $407=$n;
      var $408=((($407)*(6))&-1);
      var $409=(($406+($408<<2))|0);
      var $410=(($409+12)|0);
      var $411=$1;
      var $412=$n;
      var $413=((($412)*(6))&-1);
      var $414=(($411+($413<<2))|0);
      var $415=(($414+12)|0);
      var $416=$4;
      var $417=$n;
      var $418=0;
      var $419=(($416+($418<<2))|0);
      var $420=$n;
      var $421=___gmpn_add_n($410, $415, $419, $420);
      var $422=$n;
      var $423=$1;
      var $424=$n;
      var $425=((($424)*(6))&-1);
      var $426=(($423+($425<<2))|0);
      var $427=(($426+12)|0);
      var $428=(($427+($422<<2))|0);
      var $429=HEAP32[(($428)>>2)];
      var $430=((($429)+($421))|0);
      HEAP32[(($428)>>2)]=$430;
      label = 35; break;
    case 34: 
      var $432=$1;
      var $433=$n;
      var $434=((($433)*(6))&-1);
      var $435=(($432+($434<<2))|0);
      var $436=(($435+12)|0);
      var $437=$4;
      var $438=$n;
      var $439=0;
      var $440=(($437+($439<<2))|0);
      var $441=$n;
      var $442=$1;
      var $443=$n;
      var $444=((($443)*(6))&-1);
      var $445=(($442+($444<<2))|0);
      var $446=(($445+12)|0);
      var $447=$t;
      var $448=((($447)+(1))|0);
      var $449=___gmpn_add($436, $440, $441, $446, $448);
      var $450=$n;
      var $451=$1;
      var $452=$n;
      var $453=((($452)*(6))&-1);
      var $454=(($451+($453<<2))|0);
      var $455=(($454+12)|0);
      var $456=(($455+($450<<2))|0);
      HEAP32[(($456)>>2)]=$449;
      label = 35; break;
    case 35: 
      var $458=$1;
      var $459=$n;
      var $460=($459<<2);
      var $461=(($458+($460<<2))|0);
      var $462=(($461+4)|0);
      var $463=$1;
      var $464=$n;
      var $465=((($464)*(6))&-1);
      var $466=(($463+($465<<2))|0);
      var $467=(($466+12)|0);
      var $468=$1;
      var $469=$n;
      var $470=((($469)+(1))|0);
      var $471=_abs_sub_add_n($462, $467, $468, $470);
      var $472=$sign;
      var $473=$472 ^ $471;
      $sign=$473;
      label = 36; break;
    case 36: 
      var $475=$1;
      var $476=$1;
      var $477=$n;
      var $478=((($477)*(3))&-1);
      var $479=(($476+($478<<2))|0);
      var $480=$1;
      var $481=$n;
      var $482=($481<<2);
      var $483=(($480+($482<<2))|0);
      var $484=(($483+4)|0);
      var $485=$n;
      var $486=((($485)+(1))|0);
      ___gmpn_mul_n($475, $479, $484, $486);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $489=$1;
      var $490=$n;
      var $491=((($490)*(3))&-1);
      var $492=(($489+($491<<2))|0);
      var $493=$1;
      var $494=$n;
      var $495=((($494)*(5))&-1);
      var $496=(($493+($495<<2))|0);
      var $497=(($496+8)|0);
      var $498=$1;
      var $499=$n;
      var $500=((($499)*(6))&-1);
      var $501=(($498+($500<<2))|0);
      var $502=(($501+12)|0);
      var $503=$n;
      var $504=((($503)+(1))|0);
      ___gmpn_mul_n($492, $497, $502, $504);
      label = 39; break;
    case 39: 
      var $506=$1;
      var $507=$n;
      var $508=((($507)*(3))&-1);
      var $509=(($506+($508<<2))|0);
      var $510=$n;
      var $511=($510<<1);
      var $512=((($511)+(1))|0);
      var $513=$1;
      var $514=$sign;
      var $515=$n;
      ___gmpn_toom_couple_handling($509, $512, $513, $514, $515, 1, 2);
      label = 40; break;
    case 40: 
      var $517=$1;
      var $518=$2;
      var $519=$4;
      var $520=$n;
      ___gmpn_mul_n($517, $518, $519, $520);
      label = 41; break;
    case 41: 
      var $522=$s;
      var $523=$t;
      var $524=(($522)|0) > (($523)|0);
      if ($524) { label = 42; break; } else { label = 45; break; }
    case 42: 
      label = 43; break;
    case 43: 
      var $527=$1;
      var $528=$n;
      var $529=((($528)*(7))&-1);
      var $530=(($527+($529<<2))|0);
      var $531=$2;
      var $532=$n;
      var $533=((($532)*(5))&-1);
      var $534=(($531+($533<<2))|0);
      var $535=$s;
      var $536=$4;
      var $537=$n;
      var $538=($537<<1);
      var $539=(($536+($538<<2))|0);
      var $540=$t;
      var $541=___gmpn_mul($530, $534, $535, $539, $540);
      label = 44; break;
    case 44: 
      label = 48; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $545=$1;
      var $546=$n;
      var $547=((($546)*(7))&-1);
      var $548=(($545+($547<<2))|0);
      var $549=$4;
      var $550=$n;
      var $551=($550<<1);
      var $552=(($549+($551<<2))|0);
      var $553=$t;
      var $554=$2;
      var $555=$n;
      var $556=((($555)*(5))&-1);
      var $557=(($554+($556<<2))|0);
      var $558=$s;
      var $559=___gmpn_mul($548, $552, $553, $557, $558);
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $562=$1;
      var $563=$n;
      var $564=$6;
      var $565=$n;
      var $566=((($565)*(3))&-1);
      var $567=(($564+($566<<2))|0);
      var $568=(($567+4)|0);
      var $569=$6;
      var $570=$s;
      var $571=$t;
      var $572=((($570)+($571))|0);
      var $573=$6;
      var $574=$n;
      var $575=((($574)*(6))&-1);
      var $576=(($573+($575<<2))|0);
      var $577=(($576+8)|0);
      ___gmpn_toom_interpolate_8pts($562, $563, $568, $569, $572, $577);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom63_mul["X"]=1;

function _abs_sub_add_n($rm, $rp, $rs, $n) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $result;
  $1=$rm;
  $2=$rp;
  $3=$rs;
  $4=$n;
  var $5=$1;
  var $6=$2;
  var $7=$3;
  var $8=$4;
  var $9=_abs_sub_n298($5, $6, $7, $8);
  $result=$9;
  var $10=$2;
  var $11=$2;
  var $12=$3;
  var $13=$4;
  var $14=___gmpn_add_n($10, $11, $12, $13);
  var $15=$result;

  return $15;
}


function _abs_sub_n298($rp, $ap, $bp, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $x;
      var $y;
      $2=$rp;
      $3=$ap;
      $4=$bp;
      $5=$n;
      label = 3; break;
    case 3: 
      var $7=$5;
      var $8=((($7)-(1))|0);
      $5=$8;
      var $9=(($8)|0) >= 0;
      if ($9) { label = 4; break; } else { label = 9; break; }
    case 4: 
      var $11=$5;
      var $12=$3;
      var $13=(($12+($11<<2))|0);
      var $14=HEAP32[(($13)>>2)];
      $x=$14;
      var $15=$5;
      var $16=$4;
      var $17=(($16+($15<<2))|0);
      var $18=HEAP32[(($17)>>2)];
      $y=$18;
      var $19=$x;
      var $20=$y;
      var $21=(($19)|0)!=(($20)|0);
      if ($21) { label = 5; break; } else { label = 8; break; }
    case 5: 
      var $23=$5;
      var $24=((($23)+(1))|0);
      $5=$24;
      var $25=$x;
      var $26=$y;
      var $27=(($25)>>>0) > (($26)>>>0);
      if ($27) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $29=$2;
      var $30=$3;
      var $31=$4;
      var $32=$5;
      var $33=___gmpn_sub_n($29, $30, $31, $32);
      $1=0;
      label = 10; break;
    case 7: 
      var $35=$2;
      var $36=$4;
      var $37=$3;
      var $38=$5;
      var $39=___gmpn_sub_n($35, $36, $37, $38);
      $1=-1;
      label = 10; break;
    case 8: 
      var $41=$5;
      var $42=$2;
      var $43=(($42+($41<<2))|0);
      HEAP32[(($43)>>2)]=0;
      label = 3; break;
    case 9: 
      $1=0;
      label = 10; break;
    case 10: 
      var $46=$1;

      return $46;
    default: assert(0, "bad label: " + label);
  }

}
_abs_sub_n298["X"]=1;

function ___gmpn_toom44_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $cy;
      var $flags;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $9=$3;
      var $10=((($9)+(3))|0);
      var $11=$10 >> 2;
      $n=$11;
      var $12=$3;
      var $13=$n;
      var $14=((($13)*(3))&-1);
      var $15=((($12)-($14))|0);
      $s=$15;
      var $16=$5;
      var $17=$n;
      var $18=((($17)*(3))&-1);
      var $19=((($16)-($18))|0);
      $t=$19;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $26=$1;
      var $27=$1;
      var $28=$n;
      var $29=(($27+($28<<2))|0);
      var $30=(($29+4)|0);
      var $31=$2;
      var $32=$n;
      var $33=$s;
      var $34=$6;
      var $35=$n;
      var $36=($35<<3);
      var $37=(($34+($36<<2))|0);
      var $38=(($37+20)|0);
      var $39=___gmpn_toom_eval_dgr3_pm2($26, $30, $31, $32, $33, $38);
      var $40=1 & $39;
      $flags=$40;
      var $41=$flags;
      var $42=$1;
      var $43=$n;
      var $44=($43<<2);
      var $45=(($42+($44<<2))|0);
      var $46=(($45+8)|0);
      var $47=$1;
      var $48=$n;
      var $49=($48<<1);
      var $50=(($47+($49<<2))|0);
      var $51=(($50+8)|0);
      var $52=$4;
      var $53=$n;
      var $54=$t;
      var $55=$6;
      var $56=$n;
      var $57=($56<<3);
      var $58=(($55+($57<<2))|0);
      var $59=(($58+20)|0);
      var $60=___gmpn_toom_eval_dgr3_pm2($46, $51, $52, $53, $54, $59);
      var $61=1 & $60;
      var $62=$41 ^ $61;
      $flags=$62;
      label = 11; break;
    case 11: 
      var $64=$n;
      var $65=((($64)+(1))|0);
      var $66=(($65)|0) >= 100;
      if ($66) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $68=$6;
      var $69=$1;
      var $70=$n;
      var $71=((($70)+(1))|0);
      var $72=$1;
      var $73=$n;
      var $74=($73<<2);
      var $75=(($72+($74<<2))|0);
      var $76=(($75+8)|0);
      var $77=$n;
      var $78=((($77)+(1))|0);
      var $79=$6;
      var $80=$n;
      var $81=($80<<3);
      var $82=(($79+($81<<2))|0);
      var $83=(($82+20)|0);
      ___gmpn_toom22_mul($68, $69, $71, $76, $78, $83);
      label = 14; break;
    case 13: 
      var $85=$6;
      var $86=$1;
      var $87=$n;
      var $88=((($87)+(1))|0);
      var $89=$1;
      var $90=$n;
      var $91=($90<<2);
      var $92=(($89+($91<<2))|0);
      var $93=(($92+8)|0);
      var $94=$n;
      var $95=((($94)+(1))|0);
      var $96=$6;
      var $97=$n;
      var $98=($97<<3);
      var $99=(($96+($98<<2))|0);
      var $100=(($99+20)|0);
      ___gmpn_toom33_mul($85, $86, $88, $93, $95, $100);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $104=$n;
      var $105=((($104)+(1))|0);
      var $106=(($105)|0) >= 100;
      if ($106) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $108=$6;
      var $109=$n;
      var $110=($109<<1);
      var $111=(($108+($110<<2))|0);
      var $112=(($111+4)|0);
      var $113=$1;
      var $114=$n;
      var $115=(($113+($114<<2))|0);
      var $116=(($115+4)|0);
      var $117=$n;
      var $118=((($117)+(1))|0);
      var $119=$1;
      var $120=$n;
      var $121=($120<<1);
      var $122=(($119+($121<<2))|0);
      var $123=(($122+8)|0);
      var $124=$n;
      var $125=((($124)+(1))|0);
      var $126=$6;
      var $127=$n;
      var $128=($127<<3);
      var $129=(($126+($128<<2))|0);
      var $130=(($129+20)|0);
      ___gmpn_toom22_mul($112, $116, $118, $123, $125, $130);
      label = 19; break;
    case 18: 
      var $132=$6;
      var $133=$n;
      var $134=($133<<1);
      var $135=(($132+($134<<2))|0);
      var $136=(($135+4)|0);
      var $137=$1;
      var $138=$n;
      var $139=(($137+($138<<2))|0);
      var $140=(($139+4)|0);
      var $141=$n;
      var $142=((($141)+(1))|0);
      var $143=$1;
      var $144=$n;
      var $145=($144<<1);
      var $146=(($143+($145<<2))|0);
      var $147=(($146+8)|0);
      var $148=$n;
      var $149=((($148)+(1))|0);
      var $150=$6;
      var $151=$n;
      var $152=($151<<3);
      var $153=(($150+($152<<2))|0);
      var $154=(($153+20)|0);
      ___gmpn_toom33_mul($136, $140, $142, $147, $149, $154);
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      var $157=$1;
      var $158=$2;
      var $159=$n;
      var $160=___gmpn_lshift($157, $158, $159, 1);
      $cy=$160;
      var $161=$1;
      var $162=$1;
      var $163=$2;
      var $164=$n;
      var $165=(($163+($164<<2))|0);
      var $166=$n;
      var $167=___gmpn_add_n($161, $162, $165, $166);
      var $168=$cy;
      var $169=((($168)+($167))|0);
      $cy=$169;
      var $170=$cy;
      var $171=($170<<1);
      var $172=$1;
      var $173=$1;
      var $174=$n;
      var $175=___gmpn_lshift($172, $173, $174, 1);
      var $176=((($171)+($175))|0);
      $cy=$176;
      var $177=$1;
      var $178=$1;
      var $179=$2;
      var $180=$n;
      var $181=($180<<1);
      var $182=(($179+($181<<2))|0);
      var $183=$n;
      var $184=___gmpn_add_n($177, $178, $182, $183);
      var $185=$cy;
      var $186=((($185)+($184))|0);
      $cy=$186;
      var $187=$cy;
      var $188=($187<<1);
      var $189=$1;
      var $190=$1;
      var $191=$n;
      var $192=___gmpn_lshift($189, $190, $191, 1);
      var $193=((($188)+($192))|0);
      $cy=$193;
      var $194=$cy;
      var $195=$1;
      var $196=$1;
      var $197=$n;
      var $198=$2;
      var $199=$n;
      var $200=((($199)*(3))&-1);
      var $201=(($198+($200<<2))|0);
      var $202=$s;
      var $203=___gmpn_add($195, $196, $197, $201, $202);
      var $204=((($194)+($203))|0);
      var $205=$n;
      var $206=$1;
      var $207=(($206+($205<<2))|0);
      HEAP32[(($207)>>2)]=$204;
      var $208=$1;
      var $209=$n;
      var $210=($209<<2);
      var $211=(($208+($210<<2))|0);
      var $212=(($211+8)|0);
      var $213=$4;
      var $214=$n;
      var $215=___gmpn_lshift($212, $213, $214, 1);
      $cy=$215;
      var $216=$1;
      var $217=$n;
      var $218=($217<<2);
      var $219=(($216+($218<<2))|0);
      var $220=(($219+8)|0);
      var $221=$1;
      var $222=$n;
      var $223=($222<<2);
      var $224=(($221+($223<<2))|0);
      var $225=(($224+8)|0);
      var $226=$4;
      var $227=$n;
      var $228=(($226+($227<<2))|0);
      var $229=$n;
      var $230=___gmpn_add_n($220, $225, $228, $229);
      var $231=$cy;
      var $232=((($231)+($230))|0);
      $cy=$232;
      var $233=$cy;
      var $234=($233<<1);
      var $235=$1;
      var $236=$n;
      var $237=($236<<2);
      var $238=(($235+($237<<2))|0);
      var $239=(($238+8)|0);
      var $240=$1;
      var $241=$n;
      var $242=($241<<2);
      var $243=(($240+($242<<2))|0);
      var $244=(($243+8)|0);
      var $245=$n;
      var $246=___gmpn_lshift($239, $244, $245, 1);
      var $247=((($234)+($246))|0);
      $cy=$247;
      var $248=$1;
      var $249=$n;
      var $250=($249<<2);
      var $251=(($248+($250<<2))|0);
      var $252=(($251+8)|0);
      var $253=$1;
      var $254=$n;
      var $255=($254<<2);
      var $256=(($253+($255<<2))|0);
      var $257=(($256+8)|0);
      var $258=$4;
      var $259=$n;
      var $260=($259<<1);
      var $261=(($258+($260<<2))|0);
      var $262=$n;
      var $263=___gmpn_add_n($252, $257, $261, $262);
      var $264=$cy;
      var $265=((($264)+($263))|0);
      $cy=$265;
      var $266=$cy;
      var $267=($266<<1);
      var $268=$1;
      var $269=$n;
      var $270=($269<<2);
      var $271=(($268+($270<<2))|0);
      var $272=(($271+8)|0);
      var $273=$1;
      var $274=$n;
      var $275=($274<<2);
      var $276=(($273+($275<<2))|0);
      var $277=(($276+8)|0);
      var $278=$n;
      var $279=___gmpn_lshift($272, $277, $278, 1);
      var $280=((($267)+($279))|0);
      $cy=$280;
      var $281=$cy;
      var $282=$1;
      var $283=$n;
      var $284=($283<<2);
      var $285=(($282+($284<<2))|0);
      var $286=(($285+8)|0);
      var $287=$1;
      var $288=$n;
      var $289=($288<<2);
      var $290=(($287+($289<<2))|0);
      var $291=(($290+8)|0);
      var $292=$n;
      var $293=$4;
      var $294=$n;
      var $295=((($294)*(3))&-1);
      var $296=(($293+($295<<2))|0);
      var $297=$t;
      var $298=___gmpn_add($286, $291, $292, $296, $297);
      var $299=((($281)+($298))|0);
      var $300=$n;
      var $301=$1;
      var $302=$n;
      var $303=($302<<2);
      var $304=(($301+($303<<2))|0);
      var $305=(($304+8)|0);
      var $306=(($305+($300<<2))|0);
      HEAP32[(($306)>>2)]=$299;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $312=$n;
      var $313=((($312)+(1))|0);
      var $314=(($313)|0) >= 100;
      if ($314) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $316=$6;
      var $317=$n;
      var $318=($317<<2);
      var $319=(($316+($318<<2))|0);
      var $320=(($319+8)|0);
      var $321=$1;
      var $322=$n;
      var $323=((($322)+(1))|0);
      var $324=$1;
      var $325=$n;
      var $326=($325<<2);
      var $327=(($324+($326<<2))|0);
      var $328=(($327+8)|0);
      var $329=$n;
      var $330=((($329)+(1))|0);
      var $331=$6;
      var $332=$n;
      var $333=($332<<3);
      var $334=(($331+($333<<2))|0);
      var $335=(($334+20)|0);
      ___gmpn_toom22_mul($320, $321, $323, $328, $330, $335);
      label = 28; break;
    case 27: 
      var $337=$6;
      var $338=$n;
      var $339=($338<<2);
      var $340=(($337+($339<<2))|0);
      var $341=(($340+8)|0);
      var $342=$1;
      var $343=$n;
      var $344=((($343)+(1))|0);
      var $345=$1;
      var $346=$n;
      var $347=($346<<2);
      var $348=(($345+($347<<2))|0);
      var $349=(($348+8)|0);
      var $350=$n;
      var $351=((($350)+(1))|0);
      var $352=$6;
      var $353=$n;
      var $354=($353<<3);
      var $355=(($352+($354<<2))|0);
      var $356=(($355+20)|0);
      ___gmpn_toom33_mul($341, $342, $344, $349, $351, $356);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $359=$flags;
      var $360=$1;
      var $361=$1;
      var $362=$n;
      var $363=(($361+($362<<2))|0);
      var $364=(($363+4)|0);
      var $365=$2;
      var $366=$n;
      var $367=$s;
      var $368=$6;
      var $369=$n;
      var $370=($369<<3);
      var $371=(($368+($370<<2))|0);
      var $372=(($371+20)|0);
      var $373=___gmpn_toom_eval_dgr3_pm1($360, $364, $365, $366, $367, $372);
      var $374=2 & $373;
      var $375=$359 | $374;
      $flags=$375;
      var $376=$flags;
      var $377=$1;
      var $378=$n;
      var $379=($378<<2);
      var $380=(($377+($379<<2))|0);
      var $381=(($380+8)|0);
      var $382=$1;
      var $383=$n;
      var $384=($383<<1);
      var $385=(($382+($384<<2))|0);
      var $386=(($385+8)|0);
      var $387=$4;
      var $388=$n;
      var $389=$t;
      var $390=$6;
      var $391=$n;
      var $392=($391<<3);
      var $393=(($390+($392<<2))|0);
      var $394=(($393+20)|0);
      var $395=___gmpn_toom_eval_dgr3_pm1($381, $386, $387, $388, $389, $394);
      var $396=2 & $395;
      var $397=$376 ^ $396;
      $flags=$397;
      label = 30; break;
    case 30: 
      var $399=$n;
      var $400=((($399)+(1))|0);
      var $401=(($400)|0) >= 100;
      if ($401) { label = 32; break; } else { label = 31; break; }
    case 31: 
      var $403=$6;
      var $404=$n;
      var $405=((($404)*(6))&-1);
      var $406=(($403+($405<<2))|0);
      var $407=(($406+12)|0);
      var $408=$1;
      var $409=$n;
      var $410=(($408+($409<<2))|0);
      var $411=(($410+4)|0);
      var $412=$n;
      var $413=((($412)+(1))|0);
      var $414=$1;
      var $415=$n;
      var $416=($415<<1);
      var $417=(($414+($416<<2))|0);
      var $418=(($417+8)|0);
      var $419=$n;
      var $420=((($419)+(1))|0);
      var $421=$6;
      var $422=$n;
      var $423=($422<<3);
      var $424=(($421+($423<<2))|0);
      var $425=(($424+20)|0);
      ___gmpn_toom22_mul($407, $411, $413, $418, $420, $425);
      label = 33; break;
    case 32: 
      var $427=$6;
      var $428=$n;
      var $429=((($428)*(6))&-1);
      var $430=(($427+($429<<2))|0);
      var $431=(($430+12)|0);
      var $432=$1;
      var $433=$n;
      var $434=(($432+($433<<2))|0);
      var $435=(($434+4)|0);
      var $436=$n;
      var $437=((($436)+(1))|0);
      var $438=$1;
      var $439=$n;
      var $440=($439<<1);
      var $441=(($438+($440<<2))|0);
      var $442=(($441+8)|0);
      var $443=$n;
      var $444=((($443)+(1))|0);
      var $445=$6;
      var $446=$n;
      var $447=($446<<3);
      var $448=(($445+($447<<2))|0);
      var $449=(($448+20)|0);
      ___gmpn_toom33_mul($431, $435, $437, $442, $444, $449);
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $453=$n;
      var $454=((($453)+(1))|0);
      var $455=(($454)|0) >= 100;
      if ($455) { label = 37; break; } else { label = 36; break; }
    case 36: 
      var $457=$1;
      var $458=$n;
      var $459=($458<<1);
      var $460=(($457+($459<<2))|0);
      var $461=$1;
      var $462=$n;
      var $463=((($462)+(1))|0);
      var $464=$1;
      var $465=$n;
      var $466=($465<<2);
      var $467=(($464+($466<<2))|0);
      var $468=(($467+8)|0);
      var $469=$n;
      var $470=((($469)+(1))|0);
      var $471=$6;
      var $472=$n;
      var $473=($472<<3);
      var $474=(($471+($473<<2))|0);
      var $475=(($474+20)|0);
      ___gmpn_toom22_mul($460, $461, $463, $468, $470, $475);
      label = 38; break;
    case 37: 
      var $477=$1;
      var $478=$n;
      var $479=($478<<1);
      var $480=(($477+($479<<2))|0);
      var $481=$1;
      var $482=$n;
      var $483=((($482)+(1))|0);
      var $484=$1;
      var $485=$n;
      var $486=($485<<2);
      var $487=(($484+($486<<2))|0);
      var $488=(($487+8)|0);
      var $489=$n;
      var $490=((($489)+(1))|0);
      var $491=$6;
      var $492=$n;
      var $493=($492<<3);
      var $494=(($491+($493<<2))|0);
      var $495=(($494+20)|0);
      ___gmpn_toom33_mul($480, $481, $483, $488, $490, $495);
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $499=$n;
      var $500=(($499)|0) >= 100;
      if ($500) { label = 42; break; } else { label = 41; break; }
    case 41: 
      var $502=$1;
      var $503=$2;
      var $504=$n;
      var $505=$4;
      var $506=$n;
      var $507=$6;
      var $508=$n;
      var $509=($508<<3);
      var $510=(($507+($509<<2))|0);
      var $511=(($510+20)|0);
      ___gmpn_toom22_mul($502, $503, $504, $505, $506, $511);
      label = 43; break;
    case 42: 
      var $513=$1;
      var $514=$2;
      var $515=$n;
      var $516=$4;
      var $517=$n;
      var $518=$6;
      var $519=$n;
      var $520=($519<<3);
      var $521=(($518+($520<<2))|0);
      var $522=(($521+20)|0);
      ___gmpn_toom33_mul($513, $514, $515, $516, $517, $522);
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $525=$s;
      var $526=$t;
      var $527=(($525)|0) > (($526)|0);
      if ($527) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $529=$1;
      var $530=$n;
      var $531=((($530)*(6))&-1);
      var $532=(($529+($531<<2))|0);
      var $533=$2;
      var $534=$n;
      var $535=((($534)*(3))&-1);
      var $536=(($533+($535<<2))|0);
      var $537=$s;
      var $538=$4;
      var $539=$n;
      var $540=((($539)*(3))&-1);
      var $541=(($538+($540<<2))|0);
      var $542=$t;
      var $543=___gmpn_mul($532, $536, $537, $541, $542);
      label = 52; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $546=$s;
      var $547=(($546)|0) >= 100;
      if ($547) { label = 49; break; } else { label = 48; break; }
    case 48: 
      var $549=$1;
      var $550=$n;
      var $551=((($550)*(6))&-1);
      var $552=(($549+($551<<2))|0);
      var $553=$2;
      var $554=$n;
      var $555=((($554)*(3))&-1);
      var $556=(($553+($555<<2))|0);
      var $557=$s;
      var $558=$4;
      var $559=$n;
      var $560=((($559)*(3))&-1);
      var $561=(($558+($560<<2))|0);
      var $562=$s;
      var $563=$6;
      var $564=$n;
      var $565=($564<<3);
      var $566=(($563+($565<<2))|0);
      var $567=(($566+20)|0);
      ___gmpn_toom22_mul($552, $556, $557, $561, $562, $567);
      label = 50; break;
    case 49: 
      var $569=$1;
      var $570=$n;
      var $571=((($570)*(6))&-1);
      var $572=(($569+($571<<2))|0);
      var $573=$2;
      var $574=$n;
      var $575=((($574)*(3))&-1);
      var $576=(($573+($575<<2))|0);
      var $577=$s;
      var $578=$4;
      var $579=$n;
      var $580=((($579)*(3))&-1);
      var $581=(($578+($580<<2))|0);
      var $582=$s;
      var $583=$6;
      var $584=$n;
      var $585=($584<<3);
      var $586=(($583+($585<<2))|0);
      var $587=(($586+20)|0);
      ___gmpn_toom33_mul($572, $576, $577, $581, $582, $587);
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      var $591=$1;
      var $592=$n;
      var $593=$flags;
      var $594=$6;
      var $595=$n;
      var $596=($595<<1);
      var $597=(($594+($596<<2))|0);
      var $598=(($597+4)|0);
      var $599=$6;
      var $600=$n;
      var $601=((($600)*(6))&-1);
      var $602=(($599+($601<<2))|0);
      var $603=(($602+12)|0);
      var $604=$6;
      var $605=$6;
      var $606=$n;
      var $607=($606<<2);
      var $608=(($605+($607<<2))|0);
      var $609=(($608+8)|0);
      var $610=$s;
      var $611=$t;
      var $612=((($610)+($611))|0);
      var $613=$6;
      var $614=$n;
      var $615=($614<<3);
      var $616=(($613+($615<<2))|0);
      var $617=(($616+20)|0);
      ___gmpn_toom_interpolate_7pts($591, $592, $593, $598, $603, $604, $609, $612, $617);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom44_mul["X"]=1;

function ___gmpn_toom6h_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $p;
      var $q;
      var $half;
      var $sign;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $13=$3;
      var $14=((($13)*(17))&-1);
      var $15=$5;
      var $16=((($15)*(18))&-1);
      var $17=(($14)|0) < (($16)|0);
      var $18=(($17)&1);
      var $19=(($18)|0)!=0;
      var $20=(($19)&1);
      var $21=($20);
      var $22=(($21)|0)!=0;
      if ($22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $24=$3;
      var $25=((($24)-(1))|0);
      var $26=Math.floor(((($25)>>>0))/(6));
      var $27=((($26)+(1))|0);
      $n=$27;
      $q=5;
      $p=5;
      $half=0;
      var $28=$3;
      var $29=$n;
      var $30=((($29)*(5))&-1);
      var $31=((($28)-($30))|0);
      $s=$31;
      var $32=$5;
      var $33=$n;
      var $34=((($33)*(5))&-1);
      var $35=((($32)-($34))|0);
      $t=$35;
      label = 33; break;
    case 10: 
      var $37=$3;
      var $38=((($37)*(5))&-1);
      var $39=((($38)*(18))&-1);
      var $40=$5;
      var $41=((($40)*(119))&-1);
      var $42=(($39)|0) < (($41)|0);
      if ($42) { label = 11; break; } else { label = 12; break; }
    case 11: 
      $p=7;
      $q=6;
      label = 22; break;
    case 12: 
      var $45=$3;
      var $46=((($45)*(5))&-1);
      var $47=((($46)*(17))&-1);
      var $48=$5;
      var $49=((($48)*(126))&-1);
      var $50=(($47)|0) < (($49)|0);
      if ($50) { label = 13; break; } else { label = 14; break; }
    case 13: 
      $p=7;
      $q=5;
      label = 21; break;
    case 14: 
      var $53=$3;
      var $54=((($53)*(18))&-1);
      var $55=$5;
      var $56=((($55)*(34))&-1);
      var $57=(($54)|0) < (($56)|0);
      if ($57) { label = 15; break; } else { label = 16; break; }
    case 15: 
      $p=8;
      $q=5;
      label = 20; break;
    case 16: 
      var $60=$3;
      var $61=((($60)*(17))&-1);
      var $62=$5;
      var $63=((($62)*(36))&-1);
      var $64=(($61)|0) < (($63)|0);
      if ($64) { label = 17; break; } else { label = 18; break; }
    case 17: 
      $p=8;
      $q=4;
      label = 19; break;
    case 18: 
      $p=9;
      $q=4;
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $71=$p;
      var $72=$q;
      var $73=$71 ^ $72;
      var $74=$73 & 1;
      $half=$74;
      var $75=$q;
      var $76=$3;
      var $77=Math.imul($75,$76);
      var $78=$p;
      var $79=$5;
      var $80=Math.imul($78,$79);
      var $81=(($77)|0) >= (($80)|0);
      if ($81) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $83=$3;
      var $84=((($83)-(1))|0);
      var $85=$p;
      var $86=Math.floor(((($84)>>>0))/((($85)>>>0)));
      var $93 = $86;label = 25; break;
    case 24: 
      var $88=$5;
      var $89=((($88)-(1))|0);
      var $90=$q;
      var $91=Math.floor(((($89)>>>0))/((($90)>>>0)));
      var $93 = $91;label = 25; break;
    case 25: 
      var $93;
      var $94=((($93)+(1))|0);
      $n=$94;
      var $95=$p;
      var $96=((($95)-(1))|0);
      $p=$96;
      var $97=$q;
      var $98=((($97)-(1))|0);
      $q=$98;
      var $99=$3;
      var $100=$p;
      var $101=$n;
      var $102=Math.imul($100,$101);
      var $103=((($99)-($102))|0);
      $s=$103;
      var $104=$5;
      var $105=$q;
      var $106=$n;
      var $107=Math.imul($105,$106);
      var $108=((($104)-($107))|0);
      $t=$108;
      var $109=$half;
      var $110=(($109)|0)!=0;
      if ($110) { label = 26; break; } else { label = 32; break; }
    case 26: 
      var $112=$s;
      var $113=(($112)|0) < 1;
      var $114=(($113)&1);
      var $115=(($114)|0)!=0;
      var $116=(($115)&1);
      var $117=($116);
      var $118=(($117)|0)!=0;
      if ($118) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $120=$p;
      var $121=((($120)-(1))|0);
      $p=$121;
      var $122=$n;
      var $123=$s;
      var $124=((($123)+($122))|0);
      $s=$124;
      $half=0;
      label = 31; break;
    case 28: 
      var $126=$t;
      var $127=(($126)|0) < 1;
      var $128=(($127)&1);
      var $129=(($128)|0)!=0;
      var $130=(($129)&1);
      var $131=($130);
      var $132=(($131)|0)!=0;
      if ($132) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $134=$q;
      var $135=((($134)-(1))|0);
      $q=$135;
      var $136=$n;
      var $137=$t;
      var $138=((($137)+($136))|0);
      $t=$138;
      $half=0;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $155=$1;
      var $156=$n;
      var $157=((($156)*(9))&-1);
      var $158=(($155+($157<<2))|0);
      var $159=(($158+8)|0);
      var $160=$1;
      var $161=$n;
      var $162=((($161)*(7))&-1);
      var $163=(($160+($162<<2))|0);
      var $164=$p;
      var $165=$2;
      var $166=$n;
      var $167=$s;
      var $168=$1;
      var $169=___gmpn_toom_eval_pm2rexp($159, $163, $164, $165, $166, $167, 1, $168);
      var $170=$6;
      var $171=$n;
      var $172=((($171)*(9))&-1);
      var $173=(($170+($172<<2))|0);
      var $174=(($173+12)|0);
      var $175=$1;
      var $176=$n;
      var $177=($176<<3);
      var $178=(($175+($177<<2))|0);
      var $179=(($178+4)|0);
      var $180=$q;
      var $181=$4;
      var $182=$n;
      var $183=$t;
      var $184=$1;
      var $185=___gmpn_toom_eval_pm2rexp($174, $179, $180, $181, $182, $183, 1, $184);
      var $186=$169 ^ $185;
      $sign=$186;
      label = 46; break;
    case 46: 
      var $188=$n;
      var $189=((($188)+(1))|0);
      var $190=(($189)|0) >= 100;
      if ($190) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $192=$1;
      var $193=$1;
      var $194=$n;
      var $195=((($194)*(7))&-1);
      var $196=(($193+($195<<2))|0);
      var $197=$n;
      var $198=((($197)+(1))|0);
      var $199=$1;
      var $200=$n;
      var $201=($200<<3);
      var $202=(($199+($201<<2))|0);
      var $203=(($202+4)|0);
      var $204=$n;
      var $205=((($204)+(1))|0);
      var $206=$6;
      var $207=$n;
      var $208=((($207)*(10))&-1);
      var $209=(($206+($208<<2))|0);
      var $210=(($209+16)|0);
      ___gmpn_toom22_mul($192, $196, $198, $203, $205, $210);
      var $211=$6;
      var $212=$1;
      var $213=$n;
      var $214=((($213)*(9))&-1);
      var $215=(($212+($214<<2))|0);
      var $216=(($215+8)|0);
      var $217=$n;
      var $218=((($217)+(1))|0);
      var $219=$6;
      var $220=$n;
      var $221=((($220)*(9))&-1);
      var $222=(($219+($221<<2))|0);
      var $223=(($222+12)|0);
      var $224=$n;
      var $225=((($224)+(1))|0);
      var $226=$6;
      var $227=$n;
      var $228=((($227)*(10))&-1);
      var $229=(($226+($228<<2))|0);
      var $230=(($229+16)|0);
      ___gmpn_toom22_mul($211, $216, $218, $223, $225, $230);
      label = 55; break;
    case 48: 
      var $232=$n;
      var $233=((($232)+(1))|0);
      var $234=(($233)|0) >= 300;
      if ($234) { label = 50; break; } else { label = 49; break; }
    case 49: 
      var $236=$1;
      var $237=$1;
      var $238=$n;
      var $239=((($238)*(7))&-1);
      var $240=(($237+($239<<2))|0);
      var $241=$n;
      var $242=((($241)+(1))|0);
      var $243=$1;
      var $244=$n;
      var $245=($244<<3);
      var $246=(($243+($245<<2))|0);
      var $247=(($246+4)|0);
      var $248=$n;
      var $249=((($248)+(1))|0);
      var $250=$6;
      var $251=$n;
      var $252=((($251)*(10))&-1);
      var $253=(($250+($252<<2))|0);
      var $254=(($253+16)|0);
      ___gmpn_toom33_mul($236, $240, $242, $247, $249, $254);
      var $255=$6;
      var $256=$1;
      var $257=$n;
      var $258=((($257)*(9))&-1);
      var $259=(($256+($258<<2))|0);
      var $260=(($259+8)|0);
      var $261=$n;
      var $262=((($261)+(1))|0);
      var $263=$6;
      var $264=$n;
      var $265=((($264)*(9))&-1);
      var $266=(($263+($265<<2))|0);
      var $267=(($266+12)|0);
      var $268=$n;
      var $269=((($268)+(1))|0);
      var $270=$6;
      var $271=$n;
      var $272=((($271)*(10))&-1);
      var $273=(($270+($272<<2))|0);
      var $274=(($273+16)|0);
      ___gmpn_toom33_mul($255, $260, $262, $267, $269, $274);
      label = 54; break;
    case 50: 
      var $276=$n;
      var $277=((($276)+(1))|0);
      var $278=(($277)|0) >= 350;
      if ($278) { label = 52; break; } else { label = 51; break; }
    case 51: 
      var $280=$1;
      var $281=$1;
      var $282=$n;
      var $283=((($282)*(7))&-1);
      var $284=(($281+($283<<2))|0);
      var $285=$n;
      var $286=((($285)+(1))|0);
      var $287=$1;
      var $288=$n;
      var $289=($288<<3);
      var $290=(($287+($289<<2))|0);
      var $291=(($290+4)|0);
      var $292=$n;
      var $293=((($292)+(1))|0);
      var $294=$6;
      var $295=$n;
      var $296=((($295)*(10))&-1);
      var $297=(($294+($296<<2))|0);
      var $298=(($297+16)|0);
      ___gmpn_toom44_mul($280, $284, $286, $291, $293, $298);
      var $299=$6;
      var $300=$1;
      var $301=$n;
      var $302=((($301)*(9))&-1);
      var $303=(($300+($302<<2))|0);
      var $304=(($303+8)|0);
      var $305=$n;
      var $306=((($305)+(1))|0);
      var $307=$6;
      var $308=$n;
      var $309=((($308)*(9))&-1);
      var $310=(($307+($309<<2))|0);
      var $311=(($310+12)|0);
      var $312=$n;
      var $313=((($312)+(1))|0);
      var $314=$6;
      var $315=$n;
      var $316=((($315)*(10))&-1);
      var $317=(($314+($316<<2))|0);
      var $318=(($317+16)|0);
      ___gmpn_toom44_mul($299, $304, $306, $311, $313, $318);
      label = 53; break;
    case 52: 
      var $320=$1;
      var $321=$1;
      var $322=$n;
      var $323=((($322)*(7))&-1);
      var $324=(($321+($323<<2))|0);
      var $325=$n;
      var $326=((($325)+(1))|0);
      var $327=$1;
      var $328=$n;
      var $329=($328<<3);
      var $330=(($327+($329<<2))|0);
      var $331=(($330+4)|0);
      var $332=$n;
      var $333=((($332)+(1))|0);
      var $334=$6;
      var $335=$n;
      var $336=((($335)*(10))&-1);
      var $337=(($334+($336<<2))|0);
      var $338=(($337+16)|0);
      ___gmpn_toom6h_mul($320, $324, $326, $331, $333, $338);
      var $339=$6;
      var $340=$1;
      var $341=$n;
      var $342=((($341)*(9))&-1);
      var $343=(($340+($342<<2))|0);
      var $344=(($343+8)|0);
      var $345=$n;
      var $346=((($345)+(1))|0);
      var $347=$6;
      var $348=$n;
      var $349=((($348)*(9))&-1);
      var $350=(($347+($349<<2))|0);
      var $351=(($350+12)|0);
      var $352=$n;
      var $353=((($352)+(1))|0);
      var $354=$6;
      var $355=$n;
      var $356=((($355)*(10))&-1);
      var $357=(($354+($356<<2))|0);
      var $358=(($357+16)|0);
      ___gmpn_toom6h_mul($339, $344, $346, $351, $353, $358);
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $363=$6;
      var $364=$n;
      var $365=($364<<1);
      var $366=((($365)+(1))|0);
      var $367=$1;
      var $368=$sign;
      var $369=$n;
      var $370=$half;
      var $371=((($370)+(1))|0);
      var $372=$half;
      ___gmpn_toom_couple_handling($363, $366, $367, $368, $369, $371, $372);
      var $373=$1;
      var $374=$n;
      var $375=((($374)*(9))&-1);
      var $376=(($373+($375<<2))|0);
      var $377=(($376+8)|0);
      var $378=$1;
      var $379=$n;
      var $380=((($379)*(7))&-1);
      var $381=(($378+($380<<2))|0);
      var $382=$p;
      var $383=$2;
      var $384=$n;
      var $385=$s;
      var $386=$1;
      var $387=___gmpn_toom_eval_pm1($377, $381, $382, $383, $384, $385, $386);
      $sign=$387;
      var $388=$q;
      var $389=(($388)|0)==3;
      var $390=(($389)&1);
      var $391=(($390)|0)!=0;
      var $392=(($391)&1);
      var $393=($392);
      var $394=(($393)|0)!=0;
      if ($394) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $396=$6;
      var $397=$n;
      var $398=((($397)*(9))&-1);
      var $399=(($396+($398<<2))|0);
      var $400=(($399+12)|0);
      var $401=$1;
      var $402=$n;
      var $403=($402<<3);
      var $404=(($401+($403<<2))|0);
      var $405=(($404+4)|0);
      var $406=$4;
      var $407=$n;
      var $408=$t;
      var $409=$1;
      var $410=___gmpn_toom_eval_dgr3_pm1($400, $405, $406, $407, $408, $409);
      var $411=$sign;
      var $412=$411 ^ $410;
      $sign=$412;
      label = 59; break;
    case 58: 
      var $414=$6;
      var $415=$n;
      var $416=((($415)*(9))&-1);
      var $417=(($414+($416<<2))|0);
      var $418=(($417+12)|0);
      var $419=$1;
      var $420=$n;
      var $421=($420<<3);
      var $422=(($419+($421<<2))|0);
      var $423=(($422+4)|0);
      var $424=$q;
      var $425=$4;
      var $426=$n;
      var $427=$t;
      var $428=$1;
      var $429=___gmpn_toom_eval_pm1($418, $423, $424, $425, $426, $427, $428);
      var $430=$sign;
      var $431=$430 ^ $429;
      $sign=$431;
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $434=$n;
      var $435=((($434)+(1))|0);
      var $436=(($435)|0) >= 100;
      if ($436) { label = 62; break; } else { label = 61; break; }
    case 61: 
      var $438=$1;
      var $439=$1;
      var $440=$n;
      var $441=((($440)*(7))&-1);
      var $442=(($439+($441<<2))|0);
      var $443=$n;
      var $444=((($443)+(1))|0);
      var $445=$1;
      var $446=$n;
      var $447=($446<<3);
      var $448=(($445+($447<<2))|0);
      var $449=(($448+4)|0);
      var $450=$n;
      var $451=((($450)+(1))|0);
      var $452=$6;
      var $453=$n;
      var $454=((($453)*(10))&-1);
      var $455=(($452+($454<<2))|0);
      var $456=(($455+16)|0);
      ___gmpn_toom22_mul($438, $442, $444, $449, $451, $456);
      var $457=$6;
      var $458=$n;
      var $459=((($458)*(3))&-1);
      var $460=(($457+($459<<2))|0);
      var $461=(($460+4)|0);
      var $462=$1;
      var $463=$n;
      var $464=((($463)*(9))&-1);
      var $465=(($462+($464<<2))|0);
      var $466=(($465+8)|0);
      var $467=$n;
      var $468=((($467)+(1))|0);
      var $469=$6;
      var $470=$n;
      var $471=((($470)*(9))&-1);
      var $472=(($469+($471<<2))|0);
      var $473=(($472+12)|0);
      var $474=$n;
      var $475=((($474)+(1))|0);
      var $476=$6;
      var $477=$n;
      var $478=((($477)*(10))&-1);
      var $479=(($476+($478<<2))|0);
      var $480=(($479+16)|0);
      ___gmpn_toom22_mul($461, $466, $468, $473, $475, $480);
      label = 69; break;
    case 62: 
      var $482=$n;
      var $483=((($482)+(1))|0);
      var $484=(($483)|0) >= 300;
      if ($484) { label = 64; break; } else { label = 63; break; }
    case 63: 
      var $486=$1;
      var $487=$1;
      var $488=$n;
      var $489=((($488)*(7))&-1);
      var $490=(($487+($489<<2))|0);
      var $491=$n;
      var $492=((($491)+(1))|0);
      var $493=$1;
      var $494=$n;
      var $495=($494<<3);
      var $496=(($493+($495<<2))|0);
      var $497=(($496+4)|0);
      var $498=$n;
      var $499=((($498)+(1))|0);
      var $500=$6;
      var $501=$n;
      var $502=((($501)*(10))&-1);
      var $503=(($500+($502<<2))|0);
      var $504=(($503+16)|0);
      ___gmpn_toom33_mul($486, $490, $492, $497, $499, $504);
      var $505=$6;
      var $506=$n;
      var $507=((($506)*(3))&-1);
      var $508=(($505+($507<<2))|0);
      var $509=(($508+4)|0);
      var $510=$1;
      var $511=$n;
      var $512=((($511)*(9))&-1);
      var $513=(($510+($512<<2))|0);
      var $514=(($513+8)|0);
      var $515=$n;
      var $516=((($515)+(1))|0);
      var $517=$6;
      var $518=$n;
      var $519=((($518)*(9))&-1);
      var $520=(($517+($519<<2))|0);
      var $521=(($520+12)|0);
      var $522=$n;
      var $523=((($522)+(1))|0);
      var $524=$6;
      var $525=$n;
      var $526=((($525)*(10))&-1);
      var $527=(($524+($526<<2))|0);
      var $528=(($527+16)|0);
      ___gmpn_toom33_mul($509, $514, $516, $521, $523, $528);
      label = 68; break;
    case 64: 
      var $530=$n;
      var $531=((($530)+(1))|0);
      var $532=(($531)|0) >= 350;
      if ($532) { label = 66; break; } else { label = 65; break; }
    case 65: 
      var $534=$1;
      var $535=$1;
      var $536=$n;
      var $537=((($536)*(7))&-1);
      var $538=(($535+($537<<2))|0);
      var $539=$n;
      var $540=((($539)+(1))|0);
      var $541=$1;
      var $542=$n;
      var $543=($542<<3);
      var $544=(($541+($543<<2))|0);
      var $545=(($544+4)|0);
      var $546=$n;
      var $547=((($546)+(1))|0);
      var $548=$6;
      var $549=$n;
      var $550=((($549)*(10))&-1);
      var $551=(($548+($550<<2))|0);
      var $552=(($551+16)|0);
      ___gmpn_toom44_mul($534, $538, $540, $545, $547, $552);
      var $553=$6;
      var $554=$n;
      var $555=((($554)*(3))&-1);
      var $556=(($553+($555<<2))|0);
      var $557=(($556+4)|0);
      var $558=$1;
      var $559=$n;
      var $560=((($559)*(9))&-1);
      var $561=(($558+($560<<2))|0);
      var $562=(($561+8)|0);
      var $563=$n;
      var $564=((($563)+(1))|0);
      var $565=$6;
      var $566=$n;
      var $567=((($566)*(9))&-1);
      var $568=(($565+($567<<2))|0);
      var $569=(($568+12)|0);
      var $570=$n;
      var $571=((($570)+(1))|0);
      var $572=$6;
      var $573=$n;
      var $574=((($573)*(10))&-1);
      var $575=(($572+($574<<2))|0);
      var $576=(($575+16)|0);
      ___gmpn_toom44_mul($557, $562, $564, $569, $571, $576);
      label = 67; break;
    case 66: 
      var $578=$1;
      var $579=$1;
      var $580=$n;
      var $581=((($580)*(7))&-1);
      var $582=(($579+($581<<2))|0);
      var $583=$n;
      var $584=((($583)+(1))|0);
      var $585=$1;
      var $586=$n;
      var $587=($586<<3);
      var $588=(($585+($587<<2))|0);
      var $589=(($588+4)|0);
      var $590=$n;
      var $591=((($590)+(1))|0);
      var $592=$6;
      var $593=$n;
      var $594=((($593)*(10))&-1);
      var $595=(($592+($594<<2))|0);
      var $596=(($595+16)|0);
      ___gmpn_toom6h_mul($578, $582, $584, $589, $591, $596);
      var $597=$6;
      var $598=$n;
      var $599=((($598)*(3))&-1);
      var $600=(($597+($599<<2))|0);
      var $601=(($600+4)|0);
      var $602=$1;
      var $603=$n;
      var $604=((($603)*(9))&-1);
      var $605=(($602+($604<<2))|0);
      var $606=(($605+8)|0);
      var $607=$n;
      var $608=((($607)+(1))|0);
      var $609=$6;
      var $610=$n;
      var $611=((($610)*(9))&-1);
      var $612=(($609+($611<<2))|0);
      var $613=(($612+12)|0);
      var $614=$n;
      var $615=((($614)+(1))|0);
      var $616=$6;
      var $617=$n;
      var $618=((($617)*(10))&-1);
      var $619=(($616+($618<<2))|0);
      var $620=(($619+16)|0);
      ___gmpn_toom6h_mul($601, $606, $608, $613, $615, $620);
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $625=$6;
      var $626=$n;
      var $627=((($626)*(3))&-1);
      var $628=(($625+($627<<2))|0);
      var $629=(($628+4)|0);
      var $630=$n;
      var $631=($630<<1);
      var $632=((($631)+(1))|0);
      var $633=$1;
      var $634=$sign;
      var $635=$n;
      ___gmpn_toom_couple_handling($629, $632, $633, $634, $635, 0, 0);
      var $636=$1;
      var $637=$n;
      var $638=((($637)*(9))&-1);
      var $639=(($636+($638<<2))|0);
      var $640=(($639+8)|0);
      var $641=$1;
      var $642=$n;
      var $643=((($642)*(7))&-1);
      var $644=(($641+($643<<2))|0);
      var $645=$p;
      var $646=$2;
      var $647=$n;
      var $648=$s;
      var $649=$1;
      var $650=___gmpn_toom_eval_pm2exp($640, $644, $645, $646, $647, $648, 2, $649);
      var $651=$6;
      var $652=$n;
      var $653=((($652)*(9))&-1);
      var $654=(($651+($653<<2))|0);
      var $655=(($654+12)|0);
      var $656=$1;
      var $657=$n;
      var $658=($657<<3);
      var $659=(($656+($658<<2))|0);
      var $660=(($659+4)|0);
      var $661=$q;
      var $662=$4;
      var $663=$n;
      var $664=$t;
      var $665=$1;
      var $666=___gmpn_toom_eval_pm2exp($655, $660, $661, $662, $663, $664, 2, $665);
      var $667=$650 ^ $666;
      $sign=$667;
      label = 71; break;
    case 71: 
      var $669=$n;
      var $670=((($669)+(1))|0);
      var $671=(($670)|0) >= 100;
      if ($671) { label = 73; break; } else { label = 72; break; }
    case 72: 
      var $673=$1;
      var $674=$1;
      var $675=$n;
      var $676=((($675)*(7))&-1);
      var $677=(($674+($676<<2))|0);
      var $678=$n;
      var $679=((($678)+(1))|0);
      var $680=$1;
      var $681=$n;
      var $682=($681<<3);
      var $683=(($680+($682<<2))|0);
      var $684=(($683+4)|0);
      var $685=$n;
      var $686=((($685)+(1))|0);
      var $687=$6;
      var $688=$n;
      var $689=((($688)*(10))&-1);
      var $690=(($687+($689<<2))|0);
      var $691=(($690+16)|0);
      ___gmpn_toom22_mul($673, $677, $679, $684, $686, $691);
      var $692=$6;
      var $693=$n;
      var $694=((($693)*(6))&-1);
      var $695=(($692+($694<<2))|0);
      var $696=(($695+8)|0);
      var $697=$1;
      var $698=$n;
      var $699=((($698)*(9))&-1);
      var $700=(($697+($699<<2))|0);
      var $701=(($700+8)|0);
      var $702=$n;
      var $703=((($702)+(1))|0);
      var $704=$6;
      var $705=$n;
      var $706=((($705)*(9))&-1);
      var $707=(($704+($706<<2))|0);
      var $708=(($707+12)|0);
      var $709=$n;
      var $710=((($709)+(1))|0);
      var $711=$6;
      var $712=$n;
      var $713=((($712)*(10))&-1);
      var $714=(($711+($713<<2))|0);
      var $715=(($714+16)|0);
      ___gmpn_toom22_mul($696, $701, $703, $708, $710, $715);
      label = 80; break;
    case 73: 
      var $717=$n;
      var $718=((($717)+(1))|0);
      var $719=(($718)|0) >= 300;
      if ($719) { label = 75; break; } else { label = 74; break; }
    case 74: 
      var $721=$1;
      var $722=$1;
      var $723=$n;
      var $724=((($723)*(7))&-1);
      var $725=(($722+($724<<2))|0);
      var $726=$n;
      var $727=((($726)+(1))|0);
      var $728=$1;
      var $729=$n;
      var $730=($729<<3);
      var $731=(($728+($730<<2))|0);
      var $732=(($731+4)|0);
      var $733=$n;
      var $734=((($733)+(1))|0);
      var $735=$6;
      var $736=$n;
      var $737=((($736)*(10))&-1);
      var $738=(($735+($737<<2))|0);
      var $739=(($738+16)|0);
      ___gmpn_toom33_mul($721, $725, $727, $732, $734, $739);
      var $740=$6;
      var $741=$n;
      var $742=((($741)*(6))&-1);
      var $743=(($740+($742<<2))|0);
      var $744=(($743+8)|0);
      var $745=$1;
      var $746=$n;
      var $747=((($746)*(9))&-1);
      var $748=(($745+($747<<2))|0);
      var $749=(($748+8)|0);
      var $750=$n;
      var $751=((($750)+(1))|0);
      var $752=$6;
      var $753=$n;
      var $754=((($753)*(9))&-1);
      var $755=(($752+($754<<2))|0);
      var $756=(($755+12)|0);
      var $757=$n;
      var $758=((($757)+(1))|0);
      var $759=$6;
      var $760=$n;
      var $761=((($760)*(10))&-1);
      var $762=(($759+($761<<2))|0);
      var $763=(($762+16)|0);
      ___gmpn_toom33_mul($744, $749, $751, $756, $758, $763);
      label = 79; break;
    case 75: 
      var $765=$n;
      var $766=((($765)+(1))|0);
      var $767=(($766)|0) >= 350;
      if ($767) { label = 77; break; } else { label = 76; break; }
    case 76: 
      var $769=$1;
      var $770=$1;
      var $771=$n;
      var $772=((($771)*(7))&-1);
      var $773=(($770+($772<<2))|0);
      var $774=$n;
      var $775=((($774)+(1))|0);
      var $776=$1;
      var $777=$n;
      var $778=($777<<3);
      var $779=(($776+($778<<2))|0);
      var $780=(($779+4)|0);
      var $781=$n;
      var $782=((($781)+(1))|0);
      var $783=$6;
      var $784=$n;
      var $785=((($784)*(10))&-1);
      var $786=(($783+($785<<2))|0);
      var $787=(($786+16)|0);
      ___gmpn_toom44_mul($769, $773, $775, $780, $782, $787);
      var $788=$6;
      var $789=$n;
      var $790=((($789)*(6))&-1);
      var $791=(($788+($790<<2))|0);
      var $792=(($791+8)|0);
      var $793=$1;
      var $794=$n;
      var $795=((($794)*(9))&-1);
      var $796=(($793+($795<<2))|0);
      var $797=(($796+8)|0);
      var $798=$n;
      var $799=((($798)+(1))|0);
      var $800=$6;
      var $801=$n;
      var $802=((($801)*(9))&-1);
      var $803=(($800+($802<<2))|0);
      var $804=(($803+12)|0);
      var $805=$n;
      var $806=((($805)+(1))|0);
      var $807=$6;
      var $808=$n;
      var $809=((($808)*(10))&-1);
      var $810=(($807+($809<<2))|0);
      var $811=(($810+16)|0);
      ___gmpn_toom44_mul($792, $797, $799, $804, $806, $811);
      label = 78; break;
    case 77: 
      var $813=$1;
      var $814=$1;
      var $815=$n;
      var $816=((($815)*(7))&-1);
      var $817=(($814+($816<<2))|0);
      var $818=$n;
      var $819=((($818)+(1))|0);
      var $820=$1;
      var $821=$n;
      var $822=($821<<3);
      var $823=(($820+($822<<2))|0);
      var $824=(($823+4)|0);
      var $825=$n;
      var $826=((($825)+(1))|0);
      var $827=$6;
      var $828=$n;
      var $829=((($828)*(10))&-1);
      var $830=(($827+($829<<2))|0);
      var $831=(($830+16)|0);
      ___gmpn_toom6h_mul($813, $817, $819, $824, $826, $831);
      var $832=$6;
      var $833=$n;
      var $834=((($833)*(6))&-1);
      var $835=(($832+($834<<2))|0);
      var $836=(($835+8)|0);
      var $837=$1;
      var $838=$n;
      var $839=((($838)*(9))&-1);
      var $840=(($837+($839<<2))|0);
      var $841=(($840+8)|0);
      var $842=$n;
      var $843=((($842)+(1))|0);
      var $844=$6;
      var $845=$n;
      var $846=((($845)*(9))&-1);
      var $847=(($844+($846<<2))|0);
      var $848=(($847+12)|0);
      var $849=$n;
      var $850=((($849)+(1))|0);
      var $851=$6;
      var $852=$n;
      var $853=((($852)*(10))&-1);
      var $854=(($851+($853<<2))|0);
      var $855=(($854+16)|0);
      ___gmpn_toom6h_mul($836, $841, $843, $848, $850, $855);
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      var $860=$6;
      var $861=$n;
      var $862=((($861)*(6))&-1);
      var $863=(($860+($862<<2))|0);
      var $864=(($863+8)|0);
      var $865=$n;
      var $866=($865<<1);
      var $867=((($866)+(1))|0);
      var $868=$1;
      var $869=$sign;
      var $870=$n;
      ___gmpn_toom_couple_handling($864, $867, $868, $869, $870, 2, 4);
      var $871=$1;
      var $872=$n;
      var $873=((($872)*(9))&-1);
      var $874=(($871+($873<<2))|0);
      var $875=(($874+8)|0);
      var $876=$1;
      var $877=$n;
      var $878=((($877)*(7))&-1);
      var $879=(($876+($878<<2))|0);
      var $880=$p;
      var $881=$2;
      var $882=$n;
      var $883=$s;
      var $884=$1;
      var $885=___gmpn_toom_eval_pm2rexp($875, $879, $880, $881, $882, $883, 2, $884);
      var $886=$6;
      var $887=$n;
      var $888=((($887)*(9))&-1);
      var $889=(($886+($888<<2))|0);
      var $890=(($889+12)|0);
      var $891=$1;
      var $892=$n;
      var $893=($892<<3);
      var $894=(($891+($893<<2))|0);
      var $895=(($894+4)|0);
      var $896=$q;
      var $897=$4;
      var $898=$n;
      var $899=$t;
      var $900=$1;
      var $901=___gmpn_toom_eval_pm2rexp($890, $895, $896, $897, $898, $899, 2, $900);
      var $902=$885 ^ $901;
      $sign=$902;
      label = 82; break;
    case 82: 
      var $904=$n;
      var $905=((($904)+(1))|0);
      var $906=(($905)|0) >= 100;
      if ($906) { label = 84; break; } else { label = 83; break; }
    case 83: 
      var $908=$1;
      var $909=$1;
      var $910=$n;
      var $911=((($910)*(7))&-1);
      var $912=(($909+($911<<2))|0);
      var $913=$n;
      var $914=((($913)+(1))|0);
      var $915=$1;
      var $916=$n;
      var $917=($916<<3);
      var $918=(($915+($917<<2))|0);
      var $919=(($918+4)|0);
      var $920=$n;
      var $921=((($920)+(1))|0);
      var $922=$6;
      var $923=$n;
      var $924=((($923)*(10))&-1);
      var $925=(($922+($924<<2))|0);
      var $926=(($925+16)|0);
      ___gmpn_toom22_mul($908, $912, $914, $919, $921, $926);
      var $927=$1;
      var $928=$n;
      var $929=((($928)*(3))&-1);
      var $930=(($927+($929<<2))|0);
      var $931=$1;
      var $932=$n;
      var $933=((($932)*(9))&-1);
      var $934=(($931+($933<<2))|0);
      var $935=(($934+8)|0);
      var $936=$n;
      var $937=((($936)+(1))|0);
      var $938=$6;
      var $939=$n;
      var $940=((($939)*(9))&-1);
      var $941=(($938+($940<<2))|0);
      var $942=(($941+12)|0);
      var $943=$n;
      var $944=((($943)+(1))|0);
      var $945=$6;
      var $946=$n;
      var $947=((($946)*(10))&-1);
      var $948=(($945+($947<<2))|0);
      var $949=(($948+16)|0);
      ___gmpn_toom22_mul($930, $935, $937, $942, $944, $949);
      label = 91; break;
    case 84: 
      var $951=$n;
      var $952=((($951)+(1))|0);
      var $953=(($952)|0) >= 300;
      if ($953) { label = 86; break; } else { label = 85; break; }
    case 85: 
      var $955=$1;
      var $956=$1;
      var $957=$n;
      var $958=((($957)*(7))&-1);
      var $959=(($956+($958<<2))|0);
      var $960=$n;
      var $961=((($960)+(1))|0);
      var $962=$1;
      var $963=$n;
      var $964=($963<<3);
      var $965=(($962+($964<<2))|0);
      var $966=(($965+4)|0);
      var $967=$n;
      var $968=((($967)+(1))|0);
      var $969=$6;
      var $970=$n;
      var $971=((($970)*(10))&-1);
      var $972=(($969+($971<<2))|0);
      var $973=(($972+16)|0);
      ___gmpn_toom33_mul($955, $959, $961, $966, $968, $973);
      var $974=$1;
      var $975=$n;
      var $976=((($975)*(3))&-1);
      var $977=(($974+($976<<2))|0);
      var $978=$1;
      var $979=$n;
      var $980=((($979)*(9))&-1);
      var $981=(($978+($980<<2))|0);
      var $982=(($981+8)|0);
      var $983=$n;
      var $984=((($983)+(1))|0);
      var $985=$6;
      var $986=$n;
      var $987=((($986)*(9))&-1);
      var $988=(($985+($987<<2))|0);
      var $989=(($988+12)|0);
      var $990=$n;
      var $991=((($990)+(1))|0);
      var $992=$6;
      var $993=$n;
      var $994=((($993)*(10))&-1);
      var $995=(($992+($994<<2))|0);
      var $996=(($995+16)|0);
      ___gmpn_toom33_mul($977, $982, $984, $989, $991, $996);
      label = 90; break;
    case 86: 
      var $998=$n;
      var $999=((($998)+(1))|0);
      var $1000=(($999)|0) >= 350;
      if ($1000) { label = 88; break; } else { label = 87; break; }
    case 87: 
      var $1002=$1;
      var $1003=$1;
      var $1004=$n;
      var $1005=((($1004)*(7))&-1);
      var $1006=(($1003+($1005<<2))|0);
      var $1007=$n;
      var $1008=((($1007)+(1))|0);
      var $1009=$1;
      var $1010=$n;
      var $1011=($1010<<3);
      var $1012=(($1009+($1011<<2))|0);
      var $1013=(($1012+4)|0);
      var $1014=$n;
      var $1015=((($1014)+(1))|0);
      var $1016=$6;
      var $1017=$n;
      var $1018=((($1017)*(10))&-1);
      var $1019=(($1016+($1018<<2))|0);
      var $1020=(($1019+16)|0);
      ___gmpn_toom44_mul($1002, $1006, $1008, $1013, $1015, $1020);
      var $1021=$1;
      var $1022=$n;
      var $1023=((($1022)*(3))&-1);
      var $1024=(($1021+($1023<<2))|0);
      var $1025=$1;
      var $1026=$n;
      var $1027=((($1026)*(9))&-1);
      var $1028=(($1025+($1027<<2))|0);
      var $1029=(($1028+8)|0);
      var $1030=$n;
      var $1031=((($1030)+(1))|0);
      var $1032=$6;
      var $1033=$n;
      var $1034=((($1033)*(9))&-1);
      var $1035=(($1032+($1034<<2))|0);
      var $1036=(($1035+12)|0);
      var $1037=$n;
      var $1038=((($1037)+(1))|0);
      var $1039=$6;
      var $1040=$n;
      var $1041=((($1040)*(10))&-1);
      var $1042=(($1039+($1041<<2))|0);
      var $1043=(($1042+16)|0);
      ___gmpn_toom44_mul($1024, $1029, $1031, $1036, $1038, $1043);
      label = 89; break;
    case 88: 
      var $1045=$1;
      var $1046=$1;
      var $1047=$n;
      var $1048=((($1047)*(7))&-1);
      var $1049=(($1046+($1048<<2))|0);
      var $1050=$n;
      var $1051=((($1050)+(1))|0);
      var $1052=$1;
      var $1053=$n;
      var $1054=($1053<<3);
      var $1055=(($1052+($1054<<2))|0);
      var $1056=(($1055+4)|0);
      var $1057=$n;
      var $1058=((($1057)+(1))|0);
      var $1059=$6;
      var $1060=$n;
      var $1061=((($1060)*(10))&-1);
      var $1062=(($1059+($1061<<2))|0);
      var $1063=(($1062+16)|0);
      ___gmpn_toom6h_mul($1045, $1049, $1051, $1056, $1058, $1063);
      var $1064=$1;
      var $1065=$n;
      var $1066=((($1065)*(3))&-1);
      var $1067=(($1064+($1066<<2))|0);
      var $1068=$1;
      var $1069=$n;
      var $1070=((($1069)*(9))&-1);
      var $1071=(($1068+($1070<<2))|0);
      var $1072=(($1071+8)|0);
      var $1073=$n;
      var $1074=((($1073)+(1))|0);
      var $1075=$6;
      var $1076=$n;
      var $1077=((($1076)*(9))&-1);
      var $1078=(($1075+($1077<<2))|0);
      var $1079=(($1078+12)|0);
      var $1080=$n;
      var $1081=((($1080)+(1))|0);
      var $1082=$6;
      var $1083=$n;
      var $1084=((($1083)*(10))&-1);
      var $1085=(($1082+($1084<<2))|0);
      var $1086=(($1085+16)|0);
      ___gmpn_toom6h_mul($1067, $1072, $1074, $1079, $1081, $1086);
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $1091=$1;
      var $1092=$n;
      var $1093=((($1092)*(3))&-1);
      var $1094=(($1091+($1093<<2))|0);
      var $1095=$n;
      var $1096=($1095<<1);
      var $1097=((($1096)+(1))|0);
      var $1098=$1;
      var $1099=$sign;
      var $1100=$n;
      var $1101=$half;
      var $1102=((($1101)+(1))|0);
      var $1103=($1102<<1);
      var $1104=$half;
      var $1105=($1104<<1);
      ___gmpn_toom_couple_handling($1094, $1097, $1098, $1099, $1100, $1103, $1105);
      var $1106=$1;
      var $1107=$n;
      var $1108=((($1107)*(9))&-1);
      var $1109=(($1106+($1108<<2))|0);
      var $1110=(($1109+8)|0);
      var $1111=$1;
      var $1112=$n;
      var $1113=((($1112)*(7))&-1);
      var $1114=(($1111+($1113<<2))|0);
      var $1115=$p;
      var $1116=$2;
      var $1117=$n;
      var $1118=$s;
      var $1119=$1;
      var $1120=___gmpn_toom_eval_pm2($1110, $1114, $1115, $1116, $1117, $1118, $1119);
      var $1121=$6;
      var $1122=$n;
      var $1123=((($1122)*(9))&-1);
      var $1124=(($1121+($1123<<2))|0);
      var $1125=(($1124+12)|0);
      var $1126=$1;
      var $1127=$n;
      var $1128=($1127<<3);
      var $1129=(($1126+($1128<<2))|0);
      var $1130=(($1129+4)|0);
      var $1131=$q;
      var $1132=$4;
      var $1133=$n;
      var $1134=$t;
      var $1135=$1;
      var $1136=___gmpn_toom_eval_pm2($1125, $1130, $1131, $1132, $1133, $1134, $1135);
      var $1137=$1120 ^ $1136;
      $sign=$1137;
      label = 93; break;
    case 93: 
      var $1139=$n;
      var $1140=((($1139)+(1))|0);
      var $1141=(($1140)|0) >= 100;
      if ($1141) { label = 95; break; } else { label = 94; break; }
    case 94: 
      var $1143=$1;
      var $1144=$1;
      var $1145=$n;
      var $1146=((($1145)*(7))&-1);
      var $1147=(($1144+($1146<<2))|0);
      var $1148=$n;
      var $1149=((($1148)+(1))|0);
      var $1150=$1;
      var $1151=$n;
      var $1152=($1151<<3);
      var $1153=(($1150+($1152<<2))|0);
      var $1154=(($1153+4)|0);
      var $1155=$n;
      var $1156=((($1155)+(1))|0);
      var $1157=$6;
      var $1158=$n;
      var $1159=((($1158)*(10))&-1);
      var $1160=(($1157+($1159<<2))|0);
      var $1161=(($1160+16)|0);
      ___gmpn_toom22_mul($1143, $1147, $1149, $1154, $1156, $1161);
      var $1162=$1;
      var $1163=$n;
      var $1164=((($1163)*(7))&-1);
      var $1165=(($1162+($1164<<2))|0);
      var $1166=$1;
      var $1167=$n;
      var $1168=((($1167)*(9))&-1);
      var $1169=(($1166+($1168<<2))|0);
      var $1170=(($1169+8)|0);
      var $1171=$n;
      var $1172=((($1171)+(1))|0);
      var $1173=$6;
      var $1174=$n;
      var $1175=((($1174)*(9))&-1);
      var $1176=(($1173+($1175<<2))|0);
      var $1177=(($1176+12)|0);
      var $1178=$n;
      var $1179=((($1178)+(1))|0);
      var $1180=$6;
      var $1181=$n;
      var $1182=((($1181)*(10))&-1);
      var $1183=(($1180+($1182<<2))|0);
      var $1184=(($1183+16)|0);
      ___gmpn_toom22_mul($1165, $1170, $1172, $1177, $1179, $1184);
      label = 102; break;
    case 95: 
      var $1186=$n;
      var $1187=((($1186)+(1))|0);
      var $1188=(($1187)|0) >= 300;
      if ($1188) { label = 97; break; } else { label = 96; break; }
    case 96: 
      var $1190=$1;
      var $1191=$1;
      var $1192=$n;
      var $1193=((($1192)*(7))&-1);
      var $1194=(($1191+($1193<<2))|0);
      var $1195=$n;
      var $1196=((($1195)+(1))|0);
      var $1197=$1;
      var $1198=$n;
      var $1199=($1198<<3);
      var $1200=(($1197+($1199<<2))|0);
      var $1201=(($1200+4)|0);
      var $1202=$n;
      var $1203=((($1202)+(1))|0);
      var $1204=$6;
      var $1205=$n;
      var $1206=((($1205)*(10))&-1);
      var $1207=(($1204+($1206<<2))|0);
      var $1208=(($1207+16)|0);
      ___gmpn_toom33_mul($1190, $1194, $1196, $1201, $1203, $1208);
      var $1209=$1;
      var $1210=$n;
      var $1211=((($1210)*(7))&-1);
      var $1212=(($1209+($1211<<2))|0);
      var $1213=$1;
      var $1214=$n;
      var $1215=((($1214)*(9))&-1);
      var $1216=(($1213+($1215<<2))|0);
      var $1217=(($1216+8)|0);
      var $1218=$n;
      var $1219=((($1218)+(1))|0);
      var $1220=$6;
      var $1221=$n;
      var $1222=((($1221)*(9))&-1);
      var $1223=(($1220+($1222<<2))|0);
      var $1224=(($1223+12)|0);
      var $1225=$n;
      var $1226=((($1225)+(1))|0);
      var $1227=$6;
      var $1228=$n;
      var $1229=((($1228)*(10))&-1);
      var $1230=(($1227+($1229<<2))|0);
      var $1231=(($1230+16)|0);
      ___gmpn_toom33_mul($1212, $1217, $1219, $1224, $1226, $1231);
      label = 101; break;
    case 97: 
      var $1233=$n;
      var $1234=((($1233)+(1))|0);
      var $1235=(($1234)|0) >= 350;
      if ($1235) { label = 99; break; } else { label = 98; break; }
    case 98: 
      var $1237=$1;
      var $1238=$1;
      var $1239=$n;
      var $1240=((($1239)*(7))&-1);
      var $1241=(($1238+($1240<<2))|0);
      var $1242=$n;
      var $1243=((($1242)+(1))|0);
      var $1244=$1;
      var $1245=$n;
      var $1246=($1245<<3);
      var $1247=(($1244+($1246<<2))|0);
      var $1248=(($1247+4)|0);
      var $1249=$n;
      var $1250=((($1249)+(1))|0);
      var $1251=$6;
      var $1252=$n;
      var $1253=((($1252)*(10))&-1);
      var $1254=(($1251+($1253<<2))|0);
      var $1255=(($1254+16)|0);
      ___gmpn_toom44_mul($1237, $1241, $1243, $1248, $1250, $1255);
      var $1256=$1;
      var $1257=$n;
      var $1258=((($1257)*(7))&-1);
      var $1259=(($1256+($1258<<2))|0);
      var $1260=$1;
      var $1261=$n;
      var $1262=((($1261)*(9))&-1);
      var $1263=(($1260+($1262<<2))|0);
      var $1264=(($1263+8)|0);
      var $1265=$n;
      var $1266=((($1265)+(1))|0);
      var $1267=$6;
      var $1268=$n;
      var $1269=((($1268)*(9))&-1);
      var $1270=(($1267+($1269<<2))|0);
      var $1271=(($1270+12)|0);
      var $1272=$n;
      var $1273=((($1272)+(1))|0);
      var $1274=$6;
      var $1275=$n;
      var $1276=((($1275)*(10))&-1);
      var $1277=(($1274+($1276<<2))|0);
      var $1278=(($1277+16)|0);
      ___gmpn_toom44_mul($1259, $1264, $1266, $1271, $1273, $1278);
      label = 100; break;
    case 99: 
      var $1280=$1;
      var $1281=$1;
      var $1282=$n;
      var $1283=((($1282)*(7))&-1);
      var $1284=(($1281+($1283<<2))|0);
      var $1285=$n;
      var $1286=((($1285)+(1))|0);
      var $1287=$1;
      var $1288=$n;
      var $1289=($1288<<3);
      var $1290=(($1287+($1289<<2))|0);
      var $1291=(($1290+4)|0);
      var $1292=$n;
      var $1293=((($1292)+(1))|0);
      var $1294=$6;
      var $1295=$n;
      var $1296=((($1295)*(10))&-1);
      var $1297=(($1294+($1296<<2))|0);
      var $1298=(($1297+16)|0);
      ___gmpn_toom6h_mul($1280, $1284, $1286, $1291, $1293, $1298);
      var $1299=$1;
      var $1300=$n;
      var $1301=((($1300)*(7))&-1);
      var $1302=(($1299+($1301<<2))|0);
      var $1303=$1;
      var $1304=$n;
      var $1305=((($1304)*(9))&-1);
      var $1306=(($1303+($1305<<2))|0);
      var $1307=(($1306+8)|0);
      var $1308=$n;
      var $1309=((($1308)+(1))|0);
      var $1310=$6;
      var $1311=$n;
      var $1312=((($1311)*(9))&-1);
      var $1313=(($1310+($1312<<2))|0);
      var $1314=(($1313+12)|0);
      var $1315=$n;
      var $1316=((($1315)+(1))|0);
      var $1317=$6;
      var $1318=$n;
      var $1319=((($1318)*(10))&-1);
      var $1320=(($1317+($1319<<2))|0);
      var $1321=(($1320+16)|0);
      ___gmpn_toom6h_mul($1302, $1307, $1309, $1314, $1316, $1321);
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      var $1326=$1;
      var $1327=$n;
      var $1328=((($1327)*(7))&-1);
      var $1329=(($1326+($1328<<2))|0);
      var $1330=$n;
      var $1331=($1330<<1);
      var $1332=((($1331)+(1))|0);
      var $1333=$1;
      var $1334=$sign;
      var $1335=$n;
      ___gmpn_toom_couple_handling($1329, $1332, $1333, $1334, $1335, 1, 2);
      label = 104; break;
    case 104: 
      var $1337=$n;
      var $1338=(($1337)|0) >= 100;
      if ($1338) { label = 106; break; } else { label = 105; break; }
    case 105: 
      var $1340=$1;
      var $1341=$2;
      var $1342=$n;
      var $1343=$4;
      var $1344=$n;
      var $1345=$6;
      var $1346=$n;
      var $1347=((($1346)*(9))&-1);
      var $1348=(($1345+($1347<<2))|0);
      var $1349=(($1348+12)|0);
      ___gmpn_toom22_mul($1340, $1341, $1342, $1343, $1344, $1349);
      label = 113; break;
    case 106: 
      var $1351=$n;
      var $1352=(($1351)|0) >= 300;
      if ($1352) { label = 108; break; } else { label = 107; break; }
    case 107: 
      var $1354=$1;
      var $1355=$2;
      var $1356=$n;
      var $1357=$4;
      var $1358=$n;
      var $1359=$6;
      var $1360=$n;
      var $1361=((($1360)*(9))&-1);
      var $1362=(($1359+($1361<<2))|0);
      var $1363=(($1362+12)|0);
      ___gmpn_toom33_mul($1354, $1355, $1356, $1357, $1358, $1363);
      label = 112; break;
    case 108: 
      var $1365=$n;
      var $1366=(($1365)|0) >= 350;
      if ($1366) { label = 110; break; } else { label = 109; break; }
    case 109: 
      var $1368=$1;
      var $1369=$2;
      var $1370=$n;
      var $1371=$4;
      var $1372=$n;
      var $1373=$6;
      var $1374=$n;
      var $1375=((($1374)*(9))&-1);
      var $1376=(($1373+($1375<<2))|0);
      var $1377=(($1376+12)|0);
      ___gmpn_toom44_mul($1368, $1369, $1370, $1371, $1372, $1377);
      label = 111; break;
    case 110: 
      var $1379=$1;
      var $1380=$2;
      var $1381=$n;
      var $1382=$4;
      var $1383=$n;
      var $1384=$6;
      var $1385=$n;
      var $1386=((($1385)*(9))&-1);
      var $1387=(($1384+($1386<<2))|0);
      var $1388=(($1387+12)|0);
      ___gmpn_toom6h_mul($1379, $1380, $1381, $1382, $1383, $1388);
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      label = 114; break;
    case 114: 
      var $1393=$half;
      var $1394=(($1393)|0)!=0;
      var $1395=(($1394)&1);
      var $1396=(($1395)|0)!=0;
      var $1397=(($1396)&1);
      var $1398=($1397);
      var $1399=(($1398)|0)!=0;
      if ($1399) { label = 115; break; } else { label = 123; break; }
    case 115: 
      var $1401=$s;
      var $1402=$t;
      var $1403=(($1401)|0) > (($1402)|0);
      if ($1403) { label = 116; break; } else { label = 119; break; }
    case 116: 
      label = 117; break;
    case 117: 
      var $1406=$1;
      var $1407=$n;
      var $1408=((($1407)*(11))&-1);
      var $1409=(($1406+($1408<<2))|0);
      var $1410=$2;
      var $1411=$p;
      var $1412=$n;
      var $1413=Math.imul($1411,$1412);
      var $1414=(($1410+($1413<<2))|0);
      var $1415=$s;
      var $1416=$4;
      var $1417=$q;
      var $1418=$n;
      var $1419=Math.imul($1417,$1418);
      var $1420=(($1416+($1419<<2))|0);
      var $1421=$t;
      var $1422=___gmpn_mul($1409, $1414, $1415, $1420, $1421);
      label = 118; break;
    case 118: 
      label = 122; break;
    case 119: 
      label = 120; break;
    case 120: 
      var $1426=$1;
      var $1427=$n;
      var $1428=((($1427)*(11))&-1);
      var $1429=(($1426+($1428<<2))|0);
      var $1430=$4;
      var $1431=$q;
      var $1432=$n;
      var $1433=Math.imul($1431,$1432);
      var $1434=(($1430+($1433<<2))|0);
      var $1435=$t;
      var $1436=$2;
      var $1437=$p;
      var $1438=$n;
      var $1439=Math.imul($1437,$1438);
      var $1440=(($1436+($1439<<2))|0);
      var $1441=$s;
      var $1442=___gmpn_mul($1429, $1434, $1435, $1440, $1441);
      label = 121; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      var $1446=$1;
      var $1447=$6;
      var $1448=$n;
      var $1449=((($1448)*(6))&-1);
      var $1450=(($1447+($1449<<2))|0);
      var $1451=(($1450+8)|0);
      var $1452=$6;
      var $1453=$n;
      var $1454=((($1453)*(3))&-1);
      var $1455=(($1452+($1454<<2))|0);
      var $1456=(($1455+4)|0);
      var $1457=$6;
      var $1458=$n;
      var $1459=$s;
      var $1460=$t;
      var $1461=((($1459)+($1460))|0);
      var $1462=$half;
      var $1463=$6;
      var $1464=$n;
      var $1465=((($1464)*(9))&-1);
      var $1466=(($1463+($1465<<2))|0);
      var $1467=(($1466+12)|0);
      ___gmpn_toom_interpolate_12pts($1446, $1451, $1456, $1457, $1458, $1461, $1462, $1467);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom6h_mul["X"]=1;

function ___gmpn_toom6_sqr($pp, $ap, $an, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $n;
      var $s;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $7=$3;
      var $8=((($7)-(1))|0);
      var $9=Math.floor(((($8)>>>0))/(6));
      var $10=((($9)+(1))|0);
      $n=$10;
      var $11=$3;
      var $12=$n;
      var $13=((($12)*(5))&-1);
      var $14=((($11)-($13))|0);
      $s=$14;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $17=$1;
      var $18=$n;
      var $19=((($18)*(9))&-1);
      var $20=(($17+($19<<2))|0);
      var $21=(($20+8)|0);
      var $22=$1;
      var $23=$n;
      var $24=((($23)*(7))&-1);
      var $25=(($22+($24<<2))|0);
      var $26=$2;
      var $27=$n;
      var $28=$s;
      var $29=$1;
      var $30=___gmpn_toom_eval_pm2rexp($21, $25, 5, $26, $27, $28, 1, $29);
      label = 7; break;
    case 7: 
      var $32=$1;
      var $33=$1;
      var $34=$n;
      var $35=((($34)*(7))&-1);
      var $36=(($33+($35<<2))|0);
      var $37=$n;
      var $38=((($37)+(1))|0);
      var $39=$4;
      var $40=$n;
      var $41=((($40)*(9))&-1);
      var $42=(($39+($41<<2))|0);
      var $43=(($42+12)|0);
      ___gmpn_toom2_sqr($32, $36, $38, $43);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $46=$4;
      var $47=$1;
      var $48=$n;
      var $49=((($48)*(9))&-1);
      var $50=(($47+($49<<2))|0);
      var $51=(($50+8)|0);
      var $52=$n;
      var $53=((($52)+(1))|0);
      var $54=$4;
      var $55=$n;
      var $56=((($55)*(9))&-1);
      var $57=(($54+($56<<2))|0);
      var $58=(($57+12)|0);
      ___gmpn_toom2_sqr($46, $51, $53, $58);
      label = 10; break;
    case 10: 
      var $60=$4;
      var $61=$n;
      var $62=($61<<1);
      var $63=((($62)+(1))|0);
      var $64=$1;
      var $65=$n;
      ___gmpn_toom_couple_handling($60, $63, $64, 0, $65, 1, 0);
      var $66=$1;
      var $67=$n;
      var $68=((($67)*(9))&-1);
      var $69=(($66+($68<<2))|0);
      var $70=(($69+8)|0);
      var $71=$1;
      var $72=$n;
      var $73=((($72)*(7))&-1);
      var $74=(($71+($73<<2))|0);
      var $75=$2;
      var $76=$n;
      var $77=$s;
      var $78=$1;
      var $79=___gmpn_toom_eval_pm1($70, $74, 5, $75, $76, $77, $78);
      label = 11; break;
    case 11: 
      var $81=$1;
      var $82=$1;
      var $83=$n;
      var $84=((($83)*(7))&-1);
      var $85=(($82+($84<<2))|0);
      var $86=$n;
      var $87=((($86)+(1))|0);
      var $88=$4;
      var $89=$n;
      var $90=((($89)*(9))&-1);
      var $91=(($88+($90<<2))|0);
      var $92=(($91+12)|0);
      ___gmpn_toom2_sqr($81, $85, $87, $92);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $95=$4;
      var $96=$n;
      var $97=((($96)*(3))&-1);
      var $98=(($95+($97<<2))|0);
      var $99=(($98+4)|0);
      var $100=$1;
      var $101=$n;
      var $102=((($101)*(9))&-1);
      var $103=(($100+($102<<2))|0);
      var $104=(($103+8)|0);
      var $105=$n;
      var $106=((($105)+(1))|0);
      var $107=$4;
      var $108=$n;
      var $109=((($108)*(9))&-1);
      var $110=(($107+($109<<2))|0);
      var $111=(($110+12)|0);
      ___gmpn_toom2_sqr($99, $104, $106, $111);
      label = 14; break;
    case 14: 
      var $113=$4;
      var $114=$n;
      var $115=((($114)*(3))&-1);
      var $116=(($113+($115<<2))|0);
      var $117=(($116+4)|0);
      var $118=$n;
      var $119=($118<<1);
      var $120=((($119)+(1))|0);
      var $121=$1;
      var $122=$n;
      ___gmpn_toom_couple_handling($117, $120, $121, 0, $122, 0, 0);
      var $123=$1;
      var $124=$n;
      var $125=((($124)*(9))&-1);
      var $126=(($123+($125<<2))|0);
      var $127=(($126+8)|0);
      var $128=$1;
      var $129=$n;
      var $130=((($129)*(7))&-1);
      var $131=(($128+($130<<2))|0);
      var $132=$2;
      var $133=$n;
      var $134=$s;
      var $135=$1;
      var $136=___gmpn_toom_eval_pm2exp($127, $131, 5, $132, $133, $134, 2, $135);
      label = 15; break;
    case 15: 
      var $138=$1;
      var $139=$1;
      var $140=$n;
      var $141=((($140)*(7))&-1);
      var $142=(($139+($141<<2))|0);
      var $143=$n;
      var $144=((($143)+(1))|0);
      var $145=$4;
      var $146=$n;
      var $147=((($146)*(9))&-1);
      var $148=(($145+($147<<2))|0);
      var $149=(($148+12)|0);
      ___gmpn_toom2_sqr($138, $142, $144, $149);
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $152=$4;
      var $153=$n;
      var $154=((($153)*(6))&-1);
      var $155=(($152+($154<<2))|0);
      var $156=(($155+8)|0);
      var $157=$1;
      var $158=$n;
      var $159=((($158)*(9))&-1);
      var $160=(($157+($159<<2))|0);
      var $161=(($160+8)|0);
      var $162=$n;
      var $163=((($162)+(1))|0);
      var $164=$4;
      var $165=$n;
      var $166=((($165)*(9))&-1);
      var $167=(($164+($166<<2))|0);
      var $168=(($167+12)|0);
      ___gmpn_toom2_sqr($156, $161, $163, $168);
      label = 18; break;
    case 18: 
      var $170=$4;
      var $171=$n;
      var $172=((($171)*(6))&-1);
      var $173=(($170+($172<<2))|0);
      var $174=(($173+8)|0);
      var $175=$n;
      var $176=($175<<1);
      var $177=((($176)+(1))|0);
      var $178=$1;
      var $179=$n;
      ___gmpn_toom_couple_handling($174, $177, $178, 0, $179, 2, 4);
      var $180=$1;
      var $181=$n;
      var $182=((($181)*(9))&-1);
      var $183=(($180+($182<<2))|0);
      var $184=(($183+8)|0);
      var $185=$1;
      var $186=$n;
      var $187=((($186)*(7))&-1);
      var $188=(($185+($187<<2))|0);
      var $189=$2;
      var $190=$n;
      var $191=$s;
      var $192=$1;
      var $193=___gmpn_toom_eval_pm2rexp($184, $188, 5, $189, $190, $191, 2, $192);
      label = 19; break;
    case 19: 
      var $195=$1;
      var $196=$1;
      var $197=$n;
      var $198=((($197)*(7))&-1);
      var $199=(($196+($198<<2))|0);
      var $200=$n;
      var $201=((($200)+(1))|0);
      var $202=$4;
      var $203=$n;
      var $204=((($203)*(9))&-1);
      var $205=(($202+($204<<2))|0);
      var $206=(($205+12)|0);
      ___gmpn_toom2_sqr($195, $199, $201, $206);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $209=$1;
      var $210=$n;
      var $211=((($210)*(3))&-1);
      var $212=(($209+($211<<2))|0);
      var $213=$1;
      var $214=$n;
      var $215=((($214)*(9))&-1);
      var $216=(($213+($215<<2))|0);
      var $217=(($216+8)|0);
      var $218=$n;
      var $219=((($218)+(1))|0);
      var $220=$4;
      var $221=$n;
      var $222=((($221)*(9))&-1);
      var $223=(($220+($222<<2))|0);
      var $224=(($223+12)|0);
      ___gmpn_toom2_sqr($212, $217, $219, $224);
      label = 22; break;
    case 22: 
      var $226=$1;
      var $227=$n;
      var $228=((($227)*(3))&-1);
      var $229=(($226+($228<<2))|0);
      var $230=$n;
      var $231=($230<<1);
      var $232=((($231)+(1))|0);
      var $233=$1;
      var $234=$n;
      ___gmpn_toom_couple_handling($229, $232, $233, 0, $234, 2, 0);
      var $235=$1;
      var $236=$n;
      var $237=((($236)*(9))&-1);
      var $238=(($235+($237<<2))|0);
      var $239=(($238+8)|0);
      var $240=$1;
      var $241=$n;
      var $242=((($241)*(7))&-1);
      var $243=(($240+($242<<2))|0);
      var $244=$2;
      var $245=$n;
      var $246=$s;
      var $247=$1;
      var $248=___gmpn_toom_eval_pm2($239, $243, 5, $244, $245, $246, $247);
      label = 23; break;
    case 23: 
      var $250=$1;
      var $251=$1;
      var $252=$n;
      var $253=((($252)*(7))&-1);
      var $254=(($251+($253<<2))|0);
      var $255=$n;
      var $256=((($255)+(1))|0);
      var $257=$4;
      var $258=$n;
      var $259=((($258)*(9))&-1);
      var $260=(($257+($259<<2))|0);
      var $261=(($260+12)|0);
      ___gmpn_toom2_sqr($250, $254, $256, $261);
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $264=$1;
      var $265=$n;
      var $266=((($265)*(7))&-1);
      var $267=(($264+($266<<2))|0);
      var $268=$1;
      var $269=$n;
      var $270=((($269)*(9))&-1);
      var $271=(($268+($270<<2))|0);
      var $272=(($271+8)|0);
      var $273=$n;
      var $274=((($273)+(1))|0);
      var $275=$4;
      var $276=$n;
      var $277=((($276)*(9))&-1);
      var $278=(($275+($277<<2))|0);
      var $279=(($278+12)|0);
      ___gmpn_toom2_sqr($267, $272, $274, $279);
      label = 26; break;
    case 26: 
      var $281=$1;
      var $282=$n;
      var $283=((($282)*(7))&-1);
      var $284=(($281+($283<<2))|0);
      var $285=$n;
      var $286=($285<<1);
      var $287=((($286)+(1))|0);
      var $288=$1;
      var $289=$n;
      ___gmpn_toom_couple_handling($284, $287, $288, 0, $289, 1, 2);
      label = 27; break;
    case 27: 
      var $291=$1;
      var $292=$2;
      var $293=$n;
      var $294=$4;
      var $295=$n;
      var $296=((($295)*(9))&-1);
      var $297=(($294+($296<<2))|0);
      var $298=(($297+12)|0);
      ___gmpn_toom2_sqr($291, $292, $293, $298);
      label = 28; break;
    case 28: 
      var $300=$1;
      var $301=$4;
      var $302=$n;
      var $303=((($302)*(6))&-1);
      var $304=(($301+($303<<2))|0);
      var $305=(($304+8)|0);
      var $306=$4;
      var $307=$n;
      var $308=((($307)*(3))&-1);
      var $309=(($306+($308<<2))|0);
      var $310=(($309+4)|0);
      var $311=$4;
      var $312=$n;
      var $313=$s;
      var $314=($313<<1);
      var $315=$4;
      var $316=$n;
      var $317=((($316)*(9))&-1);
      var $318=(($315+($317<<2))|0);
      var $319=(($318+12)|0);
      ___gmpn_toom_interpolate_12pts($300, $305, $310, $311, $312, $314, 0, $319);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom6_sqr["X"]=1;

function ___gmpn_toom8h_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $n;
      var $s;
      var $t;
      var $p;
      var $q;
      var $half;
      var $sign;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$bp;
      $5=$bn;
      $6=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $19=$3;
      var $20=$5;
      var $21=(($19)|0)==(($20)|0);
      var $22=(($21)&1);
      var $23=(($22)|0)!=0;
      var $24=(($23)&1);
      var $25=($24);
      var $26=(($25)|0)!=0;
      if ($26) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $28=$3;
      var $29=((($28)*(10))&-1);
      var $30=$5;
      var $31=$30 >> 1;
      var $32=((($31)*(21))&-1);
      var $33=(($29)|0) < (($32)|0);
      if ($33) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $half=0;
      var $35=$3;
      var $36=((($35)-(1))|0);
      var $37=$36 >> 3;
      var $38=((($37)+(1))|0);
      $n=$38;
      $q=7;
      $p=7;
      var $39=$3;
      var $40=$n;
      var $41=((($40)*(7))&-1);
      var $42=((($39)-($41))|0);
      $s=$42;
      var $43=$5;
      var $44=$n;
      var $45=((($44)*(7))&-1);
      var $46=((($43)-($45))|0);
      $t=$46;
      label = 43; break;
    case 17: 
      var $48=$3;
      var $49=((($48)*(13))&-1);
      var $50=$5;
      var $51=($50<<4);
      var $52=(($49)|0) < (($51)|0);
      if ($52) { label = 18; break; } else { label = 19; break; }
    case 18: 
      $p=9;
      $q=8;
      label = 32; break;
    case 19: 
      var $55=$3;
      var $56=((($55)*(10))&-1);
      var $57=$5;
      var $58=$57 >> 1;
      var $59=((($58)*(27))&-1);
      var $60=(($56)|0) < (($59)|0);
      if ($60) { label = 20; break; } else { label = 21; break; }
    case 20: 
      $p=9;
      $q=7;
      label = 31; break;
    case 21: 
      var $63=$3;
      var $64=((($63)*(10))&-1);
      var $65=$5;
      var $66=$65 >> 1;
      var $67=((($66)*(33))&-1);
      var $68=(($64)|0) < (($67)|0);
      if ($68) { label = 22; break; } else { label = 23; break; }
    case 22: 
      $p=10;
      $q=7;
      label = 30; break;
    case 23: 
      var $71=$3;
      var $72=($71<<2);
      var $73=$5;
      var $74=((($73)*(7))&-1);
      var $75=(($72)|0) < (($74)|0);
      if ($75) { label = 24; break; } else { label = 25; break; }
    case 24: 
      $p=10;
      $q=6;
      label = 29; break;
    case 25: 
      var $78=$3;
      var $79=((($78)*(6))&-1);
      var $80=$5;
      var $81=((($80)*(13))&-1);
      var $82=(($79)|0) < (($81)|0);
      if ($82) { label = 26; break; } else { label = 27; break; }
    case 26: 
      $p=11;
      $q=6;
      label = 28; break;
    case 27: 
      $p=11;
      $q=5;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $90=$p;
      var $91=$q;
      var $92=((($90)+($91))|0);
      var $93=$92 & 1;
      $half=$93;
      var $94=$q;
      var $95=$3;
      var $96=Math.imul($94,$95);
      var $97=$p;
      var $98=$5;
      var $99=Math.imul($97,$98);
      var $100=(($96)|0) >= (($99)|0);
      if ($100) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $102=$3;
      var $103=((($102)-(1))|0);
      var $104=$p;
      var $105=Math.floor(((($103)>>>0))/((($104)>>>0)));
      var $112 = $105;label = 35; break;
    case 34: 
      var $107=$5;
      var $108=((($107)-(1))|0);
      var $109=$q;
      var $110=Math.floor(((($108)>>>0))/((($109)>>>0)));
      var $112 = $110;label = 35; break;
    case 35: 
      var $112;
      var $113=((($112)+(1))|0);
      $n=$113;
      var $114=$p;
      var $115=((($114)-(1))|0);
      $p=$115;
      var $116=$q;
      var $117=((($116)-(1))|0);
      $q=$117;
      var $118=$3;
      var $119=$p;
      var $120=$n;
      var $121=Math.imul($119,$120);
      var $122=((($118)-($121))|0);
      $s=$122;
      var $123=$5;
      var $124=$q;
      var $125=$n;
      var $126=Math.imul($124,$125);
      var $127=((($123)-($126))|0);
      $t=$127;
      var $128=$half;
      var $129=(($128)|0)!=0;
      if ($129) { label = 36; break; } else { label = 42; break; }
    case 36: 
      var $131=$s;
      var $132=(($131)|0) < 1;
      var $133=(($132)&1);
      var $134=(($133)|0)!=0;
      var $135=(($134)&1);
      var $136=($135);
      var $137=(($136)|0)!=0;
      if ($137) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $139=$p;
      var $140=((($139)-(1))|0);
      $p=$140;
      var $141=$n;
      var $142=$s;
      var $143=((($142)+($141))|0);
      $s=$143;
      $half=0;
      label = 41; break;
    case 38: 
      var $145=$t;
      var $146=(($145)|0) < 1;
      var $147=(($146)&1);
      var $148=(($147)|0)!=0;
      var $149=(($148)&1);
      var $150=($149);
      var $151=(($150)|0)!=0;
      if ($151) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $153=$q;
      var $154=((($153)-(1))|0);
      $q=$154;
      var $155=$n;
      var $156=$t;
      var $157=((($156)+($155))|0);
      $t=$157;
      $half=0;
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $174=$1;
      var $175=$n;
      var $176=((($175)*(13))&-1);
      var $177=(($174+($176<<2))|0);
      var $178=(($177+8)|0);
      var $179=$1;
      var $180=$n;
      var $181=((($180)*(11))&-1);
      var $182=(($179+($181<<2))|0);
      var $183=$p;
      var $184=$2;
      var $185=$n;
      var $186=$s;
      var $187=$1;
      var $188=___gmpn_toom_eval_pm2rexp($178, $182, $183, $184, $185, $186, 3, $187);
      var $189=$6;
      var $190=$n;
      var $191=((($190)*(12))&-1);
      var $192=(($189+($191<<2))|0);
      var $193=(($192+16)|0);
      var $194=$1;
      var $195=$n;
      var $196=((($195)*(12))&-1);
      var $197=(($194+($196<<2))|0);
      var $198=(($197+4)|0);
      var $199=$q;
      var $200=$4;
      var $201=$n;
      var $202=$t;
      var $203=$1;
      var $204=___gmpn_toom_eval_pm2rexp($193, $198, $199, $200, $201, $202, 3, $203);
      var $205=$188 ^ $204;
      $sign=$205;
      label = 56; break;
    case 56: 
      var $207=$n;
      var $208=((($207)+(1))|0);
      var $209=(($208)|0) >= 100;
      if ($209) { label = 58; break; } else { label = 57; break; }
    case 57: 
      var $211=$1;
      var $212=$1;
      var $213=$n;
      var $214=((($213)*(11))&-1);
      var $215=(($212+($214<<2))|0);
      var $216=$n;
      var $217=((($216)+(1))|0);
      var $218=$1;
      var $219=$n;
      var $220=((($219)*(12))&-1);
      var $221=(($218+($220<<2))|0);
      var $222=(($221+4)|0);
      var $223=$n;
      var $224=((($223)+(1))|0);
      var $225=$6;
      var $226=$n;
      var $227=((($226)*(13))&-1);
      var $228=(($225+($227<<2))|0);
      var $229=(($228+20)|0);
      ___gmpn_toom22_mul($211, $215, $217, $222, $224, $229);
      var $230=$6;
      var $231=$1;
      var $232=$n;
      var $233=((($232)*(13))&-1);
      var $234=(($231+($233<<2))|0);
      var $235=(($234+8)|0);
      var $236=$n;
      var $237=((($236)+(1))|0);
      var $238=$6;
      var $239=$n;
      var $240=((($239)*(12))&-1);
      var $241=(($238+($240<<2))|0);
      var $242=(($241+16)|0);
      var $243=$n;
      var $244=((($243)+(1))|0);
      var $245=$6;
      var $246=$n;
      var $247=((($246)*(13))&-1);
      var $248=(($245+($247<<2))|0);
      var $249=(($248+20)|0);
      ___gmpn_toom22_mul($230, $235, $237, $242, $244, $249);
      label = 65; break;
    case 58: 
      var $251=$n;
      var $252=((($251)+(1))|0);
      var $253=(($252)|0) >= 300;
      if ($253) { label = 60; break; } else { label = 59; break; }
    case 59: 
      var $255=$1;
      var $256=$1;
      var $257=$n;
      var $258=((($257)*(11))&-1);
      var $259=(($256+($258<<2))|0);
      var $260=$n;
      var $261=((($260)+(1))|0);
      var $262=$1;
      var $263=$n;
      var $264=((($263)*(12))&-1);
      var $265=(($262+($264<<2))|0);
      var $266=(($265+4)|0);
      var $267=$n;
      var $268=((($267)+(1))|0);
      var $269=$6;
      var $270=$n;
      var $271=((($270)*(13))&-1);
      var $272=(($269+($271<<2))|0);
      var $273=(($272+20)|0);
      ___gmpn_toom33_mul($255, $259, $261, $266, $268, $273);
      var $274=$6;
      var $275=$1;
      var $276=$n;
      var $277=((($276)*(13))&-1);
      var $278=(($275+($277<<2))|0);
      var $279=(($278+8)|0);
      var $280=$n;
      var $281=((($280)+(1))|0);
      var $282=$6;
      var $283=$n;
      var $284=((($283)*(12))&-1);
      var $285=(($282+($284<<2))|0);
      var $286=(($285+16)|0);
      var $287=$n;
      var $288=((($287)+(1))|0);
      var $289=$6;
      var $290=$n;
      var $291=((($290)*(13))&-1);
      var $292=(($289+($291<<2))|0);
      var $293=(($292+20)|0);
      ___gmpn_toom33_mul($274, $279, $281, $286, $288, $293);
      label = 64; break;
    case 60: 
      var $295=$n;
      var $296=((($295)+(1))|0);
      var $297=(($296)|0) >= 350;
      if ($297) { label = 62; break; } else { label = 61; break; }
    case 61: 
      var $299=$1;
      var $300=$1;
      var $301=$n;
      var $302=((($301)*(11))&-1);
      var $303=(($300+($302<<2))|0);
      var $304=$n;
      var $305=((($304)+(1))|0);
      var $306=$1;
      var $307=$n;
      var $308=((($307)*(12))&-1);
      var $309=(($306+($308<<2))|0);
      var $310=(($309+4)|0);
      var $311=$n;
      var $312=((($311)+(1))|0);
      var $313=$6;
      var $314=$n;
      var $315=((($314)*(13))&-1);
      var $316=(($313+($315<<2))|0);
      var $317=(($316+20)|0);
      ___gmpn_toom44_mul($299, $303, $305, $310, $312, $317);
      var $318=$6;
      var $319=$1;
      var $320=$n;
      var $321=((($320)*(13))&-1);
      var $322=(($319+($321<<2))|0);
      var $323=(($322+8)|0);
      var $324=$n;
      var $325=((($324)+(1))|0);
      var $326=$6;
      var $327=$n;
      var $328=((($327)*(12))&-1);
      var $329=(($326+($328<<2))|0);
      var $330=(($329+16)|0);
      var $331=$n;
      var $332=((($331)+(1))|0);
      var $333=$6;
      var $334=$n;
      var $335=((($334)*(13))&-1);
      var $336=(($333+($335<<2))|0);
      var $337=(($336+20)|0);
      ___gmpn_toom44_mul($318, $323, $325, $330, $332, $337);
      label = 63; break;
    case 62: 
      var $339=$1;
      var $340=$1;
      var $341=$n;
      var $342=((($341)*(11))&-1);
      var $343=(($340+($342<<2))|0);
      var $344=$n;
      var $345=((($344)+(1))|0);
      var $346=$1;
      var $347=$n;
      var $348=((($347)*(12))&-1);
      var $349=(($346+($348<<2))|0);
      var $350=(($349+4)|0);
      var $351=$n;
      var $352=((($351)+(1))|0);
      var $353=$6;
      var $354=$n;
      var $355=((($354)*(13))&-1);
      var $356=(($353+($355<<2))|0);
      var $357=(($356+20)|0);
      ___gmpn_toom6h_mul($339, $343, $345, $350, $352, $357);
      var $358=$6;
      var $359=$1;
      var $360=$n;
      var $361=((($360)*(13))&-1);
      var $362=(($359+($361<<2))|0);
      var $363=(($362+8)|0);
      var $364=$n;
      var $365=((($364)+(1))|0);
      var $366=$6;
      var $367=$n;
      var $368=((($367)*(12))&-1);
      var $369=(($366+($368<<2))|0);
      var $370=(($369+16)|0);
      var $371=$n;
      var $372=((($371)+(1))|0);
      var $373=$6;
      var $374=$n;
      var $375=((($374)*(13))&-1);
      var $376=(($373+($375<<2))|0);
      var $377=(($376+20)|0);
      ___gmpn_toom6h_mul($358, $363, $365, $370, $372, $377);
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $382=$6;
      var $383=$n;
      var $384=($383<<1);
      var $385=((($384)+(1))|0);
      var $386=((($385)+(1))|0);
      var $387=$1;
      var $388=$sign;
      var $389=$n;
      var $390=$half;
      var $391=((($390)+(1))|0);
      var $392=((($391)*(3))&-1);
      var $393=$half;
      var $394=((($393)*(3))&-1);
      ___gmpn_toom_couple_handling($382, $386, $387, $388, $389, $392, $394);
      var $395=$1;
      var $396=$n;
      var $397=((($396)*(13))&-1);
      var $398=(($395+($397<<2))|0);
      var $399=(($398+8)|0);
      var $400=$1;
      var $401=$n;
      var $402=((($401)*(11))&-1);
      var $403=(($400+($402<<2))|0);
      var $404=$p;
      var $405=$2;
      var $406=$n;
      var $407=$s;
      var $408=$1;
      var $409=___gmpn_toom_eval_pm2rexp($399, $403, $404, $405, $406, $407, 2, $408);
      var $410=$6;
      var $411=$n;
      var $412=((($411)*(12))&-1);
      var $413=(($410+($412<<2))|0);
      var $414=(($413+16)|0);
      var $415=$1;
      var $416=$n;
      var $417=((($416)*(12))&-1);
      var $418=(($415+($417<<2))|0);
      var $419=(($418+4)|0);
      var $420=$q;
      var $421=$4;
      var $422=$n;
      var $423=$t;
      var $424=$1;
      var $425=___gmpn_toom_eval_pm2rexp($414, $419, $420, $421, $422, $423, 2, $424);
      var $426=$409 ^ $425;
      $sign=$426;
      label = 67; break;
    case 67: 
      var $428=$n;
      var $429=((($428)+(1))|0);
      var $430=(($429)|0) >= 100;
      if ($430) { label = 69; break; } else { label = 68; break; }
    case 68: 
      var $432=$1;
      var $433=$1;
      var $434=$n;
      var $435=((($434)*(11))&-1);
      var $436=(($433+($435<<2))|0);
      var $437=$n;
      var $438=((($437)+(1))|0);
      var $439=$1;
      var $440=$n;
      var $441=((($440)*(12))&-1);
      var $442=(($439+($441<<2))|0);
      var $443=(($442+4)|0);
      var $444=$n;
      var $445=((($444)+(1))|0);
      var $446=$6;
      var $447=$n;
      var $448=((($447)*(13))&-1);
      var $449=(($446+($448<<2))|0);
      var $450=(($449+20)|0);
      ___gmpn_toom22_mul($432, $436, $438, $443, $445, $450);
      var $451=$6;
      var $452=$n;
      var $453=((($452)*(3))&-1);
      var $454=(($451+($453<<2))|0);
      var $455=(($454+4)|0);
      var $456=$1;
      var $457=$n;
      var $458=((($457)*(13))&-1);
      var $459=(($456+($458<<2))|0);
      var $460=(($459+8)|0);
      var $461=$n;
      var $462=((($461)+(1))|0);
      var $463=$6;
      var $464=$n;
      var $465=((($464)*(12))&-1);
      var $466=(($463+($465<<2))|0);
      var $467=(($466+16)|0);
      var $468=$n;
      var $469=((($468)+(1))|0);
      var $470=$6;
      var $471=$n;
      var $472=((($471)*(13))&-1);
      var $473=(($470+($472<<2))|0);
      var $474=(($473+20)|0);
      ___gmpn_toom22_mul($455, $460, $462, $467, $469, $474);
      label = 76; break;
    case 69: 
      var $476=$n;
      var $477=((($476)+(1))|0);
      var $478=(($477)|0) >= 300;
      if ($478) { label = 71; break; } else { label = 70; break; }
    case 70: 
      var $480=$1;
      var $481=$1;
      var $482=$n;
      var $483=((($482)*(11))&-1);
      var $484=(($481+($483<<2))|0);
      var $485=$n;
      var $486=((($485)+(1))|0);
      var $487=$1;
      var $488=$n;
      var $489=((($488)*(12))&-1);
      var $490=(($487+($489<<2))|0);
      var $491=(($490+4)|0);
      var $492=$n;
      var $493=((($492)+(1))|0);
      var $494=$6;
      var $495=$n;
      var $496=((($495)*(13))&-1);
      var $497=(($494+($496<<2))|0);
      var $498=(($497+20)|0);
      ___gmpn_toom33_mul($480, $484, $486, $491, $493, $498);
      var $499=$6;
      var $500=$n;
      var $501=((($500)*(3))&-1);
      var $502=(($499+($501<<2))|0);
      var $503=(($502+4)|0);
      var $504=$1;
      var $505=$n;
      var $506=((($505)*(13))&-1);
      var $507=(($504+($506<<2))|0);
      var $508=(($507+8)|0);
      var $509=$n;
      var $510=((($509)+(1))|0);
      var $511=$6;
      var $512=$n;
      var $513=((($512)*(12))&-1);
      var $514=(($511+($513<<2))|0);
      var $515=(($514+16)|0);
      var $516=$n;
      var $517=((($516)+(1))|0);
      var $518=$6;
      var $519=$n;
      var $520=((($519)*(13))&-1);
      var $521=(($518+($520<<2))|0);
      var $522=(($521+20)|0);
      ___gmpn_toom33_mul($503, $508, $510, $515, $517, $522);
      label = 75; break;
    case 71: 
      var $524=$n;
      var $525=((($524)+(1))|0);
      var $526=(($525)|0) >= 350;
      if ($526) { label = 73; break; } else { label = 72; break; }
    case 72: 
      var $528=$1;
      var $529=$1;
      var $530=$n;
      var $531=((($530)*(11))&-1);
      var $532=(($529+($531<<2))|0);
      var $533=$n;
      var $534=((($533)+(1))|0);
      var $535=$1;
      var $536=$n;
      var $537=((($536)*(12))&-1);
      var $538=(($535+($537<<2))|0);
      var $539=(($538+4)|0);
      var $540=$n;
      var $541=((($540)+(1))|0);
      var $542=$6;
      var $543=$n;
      var $544=((($543)*(13))&-1);
      var $545=(($542+($544<<2))|0);
      var $546=(($545+20)|0);
      ___gmpn_toom44_mul($528, $532, $534, $539, $541, $546);
      var $547=$6;
      var $548=$n;
      var $549=((($548)*(3))&-1);
      var $550=(($547+($549<<2))|0);
      var $551=(($550+4)|0);
      var $552=$1;
      var $553=$n;
      var $554=((($553)*(13))&-1);
      var $555=(($552+($554<<2))|0);
      var $556=(($555+8)|0);
      var $557=$n;
      var $558=((($557)+(1))|0);
      var $559=$6;
      var $560=$n;
      var $561=((($560)*(12))&-1);
      var $562=(($559+($561<<2))|0);
      var $563=(($562+16)|0);
      var $564=$n;
      var $565=((($564)+(1))|0);
      var $566=$6;
      var $567=$n;
      var $568=((($567)*(13))&-1);
      var $569=(($566+($568<<2))|0);
      var $570=(($569+20)|0);
      ___gmpn_toom44_mul($551, $556, $558, $563, $565, $570);
      label = 74; break;
    case 73: 
      var $572=$1;
      var $573=$1;
      var $574=$n;
      var $575=((($574)*(11))&-1);
      var $576=(($573+($575<<2))|0);
      var $577=$n;
      var $578=((($577)+(1))|0);
      var $579=$1;
      var $580=$n;
      var $581=((($580)*(12))&-1);
      var $582=(($579+($581<<2))|0);
      var $583=(($582+4)|0);
      var $584=$n;
      var $585=((($584)+(1))|0);
      var $586=$6;
      var $587=$n;
      var $588=((($587)*(13))&-1);
      var $589=(($586+($588<<2))|0);
      var $590=(($589+20)|0);
      ___gmpn_toom6h_mul($572, $576, $578, $583, $585, $590);
      var $591=$6;
      var $592=$n;
      var $593=((($592)*(3))&-1);
      var $594=(($591+($593<<2))|0);
      var $595=(($594+4)|0);
      var $596=$1;
      var $597=$n;
      var $598=((($597)*(13))&-1);
      var $599=(($596+($598<<2))|0);
      var $600=(($599+8)|0);
      var $601=$n;
      var $602=((($601)+(1))|0);
      var $603=$6;
      var $604=$n;
      var $605=((($604)*(12))&-1);
      var $606=(($603+($605<<2))|0);
      var $607=(($606+16)|0);
      var $608=$n;
      var $609=((($608)+(1))|0);
      var $610=$6;
      var $611=$n;
      var $612=((($611)*(13))&-1);
      var $613=(($610+($612<<2))|0);
      var $614=(($613+20)|0);
      ___gmpn_toom6h_mul($595, $600, $602, $607, $609, $614);
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $619=$6;
      var $620=$n;
      var $621=((($620)*(3))&-1);
      var $622=(($619+($621<<2))|0);
      var $623=(($622+4)|0);
      var $624=$n;
      var $625=($624<<1);
      var $626=((($625)+(1))|0);
      var $627=$1;
      var $628=$sign;
      var $629=$n;
      var $630=$half;
      var $631=((($630)+(1))|0);
      var $632=($631<<1);
      var $633=$half;
      var $634=($633<<1);
      ___gmpn_toom_couple_handling($623, $626, $627, $628, $629, $632, $634);
      var $635=$1;
      var $636=$n;
      var $637=((($636)*(13))&-1);
      var $638=(($635+($637<<2))|0);
      var $639=(($638+8)|0);
      var $640=$1;
      var $641=$n;
      var $642=((($641)*(11))&-1);
      var $643=(($640+($642<<2))|0);
      var $644=$p;
      var $645=$2;
      var $646=$n;
      var $647=$s;
      var $648=$1;
      var $649=___gmpn_toom_eval_pm2($639, $643, $644, $645, $646, $647, $648);
      var $650=$6;
      var $651=$n;
      var $652=((($651)*(12))&-1);
      var $653=(($650+($652<<2))|0);
      var $654=(($653+16)|0);
      var $655=$1;
      var $656=$n;
      var $657=((($656)*(12))&-1);
      var $658=(($655+($657<<2))|0);
      var $659=(($658+4)|0);
      var $660=$q;
      var $661=$4;
      var $662=$n;
      var $663=$t;
      var $664=$1;
      var $665=___gmpn_toom_eval_pm2($654, $659, $660, $661, $662, $663, $664);
      var $666=$649 ^ $665;
      $sign=$666;
      label = 78; break;
    case 78: 
      var $668=$n;
      var $669=((($668)+(1))|0);
      var $670=(($669)|0) >= 100;
      if ($670) { label = 80; break; } else { label = 79; break; }
    case 79: 
      var $672=$1;
      var $673=$1;
      var $674=$n;
      var $675=((($674)*(11))&-1);
      var $676=(($673+($675<<2))|0);
      var $677=$n;
      var $678=((($677)+(1))|0);
      var $679=$1;
      var $680=$n;
      var $681=((($680)*(12))&-1);
      var $682=(($679+($681<<2))|0);
      var $683=(($682+4)|0);
      var $684=$n;
      var $685=((($684)+(1))|0);
      var $686=$6;
      var $687=$n;
      var $688=((($687)*(13))&-1);
      var $689=(($686+($688<<2))|0);
      var $690=(($689+20)|0);
      ___gmpn_toom22_mul($672, $676, $678, $683, $685, $690);
      var $691=$6;
      var $692=$n;
      var $693=((($692)*(6))&-1);
      var $694=(($691+($693<<2))|0);
      var $695=(($694+8)|0);
      var $696=$1;
      var $697=$n;
      var $698=((($697)*(13))&-1);
      var $699=(($696+($698<<2))|0);
      var $700=(($699+8)|0);
      var $701=$n;
      var $702=((($701)+(1))|0);
      var $703=$6;
      var $704=$n;
      var $705=((($704)*(12))&-1);
      var $706=(($703+($705<<2))|0);
      var $707=(($706+16)|0);
      var $708=$n;
      var $709=((($708)+(1))|0);
      var $710=$6;
      var $711=$n;
      var $712=((($711)*(13))&-1);
      var $713=(($710+($712<<2))|0);
      var $714=(($713+20)|0);
      ___gmpn_toom22_mul($695, $700, $702, $707, $709, $714);
      label = 87; break;
    case 80: 
      var $716=$n;
      var $717=((($716)+(1))|0);
      var $718=(($717)|0) >= 300;
      if ($718) { label = 82; break; } else { label = 81; break; }
    case 81: 
      var $720=$1;
      var $721=$1;
      var $722=$n;
      var $723=((($722)*(11))&-1);
      var $724=(($721+($723<<2))|0);
      var $725=$n;
      var $726=((($725)+(1))|0);
      var $727=$1;
      var $728=$n;
      var $729=((($728)*(12))&-1);
      var $730=(($727+($729<<2))|0);
      var $731=(($730+4)|0);
      var $732=$n;
      var $733=((($732)+(1))|0);
      var $734=$6;
      var $735=$n;
      var $736=((($735)*(13))&-1);
      var $737=(($734+($736<<2))|0);
      var $738=(($737+20)|0);
      ___gmpn_toom33_mul($720, $724, $726, $731, $733, $738);
      var $739=$6;
      var $740=$n;
      var $741=((($740)*(6))&-1);
      var $742=(($739+($741<<2))|0);
      var $743=(($742+8)|0);
      var $744=$1;
      var $745=$n;
      var $746=((($745)*(13))&-1);
      var $747=(($744+($746<<2))|0);
      var $748=(($747+8)|0);
      var $749=$n;
      var $750=((($749)+(1))|0);
      var $751=$6;
      var $752=$n;
      var $753=((($752)*(12))&-1);
      var $754=(($751+($753<<2))|0);
      var $755=(($754+16)|0);
      var $756=$n;
      var $757=((($756)+(1))|0);
      var $758=$6;
      var $759=$n;
      var $760=((($759)*(13))&-1);
      var $761=(($758+($760<<2))|0);
      var $762=(($761+20)|0);
      ___gmpn_toom33_mul($743, $748, $750, $755, $757, $762);
      label = 86; break;
    case 82: 
      var $764=$n;
      var $765=((($764)+(1))|0);
      var $766=(($765)|0) >= 350;
      if ($766) { label = 84; break; } else { label = 83; break; }
    case 83: 
      var $768=$1;
      var $769=$1;
      var $770=$n;
      var $771=((($770)*(11))&-1);
      var $772=(($769+($771<<2))|0);
      var $773=$n;
      var $774=((($773)+(1))|0);
      var $775=$1;
      var $776=$n;
      var $777=((($776)*(12))&-1);
      var $778=(($775+($777<<2))|0);
      var $779=(($778+4)|0);
      var $780=$n;
      var $781=((($780)+(1))|0);
      var $782=$6;
      var $783=$n;
      var $784=((($783)*(13))&-1);
      var $785=(($782+($784<<2))|0);
      var $786=(($785+20)|0);
      ___gmpn_toom44_mul($768, $772, $774, $779, $781, $786);
      var $787=$6;
      var $788=$n;
      var $789=((($788)*(6))&-1);
      var $790=(($787+($789<<2))|0);
      var $791=(($790+8)|0);
      var $792=$1;
      var $793=$n;
      var $794=((($793)*(13))&-1);
      var $795=(($792+($794<<2))|0);
      var $796=(($795+8)|0);
      var $797=$n;
      var $798=((($797)+(1))|0);
      var $799=$6;
      var $800=$n;
      var $801=((($800)*(12))&-1);
      var $802=(($799+($801<<2))|0);
      var $803=(($802+16)|0);
      var $804=$n;
      var $805=((($804)+(1))|0);
      var $806=$6;
      var $807=$n;
      var $808=((($807)*(13))&-1);
      var $809=(($806+($808<<2))|0);
      var $810=(($809+20)|0);
      ___gmpn_toom44_mul($791, $796, $798, $803, $805, $810);
      label = 85; break;
    case 84: 
      var $812=$1;
      var $813=$1;
      var $814=$n;
      var $815=((($814)*(11))&-1);
      var $816=(($813+($815<<2))|0);
      var $817=$n;
      var $818=((($817)+(1))|0);
      var $819=$1;
      var $820=$n;
      var $821=((($820)*(12))&-1);
      var $822=(($819+($821<<2))|0);
      var $823=(($822+4)|0);
      var $824=$n;
      var $825=((($824)+(1))|0);
      var $826=$6;
      var $827=$n;
      var $828=((($827)*(13))&-1);
      var $829=(($826+($828<<2))|0);
      var $830=(($829+20)|0);
      ___gmpn_toom6h_mul($812, $816, $818, $823, $825, $830);
      var $831=$6;
      var $832=$n;
      var $833=((($832)*(6))&-1);
      var $834=(($831+($833<<2))|0);
      var $835=(($834+8)|0);
      var $836=$1;
      var $837=$n;
      var $838=((($837)*(13))&-1);
      var $839=(($836+($838<<2))|0);
      var $840=(($839+8)|0);
      var $841=$n;
      var $842=((($841)+(1))|0);
      var $843=$6;
      var $844=$n;
      var $845=((($844)*(12))&-1);
      var $846=(($843+($845<<2))|0);
      var $847=(($846+16)|0);
      var $848=$n;
      var $849=((($848)+(1))|0);
      var $850=$6;
      var $851=$n;
      var $852=((($851)*(13))&-1);
      var $853=(($850+($852<<2))|0);
      var $854=(($853+20)|0);
      ___gmpn_toom6h_mul($835, $840, $842, $847, $849, $854);
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      var $859=$6;
      var $860=$n;
      var $861=((($860)*(6))&-1);
      var $862=(($859+($861<<2))|0);
      var $863=(($862+8)|0);
      var $864=$n;
      var $865=($864<<1);
      var $866=((($865)+(1))|0);
      var $867=$1;
      var $868=$sign;
      var $869=$n;
      ___gmpn_toom_couple_handling($863, $866, $867, $868, $869, 1, 2);
      var $870=$1;
      var $871=$n;
      var $872=((($871)*(13))&-1);
      var $873=(($870+($872<<2))|0);
      var $874=(($873+8)|0);
      var $875=$1;
      var $876=$n;
      var $877=((($876)*(11))&-1);
      var $878=(($875+($877<<2))|0);
      var $879=$p;
      var $880=$2;
      var $881=$n;
      var $882=$s;
      var $883=$1;
      var $884=___gmpn_toom_eval_pm2exp($874, $878, $879, $880, $881, $882, 3, $883);
      var $885=$6;
      var $886=$n;
      var $887=((($886)*(12))&-1);
      var $888=(($885+($887<<2))|0);
      var $889=(($888+16)|0);
      var $890=$1;
      var $891=$n;
      var $892=((($891)*(12))&-1);
      var $893=(($890+($892<<2))|0);
      var $894=(($893+4)|0);
      var $895=$q;
      var $896=$4;
      var $897=$n;
      var $898=$t;
      var $899=$1;
      var $900=___gmpn_toom_eval_pm2exp($889, $894, $895, $896, $897, $898, 3, $899);
      var $901=$884 ^ $900;
      $sign=$901;
      label = 89; break;
    case 89: 
      var $903=$n;
      var $904=((($903)+(1))|0);
      var $905=(($904)|0) >= 100;
      if ($905) { label = 91; break; } else { label = 90; break; }
    case 90: 
      var $907=$1;
      var $908=$1;
      var $909=$n;
      var $910=((($909)*(11))&-1);
      var $911=(($908+($910<<2))|0);
      var $912=$n;
      var $913=((($912)+(1))|0);
      var $914=$1;
      var $915=$n;
      var $916=((($915)*(12))&-1);
      var $917=(($914+($916<<2))|0);
      var $918=(($917+4)|0);
      var $919=$n;
      var $920=((($919)+(1))|0);
      var $921=$6;
      var $922=$n;
      var $923=((($922)*(13))&-1);
      var $924=(($921+($923<<2))|0);
      var $925=(($924+20)|0);
      ___gmpn_toom22_mul($907, $911, $913, $918, $920, $925);
      var $926=$6;
      var $927=$n;
      var $928=((($927)*(9))&-1);
      var $929=(($926+($928<<2))|0);
      var $930=(($929+12)|0);
      var $931=$1;
      var $932=$n;
      var $933=((($932)*(13))&-1);
      var $934=(($931+($933<<2))|0);
      var $935=(($934+8)|0);
      var $936=$n;
      var $937=((($936)+(1))|0);
      var $938=$6;
      var $939=$n;
      var $940=((($939)*(12))&-1);
      var $941=(($938+($940<<2))|0);
      var $942=(($941+16)|0);
      var $943=$n;
      var $944=((($943)+(1))|0);
      var $945=$6;
      var $946=$n;
      var $947=((($946)*(13))&-1);
      var $948=(($945+($947<<2))|0);
      var $949=(($948+20)|0);
      ___gmpn_toom22_mul($930, $935, $937, $942, $944, $949);
      label = 98; break;
    case 91: 
      var $951=$n;
      var $952=((($951)+(1))|0);
      var $953=(($952)|0) >= 300;
      if ($953) { label = 93; break; } else { label = 92; break; }
    case 92: 
      var $955=$1;
      var $956=$1;
      var $957=$n;
      var $958=((($957)*(11))&-1);
      var $959=(($956+($958<<2))|0);
      var $960=$n;
      var $961=((($960)+(1))|0);
      var $962=$1;
      var $963=$n;
      var $964=((($963)*(12))&-1);
      var $965=(($962+($964<<2))|0);
      var $966=(($965+4)|0);
      var $967=$n;
      var $968=((($967)+(1))|0);
      var $969=$6;
      var $970=$n;
      var $971=((($970)*(13))&-1);
      var $972=(($969+($971<<2))|0);
      var $973=(($972+20)|0);
      ___gmpn_toom33_mul($955, $959, $961, $966, $968, $973);
      var $974=$6;
      var $975=$n;
      var $976=((($975)*(9))&-1);
      var $977=(($974+($976<<2))|0);
      var $978=(($977+12)|0);
      var $979=$1;
      var $980=$n;
      var $981=((($980)*(13))&-1);
      var $982=(($979+($981<<2))|0);
      var $983=(($982+8)|0);
      var $984=$n;
      var $985=((($984)+(1))|0);
      var $986=$6;
      var $987=$n;
      var $988=((($987)*(12))&-1);
      var $989=(($986+($988<<2))|0);
      var $990=(($989+16)|0);
      var $991=$n;
      var $992=((($991)+(1))|0);
      var $993=$6;
      var $994=$n;
      var $995=((($994)*(13))&-1);
      var $996=(($993+($995<<2))|0);
      var $997=(($996+20)|0);
      ___gmpn_toom33_mul($978, $983, $985, $990, $992, $997);
      label = 97; break;
    case 93: 
      var $999=$n;
      var $1000=((($999)+(1))|0);
      var $1001=(($1000)|0) >= 350;
      if ($1001) { label = 95; break; } else { label = 94; break; }
    case 94: 
      var $1003=$1;
      var $1004=$1;
      var $1005=$n;
      var $1006=((($1005)*(11))&-1);
      var $1007=(($1004+($1006<<2))|0);
      var $1008=$n;
      var $1009=((($1008)+(1))|0);
      var $1010=$1;
      var $1011=$n;
      var $1012=((($1011)*(12))&-1);
      var $1013=(($1010+($1012<<2))|0);
      var $1014=(($1013+4)|0);
      var $1015=$n;
      var $1016=((($1015)+(1))|0);
      var $1017=$6;
      var $1018=$n;
      var $1019=((($1018)*(13))&-1);
      var $1020=(($1017+($1019<<2))|0);
      var $1021=(($1020+20)|0);
      ___gmpn_toom44_mul($1003, $1007, $1009, $1014, $1016, $1021);
      var $1022=$6;
      var $1023=$n;
      var $1024=((($1023)*(9))&-1);
      var $1025=(($1022+($1024<<2))|0);
      var $1026=(($1025+12)|0);
      var $1027=$1;
      var $1028=$n;
      var $1029=((($1028)*(13))&-1);
      var $1030=(($1027+($1029<<2))|0);
      var $1031=(($1030+8)|0);
      var $1032=$n;
      var $1033=((($1032)+(1))|0);
      var $1034=$6;
      var $1035=$n;
      var $1036=((($1035)*(12))&-1);
      var $1037=(($1034+($1036<<2))|0);
      var $1038=(($1037+16)|0);
      var $1039=$n;
      var $1040=((($1039)+(1))|0);
      var $1041=$6;
      var $1042=$n;
      var $1043=((($1042)*(13))&-1);
      var $1044=(($1041+($1043<<2))|0);
      var $1045=(($1044+20)|0);
      ___gmpn_toom44_mul($1026, $1031, $1033, $1038, $1040, $1045);
      label = 96; break;
    case 95: 
      var $1047=$1;
      var $1048=$1;
      var $1049=$n;
      var $1050=((($1049)*(11))&-1);
      var $1051=(($1048+($1050<<2))|0);
      var $1052=$n;
      var $1053=((($1052)+(1))|0);
      var $1054=$1;
      var $1055=$n;
      var $1056=((($1055)*(12))&-1);
      var $1057=(($1054+($1056<<2))|0);
      var $1058=(($1057+4)|0);
      var $1059=$n;
      var $1060=((($1059)+(1))|0);
      var $1061=$6;
      var $1062=$n;
      var $1063=((($1062)*(13))&-1);
      var $1064=(($1061+($1063<<2))|0);
      var $1065=(($1064+20)|0);
      ___gmpn_toom6h_mul($1047, $1051, $1053, $1058, $1060, $1065);
      var $1066=$6;
      var $1067=$n;
      var $1068=((($1067)*(9))&-1);
      var $1069=(($1066+($1068<<2))|0);
      var $1070=(($1069+12)|0);
      var $1071=$1;
      var $1072=$n;
      var $1073=((($1072)*(13))&-1);
      var $1074=(($1071+($1073<<2))|0);
      var $1075=(($1074+8)|0);
      var $1076=$n;
      var $1077=((($1076)+(1))|0);
      var $1078=$6;
      var $1079=$n;
      var $1080=((($1079)*(12))&-1);
      var $1081=(($1078+($1080<<2))|0);
      var $1082=(($1081+16)|0);
      var $1083=$n;
      var $1084=((($1083)+(1))|0);
      var $1085=$6;
      var $1086=$n;
      var $1087=((($1086)*(13))&-1);
      var $1088=(($1085+($1087<<2))|0);
      var $1089=(($1088+20)|0);
      ___gmpn_toom6h_mul($1070, $1075, $1077, $1082, $1084, $1089);
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      var $1094=$6;
      var $1095=$n;
      var $1096=((($1095)*(9))&-1);
      var $1097=(($1094+($1096<<2))|0);
      var $1098=(($1097+12)|0);
      var $1099=$n;
      var $1100=($1099<<1);
      var $1101=((($1100)+(1))|0);
      var $1102=((($1101)+(1))|0);
      var $1103=$1;
      var $1104=$sign;
      var $1105=$n;
      ___gmpn_toom_couple_handling($1098, $1102, $1103, $1104, $1105, 3, 6);
      var $1106=$1;
      var $1107=$n;
      var $1108=((($1107)*(13))&-1);
      var $1109=(($1106+($1108<<2))|0);
      var $1110=(($1109+8)|0);
      var $1111=$1;
      var $1112=$n;
      var $1113=((($1112)*(11))&-1);
      var $1114=(($1111+($1113<<2))|0);
      var $1115=$p;
      var $1116=$2;
      var $1117=$n;
      var $1118=$s;
      var $1119=$1;
      var $1120=___gmpn_toom_eval_pm2rexp($1110, $1114, $1115, $1116, $1117, $1118, 1, $1119);
      var $1121=$6;
      var $1122=$n;
      var $1123=((($1122)*(12))&-1);
      var $1124=(($1121+($1123<<2))|0);
      var $1125=(($1124+16)|0);
      var $1126=$1;
      var $1127=$n;
      var $1128=((($1127)*(12))&-1);
      var $1129=(($1126+($1128<<2))|0);
      var $1130=(($1129+4)|0);
      var $1131=$q;
      var $1132=$4;
      var $1133=$n;
      var $1134=$t;
      var $1135=$1;
      var $1136=___gmpn_toom_eval_pm2rexp($1125, $1130, $1131, $1132, $1133, $1134, 1, $1135);
      var $1137=$1120 ^ $1136;
      $sign=$1137;
      label = 100; break;
    case 100: 
      var $1139=$n;
      var $1140=((($1139)+(1))|0);
      var $1141=(($1140)|0) >= 100;
      if ($1141) { label = 102; break; } else { label = 101; break; }
    case 101: 
      var $1143=$1;
      var $1144=$1;
      var $1145=$n;
      var $1146=((($1145)*(11))&-1);
      var $1147=(($1144+($1146<<2))|0);
      var $1148=$n;
      var $1149=((($1148)+(1))|0);
      var $1150=$1;
      var $1151=$n;
      var $1152=((($1151)*(12))&-1);
      var $1153=(($1150+($1152<<2))|0);
      var $1154=(($1153+4)|0);
      var $1155=$n;
      var $1156=((($1155)+(1))|0);
      var $1157=$6;
      var $1158=$n;
      var $1159=((($1158)*(13))&-1);
      var $1160=(($1157+($1159<<2))|0);
      var $1161=(($1160+20)|0);
      ___gmpn_toom22_mul($1143, $1147, $1149, $1154, $1156, $1161);
      var $1162=$1;
      var $1163=$n;
      var $1164=((($1163)*(3))&-1);
      var $1165=(($1162+($1164<<2))|0);
      var $1166=$1;
      var $1167=$n;
      var $1168=((($1167)*(13))&-1);
      var $1169=(($1166+($1168<<2))|0);
      var $1170=(($1169+8)|0);
      var $1171=$n;
      var $1172=((($1171)+(1))|0);
      var $1173=$6;
      var $1174=$n;
      var $1175=((($1174)*(12))&-1);
      var $1176=(($1173+($1175<<2))|0);
      var $1177=(($1176+16)|0);
      var $1178=$n;
      var $1179=((($1178)+(1))|0);
      var $1180=$6;
      var $1181=$n;
      var $1182=((($1181)*(13))&-1);
      var $1183=(($1180+($1182<<2))|0);
      var $1184=(($1183+20)|0);
      ___gmpn_toom22_mul($1165, $1170, $1172, $1177, $1179, $1184);
      label = 109; break;
    case 102: 
      var $1186=$n;
      var $1187=((($1186)+(1))|0);
      var $1188=(($1187)|0) >= 300;
      if ($1188) { label = 104; break; } else { label = 103; break; }
    case 103: 
      var $1190=$1;
      var $1191=$1;
      var $1192=$n;
      var $1193=((($1192)*(11))&-1);
      var $1194=(($1191+($1193<<2))|0);
      var $1195=$n;
      var $1196=((($1195)+(1))|0);
      var $1197=$1;
      var $1198=$n;
      var $1199=((($1198)*(12))&-1);
      var $1200=(($1197+($1199<<2))|0);
      var $1201=(($1200+4)|0);
      var $1202=$n;
      var $1203=((($1202)+(1))|0);
      var $1204=$6;
      var $1205=$n;
      var $1206=((($1205)*(13))&-1);
      var $1207=(($1204+($1206<<2))|0);
      var $1208=(($1207+20)|0);
      ___gmpn_toom33_mul($1190, $1194, $1196, $1201, $1203, $1208);
      var $1209=$1;
      var $1210=$n;
      var $1211=((($1210)*(3))&-1);
      var $1212=(($1209+($1211<<2))|0);
      var $1213=$1;
      var $1214=$n;
      var $1215=((($1214)*(13))&-1);
      var $1216=(($1213+($1215<<2))|0);
      var $1217=(($1216+8)|0);
      var $1218=$n;
      var $1219=((($1218)+(1))|0);
      var $1220=$6;
      var $1221=$n;
      var $1222=((($1221)*(12))&-1);
      var $1223=(($1220+($1222<<2))|0);
      var $1224=(($1223+16)|0);
      var $1225=$n;
      var $1226=((($1225)+(1))|0);
      var $1227=$6;
      var $1228=$n;
      var $1229=((($1228)*(13))&-1);
      var $1230=(($1227+($1229<<2))|0);
      var $1231=(($1230+20)|0);
      ___gmpn_toom33_mul($1212, $1217, $1219, $1224, $1226, $1231);
      label = 108; break;
    case 104: 
      var $1233=$n;
      var $1234=((($1233)+(1))|0);
      var $1235=(($1234)|0) >= 350;
      if ($1235) { label = 106; break; } else { label = 105; break; }
    case 105: 
      var $1237=$1;
      var $1238=$1;
      var $1239=$n;
      var $1240=((($1239)*(11))&-1);
      var $1241=(($1238+($1240<<2))|0);
      var $1242=$n;
      var $1243=((($1242)+(1))|0);
      var $1244=$1;
      var $1245=$n;
      var $1246=((($1245)*(12))&-1);
      var $1247=(($1244+($1246<<2))|0);
      var $1248=(($1247+4)|0);
      var $1249=$n;
      var $1250=((($1249)+(1))|0);
      var $1251=$6;
      var $1252=$n;
      var $1253=((($1252)*(13))&-1);
      var $1254=(($1251+($1253<<2))|0);
      var $1255=(($1254+20)|0);
      ___gmpn_toom44_mul($1237, $1241, $1243, $1248, $1250, $1255);
      var $1256=$1;
      var $1257=$n;
      var $1258=((($1257)*(3))&-1);
      var $1259=(($1256+($1258<<2))|0);
      var $1260=$1;
      var $1261=$n;
      var $1262=((($1261)*(13))&-1);
      var $1263=(($1260+($1262<<2))|0);
      var $1264=(($1263+8)|0);
      var $1265=$n;
      var $1266=((($1265)+(1))|0);
      var $1267=$6;
      var $1268=$n;
      var $1269=((($1268)*(12))&-1);
      var $1270=(($1267+($1269<<2))|0);
      var $1271=(($1270+16)|0);
      var $1272=$n;
      var $1273=((($1272)+(1))|0);
      var $1274=$6;
      var $1275=$n;
      var $1276=((($1275)*(13))&-1);
      var $1277=(($1274+($1276<<2))|0);
      var $1278=(($1277+20)|0);
      ___gmpn_toom44_mul($1259, $1264, $1266, $1271, $1273, $1278);
      label = 107; break;
    case 106: 
      var $1280=$1;
      var $1281=$1;
      var $1282=$n;
      var $1283=((($1282)*(11))&-1);
      var $1284=(($1281+($1283<<2))|0);
      var $1285=$n;
      var $1286=((($1285)+(1))|0);
      var $1287=$1;
      var $1288=$n;
      var $1289=((($1288)*(12))&-1);
      var $1290=(($1287+($1289<<2))|0);
      var $1291=(($1290+4)|0);
      var $1292=$n;
      var $1293=((($1292)+(1))|0);
      var $1294=$6;
      var $1295=$n;
      var $1296=((($1295)*(13))&-1);
      var $1297=(($1294+($1296<<2))|0);
      var $1298=(($1297+20)|0);
      ___gmpn_toom6h_mul($1280, $1284, $1286, $1291, $1293, $1298);
      var $1299=$1;
      var $1300=$n;
      var $1301=((($1300)*(3))&-1);
      var $1302=(($1299+($1301<<2))|0);
      var $1303=$1;
      var $1304=$n;
      var $1305=((($1304)*(13))&-1);
      var $1306=(($1303+($1305<<2))|0);
      var $1307=(($1306+8)|0);
      var $1308=$n;
      var $1309=((($1308)+(1))|0);
      var $1310=$6;
      var $1311=$n;
      var $1312=((($1311)*(12))&-1);
      var $1313=(($1310+($1312<<2))|0);
      var $1314=(($1313+16)|0);
      var $1315=$n;
      var $1316=((($1315)+(1))|0);
      var $1317=$6;
      var $1318=$n;
      var $1319=((($1318)*(13))&-1);
      var $1320=(($1317+($1319<<2))|0);
      var $1321=(($1320+20)|0);
      ___gmpn_toom6h_mul($1302, $1307, $1309, $1314, $1316, $1321);
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $1326=$1;
      var $1327=$n;
      var $1328=((($1327)*(3))&-1);
      var $1329=(($1326+($1328<<2))|0);
      var $1330=$n;
      var $1331=($1330<<1);
      var $1332=((($1331)+(1))|0);
      var $1333=$1;
      var $1334=$sign;
      var $1335=$n;
      var $1336=$half;
      var $1337=((($1336)+(1))|0);
      var $1338=$half;
      ___gmpn_toom_couple_handling($1329, $1332, $1333, $1334, $1335, $1337, $1338);
      var $1339=$1;
      var $1340=$n;
      var $1341=((($1340)*(13))&-1);
      var $1342=(($1339+($1341<<2))|0);
      var $1343=(($1342+8)|0);
      var $1344=$1;
      var $1345=$n;
      var $1346=((($1345)*(11))&-1);
      var $1347=(($1344+($1346<<2))|0);
      var $1348=$p;
      var $1349=$2;
      var $1350=$n;
      var $1351=$s;
      var $1352=$1;
      var $1353=___gmpn_toom_eval_pm1($1343, $1347, $1348, $1349, $1350, $1351, $1352);
      $sign=$1353;
      var $1354=$6;
      var $1355=$n;
      var $1356=((($1355)*(12))&-1);
      var $1357=(($1354+($1356<<2))|0);
      var $1358=(($1357+16)|0);
      var $1359=$1;
      var $1360=$n;
      var $1361=((($1360)*(12))&-1);
      var $1362=(($1359+($1361<<2))|0);
      var $1363=(($1362+4)|0);
      var $1364=$q;
      var $1365=$4;
      var $1366=$n;
      var $1367=$t;
      var $1368=$1;
      var $1369=___gmpn_toom_eval_pm1($1358, $1363, $1364, $1365, $1366, $1367, $1368);
      var $1370=$sign;
      var $1371=$1370 ^ $1369;
      $sign=$1371;
      label = 111; break;
    case 111: 
      var $1373=$n;
      var $1374=((($1373)+(1))|0);
      var $1375=(($1374)|0) >= 100;
      if ($1375) { label = 113; break; } else { label = 112; break; }
    case 112: 
      var $1377=$1;
      var $1378=$1;
      var $1379=$n;
      var $1380=((($1379)*(11))&-1);
      var $1381=(($1378+($1380<<2))|0);
      var $1382=$n;
      var $1383=((($1382)+(1))|0);
      var $1384=$1;
      var $1385=$n;
      var $1386=((($1385)*(12))&-1);
      var $1387=(($1384+($1386<<2))|0);
      var $1388=(($1387+4)|0);
      var $1389=$n;
      var $1390=((($1389)+(1))|0);
      var $1391=$6;
      var $1392=$n;
      var $1393=((($1392)*(13))&-1);
      var $1394=(($1391+($1393<<2))|0);
      var $1395=(($1394+20)|0);
      ___gmpn_toom22_mul($1377, $1381, $1383, $1388, $1390, $1395);
      var $1396=$1;
      var $1397=$n;
      var $1398=((($1397)*(7))&-1);
      var $1399=(($1396+($1398<<2))|0);
      var $1400=$1;
      var $1401=$n;
      var $1402=((($1401)*(13))&-1);
      var $1403=(($1400+($1402<<2))|0);
      var $1404=(($1403+8)|0);
      var $1405=$n;
      var $1406=((($1405)+(1))|0);
      var $1407=$6;
      var $1408=$n;
      var $1409=((($1408)*(12))&-1);
      var $1410=(($1407+($1409<<2))|0);
      var $1411=(($1410+16)|0);
      var $1412=$n;
      var $1413=((($1412)+(1))|0);
      var $1414=$6;
      var $1415=$n;
      var $1416=((($1415)*(13))&-1);
      var $1417=(($1414+($1416<<2))|0);
      var $1418=(($1417+20)|0);
      ___gmpn_toom22_mul($1399, $1404, $1406, $1411, $1413, $1418);
      label = 120; break;
    case 113: 
      var $1420=$n;
      var $1421=((($1420)+(1))|0);
      var $1422=(($1421)|0) >= 300;
      if ($1422) { label = 115; break; } else { label = 114; break; }
    case 114: 
      var $1424=$1;
      var $1425=$1;
      var $1426=$n;
      var $1427=((($1426)*(11))&-1);
      var $1428=(($1425+($1427<<2))|0);
      var $1429=$n;
      var $1430=((($1429)+(1))|0);
      var $1431=$1;
      var $1432=$n;
      var $1433=((($1432)*(12))&-1);
      var $1434=(($1431+($1433<<2))|0);
      var $1435=(($1434+4)|0);
      var $1436=$n;
      var $1437=((($1436)+(1))|0);
      var $1438=$6;
      var $1439=$n;
      var $1440=((($1439)*(13))&-1);
      var $1441=(($1438+($1440<<2))|0);
      var $1442=(($1441+20)|0);
      ___gmpn_toom33_mul($1424, $1428, $1430, $1435, $1437, $1442);
      var $1443=$1;
      var $1444=$n;
      var $1445=((($1444)*(7))&-1);
      var $1446=(($1443+($1445<<2))|0);
      var $1447=$1;
      var $1448=$n;
      var $1449=((($1448)*(13))&-1);
      var $1450=(($1447+($1449<<2))|0);
      var $1451=(($1450+8)|0);
      var $1452=$n;
      var $1453=((($1452)+(1))|0);
      var $1454=$6;
      var $1455=$n;
      var $1456=((($1455)*(12))&-1);
      var $1457=(($1454+($1456<<2))|0);
      var $1458=(($1457+16)|0);
      var $1459=$n;
      var $1460=((($1459)+(1))|0);
      var $1461=$6;
      var $1462=$n;
      var $1463=((($1462)*(13))&-1);
      var $1464=(($1461+($1463<<2))|0);
      var $1465=(($1464+20)|0);
      ___gmpn_toom33_mul($1446, $1451, $1453, $1458, $1460, $1465);
      label = 119; break;
    case 115: 
      var $1467=$n;
      var $1468=((($1467)+(1))|0);
      var $1469=(($1468)|0) >= 350;
      if ($1469) { label = 117; break; } else { label = 116; break; }
    case 116: 
      var $1471=$1;
      var $1472=$1;
      var $1473=$n;
      var $1474=((($1473)*(11))&-1);
      var $1475=(($1472+($1474<<2))|0);
      var $1476=$n;
      var $1477=((($1476)+(1))|0);
      var $1478=$1;
      var $1479=$n;
      var $1480=((($1479)*(12))&-1);
      var $1481=(($1478+($1480<<2))|0);
      var $1482=(($1481+4)|0);
      var $1483=$n;
      var $1484=((($1483)+(1))|0);
      var $1485=$6;
      var $1486=$n;
      var $1487=((($1486)*(13))&-1);
      var $1488=(($1485+($1487<<2))|0);
      var $1489=(($1488+20)|0);
      ___gmpn_toom44_mul($1471, $1475, $1477, $1482, $1484, $1489);
      var $1490=$1;
      var $1491=$n;
      var $1492=((($1491)*(7))&-1);
      var $1493=(($1490+($1492<<2))|0);
      var $1494=$1;
      var $1495=$n;
      var $1496=((($1495)*(13))&-1);
      var $1497=(($1494+($1496<<2))|0);
      var $1498=(($1497+8)|0);
      var $1499=$n;
      var $1500=((($1499)+(1))|0);
      var $1501=$6;
      var $1502=$n;
      var $1503=((($1502)*(12))&-1);
      var $1504=(($1501+($1503<<2))|0);
      var $1505=(($1504+16)|0);
      var $1506=$n;
      var $1507=((($1506)+(1))|0);
      var $1508=$6;
      var $1509=$n;
      var $1510=((($1509)*(13))&-1);
      var $1511=(($1508+($1510<<2))|0);
      var $1512=(($1511+20)|0);
      ___gmpn_toom44_mul($1493, $1498, $1500, $1505, $1507, $1512);
      label = 118; break;
    case 117: 
      var $1514=$1;
      var $1515=$1;
      var $1516=$n;
      var $1517=((($1516)*(11))&-1);
      var $1518=(($1515+($1517<<2))|0);
      var $1519=$n;
      var $1520=((($1519)+(1))|0);
      var $1521=$1;
      var $1522=$n;
      var $1523=((($1522)*(12))&-1);
      var $1524=(($1521+($1523<<2))|0);
      var $1525=(($1524+4)|0);
      var $1526=$n;
      var $1527=((($1526)+(1))|0);
      var $1528=$6;
      var $1529=$n;
      var $1530=((($1529)*(13))&-1);
      var $1531=(($1528+($1530<<2))|0);
      var $1532=(($1531+20)|0);
      ___gmpn_toom6h_mul($1514, $1518, $1520, $1525, $1527, $1532);
      var $1533=$1;
      var $1534=$n;
      var $1535=((($1534)*(7))&-1);
      var $1536=(($1533+($1535<<2))|0);
      var $1537=$1;
      var $1538=$n;
      var $1539=((($1538)*(13))&-1);
      var $1540=(($1537+($1539<<2))|0);
      var $1541=(($1540+8)|0);
      var $1542=$n;
      var $1543=((($1542)+(1))|0);
      var $1544=$6;
      var $1545=$n;
      var $1546=((($1545)*(12))&-1);
      var $1547=(($1544+($1546<<2))|0);
      var $1548=(($1547+16)|0);
      var $1549=$n;
      var $1550=((($1549)+(1))|0);
      var $1551=$6;
      var $1552=$n;
      var $1553=((($1552)*(13))&-1);
      var $1554=(($1551+($1553<<2))|0);
      var $1555=(($1554+20)|0);
      ___gmpn_toom6h_mul($1536, $1541, $1543, $1548, $1550, $1555);
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      var $1560=$1;
      var $1561=$n;
      var $1562=((($1561)*(7))&-1);
      var $1563=(($1560+($1562<<2))|0);
      var $1564=$n;
      var $1565=($1564<<1);
      var $1566=((($1565)+(1))|0);
      var $1567=$1;
      var $1568=$sign;
      var $1569=$n;
      ___gmpn_toom_couple_handling($1563, $1566, $1567, $1568, $1569, 0, 0);
      var $1570=$1;
      var $1571=$n;
      var $1572=((($1571)*(13))&-1);
      var $1573=(($1570+($1572<<2))|0);
      var $1574=(($1573+8)|0);
      var $1575=$1;
      var $1576=$n;
      var $1577=((($1576)*(11))&-1);
      var $1578=(($1575+($1577<<2))|0);
      var $1579=$p;
      var $1580=$2;
      var $1581=$n;
      var $1582=$s;
      var $1583=$1;
      var $1584=___gmpn_toom_eval_pm2exp($1574, $1578, $1579, $1580, $1581, $1582, 2, $1583);
      var $1585=$6;
      var $1586=$n;
      var $1587=((($1586)*(12))&-1);
      var $1588=(($1585+($1587<<2))|0);
      var $1589=(($1588+16)|0);
      var $1590=$1;
      var $1591=$n;
      var $1592=((($1591)*(12))&-1);
      var $1593=(($1590+($1592<<2))|0);
      var $1594=(($1593+4)|0);
      var $1595=$q;
      var $1596=$4;
      var $1597=$n;
      var $1598=$t;
      var $1599=$1;
      var $1600=___gmpn_toom_eval_pm2exp($1589, $1594, $1595, $1596, $1597, $1598, 2, $1599);
      var $1601=$1584 ^ $1600;
      $sign=$1601;
      label = 122; break;
    case 122: 
      var $1603=$n;
      var $1604=((($1603)+(1))|0);
      var $1605=(($1604)|0) >= 100;
      if ($1605) { label = 124; break; } else { label = 123; break; }
    case 123: 
      var $1607=$1;
      var $1608=$1;
      var $1609=$n;
      var $1610=((($1609)*(11))&-1);
      var $1611=(($1608+($1610<<2))|0);
      var $1612=$n;
      var $1613=((($1612)+(1))|0);
      var $1614=$1;
      var $1615=$n;
      var $1616=((($1615)*(12))&-1);
      var $1617=(($1614+($1616<<2))|0);
      var $1618=(($1617+4)|0);
      var $1619=$n;
      var $1620=((($1619)+(1))|0);
      var $1621=$6;
      var $1622=$n;
      var $1623=((($1622)*(13))&-1);
      var $1624=(($1621+($1623<<2))|0);
      var $1625=(($1624+20)|0);
      ___gmpn_toom22_mul($1607, $1611, $1613, $1618, $1620, $1625);
      var $1626=$1;
      var $1627=$n;
      var $1628=((($1627)*(11))&-1);
      var $1629=(($1626+($1628<<2))|0);
      var $1630=$1;
      var $1631=$n;
      var $1632=((($1631)*(13))&-1);
      var $1633=(($1630+($1632<<2))|0);
      var $1634=(($1633+8)|0);
      var $1635=$n;
      var $1636=((($1635)+(1))|0);
      var $1637=$6;
      var $1638=$n;
      var $1639=((($1638)*(12))&-1);
      var $1640=(($1637+($1639<<2))|0);
      var $1641=(($1640+16)|0);
      var $1642=$n;
      var $1643=((($1642)+(1))|0);
      var $1644=$6;
      var $1645=$n;
      var $1646=((($1645)*(13))&-1);
      var $1647=(($1644+($1646<<2))|0);
      var $1648=(($1647+20)|0);
      ___gmpn_toom22_mul($1629, $1634, $1636, $1641, $1643, $1648);
      label = 131; break;
    case 124: 
      var $1650=$n;
      var $1651=((($1650)+(1))|0);
      var $1652=(($1651)|0) >= 300;
      if ($1652) { label = 126; break; } else { label = 125; break; }
    case 125: 
      var $1654=$1;
      var $1655=$1;
      var $1656=$n;
      var $1657=((($1656)*(11))&-1);
      var $1658=(($1655+($1657<<2))|0);
      var $1659=$n;
      var $1660=((($1659)+(1))|0);
      var $1661=$1;
      var $1662=$n;
      var $1663=((($1662)*(12))&-1);
      var $1664=(($1661+($1663<<2))|0);
      var $1665=(($1664+4)|0);
      var $1666=$n;
      var $1667=((($1666)+(1))|0);
      var $1668=$6;
      var $1669=$n;
      var $1670=((($1669)*(13))&-1);
      var $1671=(($1668+($1670<<2))|0);
      var $1672=(($1671+20)|0);
      ___gmpn_toom33_mul($1654, $1658, $1660, $1665, $1667, $1672);
      var $1673=$1;
      var $1674=$n;
      var $1675=((($1674)*(11))&-1);
      var $1676=(($1673+($1675<<2))|0);
      var $1677=$1;
      var $1678=$n;
      var $1679=((($1678)*(13))&-1);
      var $1680=(($1677+($1679<<2))|0);
      var $1681=(($1680+8)|0);
      var $1682=$n;
      var $1683=((($1682)+(1))|0);
      var $1684=$6;
      var $1685=$n;
      var $1686=((($1685)*(12))&-1);
      var $1687=(($1684+($1686<<2))|0);
      var $1688=(($1687+16)|0);
      var $1689=$n;
      var $1690=((($1689)+(1))|0);
      var $1691=$6;
      var $1692=$n;
      var $1693=((($1692)*(13))&-1);
      var $1694=(($1691+($1693<<2))|0);
      var $1695=(($1694+20)|0);
      ___gmpn_toom33_mul($1676, $1681, $1683, $1688, $1690, $1695);
      label = 130; break;
    case 126: 
      var $1697=$n;
      var $1698=((($1697)+(1))|0);
      var $1699=(($1698)|0) >= 350;
      if ($1699) { label = 128; break; } else { label = 127; break; }
    case 127: 
      var $1701=$1;
      var $1702=$1;
      var $1703=$n;
      var $1704=((($1703)*(11))&-1);
      var $1705=(($1702+($1704<<2))|0);
      var $1706=$n;
      var $1707=((($1706)+(1))|0);
      var $1708=$1;
      var $1709=$n;
      var $1710=((($1709)*(12))&-1);
      var $1711=(($1708+($1710<<2))|0);
      var $1712=(($1711+4)|0);
      var $1713=$n;
      var $1714=((($1713)+(1))|0);
      var $1715=$6;
      var $1716=$n;
      var $1717=((($1716)*(13))&-1);
      var $1718=(($1715+($1717<<2))|0);
      var $1719=(($1718+20)|0);
      ___gmpn_toom44_mul($1701, $1705, $1707, $1712, $1714, $1719);
      var $1720=$1;
      var $1721=$n;
      var $1722=((($1721)*(11))&-1);
      var $1723=(($1720+($1722<<2))|0);
      var $1724=$1;
      var $1725=$n;
      var $1726=((($1725)*(13))&-1);
      var $1727=(($1724+($1726<<2))|0);
      var $1728=(($1727+8)|0);
      var $1729=$n;
      var $1730=((($1729)+(1))|0);
      var $1731=$6;
      var $1732=$n;
      var $1733=((($1732)*(12))&-1);
      var $1734=(($1731+($1733<<2))|0);
      var $1735=(($1734+16)|0);
      var $1736=$n;
      var $1737=((($1736)+(1))|0);
      var $1738=$6;
      var $1739=$n;
      var $1740=((($1739)*(13))&-1);
      var $1741=(($1738+($1740<<2))|0);
      var $1742=(($1741+20)|0);
      ___gmpn_toom44_mul($1723, $1728, $1730, $1735, $1737, $1742);
      label = 129; break;
    case 128: 
      var $1744=$1;
      var $1745=$1;
      var $1746=$n;
      var $1747=((($1746)*(11))&-1);
      var $1748=(($1745+($1747<<2))|0);
      var $1749=$n;
      var $1750=((($1749)+(1))|0);
      var $1751=$1;
      var $1752=$n;
      var $1753=((($1752)*(12))&-1);
      var $1754=(($1751+($1753<<2))|0);
      var $1755=(($1754+4)|0);
      var $1756=$n;
      var $1757=((($1756)+(1))|0);
      var $1758=$6;
      var $1759=$n;
      var $1760=((($1759)*(13))&-1);
      var $1761=(($1758+($1760<<2))|0);
      var $1762=(($1761+20)|0);
      ___gmpn_toom6h_mul($1744, $1748, $1750, $1755, $1757, $1762);
      var $1763=$1;
      var $1764=$n;
      var $1765=((($1764)*(11))&-1);
      var $1766=(($1763+($1765<<2))|0);
      var $1767=$1;
      var $1768=$n;
      var $1769=((($1768)*(13))&-1);
      var $1770=(($1767+($1769<<2))|0);
      var $1771=(($1770+8)|0);
      var $1772=$n;
      var $1773=((($1772)+(1))|0);
      var $1774=$6;
      var $1775=$n;
      var $1776=((($1775)*(12))&-1);
      var $1777=(($1774+($1776<<2))|0);
      var $1778=(($1777+16)|0);
      var $1779=$n;
      var $1780=((($1779)+(1))|0);
      var $1781=$6;
      var $1782=$n;
      var $1783=((($1782)*(13))&-1);
      var $1784=(($1781+($1783<<2))|0);
      var $1785=(($1784+20)|0);
      ___gmpn_toom6h_mul($1766, $1771, $1773, $1778, $1780, $1785);
      label = 129; break;
    case 129: 
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      label = 132; break;
    case 132: 
      var $1790=$1;
      var $1791=$n;
      var $1792=((($1791)*(11))&-1);
      var $1793=(($1790+($1792<<2))|0);
      var $1794=$n;
      var $1795=($1794<<1);
      var $1796=((($1795)+(1))|0);
      var $1797=$1;
      var $1798=$sign;
      var $1799=$n;
      ___gmpn_toom_couple_handling($1793, $1796, $1797, $1798, $1799, 2, 4);
      label = 133; break;
    case 133: 
      var $1801=$n;
      var $1802=(($1801)|0) >= 100;
      if ($1802) { label = 135; break; } else { label = 134; break; }
    case 134: 
      var $1804=$1;
      var $1805=$2;
      var $1806=$n;
      var $1807=$4;
      var $1808=$n;
      var $1809=$6;
      var $1810=$n;
      var $1811=((($1810)*(12))&-1);
      var $1812=(($1809+($1811<<2))|0);
      var $1813=(($1812+16)|0);
      ___gmpn_toom22_mul($1804, $1805, $1806, $1807, $1808, $1813);
      label = 142; break;
    case 135: 
      var $1815=$n;
      var $1816=(($1815)|0) >= 300;
      if ($1816) { label = 137; break; } else { label = 136; break; }
    case 136: 
      var $1818=$1;
      var $1819=$2;
      var $1820=$n;
      var $1821=$4;
      var $1822=$n;
      var $1823=$6;
      var $1824=$n;
      var $1825=((($1824)*(12))&-1);
      var $1826=(($1823+($1825<<2))|0);
      var $1827=(($1826+16)|0);
      ___gmpn_toom33_mul($1818, $1819, $1820, $1821, $1822, $1827);
      label = 141; break;
    case 137: 
      var $1829=$n;
      var $1830=(($1829)|0) >= 350;
      if ($1830) { label = 139; break; } else { label = 138; break; }
    case 138: 
      var $1832=$1;
      var $1833=$2;
      var $1834=$n;
      var $1835=$4;
      var $1836=$n;
      var $1837=$6;
      var $1838=$n;
      var $1839=((($1838)*(12))&-1);
      var $1840=(($1837+($1839<<2))|0);
      var $1841=(($1840+16)|0);
      ___gmpn_toom44_mul($1832, $1833, $1834, $1835, $1836, $1841);
      label = 140; break;
    case 139: 
      var $1843=$1;
      var $1844=$2;
      var $1845=$n;
      var $1846=$4;
      var $1847=$n;
      var $1848=$6;
      var $1849=$n;
      var $1850=((($1849)*(12))&-1);
      var $1851=(($1848+($1850<<2))|0);
      var $1852=(($1851+16)|0);
      ___gmpn_toom6h_mul($1843, $1844, $1845, $1846, $1847, $1852);
      label = 140; break;
    case 140: 
      label = 141; break;
    case 141: 
      label = 142; break;
    case 142: 
      label = 143; break;
    case 143: 
      var $1857=$half;
      var $1858=(($1857)|0)!=0;
      var $1859=(($1858)&1);
      var $1860=(($1859)|0)!=0;
      var $1861=(($1860)&1);
      var $1862=($1861);
      var $1863=(($1862)|0)!=0;
      if ($1863) { label = 144; break; } else { label = 152; break; }
    case 144: 
      var $1865=$s;
      var $1866=$t;
      var $1867=(($1865)|0) > (($1866)|0);
      if ($1867) { label = 145; break; } else { label = 148; break; }
    case 145: 
      label = 146; break;
    case 146: 
      var $1870=$1;
      var $1871=$n;
      var $1872=((($1871)*(15))&-1);
      var $1873=(($1870+($1872<<2))|0);
      var $1874=$2;
      var $1875=$p;
      var $1876=$n;
      var $1877=Math.imul($1875,$1876);
      var $1878=(($1874+($1877<<2))|0);
      var $1879=$s;
      var $1880=$4;
      var $1881=$q;
      var $1882=$n;
      var $1883=Math.imul($1881,$1882);
      var $1884=(($1880+($1883<<2))|0);
      var $1885=$t;
      var $1886=___gmpn_mul($1873, $1878, $1879, $1884, $1885);
      label = 147; break;
    case 147: 
      label = 151; break;
    case 148: 
      label = 149; break;
    case 149: 
      var $1890=$1;
      var $1891=$n;
      var $1892=((($1891)*(15))&-1);
      var $1893=(($1890+($1892<<2))|0);
      var $1894=$4;
      var $1895=$q;
      var $1896=$n;
      var $1897=Math.imul($1895,$1896);
      var $1898=(($1894+($1897<<2))|0);
      var $1899=$t;
      var $1900=$2;
      var $1901=$p;
      var $1902=$n;
      var $1903=Math.imul($1901,$1902);
      var $1904=(($1900+($1903<<2))|0);
      var $1905=$s;
      var $1906=___gmpn_mul($1893, $1898, $1899, $1904, $1905);
      label = 150; break;
    case 150: 
      label = 151; break;
    case 151: 
      label = 152; break;
    case 152: 
      var $1910=$1;
      var $1911=$6;
      var $1912=$n;
      var $1913=((($1912)*(9))&-1);
      var $1914=(($1911+($1913<<2))|0);
      var $1915=(($1914+12)|0);
      var $1916=$6;
      var $1917=$n;
      var $1918=((($1917)*(6))&-1);
      var $1919=(($1916+($1918<<2))|0);
      var $1920=(($1919+8)|0);
      var $1921=$6;
      var $1922=$n;
      var $1923=((($1922)*(3))&-1);
      var $1924=(($1921+($1923<<2))|0);
      var $1925=(($1924+4)|0);
      var $1926=$6;
      var $1927=$n;
      var $1928=$s;
      var $1929=$t;
      var $1930=((($1928)+($1929))|0);
      var $1931=$half;
      var $1932=$6;
      var $1933=$n;
      var $1934=((($1933)*(12))&-1);
      var $1935=(($1932+($1934<<2))|0);
      var $1936=(($1935+16)|0);
      ___gmpn_toom_interpolate_16pts($1910, $1915, $1920, $1925, $1926, $1927, $1930, $1931, $1936);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom8h_mul["X"]=1;

function ___gmpn_toom8_sqr($pp, $ap, $an, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $n;
      var $s;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $7=$3;
      var $8=((($7)-(1))|0);
      var $9=$8 >> 3;
      var $10=((($9)+(1))|0);
      $n=$10;
      var $11=$3;
      var $12=$n;
      var $13=((($12)*(7))&-1);
      var $14=((($11)-($13))|0);
      $s=$14;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $19=$1;
      var $20=$n;
      var $21=((($20)*(13))&-1);
      var $22=(($19+($21<<2))|0);
      var $23=(($22+8)|0);
      var $24=$1;
      var $25=$n;
      var $26=((($25)*(11))&-1);
      var $27=(($24+($26<<2))|0);
      var $28=$2;
      var $29=$n;
      var $30=$s;
      var $31=$1;
      var $32=___gmpn_toom_eval_pm2rexp($23, $27, 7, $28, $29, $30, 3, $31);
      label = 9; break;
    case 9: 
      var $34=$n;
      var $35=((($34)+(1))|0);
      var $36=(($35)|0) >= 120;
      if ($36) { label = 11; break; } else { label = 10; break; }
    case 10: 
      var $38=$1;
      var $39=$1;
      var $40=$n;
      var $41=((($40)*(11))&-1);
      var $42=(($39+($41<<2))|0);
      var $43=$n;
      var $44=((($43)+(1))|0);
      var $45=$4;
      var $46=$n;
      var $47=((($46)*(12))&-1);
      var $48=(($45+($47<<2))|0);
      var $49=(($48+16)|0);
      ___gmpn_toom2_sqr($38, $42, $44, $49);
      var $50=$4;
      var $51=$1;
      var $52=$n;
      var $53=((($52)*(13))&-1);
      var $54=(($51+($53<<2))|0);
      var $55=(($54+8)|0);
      var $56=$n;
      var $57=((($56)+(1))|0);
      var $58=$4;
      var $59=$n;
      var $60=((($59)*(12))&-1);
      var $61=(($58+($60<<2))|0);
      var $62=(($61+16)|0);
      ___gmpn_toom2_sqr($50, $55, $57, $62);
      label = 21; break;
    case 11: 
      var $64=$n;
      var $65=((($64)+(1))|0);
      var $66=(($65)|0) >= 400;
      if ($66) { label = 13; break; } else { label = 12; break; }
    case 12: 
      var $68=$1;
      var $69=$1;
      var $70=$n;
      var $71=((($70)*(11))&-1);
      var $72=(($69+($71<<2))|0);
      var $73=$n;
      var $74=((($73)+(1))|0);
      var $75=$4;
      var $76=$n;
      var $77=((($76)*(12))&-1);
      var $78=(($75+($77<<2))|0);
      var $79=(($78+16)|0);
      ___gmpn_toom3_sqr($68, $72, $74, $79);
      var $80=$4;
      var $81=$1;
      var $82=$n;
      var $83=((($82)*(13))&-1);
      var $84=(($81+($83<<2))|0);
      var $85=(($84+8)|0);
      var $86=$n;
      var $87=((($86)+(1))|0);
      var $88=$4;
      var $89=$n;
      var $90=((($89)*(12))&-1);
      var $91=(($88+($90<<2))|0);
      var $92=(($91+16)|0);
      ___gmpn_toom3_sqr($80, $85, $87, $92);
      label = 20; break;
    case 13: 
      var $94=$n;
      var $95=((($94)+(1))|0);
      var $96=(($95)|0) >= 350;
      if ($96) { label = 15; break; } else { label = 14; break; }
    case 14: 
      var $98=$1;
      var $99=$1;
      var $100=$n;
      var $101=((($100)*(11))&-1);
      var $102=(($99+($101<<2))|0);
      var $103=$n;
      var $104=((($103)+(1))|0);
      var $105=$4;
      var $106=$n;
      var $107=((($106)*(12))&-1);
      var $108=(($105+($107<<2))|0);
      var $109=(($108+16)|0);
      ___gmpn_toom4_sqr($98, $102, $104, $109);
      var $110=$4;
      var $111=$1;
      var $112=$n;
      var $113=((($112)*(13))&-1);
      var $114=(($111+($113<<2))|0);
      var $115=(($114+8)|0);
      var $116=$n;
      var $117=((($116)+(1))|0);
      var $118=$4;
      var $119=$n;
      var $120=((($119)*(12))&-1);
      var $121=(($118+($120<<2))|0);
      var $122=(($121+16)|0);
      ___gmpn_toom4_sqr($110, $115, $117, $122);
      label = 19; break;
    case 15: 
      var $124=$n;
      var $125=((($124)+(1))|0);
      var $126=(($125)|0) >= 450;
      if ($126) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $128=$1;
      var $129=$1;
      var $130=$n;
      var $131=((($130)*(11))&-1);
      var $132=(($129+($131<<2))|0);
      var $133=$n;
      var $134=((($133)+(1))|0);
      var $135=$4;
      var $136=$n;
      var $137=((($136)*(12))&-1);
      var $138=(($135+($137<<2))|0);
      var $139=(($138+16)|0);
      ___gmpn_toom6_sqr($128, $132, $134, $139);
      var $140=$4;
      var $141=$1;
      var $142=$n;
      var $143=((($142)*(13))&-1);
      var $144=(($141+($143<<2))|0);
      var $145=(($144+8)|0);
      var $146=$n;
      var $147=((($146)+(1))|0);
      var $148=$4;
      var $149=$n;
      var $150=((($149)*(12))&-1);
      var $151=(($148+($150<<2))|0);
      var $152=(($151+16)|0);
      ___gmpn_toom6_sqr($140, $145, $147, $152);
      label = 18; break;
    case 17: 
      var $154=$1;
      var $155=$1;
      var $156=$n;
      var $157=((($156)*(11))&-1);
      var $158=(($155+($157<<2))|0);
      var $159=$n;
      var $160=((($159)+(1))|0);
      var $161=$4;
      var $162=$n;
      var $163=((($162)*(12))&-1);
      var $164=(($161+($163<<2))|0);
      var $165=(($164+16)|0);
      ___gmpn_toom8_sqr($154, $158, $160, $165);
      var $166=$4;
      var $167=$1;
      var $168=$n;
      var $169=((($168)*(13))&-1);
      var $170=(($167+($169<<2))|0);
      var $171=(($170+8)|0);
      var $172=$n;
      var $173=((($172)+(1))|0);
      var $174=$4;
      var $175=$n;
      var $176=((($175)*(12))&-1);
      var $177=(($174+($176<<2))|0);
      var $178=(($177+16)|0);
      ___gmpn_toom8_sqr($166, $171, $173, $178);
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $184=$4;
      var $185=$n;
      var $186=($185<<1);
      var $187=((($186)+(1))|0);
      var $188=((($187)+(1))|0);
      var $189=$1;
      var $190=$n;
      ___gmpn_toom_couple_handling($184, $188, $189, 0, $190, 3, 0);
      var $191=$1;
      var $192=$n;
      var $193=((($192)*(13))&-1);
      var $194=(($191+($193<<2))|0);
      var $195=(($194+8)|0);
      var $196=$1;
      var $197=$n;
      var $198=((($197)*(11))&-1);
      var $199=(($196+($198<<2))|0);
      var $200=$2;
      var $201=$n;
      var $202=$s;
      var $203=$1;
      var $204=___gmpn_toom_eval_pm2rexp($195, $199, 7, $200, $201, $202, 2, $203);
      label = 23; break;
    case 23: 
      var $206=$n;
      var $207=((($206)+(1))|0);
      var $208=(($207)|0) >= 120;
      if ($208) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $210=$1;
      var $211=$1;
      var $212=$n;
      var $213=((($212)*(11))&-1);
      var $214=(($211+($213<<2))|0);
      var $215=$n;
      var $216=((($215)+(1))|0);
      var $217=$4;
      var $218=$n;
      var $219=((($218)*(12))&-1);
      var $220=(($217+($219<<2))|0);
      var $221=(($220+16)|0);
      ___gmpn_toom2_sqr($210, $214, $216, $221);
      var $222=$4;
      var $223=$n;
      var $224=((($223)*(3))&-1);
      var $225=(($222+($224<<2))|0);
      var $226=(($225+4)|0);
      var $227=$1;
      var $228=$n;
      var $229=((($228)*(13))&-1);
      var $230=(($227+($229<<2))|0);
      var $231=(($230+8)|0);
      var $232=$n;
      var $233=((($232)+(1))|0);
      var $234=$4;
      var $235=$n;
      var $236=((($235)*(12))&-1);
      var $237=(($234+($236<<2))|0);
      var $238=(($237+16)|0);
      ___gmpn_toom2_sqr($226, $231, $233, $238);
      label = 35; break;
    case 25: 
      var $240=$n;
      var $241=((($240)+(1))|0);
      var $242=(($241)|0) >= 400;
      if ($242) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $244=$1;
      var $245=$1;
      var $246=$n;
      var $247=((($246)*(11))&-1);
      var $248=(($245+($247<<2))|0);
      var $249=$n;
      var $250=((($249)+(1))|0);
      var $251=$4;
      var $252=$n;
      var $253=((($252)*(12))&-1);
      var $254=(($251+($253<<2))|0);
      var $255=(($254+16)|0);
      ___gmpn_toom3_sqr($244, $248, $250, $255);
      var $256=$4;
      var $257=$n;
      var $258=((($257)*(3))&-1);
      var $259=(($256+($258<<2))|0);
      var $260=(($259+4)|0);
      var $261=$1;
      var $262=$n;
      var $263=((($262)*(13))&-1);
      var $264=(($261+($263<<2))|0);
      var $265=(($264+8)|0);
      var $266=$n;
      var $267=((($266)+(1))|0);
      var $268=$4;
      var $269=$n;
      var $270=((($269)*(12))&-1);
      var $271=(($268+($270<<2))|0);
      var $272=(($271+16)|0);
      ___gmpn_toom3_sqr($260, $265, $267, $272);
      label = 34; break;
    case 27: 
      var $274=$n;
      var $275=((($274)+(1))|0);
      var $276=(($275)|0) >= 350;
      if ($276) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $278=$1;
      var $279=$1;
      var $280=$n;
      var $281=((($280)*(11))&-1);
      var $282=(($279+($281<<2))|0);
      var $283=$n;
      var $284=((($283)+(1))|0);
      var $285=$4;
      var $286=$n;
      var $287=((($286)*(12))&-1);
      var $288=(($285+($287<<2))|0);
      var $289=(($288+16)|0);
      ___gmpn_toom4_sqr($278, $282, $284, $289);
      var $290=$4;
      var $291=$n;
      var $292=((($291)*(3))&-1);
      var $293=(($290+($292<<2))|0);
      var $294=(($293+4)|0);
      var $295=$1;
      var $296=$n;
      var $297=((($296)*(13))&-1);
      var $298=(($295+($297<<2))|0);
      var $299=(($298+8)|0);
      var $300=$n;
      var $301=((($300)+(1))|0);
      var $302=$4;
      var $303=$n;
      var $304=((($303)*(12))&-1);
      var $305=(($302+($304<<2))|0);
      var $306=(($305+16)|0);
      ___gmpn_toom4_sqr($294, $299, $301, $306);
      label = 33; break;
    case 29: 
      var $308=$n;
      var $309=((($308)+(1))|0);
      var $310=(($309)|0) >= 450;
      if ($310) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $312=$1;
      var $313=$1;
      var $314=$n;
      var $315=((($314)*(11))&-1);
      var $316=(($313+($315<<2))|0);
      var $317=$n;
      var $318=((($317)+(1))|0);
      var $319=$4;
      var $320=$n;
      var $321=((($320)*(12))&-1);
      var $322=(($319+($321<<2))|0);
      var $323=(($322+16)|0);
      ___gmpn_toom6_sqr($312, $316, $318, $323);
      var $324=$4;
      var $325=$n;
      var $326=((($325)*(3))&-1);
      var $327=(($324+($326<<2))|0);
      var $328=(($327+4)|0);
      var $329=$1;
      var $330=$n;
      var $331=((($330)*(13))&-1);
      var $332=(($329+($331<<2))|0);
      var $333=(($332+8)|0);
      var $334=$n;
      var $335=((($334)+(1))|0);
      var $336=$4;
      var $337=$n;
      var $338=((($337)*(12))&-1);
      var $339=(($336+($338<<2))|0);
      var $340=(($339+16)|0);
      ___gmpn_toom6_sqr($328, $333, $335, $340);
      label = 32; break;
    case 31: 
      var $342=$1;
      var $343=$1;
      var $344=$n;
      var $345=((($344)*(11))&-1);
      var $346=(($343+($345<<2))|0);
      var $347=$n;
      var $348=((($347)+(1))|0);
      var $349=$4;
      var $350=$n;
      var $351=((($350)*(12))&-1);
      var $352=(($349+($351<<2))|0);
      var $353=(($352+16)|0);
      ___gmpn_toom8_sqr($342, $346, $348, $353);
      var $354=$4;
      var $355=$n;
      var $356=((($355)*(3))&-1);
      var $357=(($354+($356<<2))|0);
      var $358=(($357+4)|0);
      var $359=$1;
      var $360=$n;
      var $361=((($360)*(13))&-1);
      var $362=(($359+($361<<2))|0);
      var $363=(($362+8)|0);
      var $364=$n;
      var $365=((($364)+(1))|0);
      var $366=$4;
      var $367=$n;
      var $368=((($367)*(12))&-1);
      var $369=(($366+($368<<2))|0);
      var $370=(($369+16)|0);
      ___gmpn_toom8_sqr($358, $363, $365, $370);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $376=$4;
      var $377=$n;
      var $378=((($377)*(3))&-1);
      var $379=(($376+($378<<2))|0);
      var $380=(($379+4)|0);
      var $381=$n;
      var $382=($381<<1);
      var $383=((($382)+(1))|0);
      var $384=$1;
      var $385=$n;
      ___gmpn_toom_couple_handling($380, $383, $384, 0, $385, 2, 0);
      var $386=$1;
      var $387=$n;
      var $388=((($387)*(13))&-1);
      var $389=(($386+($388<<2))|0);
      var $390=(($389+8)|0);
      var $391=$1;
      var $392=$n;
      var $393=((($392)*(11))&-1);
      var $394=(($391+($393<<2))|0);
      var $395=$2;
      var $396=$n;
      var $397=$s;
      var $398=$1;
      var $399=___gmpn_toom_eval_pm2($390, $394, 7, $395, $396, $397, $398);
      label = 37; break;
    case 37: 
      var $401=$n;
      var $402=((($401)+(1))|0);
      var $403=(($402)|0) >= 120;
      if ($403) { label = 39; break; } else { label = 38; break; }
    case 38: 
      var $405=$1;
      var $406=$1;
      var $407=$n;
      var $408=((($407)*(11))&-1);
      var $409=(($406+($408<<2))|0);
      var $410=$n;
      var $411=((($410)+(1))|0);
      var $412=$4;
      var $413=$n;
      var $414=((($413)*(12))&-1);
      var $415=(($412+($414<<2))|0);
      var $416=(($415+16)|0);
      ___gmpn_toom2_sqr($405, $409, $411, $416);
      var $417=$4;
      var $418=$n;
      var $419=((($418)*(6))&-1);
      var $420=(($417+($419<<2))|0);
      var $421=(($420+8)|0);
      var $422=$1;
      var $423=$n;
      var $424=((($423)*(13))&-1);
      var $425=(($422+($424<<2))|0);
      var $426=(($425+8)|0);
      var $427=$n;
      var $428=((($427)+(1))|0);
      var $429=$4;
      var $430=$n;
      var $431=((($430)*(12))&-1);
      var $432=(($429+($431<<2))|0);
      var $433=(($432+16)|0);
      ___gmpn_toom2_sqr($421, $426, $428, $433);
      label = 49; break;
    case 39: 
      var $435=$n;
      var $436=((($435)+(1))|0);
      var $437=(($436)|0) >= 400;
      if ($437) { label = 41; break; } else { label = 40; break; }
    case 40: 
      var $439=$1;
      var $440=$1;
      var $441=$n;
      var $442=((($441)*(11))&-1);
      var $443=(($440+($442<<2))|0);
      var $444=$n;
      var $445=((($444)+(1))|0);
      var $446=$4;
      var $447=$n;
      var $448=((($447)*(12))&-1);
      var $449=(($446+($448<<2))|0);
      var $450=(($449+16)|0);
      ___gmpn_toom3_sqr($439, $443, $445, $450);
      var $451=$4;
      var $452=$n;
      var $453=((($452)*(6))&-1);
      var $454=(($451+($453<<2))|0);
      var $455=(($454+8)|0);
      var $456=$1;
      var $457=$n;
      var $458=((($457)*(13))&-1);
      var $459=(($456+($458<<2))|0);
      var $460=(($459+8)|0);
      var $461=$n;
      var $462=((($461)+(1))|0);
      var $463=$4;
      var $464=$n;
      var $465=((($464)*(12))&-1);
      var $466=(($463+($465<<2))|0);
      var $467=(($466+16)|0);
      ___gmpn_toom3_sqr($455, $460, $462, $467);
      label = 48; break;
    case 41: 
      var $469=$n;
      var $470=((($469)+(1))|0);
      var $471=(($470)|0) >= 350;
      if ($471) { label = 43; break; } else { label = 42; break; }
    case 42: 
      var $473=$1;
      var $474=$1;
      var $475=$n;
      var $476=((($475)*(11))&-1);
      var $477=(($474+($476<<2))|0);
      var $478=$n;
      var $479=((($478)+(1))|0);
      var $480=$4;
      var $481=$n;
      var $482=((($481)*(12))&-1);
      var $483=(($480+($482<<2))|0);
      var $484=(($483+16)|0);
      ___gmpn_toom4_sqr($473, $477, $479, $484);
      var $485=$4;
      var $486=$n;
      var $487=((($486)*(6))&-1);
      var $488=(($485+($487<<2))|0);
      var $489=(($488+8)|0);
      var $490=$1;
      var $491=$n;
      var $492=((($491)*(13))&-1);
      var $493=(($490+($492<<2))|0);
      var $494=(($493+8)|0);
      var $495=$n;
      var $496=((($495)+(1))|0);
      var $497=$4;
      var $498=$n;
      var $499=((($498)*(12))&-1);
      var $500=(($497+($499<<2))|0);
      var $501=(($500+16)|0);
      ___gmpn_toom4_sqr($489, $494, $496, $501);
      label = 47; break;
    case 43: 
      var $503=$n;
      var $504=((($503)+(1))|0);
      var $505=(($504)|0) >= 450;
      if ($505) { label = 45; break; } else { label = 44; break; }
    case 44: 
      var $507=$1;
      var $508=$1;
      var $509=$n;
      var $510=((($509)*(11))&-1);
      var $511=(($508+($510<<2))|0);
      var $512=$n;
      var $513=((($512)+(1))|0);
      var $514=$4;
      var $515=$n;
      var $516=((($515)*(12))&-1);
      var $517=(($514+($516<<2))|0);
      var $518=(($517+16)|0);
      ___gmpn_toom6_sqr($507, $511, $513, $518);
      var $519=$4;
      var $520=$n;
      var $521=((($520)*(6))&-1);
      var $522=(($519+($521<<2))|0);
      var $523=(($522+8)|0);
      var $524=$1;
      var $525=$n;
      var $526=((($525)*(13))&-1);
      var $527=(($524+($526<<2))|0);
      var $528=(($527+8)|0);
      var $529=$n;
      var $530=((($529)+(1))|0);
      var $531=$4;
      var $532=$n;
      var $533=((($532)*(12))&-1);
      var $534=(($531+($533<<2))|0);
      var $535=(($534+16)|0);
      ___gmpn_toom6_sqr($523, $528, $530, $535);
      label = 46; break;
    case 45: 
      var $537=$1;
      var $538=$1;
      var $539=$n;
      var $540=((($539)*(11))&-1);
      var $541=(($538+($540<<2))|0);
      var $542=$n;
      var $543=((($542)+(1))|0);
      var $544=$4;
      var $545=$n;
      var $546=((($545)*(12))&-1);
      var $547=(($544+($546<<2))|0);
      var $548=(($547+16)|0);
      ___gmpn_toom8_sqr($537, $541, $543, $548);
      var $549=$4;
      var $550=$n;
      var $551=((($550)*(6))&-1);
      var $552=(($549+($551<<2))|0);
      var $553=(($552+8)|0);
      var $554=$1;
      var $555=$n;
      var $556=((($555)*(13))&-1);
      var $557=(($554+($556<<2))|0);
      var $558=(($557+8)|0);
      var $559=$n;
      var $560=((($559)+(1))|0);
      var $561=$4;
      var $562=$n;
      var $563=((($562)*(12))&-1);
      var $564=(($561+($563<<2))|0);
      var $565=(($564+16)|0);
      ___gmpn_toom8_sqr($553, $558, $560, $565);
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $571=$4;
      var $572=$n;
      var $573=((($572)*(6))&-1);
      var $574=(($571+($573<<2))|0);
      var $575=(($574+8)|0);
      var $576=$n;
      var $577=($576<<1);
      var $578=((($577)+(1))|0);
      var $579=$1;
      var $580=$n;
      ___gmpn_toom_couple_handling($575, $578, $579, 0, $580, 1, 2);
      var $581=$1;
      var $582=$n;
      var $583=((($582)*(13))&-1);
      var $584=(($581+($583<<2))|0);
      var $585=(($584+8)|0);
      var $586=$1;
      var $587=$n;
      var $588=((($587)*(11))&-1);
      var $589=(($586+($588<<2))|0);
      var $590=$2;
      var $591=$n;
      var $592=$s;
      var $593=$1;
      var $594=___gmpn_toom_eval_pm2exp($585, $589, 7, $590, $591, $592, 3, $593);
      label = 51; break;
    case 51: 
      var $596=$n;
      var $597=((($596)+(1))|0);
      var $598=(($597)|0) >= 120;
      if ($598) { label = 53; break; } else { label = 52; break; }
    case 52: 
      var $600=$1;
      var $601=$1;
      var $602=$n;
      var $603=((($602)*(11))&-1);
      var $604=(($601+($603<<2))|0);
      var $605=$n;
      var $606=((($605)+(1))|0);
      var $607=$4;
      var $608=$n;
      var $609=((($608)*(12))&-1);
      var $610=(($607+($609<<2))|0);
      var $611=(($610+16)|0);
      ___gmpn_toom2_sqr($600, $604, $606, $611);
      var $612=$4;
      var $613=$n;
      var $614=((($613)*(9))&-1);
      var $615=(($612+($614<<2))|0);
      var $616=(($615+12)|0);
      var $617=$1;
      var $618=$n;
      var $619=((($618)*(13))&-1);
      var $620=(($617+($619<<2))|0);
      var $621=(($620+8)|0);
      var $622=$n;
      var $623=((($622)+(1))|0);
      var $624=$4;
      var $625=$n;
      var $626=((($625)*(12))&-1);
      var $627=(($624+($626<<2))|0);
      var $628=(($627+16)|0);
      ___gmpn_toom2_sqr($616, $621, $623, $628);
      label = 63; break;
    case 53: 
      var $630=$n;
      var $631=((($630)+(1))|0);
      var $632=(($631)|0) >= 400;
      if ($632) { label = 55; break; } else { label = 54; break; }
    case 54: 
      var $634=$1;
      var $635=$1;
      var $636=$n;
      var $637=((($636)*(11))&-1);
      var $638=(($635+($637<<2))|0);
      var $639=$n;
      var $640=((($639)+(1))|0);
      var $641=$4;
      var $642=$n;
      var $643=((($642)*(12))&-1);
      var $644=(($641+($643<<2))|0);
      var $645=(($644+16)|0);
      ___gmpn_toom3_sqr($634, $638, $640, $645);
      var $646=$4;
      var $647=$n;
      var $648=((($647)*(9))&-1);
      var $649=(($646+($648<<2))|0);
      var $650=(($649+12)|0);
      var $651=$1;
      var $652=$n;
      var $653=((($652)*(13))&-1);
      var $654=(($651+($653<<2))|0);
      var $655=(($654+8)|0);
      var $656=$n;
      var $657=((($656)+(1))|0);
      var $658=$4;
      var $659=$n;
      var $660=((($659)*(12))&-1);
      var $661=(($658+($660<<2))|0);
      var $662=(($661+16)|0);
      ___gmpn_toom3_sqr($650, $655, $657, $662);
      label = 62; break;
    case 55: 
      var $664=$n;
      var $665=((($664)+(1))|0);
      var $666=(($665)|0) >= 350;
      if ($666) { label = 57; break; } else { label = 56; break; }
    case 56: 
      var $668=$1;
      var $669=$1;
      var $670=$n;
      var $671=((($670)*(11))&-1);
      var $672=(($669+($671<<2))|0);
      var $673=$n;
      var $674=((($673)+(1))|0);
      var $675=$4;
      var $676=$n;
      var $677=((($676)*(12))&-1);
      var $678=(($675+($677<<2))|0);
      var $679=(($678+16)|0);
      ___gmpn_toom4_sqr($668, $672, $674, $679);
      var $680=$4;
      var $681=$n;
      var $682=((($681)*(9))&-1);
      var $683=(($680+($682<<2))|0);
      var $684=(($683+12)|0);
      var $685=$1;
      var $686=$n;
      var $687=((($686)*(13))&-1);
      var $688=(($685+($687<<2))|0);
      var $689=(($688+8)|0);
      var $690=$n;
      var $691=((($690)+(1))|0);
      var $692=$4;
      var $693=$n;
      var $694=((($693)*(12))&-1);
      var $695=(($692+($694<<2))|0);
      var $696=(($695+16)|0);
      ___gmpn_toom4_sqr($684, $689, $691, $696);
      label = 61; break;
    case 57: 
      var $698=$n;
      var $699=((($698)+(1))|0);
      var $700=(($699)|0) >= 450;
      if ($700) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $702=$1;
      var $703=$1;
      var $704=$n;
      var $705=((($704)*(11))&-1);
      var $706=(($703+($705<<2))|0);
      var $707=$n;
      var $708=((($707)+(1))|0);
      var $709=$4;
      var $710=$n;
      var $711=((($710)*(12))&-1);
      var $712=(($709+($711<<2))|0);
      var $713=(($712+16)|0);
      ___gmpn_toom6_sqr($702, $706, $708, $713);
      var $714=$4;
      var $715=$n;
      var $716=((($715)*(9))&-1);
      var $717=(($714+($716<<2))|0);
      var $718=(($717+12)|0);
      var $719=$1;
      var $720=$n;
      var $721=((($720)*(13))&-1);
      var $722=(($719+($721<<2))|0);
      var $723=(($722+8)|0);
      var $724=$n;
      var $725=((($724)+(1))|0);
      var $726=$4;
      var $727=$n;
      var $728=((($727)*(12))&-1);
      var $729=(($726+($728<<2))|0);
      var $730=(($729+16)|0);
      ___gmpn_toom6_sqr($718, $723, $725, $730);
      label = 60; break;
    case 59: 
      var $732=$1;
      var $733=$1;
      var $734=$n;
      var $735=((($734)*(11))&-1);
      var $736=(($733+($735<<2))|0);
      var $737=$n;
      var $738=((($737)+(1))|0);
      var $739=$4;
      var $740=$n;
      var $741=((($740)*(12))&-1);
      var $742=(($739+($741<<2))|0);
      var $743=(($742+16)|0);
      ___gmpn_toom8_sqr($732, $736, $738, $743);
      var $744=$4;
      var $745=$n;
      var $746=((($745)*(9))&-1);
      var $747=(($744+($746<<2))|0);
      var $748=(($747+12)|0);
      var $749=$1;
      var $750=$n;
      var $751=((($750)*(13))&-1);
      var $752=(($749+($751<<2))|0);
      var $753=(($752+8)|0);
      var $754=$n;
      var $755=((($754)+(1))|0);
      var $756=$4;
      var $757=$n;
      var $758=((($757)*(12))&-1);
      var $759=(($756+($758<<2))|0);
      var $760=(($759+16)|0);
      ___gmpn_toom8_sqr($748, $753, $755, $760);
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $766=$4;
      var $767=$n;
      var $768=((($767)*(9))&-1);
      var $769=(($766+($768<<2))|0);
      var $770=(($769+12)|0);
      var $771=$n;
      var $772=($771<<1);
      var $773=((($772)+(1))|0);
      var $774=((($773)+(1))|0);
      var $775=$1;
      var $776=$n;
      ___gmpn_toom_couple_handling($770, $774, $775, 0, $776, 3, 6);
      var $777=$1;
      var $778=$n;
      var $779=((($778)*(13))&-1);
      var $780=(($777+($779<<2))|0);
      var $781=(($780+8)|0);
      var $782=$1;
      var $783=$n;
      var $784=((($783)*(11))&-1);
      var $785=(($782+($784<<2))|0);
      var $786=$2;
      var $787=$n;
      var $788=$s;
      var $789=$1;
      var $790=___gmpn_toom_eval_pm2rexp($781, $785, 7, $786, $787, $788, 1, $789);
      label = 65; break;
    case 65: 
      var $792=$n;
      var $793=((($792)+(1))|0);
      var $794=(($793)|0) >= 120;
      if ($794) { label = 67; break; } else { label = 66; break; }
    case 66: 
      var $796=$1;
      var $797=$1;
      var $798=$n;
      var $799=((($798)*(11))&-1);
      var $800=(($797+($799<<2))|0);
      var $801=$n;
      var $802=((($801)+(1))|0);
      var $803=$4;
      var $804=$n;
      var $805=((($804)*(12))&-1);
      var $806=(($803+($805<<2))|0);
      var $807=(($806+16)|0);
      ___gmpn_toom2_sqr($796, $800, $802, $807);
      var $808=$1;
      var $809=$n;
      var $810=((($809)*(3))&-1);
      var $811=(($808+($810<<2))|0);
      var $812=$1;
      var $813=$n;
      var $814=((($813)*(13))&-1);
      var $815=(($812+($814<<2))|0);
      var $816=(($815+8)|0);
      var $817=$n;
      var $818=((($817)+(1))|0);
      var $819=$4;
      var $820=$n;
      var $821=((($820)*(12))&-1);
      var $822=(($819+($821<<2))|0);
      var $823=(($822+16)|0);
      ___gmpn_toom2_sqr($811, $816, $818, $823);
      label = 77; break;
    case 67: 
      var $825=$n;
      var $826=((($825)+(1))|0);
      var $827=(($826)|0) >= 400;
      if ($827) { label = 69; break; } else { label = 68; break; }
    case 68: 
      var $829=$1;
      var $830=$1;
      var $831=$n;
      var $832=((($831)*(11))&-1);
      var $833=(($830+($832<<2))|0);
      var $834=$n;
      var $835=((($834)+(1))|0);
      var $836=$4;
      var $837=$n;
      var $838=((($837)*(12))&-1);
      var $839=(($836+($838<<2))|0);
      var $840=(($839+16)|0);
      ___gmpn_toom3_sqr($829, $833, $835, $840);
      var $841=$1;
      var $842=$n;
      var $843=((($842)*(3))&-1);
      var $844=(($841+($843<<2))|0);
      var $845=$1;
      var $846=$n;
      var $847=((($846)*(13))&-1);
      var $848=(($845+($847<<2))|0);
      var $849=(($848+8)|0);
      var $850=$n;
      var $851=((($850)+(1))|0);
      var $852=$4;
      var $853=$n;
      var $854=((($853)*(12))&-1);
      var $855=(($852+($854<<2))|0);
      var $856=(($855+16)|0);
      ___gmpn_toom3_sqr($844, $849, $851, $856);
      label = 76; break;
    case 69: 
      var $858=$n;
      var $859=((($858)+(1))|0);
      var $860=(($859)|0) >= 350;
      if ($860) { label = 71; break; } else { label = 70; break; }
    case 70: 
      var $862=$1;
      var $863=$1;
      var $864=$n;
      var $865=((($864)*(11))&-1);
      var $866=(($863+($865<<2))|0);
      var $867=$n;
      var $868=((($867)+(1))|0);
      var $869=$4;
      var $870=$n;
      var $871=((($870)*(12))&-1);
      var $872=(($869+($871<<2))|0);
      var $873=(($872+16)|0);
      ___gmpn_toom4_sqr($862, $866, $868, $873);
      var $874=$1;
      var $875=$n;
      var $876=((($875)*(3))&-1);
      var $877=(($874+($876<<2))|0);
      var $878=$1;
      var $879=$n;
      var $880=((($879)*(13))&-1);
      var $881=(($878+($880<<2))|0);
      var $882=(($881+8)|0);
      var $883=$n;
      var $884=((($883)+(1))|0);
      var $885=$4;
      var $886=$n;
      var $887=((($886)*(12))&-1);
      var $888=(($885+($887<<2))|0);
      var $889=(($888+16)|0);
      ___gmpn_toom4_sqr($877, $882, $884, $889);
      label = 75; break;
    case 71: 
      var $891=$n;
      var $892=((($891)+(1))|0);
      var $893=(($892)|0) >= 450;
      if ($893) { label = 73; break; } else { label = 72; break; }
    case 72: 
      var $895=$1;
      var $896=$1;
      var $897=$n;
      var $898=((($897)*(11))&-1);
      var $899=(($896+($898<<2))|0);
      var $900=$n;
      var $901=((($900)+(1))|0);
      var $902=$4;
      var $903=$n;
      var $904=((($903)*(12))&-1);
      var $905=(($902+($904<<2))|0);
      var $906=(($905+16)|0);
      ___gmpn_toom6_sqr($895, $899, $901, $906);
      var $907=$1;
      var $908=$n;
      var $909=((($908)*(3))&-1);
      var $910=(($907+($909<<2))|0);
      var $911=$1;
      var $912=$n;
      var $913=((($912)*(13))&-1);
      var $914=(($911+($913<<2))|0);
      var $915=(($914+8)|0);
      var $916=$n;
      var $917=((($916)+(1))|0);
      var $918=$4;
      var $919=$n;
      var $920=((($919)*(12))&-1);
      var $921=(($918+($920<<2))|0);
      var $922=(($921+16)|0);
      ___gmpn_toom6_sqr($910, $915, $917, $922);
      label = 74; break;
    case 73: 
      var $924=$1;
      var $925=$1;
      var $926=$n;
      var $927=((($926)*(11))&-1);
      var $928=(($925+($927<<2))|0);
      var $929=$n;
      var $930=((($929)+(1))|0);
      var $931=$4;
      var $932=$n;
      var $933=((($932)*(12))&-1);
      var $934=(($931+($933<<2))|0);
      var $935=(($934+16)|0);
      ___gmpn_toom8_sqr($924, $928, $930, $935);
      var $936=$1;
      var $937=$n;
      var $938=((($937)*(3))&-1);
      var $939=(($936+($938<<2))|0);
      var $940=$1;
      var $941=$n;
      var $942=((($941)*(13))&-1);
      var $943=(($940+($942<<2))|0);
      var $944=(($943+8)|0);
      var $945=$n;
      var $946=((($945)+(1))|0);
      var $947=$4;
      var $948=$n;
      var $949=((($948)*(12))&-1);
      var $950=(($947+($949<<2))|0);
      var $951=(($950+16)|0);
      ___gmpn_toom8_sqr($939, $944, $946, $951);
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $957=$1;
      var $958=$n;
      var $959=((($958)*(3))&-1);
      var $960=(($957+($959<<2))|0);
      var $961=$n;
      var $962=($961<<1);
      var $963=((($962)+(1))|0);
      var $964=$1;
      var $965=$n;
      ___gmpn_toom_couple_handling($960, $963, $964, 0, $965, 1, 0);
      var $966=$1;
      var $967=$n;
      var $968=((($967)*(13))&-1);
      var $969=(($966+($968<<2))|0);
      var $970=(($969+8)|0);
      var $971=$1;
      var $972=$n;
      var $973=((($972)*(11))&-1);
      var $974=(($971+($973<<2))|0);
      var $975=$2;
      var $976=$n;
      var $977=$s;
      var $978=$1;
      var $979=___gmpn_toom_eval_pm1($970, $974, 7, $975, $976, $977, $978);
      label = 79; break;
    case 79: 
      var $981=$n;
      var $982=((($981)+(1))|0);
      var $983=(($982)|0) >= 120;
      if ($983) { label = 81; break; } else { label = 80; break; }
    case 80: 
      var $985=$1;
      var $986=$1;
      var $987=$n;
      var $988=((($987)*(11))&-1);
      var $989=(($986+($988<<2))|0);
      var $990=$n;
      var $991=((($990)+(1))|0);
      var $992=$4;
      var $993=$n;
      var $994=((($993)*(12))&-1);
      var $995=(($992+($994<<2))|0);
      var $996=(($995+16)|0);
      ___gmpn_toom2_sqr($985, $989, $991, $996);
      var $997=$1;
      var $998=$n;
      var $999=((($998)*(7))&-1);
      var $1000=(($997+($999<<2))|0);
      var $1001=$1;
      var $1002=$n;
      var $1003=((($1002)*(13))&-1);
      var $1004=(($1001+($1003<<2))|0);
      var $1005=(($1004+8)|0);
      var $1006=$n;
      var $1007=((($1006)+(1))|0);
      var $1008=$4;
      var $1009=$n;
      var $1010=((($1009)*(12))&-1);
      var $1011=(($1008+($1010<<2))|0);
      var $1012=(($1011+16)|0);
      ___gmpn_toom2_sqr($1000, $1005, $1007, $1012);
      label = 91; break;
    case 81: 
      var $1014=$n;
      var $1015=((($1014)+(1))|0);
      var $1016=(($1015)|0) >= 400;
      if ($1016) { label = 83; break; } else { label = 82; break; }
    case 82: 
      var $1018=$1;
      var $1019=$1;
      var $1020=$n;
      var $1021=((($1020)*(11))&-1);
      var $1022=(($1019+($1021<<2))|0);
      var $1023=$n;
      var $1024=((($1023)+(1))|0);
      var $1025=$4;
      var $1026=$n;
      var $1027=((($1026)*(12))&-1);
      var $1028=(($1025+($1027<<2))|0);
      var $1029=(($1028+16)|0);
      ___gmpn_toom3_sqr($1018, $1022, $1024, $1029);
      var $1030=$1;
      var $1031=$n;
      var $1032=((($1031)*(7))&-1);
      var $1033=(($1030+($1032<<2))|0);
      var $1034=$1;
      var $1035=$n;
      var $1036=((($1035)*(13))&-1);
      var $1037=(($1034+($1036<<2))|0);
      var $1038=(($1037+8)|0);
      var $1039=$n;
      var $1040=((($1039)+(1))|0);
      var $1041=$4;
      var $1042=$n;
      var $1043=((($1042)*(12))&-1);
      var $1044=(($1041+($1043<<2))|0);
      var $1045=(($1044+16)|0);
      ___gmpn_toom3_sqr($1033, $1038, $1040, $1045);
      label = 90; break;
    case 83: 
      var $1047=$n;
      var $1048=((($1047)+(1))|0);
      var $1049=(($1048)|0) >= 350;
      if ($1049) { label = 85; break; } else { label = 84; break; }
    case 84: 
      var $1051=$1;
      var $1052=$1;
      var $1053=$n;
      var $1054=((($1053)*(11))&-1);
      var $1055=(($1052+($1054<<2))|0);
      var $1056=$n;
      var $1057=((($1056)+(1))|0);
      var $1058=$4;
      var $1059=$n;
      var $1060=((($1059)*(12))&-1);
      var $1061=(($1058+($1060<<2))|0);
      var $1062=(($1061+16)|0);
      ___gmpn_toom4_sqr($1051, $1055, $1057, $1062);
      var $1063=$1;
      var $1064=$n;
      var $1065=((($1064)*(7))&-1);
      var $1066=(($1063+($1065<<2))|0);
      var $1067=$1;
      var $1068=$n;
      var $1069=((($1068)*(13))&-1);
      var $1070=(($1067+($1069<<2))|0);
      var $1071=(($1070+8)|0);
      var $1072=$n;
      var $1073=((($1072)+(1))|0);
      var $1074=$4;
      var $1075=$n;
      var $1076=((($1075)*(12))&-1);
      var $1077=(($1074+($1076<<2))|0);
      var $1078=(($1077+16)|0);
      ___gmpn_toom4_sqr($1066, $1071, $1073, $1078);
      label = 89; break;
    case 85: 
      var $1080=$n;
      var $1081=((($1080)+(1))|0);
      var $1082=(($1081)|0) >= 450;
      if ($1082) { label = 87; break; } else { label = 86; break; }
    case 86: 
      var $1084=$1;
      var $1085=$1;
      var $1086=$n;
      var $1087=((($1086)*(11))&-1);
      var $1088=(($1085+($1087<<2))|0);
      var $1089=$n;
      var $1090=((($1089)+(1))|0);
      var $1091=$4;
      var $1092=$n;
      var $1093=((($1092)*(12))&-1);
      var $1094=(($1091+($1093<<2))|0);
      var $1095=(($1094+16)|0);
      ___gmpn_toom6_sqr($1084, $1088, $1090, $1095);
      var $1096=$1;
      var $1097=$n;
      var $1098=((($1097)*(7))&-1);
      var $1099=(($1096+($1098<<2))|0);
      var $1100=$1;
      var $1101=$n;
      var $1102=((($1101)*(13))&-1);
      var $1103=(($1100+($1102<<2))|0);
      var $1104=(($1103+8)|0);
      var $1105=$n;
      var $1106=((($1105)+(1))|0);
      var $1107=$4;
      var $1108=$n;
      var $1109=((($1108)*(12))&-1);
      var $1110=(($1107+($1109<<2))|0);
      var $1111=(($1110+16)|0);
      ___gmpn_toom6_sqr($1099, $1104, $1106, $1111);
      label = 88; break;
    case 87: 
      var $1113=$1;
      var $1114=$1;
      var $1115=$n;
      var $1116=((($1115)*(11))&-1);
      var $1117=(($1114+($1116<<2))|0);
      var $1118=$n;
      var $1119=((($1118)+(1))|0);
      var $1120=$4;
      var $1121=$n;
      var $1122=((($1121)*(12))&-1);
      var $1123=(($1120+($1122<<2))|0);
      var $1124=(($1123+16)|0);
      ___gmpn_toom8_sqr($1113, $1117, $1119, $1124);
      var $1125=$1;
      var $1126=$n;
      var $1127=((($1126)*(7))&-1);
      var $1128=(($1125+($1127<<2))|0);
      var $1129=$1;
      var $1130=$n;
      var $1131=((($1130)*(13))&-1);
      var $1132=(($1129+($1131<<2))|0);
      var $1133=(($1132+8)|0);
      var $1134=$n;
      var $1135=((($1134)+(1))|0);
      var $1136=$4;
      var $1137=$n;
      var $1138=((($1137)*(12))&-1);
      var $1139=(($1136+($1138<<2))|0);
      var $1140=(($1139+16)|0);
      ___gmpn_toom8_sqr($1128, $1133, $1135, $1140);
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $1146=$1;
      var $1147=$n;
      var $1148=((($1147)*(7))&-1);
      var $1149=(($1146+($1148<<2))|0);
      var $1150=$n;
      var $1151=($1150<<1);
      var $1152=((($1151)+(1))|0);
      var $1153=$1;
      var $1154=$n;
      ___gmpn_toom_couple_handling($1149, $1152, $1153, 0, $1154, 0, 0);
      var $1155=$1;
      var $1156=$n;
      var $1157=((($1156)*(13))&-1);
      var $1158=(($1155+($1157<<2))|0);
      var $1159=(($1158+8)|0);
      var $1160=$1;
      var $1161=$n;
      var $1162=((($1161)*(11))&-1);
      var $1163=(($1160+($1162<<2))|0);
      var $1164=$2;
      var $1165=$n;
      var $1166=$s;
      var $1167=$1;
      var $1168=___gmpn_toom_eval_pm2exp($1159, $1163, 7, $1164, $1165, $1166, 2, $1167);
      label = 93; break;
    case 93: 
      var $1170=$n;
      var $1171=((($1170)+(1))|0);
      var $1172=(($1171)|0) >= 120;
      if ($1172) { label = 95; break; } else { label = 94; break; }
    case 94: 
      var $1174=$1;
      var $1175=$1;
      var $1176=$n;
      var $1177=((($1176)*(11))&-1);
      var $1178=(($1175+($1177<<2))|0);
      var $1179=$n;
      var $1180=((($1179)+(1))|0);
      var $1181=$4;
      var $1182=$n;
      var $1183=((($1182)*(12))&-1);
      var $1184=(($1181+($1183<<2))|0);
      var $1185=(($1184+16)|0);
      ___gmpn_toom2_sqr($1174, $1178, $1180, $1185);
      var $1186=$1;
      var $1187=$n;
      var $1188=((($1187)*(11))&-1);
      var $1189=(($1186+($1188<<2))|0);
      var $1190=$1;
      var $1191=$n;
      var $1192=((($1191)*(13))&-1);
      var $1193=(($1190+($1192<<2))|0);
      var $1194=(($1193+8)|0);
      var $1195=$n;
      var $1196=((($1195)+(1))|0);
      var $1197=$4;
      var $1198=$n;
      var $1199=((($1198)*(12))&-1);
      var $1200=(($1197+($1199<<2))|0);
      var $1201=(($1200+16)|0);
      ___gmpn_toom2_sqr($1189, $1194, $1196, $1201);
      label = 105; break;
    case 95: 
      var $1203=$n;
      var $1204=((($1203)+(1))|0);
      var $1205=(($1204)|0) >= 400;
      if ($1205) { label = 97; break; } else { label = 96; break; }
    case 96: 
      var $1207=$1;
      var $1208=$1;
      var $1209=$n;
      var $1210=((($1209)*(11))&-1);
      var $1211=(($1208+($1210<<2))|0);
      var $1212=$n;
      var $1213=((($1212)+(1))|0);
      var $1214=$4;
      var $1215=$n;
      var $1216=((($1215)*(12))&-1);
      var $1217=(($1214+($1216<<2))|0);
      var $1218=(($1217+16)|0);
      ___gmpn_toom3_sqr($1207, $1211, $1213, $1218);
      var $1219=$1;
      var $1220=$n;
      var $1221=((($1220)*(11))&-1);
      var $1222=(($1219+($1221<<2))|0);
      var $1223=$1;
      var $1224=$n;
      var $1225=((($1224)*(13))&-1);
      var $1226=(($1223+($1225<<2))|0);
      var $1227=(($1226+8)|0);
      var $1228=$n;
      var $1229=((($1228)+(1))|0);
      var $1230=$4;
      var $1231=$n;
      var $1232=((($1231)*(12))&-1);
      var $1233=(($1230+($1232<<2))|0);
      var $1234=(($1233+16)|0);
      ___gmpn_toom3_sqr($1222, $1227, $1229, $1234);
      label = 104; break;
    case 97: 
      var $1236=$n;
      var $1237=((($1236)+(1))|0);
      var $1238=(($1237)|0) >= 350;
      if ($1238) { label = 99; break; } else { label = 98; break; }
    case 98: 
      var $1240=$1;
      var $1241=$1;
      var $1242=$n;
      var $1243=((($1242)*(11))&-1);
      var $1244=(($1241+($1243<<2))|0);
      var $1245=$n;
      var $1246=((($1245)+(1))|0);
      var $1247=$4;
      var $1248=$n;
      var $1249=((($1248)*(12))&-1);
      var $1250=(($1247+($1249<<2))|0);
      var $1251=(($1250+16)|0);
      ___gmpn_toom4_sqr($1240, $1244, $1246, $1251);
      var $1252=$1;
      var $1253=$n;
      var $1254=((($1253)*(11))&-1);
      var $1255=(($1252+($1254<<2))|0);
      var $1256=$1;
      var $1257=$n;
      var $1258=((($1257)*(13))&-1);
      var $1259=(($1256+($1258<<2))|0);
      var $1260=(($1259+8)|0);
      var $1261=$n;
      var $1262=((($1261)+(1))|0);
      var $1263=$4;
      var $1264=$n;
      var $1265=((($1264)*(12))&-1);
      var $1266=(($1263+($1265<<2))|0);
      var $1267=(($1266+16)|0);
      ___gmpn_toom4_sqr($1255, $1260, $1262, $1267);
      label = 103; break;
    case 99: 
      var $1269=$n;
      var $1270=((($1269)+(1))|0);
      var $1271=(($1270)|0) >= 450;
      if ($1271) { label = 101; break; } else { label = 100; break; }
    case 100: 
      var $1273=$1;
      var $1274=$1;
      var $1275=$n;
      var $1276=((($1275)*(11))&-1);
      var $1277=(($1274+($1276<<2))|0);
      var $1278=$n;
      var $1279=((($1278)+(1))|0);
      var $1280=$4;
      var $1281=$n;
      var $1282=((($1281)*(12))&-1);
      var $1283=(($1280+($1282<<2))|0);
      var $1284=(($1283+16)|0);
      ___gmpn_toom6_sqr($1273, $1277, $1279, $1284);
      var $1285=$1;
      var $1286=$n;
      var $1287=((($1286)*(11))&-1);
      var $1288=(($1285+($1287<<2))|0);
      var $1289=$1;
      var $1290=$n;
      var $1291=((($1290)*(13))&-1);
      var $1292=(($1289+($1291<<2))|0);
      var $1293=(($1292+8)|0);
      var $1294=$n;
      var $1295=((($1294)+(1))|0);
      var $1296=$4;
      var $1297=$n;
      var $1298=((($1297)*(12))&-1);
      var $1299=(($1296+($1298<<2))|0);
      var $1300=(($1299+16)|0);
      ___gmpn_toom6_sqr($1288, $1293, $1295, $1300);
      label = 102; break;
    case 101: 
      var $1302=$1;
      var $1303=$1;
      var $1304=$n;
      var $1305=((($1304)*(11))&-1);
      var $1306=(($1303+($1305<<2))|0);
      var $1307=$n;
      var $1308=((($1307)+(1))|0);
      var $1309=$4;
      var $1310=$n;
      var $1311=((($1310)*(12))&-1);
      var $1312=(($1309+($1311<<2))|0);
      var $1313=(($1312+16)|0);
      ___gmpn_toom8_sqr($1302, $1306, $1308, $1313);
      var $1314=$1;
      var $1315=$n;
      var $1316=((($1315)*(11))&-1);
      var $1317=(($1314+($1316<<2))|0);
      var $1318=$1;
      var $1319=$n;
      var $1320=((($1319)*(13))&-1);
      var $1321=(($1318+($1320<<2))|0);
      var $1322=(($1321+8)|0);
      var $1323=$n;
      var $1324=((($1323)+(1))|0);
      var $1325=$4;
      var $1326=$n;
      var $1327=((($1326)*(12))&-1);
      var $1328=(($1325+($1327<<2))|0);
      var $1329=(($1328+16)|0);
      ___gmpn_toom8_sqr($1317, $1322, $1324, $1329);
      label = 102; break;
    case 102: 
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      var $1335=$1;
      var $1336=$n;
      var $1337=((($1336)*(11))&-1);
      var $1338=(($1335+($1337<<2))|0);
      var $1339=$n;
      var $1340=($1339<<1);
      var $1341=((($1340)+(1))|0);
      var $1342=$1;
      var $1343=$n;
      ___gmpn_toom_couple_handling($1338, $1341, $1342, 0, $1343, 2, 4);
      label = 107; break;
    case 107: 
      var $1345=$n;
      var $1346=(($1345)|0) >= 120;
      if ($1346) { label = 109; break; } else { label = 108; break; }
    case 108: 
      var $1348=$1;
      var $1349=$2;
      var $1350=$n;
      var $1351=$4;
      var $1352=$n;
      var $1353=((($1352)*(12))&-1);
      var $1354=(($1351+($1353<<2))|0);
      var $1355=(($1354+16)|0);
      ___gmpn_toom2_sqr($1348, $1349, $1350, $1355);
      label = 119; break;
    case 109: 
      var $1357=$n;
      var $1358=(($1357)|0) >= 400;
      if ($1358) { label = 111; break; } else { label = 110; break; }
    case 110: 
      var $1360=$1;
      var $1361=$2;
      var $1362=$n;
      var $1363=$4;
      var $1364=$n;
      var $1365=((($1364)*(12))&-1);
      var $1366=(($1363+($1365<<2))|0);
      var $1367=(($1366+16)|0);
      ___gmpn_toom3_sqr($1360, $1361, $1362, $1367);
      label = 118; break;
    case 111: 
      var $1369=$n;
      var $1370=(($1369)|0) >= 350;
      if ($1370) { label = 113; break; } else { label = 112; break; }
    case 112: 
      var $1372=$1;
      var $1373=$2;
      var $1374=$n;
      var $1375=$4;
      var $1376=$n;
      var $1377=((($1376)*(12))&-1);
      var $1378=(($1375+($1377<<2))|0);
      var $1379=(($1378+16)|0);
      ___gmpn_toom4_sqr($1372, $1373, $1374, $1379);
      label = 117; break;
    case 113: 
      var $1381=$n;
      var $1382=(($1381)|0) >= 450;
      if ($1382) { label = 115; break; } else { label = 114; break; }
    case 114: 
      var $1384=$1;
      var $1385=$2;
      var $1386=$n;
      var $1387=$4;
      var $1388=$n;
      var $1389=((($1388)*(12))&-1);
      var $1390=(($1387+($1389<<2))|0);
      var $1391=(($1390+16)|0);
      ___gmpn_toom6_sqr($1384, $1385, $1386, $1391);
      label = 116; break;
    case 115: 
      var $1393=$1;
      var $1394=$2;
      var $1395=$n;
      var $1396=$4;
      var $1397=$n;
      var $1398=((($1397)*(12))&-1);
      var $1399=(($1396+($1398<<2))|0);
      var $1400=(($1399+16)|0);
      ___gmpn_toom8_sqr($1393, $1394, $1395, $1400);
      label = 116; break;
    case 116: 
      label = 117; break;
    case 117: 
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      var $1406=$1;
      var $1407=$4;
      var $1408=$n;
      var $1409=((($1408)*(9))&-1);
      var $1410=(($1407+($1409<<2))|0);
      var $1411=(($1410+12)|0);
      var $1412=$4;
      var $1413=$n;
      var $1414=((($1413)*(6))&-1);
      var $1415=(($1412+($1414<<2))|0);
      var $1416=(($1415+8)|0);
      var $1417=$4;
      var $1418=$n;
      var $1419=((($1418)*(3))&-1);
      var $1420=(($1417+($1419<<2))|0);
      var $1421=(($1420+4)|0);
      var $1422=$4;
      var $1423=$n;
      var $1424=$s;
      var $1425=($1424<<1);
      var $1426=$4;
      var $1427=$n;
      var $1428=((($1427)*(12))&-1);
      var $1429=(($1426+($1428<<2))|0);
      var $1430=(($1429+16)|0);
      ___gmpn_toom_interpolate_16pts($1406, $1411, $1416, $1421, $1422, $1423, $1425, 0, $1430);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom8_sqr["X"]=1;

function ___gmpn_toom_couple_handling($pp, $n, $np, $nsign, $off, $ps, $ns) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      $1=$pp;
      $2=$n;
      $3=$np;
      $4=$nsign;
      $5=$off;
      $6=$ps;
      $7=$ns;
      var $8=$4;
      var $9=(($8)|0)!=0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $11=$3;
      var $12=$1;
      var $13=$3;
      var $14=$2;
      var $15=___gmpn_sub_n($11, $12, $13, $14);
      var $16=$3;
      var $17=$3;
      var $18=$2;
      var $19=___gmpn_rshift($16, $17, $18, 1);
      label = 5; break;
    case 4: 
      var $21=$3;
      var $22=$1;
      var $23=$3;
      var $24=$2;
      var $25=___gmpn_add_n($21, $22, $23, $24);
      var $26=$3;
      var $27=$3;
      var $28=$2;
      var $29=___gmpn_rshift($26, $27, $28, 1);
      label = 5; break;
    case 5: 
      var $31=$1;
      var $32=$1;
      var $33=$3;
      var $34=$2;
      var $35=___gmpn_sub_n($31, $32, $33, $34);
      var $36=$6;
      var $37=(($36)|0) > 0;
      if ($37) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $39=$1;
      var $40=$1;
      var $41=$2;
      var $42=$6;
      var $43=___gmpn_rshift($39, $40, $41, $42);
      label = 7; break;
    case 7: 
      var $45=$7;
      var $46=(($45)|0) > 0;
      if ($46) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $48=$3;
      var $49=$3;
      var $50=$2;
      var $51=$7;
      var $52=___gmpn_rshift($48, $49, $50, $51);
      label = 9; break;
    case 9: 
      var $54=$1;
      var $55=$5;
      var $56=(($54+($55<<2))|0);
      var $57=$1;
      var $58=$5;
      var $59=(($57+($58<<2))|0);
      var $60=$3;
      var $61=$2;
      var $62=$5;
      var $63=((($61)-($62))|0);
      var $64=___gmpn_add_n($56, $59, $60, $63);
      var $65=$2;
      var $66=$1;
      var $67=(($66+($65<<2))|0);
      HEAP32[(($67)>>2)]=$64;
      var $68=$1;
      var $69=$2;
      var $70=(($68+($69<<2))|0);
      var $71=$3;
      var $72=$2;
      var $73=(($71+($72<<2))|0);
      var $74=$5;
      var $75=(((-$74))|0);
      var $76=(($73+($75<<2))|0);
      var $77=$5;
      var $78=$2;
      var $79=$1;
      var $80=(($79+($78<<2))|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=___gmpn_add_1($70, $76, $77, $81);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_couple_handling["X"]=1;


function _mpn_zero_p313($ap, $n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $i;
      $2=$ap;
      $3=$n;
      var $4=$3;
      var $5=((($4)-(1))|0);
      $i=$5;
      label = 3; break;
    case 3: 
      var $7=$i;
      var $8=(($7)|0) >= 0;
      if ($8) { label = 4; break; } else { label = 8; break; }
    case 4: 
      var $10=$i;
      var $11=$2;
      var $12=(($11+($10<<2))|0);
      var $13=HEAP32[(($12)>>2)];
      var $14=(($13)|0)!=0;
      if ($14) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $1=0;
      label = 9; break;
    case 6: 
      label = 7; break;
    case 7: 
      var $18=$i;
      var $19=((($18)-(1))|0);
      $i=$19;
      label = 3; break;
    case 8: 
      $1=1;
      label = 9; break;
    case 9: 
      var $22=$1;

      return $22;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_toom2_sqr($pp, $ap, $an, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $__gmpn_cpuvec_initialized;
      var $n;
      var $s;
      var $cy;
      var $cy2;
      var $asm1;
      var $__dst;
      var $__n;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__x3;
      var $__p4;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$scratch;
      $__gmpn_cpuvec_initialized=1;
      var $5=$3;
      var $6=$5 >> 1;
      $s=$6;
      var $7=$3;
      var $8=$s;
      var $9=((($7)-($8))|0);
      $n=$9;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $12=$1;
      $asm1=$12;
      var $13=$s;
      var $14=$n;
      var $15=(($13)|0)==(($14)|0);
      if ($15) { label = 5; break; } else { label = 9; break; }
    case 5: 
      var $17=$2;
      var $18=$2;
      var $19=$n;
      var $20=(($18+($19<<2))|0);
      var $21=$n;
      var $22=___gmpn_cmp($17, $20, $21);
      var $23=(($22)|0) < 0;
      if ($23) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $25=$asm1;
      var $26=$2;
      var $27=$n;
      var $28=(($26+($27<<2))|0);
      var $29=$2;
      var $30=$n;
      var $31=___gmpn_sub_n($25, $28, $29, $30);
      label = 8; break;
    case 7: 
      var $33=$asm1;
      var $34=$2;
      var $35=$2;
      var $36=$n;
      var $37=(($35+($36<<2))|0);
      var $38=$n;
      var $39=___gmpn_sub_n($33, $34, $37, $38);
      label = 8; break;
    case 8: 
      label = 23; break;
    case 9: 
      var $42=$2;
      var $43=$s;
      var $44=(($42+($43<<2))|0);
      var $45=$n;
      var $46=$s;
      var $47=((($45)-($46))|0);
      var $48=_mpn_zero_p313($44, $47);
      var $49=(($48)|0)!=0;
      if ($49) { label = 10; break; } else { label = 21; break; }
    case 10: 
      var $51=$2;
      var $52=$2;
      var $53=$n;
      var $54=(($52+($53<<2))|0);
      var $55=$s;
      var $56=___gmpn_cmp($51, $54, $55);
      var $57=(($56)|0) < 0;
      if ($57) { label = 11; break; } else { label = 21; break; }
    case 11: 
      var $59=$asm1;
      var $60=$2;
      var $61=$n;
      var $62=(($60+($61<<2))|0);
      var $63=$2;
      var $64=$s;
      var $65=___gmpn_sub_n($59, $62, $63, $64);
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $69=$n;
      var $70=$s;
      var $71=((($69)-($70))|0);
      var $72=(($71)|0)!=0;
      if ($72) { label = 15; break; } else { label = 19; break; }
    case 15: 
      var $74=$asm1;
      var $75=$s;
      var $76=(($74+($75<<2))|0);
      $__dst=$76;
      var $77=$n;
      var $78=$s;
      var $79=((($77)-($78))|0);
      $__n=$79;
      label = 16; break;
    case 16: 
      var $81=$__dst;
      var $82=(($81+4)|0);
      $__dst=$82;
      HEAP32[(($81)>>2)]=0;
      label = 17; break;
    case 17: 
      var $84=$__n;
      var $85=((($84)-(1))|0);
      $__n=$85;
      var $86=(($85)|0)!=0;
      if ($86) { label = 16; break; } else { label = 18; break; }
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 22; break;
    case 21: 
      var $91=$asm1;
      var $92=$2;
      var $93=$n;
      var $94=$2;
      var $95=$n;
      var $96=(($94+($95<<2))|0);
      var $97=$s;
      var $98=___gmpn_sub($91, $92, $93, $96, $97);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $102=$n;
      var $103=(($102)|0) >= 50;
      if ($103) { label = 26; break; } else { label = 25; break; }
    case 25: 
      var $105=$4;
      var $106=$asm1;
      var $107=$n;
      ___gmpn_sqr_basecase($105, $106, $107);
      label = 27; break;
    case 26: 
      var $109=$4;
      var $110=$asm1;
      var $111=$n;
      var $112=$4;
      var $113=$n;
      var $114=($113<<1);
      var $115=(($112+($114<<2))|0);
      ___gmpn_toom2_sqr($109, $110, $111, $115);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $119=$s;
      var $120=(($119)|0) >= 50;
      if ($120) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $122=$1;
      var $123=$n;
      var $124=($123<<1);
      var $125=(($122+($124<<2))|0);
      var $126=$2;
      var $127=$n;
      var $128=(($126+($127<<2))|0);
      var $129=$s;
      ___gmpn_sqr_basecase($125, $128, $129);
      label = 32; break;
    case 31: 
      var $131=$1;
      var $132=$n;
      var $133=($132<<1);
      var $134=(($131+($133<<2))|0);
      var $135=$2;
      var $136=$n;
      var $137=(($135+($136<<2))|0);
      var $138=$s;
      var $139=$4;
      var $140=$n;
      var $141=($140<<1);
      var $142=(($139+($141<<2))|0);
      ___gmpn_toom2_sqr($134, $137, $138, $142);
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $146=$n;
      var $147=(($146)|0) >= 50;
      if ($147) { label = 36; break; } else { label = 35; break; }
    case 35: 
      var $149=$1;
      var $150=$2;
      var $151=$n;
      ___gmpn_sqr_basecase($149, $150, $151);
      label = 37; break;
    case 36: 
      var $153=$1;
      var $154=$2;
      var $155=$n;
      var $156=$4;
      var $157=$n;
      var $158=($157<<1);
      var $159=(($156+($158<<2))|0);
      ___gmpn_toom2_sqr($153, $154, $155, $159);
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $162=$1;
      var $163=$n;
      var $164=($163<<1);
      var $165=(($162+($164<<2))|0);
      var $166=$1;
      var $167=$n;
      var $168=(($166+($167<<2))|0);
      var $169=$1;
      var $170=$n;
      var $171=($170<<1);
      var $172=(($169+($171<<2))|0);
      var $173=$n;
      var $174=___gmpn_add_n($165, $168, $172, $173);
      $cy=$174;
      var $175=$cy;
      var $176=$1;
      var $177=$n;
      var $178=(($176+($177<<2))|0);
      var $179=$1;
      var $180=$n;
      var $181=($180<<1);
      var $182=(($179+($181<<2))|0);
      var $183=$1;
      var $184=$n;
      var $185=___gmpn_add_n($178, $182, $183, $184);
      var $186=((($175)+($185))|0);
      $cy2=$186;
      var $187=$1;
      var $188=$n;
      var $189=($188<<1);
      var $190=(($187+($189<<2))|0);
      var $191=$1;
      var $192=$n;
      var $193=($192<<1);
      var $194=(($191+($193<<2))|0);
      var $195=$n;
      var $196=$1;
      var $197=$n;
      var $198=($197<<1);
      var $199=(($196+($198<<2))|0);
      var $200=$n;
      var $201=(($199+($200<<2))|0);
      var $202=$s;
      var $203=$s;
      var $204=((($202)+($203))|0);
      var $205=$n;
      var $206=((($204)-($205))|0);
      var $207=___gmpn_add($190, $194, $195, $201, $206);
      var $208=$cy;
      var $209=((($208)+($207))|0);
      $cy=$209;
      var $210=$1;
      var $211=$n;
      var $212=(($210+($211<<2))|0);
      var $213=$1;
      var $214=$n;
      var $215=(($213+($214<<2))|0);
      var $216=$4;
      var $217=$n;
      var $218=($217<<1);
      var $219=___gmpn_sub_n($212, $215, $216, $218);
      var $220=$cy;
      var $221=((($220)-($219))|0);
      $cy=$221;
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $227=$1;
      var $228=$n;
      var $229=($228<<1);
      var $230=(($227+($229<<2))|0);
      $__p=$230;
      var $231=$__p;
      var $232=HEAP32[(($231)>>2)];
      var $233=$cy2;
      var $234=((($232)+($233))|0);
      $__x=$234;
      var $235=$__x;
      var $236=$__p;
      HEAP32[(($236)>>2)]=$235;
      var $237=$__x;
      var $238=$cy2;
      var $239=(($237)>>>0) < (($238)>>>0);
      if ($239) { label = 44; break; } else { label = 48; break; }
    case 44: 
      label = 45; break;
    case 45: 
      var $242=$__p;
      var $243=(($242+4)|0);
      $__p=$243;
      var $244=HEAP32[(($243)>>2)];
      var $245=((($244)+(1))|0);
      HEAP32[(($243)>>2)]=$245;
      var $246=(($245)|0)==0;
      if ($246) { label = 46; break; } else { label = 47; break; }
    case 46: 
      label = 45; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $251=$cy;
      var $252=(($251)>>>0) <= 2;
      var $253=(($252)&1);
      var $254=(($253)|0)!=0;
      var $255=(($254)&1);
      var $256=($255);
      var $257=(($256)|0)!=0;
      if ($257) { label = 50; break; } else { label = 58; break; }
    case 50: 
      label = 51; break;
    case 51: 
      var $260=$1;
      var $261=$n;
      var $262=((($261)*(3))&-1);
      var $263=(($260+($262<<2))|0);
      $__p2=$263;
      var $264=$__p2;
      var $265=HEAP32[(($264)>>2)];
      var $266=$cy;
      var $267=((($265)+($266))|0);
      $__x1=$267;
      var $268=$__x1;
      var $269=$__p2;
      HEAP32[(($269)>>2)]=$268;
      var $270=$__x1;
      var $271=$cy;
      var $272=(($270)>>>0) < (($271)>>>0);
      if ($272) { label = 52; break; } else { label = 56; break; }
    case 52: 
      label = 53; break;
    case 53: 
      var $275=$__p2;
      var $276=(($275+4)|0);
      $__p2=$276;
      var $277=HEAP32[(($276)>>2)];
      var $278=((($277)+(1))|0);
      HEAP32[(($276)>>2)]=$278;
      var $279=(($278)|0)==0;
      if ($279) { label = 54; break; } else { label = 55; break; }
    case 54: 
      label = 53; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 64; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $286=$1;
      var $287=$n;
      var $288=((($287)*(3))&-1);
      var $289=(($286+($288<<2))|0);
      $__p4=$289;
      label = 60; break;
    case 60: 
      var $291=$__p4;
      var $292=(($291+4)|0);
      $__p4=$292;
      var $293=HEAP32[(($291)>>2)];
      var $294=((($293)-(1))|0);
      HEAP32[(($291)>>2)]=$294;
      var $295=(($293)|0)==0;
      if ($295) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 60; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom2_sqr["X"]=1;

function ___gmpn_toom3_sqr($pp, $ap, $an, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $__gmpn_cpuvec_initialized;
      var $n;
      var $s;
      var $cy;
      var $vinf0;
      var $gp;
      var $as1;
      var $asm1;
      var $as2;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$scratch;
      $__gmpn_cpuvec_initialized=1;
      var $5=$3;
      var $6=((($5)+(2))|0);
      var $7=Math.floor(((($6)>>>0))/(3));
      $n=$7;
      var $8=$3;
      var $9=$n;
      var $10=($9<<1);
      var $11=((($8)-($10))|0);
      $s=$11;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $14=$4;
      var $15=$n;
      var $16=($15<<2);
      var $17=(($14+($16<<2))|0);
      var $18=(($17+16)|0);
      $as1=$18;
      var $19=$4;
      var $20=$n;
      var $21=($20<<1);
      var $22=(($19+($21<<2))|0);
      var $23=(($22+8)|0);
      $asm1=$23;
      var $24=$1;
      var $25=$n;
      var $26=(($24+($25<<2))|0);
      var $27=(($26+4)|0);
      $as2=$27;
      var $28=$4;
      $gp=$28;
      var $29=$gp;
      var $30=$2;
      var $31=$n;
      var $32=$2;
      var $33=$n;
      var $34=($33<<1);
      var $35=(($32+($34<<2))|0);
      var $36=$s;
      var $37=___gmpn_add($29, $30, $31, $35, $36);
      $cy=$37;
      var $38=$cy;
      var $39=$as1;
      var $40=$gp;
      var $41=$2;
      var $42=$n;
      var $43=(($41+($42<<2))|0);
      var $44=$n;
      var $45=___gmpn_add_n($39, $40, $43, $44);
      var $46=((($38)+($45))|0);
      var $47=$n;
      var $48=$as1;
      var $49=(($48+($47<<2))|0);
      HEAP32[(($49)>>2)]=$46;
      var $50=$cy;
      var $51=(($50)|0)==0;
      if ($51) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $53=$gp;
      var $54=$2;
      var $55=$n;
      var $56=(($54+($55<<2))|0);
      var $57=$n;
      var $58=___gmpn_cmp($53, $56, $57);
      var $59=(($58)|0) < 0;
      if ($59) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $61=$asm1;
      var $62=$2;
      var $63=$n;
      var $64=(($62+($63<<2))|0);
      var $65=$gp;
      var $66=$n;
      var $67=___gmpn_sub_n($61, $64, $65, $66);
      var $68=$n;
      var $69=$asm1;
      var $70=(($69+($68<<2))|0);
      HEAP32[(($70)>>2)]=0;
      label = 8; break;
    case 7: 
      var $72=$asm1;
      var $73=$gp;
      var $74=$2;
      var $75=$n;
      var $76=(($74+($75<<2))|0);
      var $77=$n;
      var $78=___gmpn_sub_n($72, $73, $76, $77);
      var $79=$cy;
      var $80=((($79)-($78))|0);
      $cy=$80;
      var $81=$cy;
      var $82=$n;
      var $83=$asm1;
      var $84=(($83+($82<<2))|0);
      HEAP32[(($84)>>2)]=$81;
      label = 8; break;
    case 8: 
      var $86=$as2;
      var $87=$2;
      var $88=$n;
      var $89=($88<<1);
      var $90=(($87+($89<<2))|0);
      var $91=$as1;
      var $92=$s;
      var $93=___gmpn_add_n($86, $90, $91, $92);
      $cy=$93;
      var $94=$s;
      var $95=$n;
      var $96=(($94)|0)!=(($95)|0);
      if ($96) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $98=$as2;
      var $99=$s;
      var $100=(($98+($99<<2))|0);
      var $101=$as1;
      var $102=$s;
      var $103=(($101+($102<<2))|0);
      var $104=$n;
      var $105=$s;
      var $106=((($104)-($105))|0);
      var $107=$cy;
      var $108=___gmpn_add_1($100, $103, $106, $107);
      $cy=$108;
      label = 10; break;
    case 10: 
      var $110=$n;
      var $111=$as1;
      var $112=(($111+($110<<2))|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$cy;
      var $115=((($114)+($113))|0);
      $cy=$115;
      var $116=$cy;
      var $117=($116<<1);
      var $118=$as2;
      var $119=$as2;
      var $120=$n;
      var $121=___gmpn_lshift($118, $119, $120, 1);
      var $122=((($117)+($121))|0);
      $cy=$122;
      var $123=$as2;
      var $124=$as2;
      var $125=$2;
      var $126=$n;
      var $127=___gmpn_sub_n($123, $124, $125, $126);
      var $128=$cy;
      var $129=((($128)-($127))|0);
      $cy=$129;
      var $130=$cy;
      var $131=$n;
      var $132=$as2;
      var $133=(($132+($131<<2))|0);
      HEAP32[(($133)>>2)]=$130;
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $139=$n;
      var $140=((($139)+(1))|0);
      var $141=(($140)|0) >= 50;
      if ($141) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $143=$4;
      var $144=$asm1;
      var $145=$n;
      var $146=((($145)+(1))|0);
      ___gmpn_sqr_basecase($143, $144, $146);
      label = 21; break;
    case 17: 
      var $148=$n;
      var $149=((($148)+(1))|0);
      var $150=(($149)|0) >= 120;
      if ($150) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $152=$4;
      var $153=$asm1;
      var $154=$n;
      var $155=((($154)+(1))|0);
      var $156=$4;
      var $157=$n;
      var $158=((($157)*(5))&-1);
      var $159=(($156+($158<<2))|0);
      var $160=(($159+20)|0);
      ___gmpn_toom2_sqr($152, $153, $155, $160);
      label = 20; break;
    case 19: 
      var $162=$4;
      var $163=$asm1;
      var $164=$n;
      var $165=((($164)+(1))|0);
      var $166=$4;
      var $167=$n;
      var $168=((($167)*(5))&-1);
      var $169=(($166+($168<<2))|0);
      var $170=(($169+20)|0);
      ___gmpn_toom3_sqr($162, $163, $165, $170);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $175=$n;
      var $176=((($175)+(1))|0);
      var $177=(($176)|0) >= 50;
      if ($177) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $179=$4;
      var $180=$n;
      var $181=($180<<1);
      var $182=(($179+($181<<2))|0);
      var $183=(($182+4)|0);
      var $184=$as2;
      var $185=$n;
      var $186=((($185)+(1))|0);
      ___gmpn_sqr_basecase($183, $184, $186);
      label = 29; break;
    case 25: 
      var $188=$n;
      var $189=((($188)+(1))|0);
      var $190=(($189)|0) >= 120;
      if ($190) { label = 27; break; } else { label = 26; break; }
    case 26: 
      var $192=$4;
      var $193=$n;
      var $194=($193<<1);
      var $195=(($192+($194<<2))|0);
      var $196=(($195+4)|0);
      var $197=$as2;
      var $198=$n;
      var $199=((($198)+(1))|0);
      var $200=$4;
      var $201=$n;
      var $202=((($201)*(5))&-1);
      var $203=(($200+($202<<2))|0);
      var $204=(($203+20)|0);
      ___gmpn_toom2_sqr($196, $197, $199, $204);
      label = 28; break;
    case 27: 
      var $206=$4;
      var $207=$n;
      var $208=($207<<1);
      var $209=(($206+($208<<2))|0);
      var $210=(($209+4)|0);
      var $211=$as2;
      var $212=$n;
      var $213=((($212)+(1))|0);
      var $214=$4;
      var $215=$n;
      var $216=((($215)*(5))&-1);
      var $217=(($214+($216<<2))|0);
      var $218=(($217+20)|0);
      ___gmpn_toom3_sqr($210, $211, $213, $218);
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $223=$s;
      var $224=(($223)|0) >= 50;
      if ($224) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $226=$1;
      var $227=$n;
      var $228=($227<<2);
      var $229=(($226+($228<<2))|0);
      var $230=$2;
      var $231=$n;
      var $232=($231<<1);
      var $233=(($230+($232<<2))|0);
      var $234=$s;
      ___gmpn_sqr_basecase($229, $233, $234);
      label = 37; break;
    case 33: 
      var $236=$s;
      var $237=(($236)|0) >= 120;
      if ($237) { label = 35; break; } else { label = 34; break; }
    case 34: 
      var $239=$1;
      var $240=$n;
      var $241=($240<<2);
      var $242=(($239+($241<<2))|0);
      var $243=$2;
      var $244=$n;
      var $245=($244<<1);
      var $246=(($243+($245<<2))|0);
      var $247=$s;
      var $248=$4;
      var $249=$n;
      var $250=((($249)*(5))&-1);
      var $251=(($248+($250<<2))|0);
      var $252=(($251+20)|0);
      ___gmpn_toom2_sqr($242, $246, $247, $252);
      label = 36; break;
    case 35: 
      var $254=$1;
      var $255=$n;
      var $256=($255<<2);
      var $257=(($254+($256<<2))|0);
      var $258=$2;
      var $259=$n;
      var $260=($259<<1);
      var $261=(($258+($260<<2))|0);
      var $262=$s;
      var $263=$4;
      var $264=$n;
      var $265=((($264)*(5))&-1);
      var $266=(($263+($265<<2))|0);
      var $267=(($266+20)|0);
      ___gmpn_toom3_sqr($257, $261, $262, $267);
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $271=$1;
      var $272=$n;
      var $273=($272<<2);
      var $274=(($271+($273<<2))|0);
      var $275=(($274)|0);
      var $276=HEAP32[(($275)>>2)];
      $vinf0=$276;
      var $277=$1;
      var $278=$n;
      var $279=($278<<2);
      var $280=(($277+($279<<2))|0);
      var $281=(($280+4)|0);
      var $282=HEAP32[(($281)>>2)];
      $cy=$282;
      label = 39; break;
    case 39: 
      var $284=$n;
      var $285=((($284)+(1))|0);
      var $286=(($285)|0) >= 50;
      if ($286) { label = 41; break; } else { label = 40; break; }
    case 40: 
      var $288=$1;
      var $289=$n;
      var $290=($289<<1);
      var $291=(($288+($290<<2))|0);
      var $292=$as1;
      var $293=$n;
      var $294=((($293)+(1))|0);
      ___gmpn_sqr_basecase($291, $292, $294);
      label = 45; break;
    case 41: 
      var $296=$n;
      var $297=((($296)+(1))|0);
      var $298=(($297)|0) >= 120;
      if ($298) { label = 43; break; } else { label = 42; break; }
    case 42: 
      var $300=$1;
      var $301=$n;
      var $302=($301<<1);
      var $303=(($300+($302<<2))|0);
      var $304=$as1;
      var $305=$n;
      var $306=((($305)+(1))|0);
      var $307=$4;
      var $308=$n;
      var $309=((($308)*(5))&-1);
      var $310=(($307+($309<<2))|0);
      var $311=(($310+20)|0);
      ___gmpn_toom2_sqr($303, $304, $306, $311);
      label = 44; break;
    case 43: 
      var $313=$1;
      var $314=$n;
      var $315=($314<<1);
      var $316=(($313+($315<<2))|0);
      var $317=$as1;
      var $318=$n;
      var $319=((($318)+(1))|0);
      var $320=$4;
      var $321=$n;
      var $322=((($321)*(5))&-1);
      var $323=(($320+($322<<2))|0);
      var $324=(($323+20)|0);
      ___gmpn_toom3_sqr($316, $317, $319, $324);
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $328=$cy;
      var $329=$1;
      var $330=$n;
      var $331=($330<<2);
      var $332=(($329+($331<<2))|0);
      var $333=(($332+4)|0);
      HEAP32[(($333)>>2)]=$328;
      label = 47; break;
    case 47: 
      var $335=$n;
      var $336=(($335)|0) >= 50;
      if ($336) { label = 49; break; } else { label = 48; break; }
    case 48: 
      var $338=$1;
      var $339=$2;
      var $340=$n;
      ___gmpn_sqr_basecase($338, $339, $340);
      label = 53; break;
    case 49: 
      var $342=$n;
      var $343=(($342)|0) >= 120;
      if ($343) { label = 51; break; } else { label = 50; break; }
    case 50: 
      var $345=$1;
      var $346=$2;
      var $347=$n;
      var $348=$4;
      var $349=$n;
      var $350=((($349)*(5))&-1);
      var $351=(($348+($350<<2))|0);
      var $352=(($351+20)|0);
      ___gmpn_toom2_sqr($345, $346, $347, $352);
      label = 52; break;
    case 51: 
      var $354=$1;
      var $355=$2;
      var $356=$n;
      var $357=$4;
      var $358=$n;
      var $359=((($358)*(5))&-1);
      var $360=(($357+($359<<2))|0);
      var $361=(($360+20)|0);
      ___gmpn_toom3_sqr($354, $355, $356, $361);
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $365=$1;
      var $366=$4;
      var $367=$n;
      var $368=($367<<1);
      var $369=(($366+($368<<2))|0);
      var $370=(($369+4)|0);
      var $371=$4;
      var $372=$n;
      var $373=$s;
      var $374=$s;
      var $375=((($373)+($374))|0);
      var $376=$vinf0;
      ___gmpn_toom_interpolate_5pts($365, $370, $371, $372, $375, 0, $376);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom3_sqr["X"]=1;

function ___gmpn_toom4_sqr($pp, $ap, $an, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $n;
      var $s;
      var $cy;
      $1=$pp;
      $2=$ap;
      $3=$an;
      $4=$scratch;
      var $5=$3;
      var $6=((($5)+(3))|0);
      var $7=$6 >> 2;
      $n=$7;
      var $8=$3;
      var $9=$n;
      var $10=((($9)*(3))&-1);
      var $11=((($8)-($10))|0);
      $s=$11;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $14=$1;
      var $15=$1;
      var $16=$n;
      var $17=($16<<2);
      var $18=(($15+($17<<2))|0);
      var $19=(($18+8)|0);
      var $20=$2;
      var $21=$n;
      var $22=$s;
      var $23=$4;
      var $24=$n;
      var $25=($24<<3);
      var $26=(($23+($25<<2))|0);
      var $27=(($26+20)|0);
      var $28=___gmpn_toom_eval_dgr3_pm2($14, $19, $20, $21, $22, $27);
      label = 5; break;
    case 5: 
      var $30=$n;
      var $31=((($30)+(1))|0);
      var $32=(($31)|0) >= 120;
      if ($32) { label = 7; break; } else { label = 6; break; }
    case 6: 
      var $34=$4;
      var $35=$1;
      var $36=$n;
      var $37=((($36)+(1))|0);
      var $38=$4;
      var $39=$n;
      var $40=($39<<3);
      var $41=(($38+($40<<2))|0);
      var $42=(($41+20)|0);
      ___gmpn_toom2_sqr($34, $35, $37, $42);
      label = 8; break;
    case 7: 
      var $44=$4;
      var $45=$1;
      var $46=$n;
      var $47=((($46)+(1))|0);
      var $48=$4;
      var $49=$n;
      var $50=($49<<3);
      var $51=(($48+($50<<2))|0);
      var $52=(($51+20)|0);
      ___gmpn_toom3_sqr($44, $45, $47, $52);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $56=$n;
      var $57=((($56)+(1))|0);
      var $58=(($57)|0) >= 120;
      if ($58) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $60=$4;
      var $61=$n;
      var $62=($61<<1);
      var $63=(($60+($62<<2))|0);
      var $64=(($63+4)|0);
      var $65=$1;
      var $66=$n;
      var $67=($66<<2);
      var $68=(($65+($67<<2))|0);
      var $69=(($68+8)|0);
      var $70=$n;
      var $71=((($70)+(1))|0);
      var $72=$4;
      var $73=$n;
      var $74=($73<<3);
      var $75=(($72+($74<<2))|0);
      var $76=(($75+20)|0);
      ___gmpn_toom2_sqr($64, $69, $71, $76);
      label = 13; break;
    case 12: 
      var $78=$4;
      var $79=$n;
      var $80=($79<<1);
      var $81=(($78+($80<<2))|0);
      var $82=(($81+4)|0);
      var $83=$1;
      var $84=$n;
      var $85=($84<<2);
      var $86=(($83+($85<<2))|0);
      var $87=(($86+8)|0);
      var $88=$n;
      var $89=((($88)+(1))|0);
      var $90=$4;
      var $91=$n;
      var $92=($91<<3);
      var $93=(($90+($92<<2))|0);
      var $94=(($93+20)|0);
      ___gmpn_toom3_sqr($82, $87, $89, $94);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      var $97=$1;
      var $98=$2;
      var $99=$n;
      var $100=___gmpn_lshift($97, $98, $99, 1);
      $cy=$100;
      var $101=$1;
      var $102=$1;
      var $103=$2;
      var $104=$n;
      var $105=(($103+($104<<2))|0);
      var $106=$n;
      var $107=___gmpn_add_n($101, $102, $105, $106);
      var $108=$cy;
      var $109=((($108)+($107))|0);
      $cy=$109;
      var $110=$cy;
      var $111=($110<<1);
      var $112=$1;
      var $113=$1;
      var $114=$n;
      var $115=___gmpn_lshift($112, $113, $114, 1);
      var $116=((($111)+($115))|0);
      $cy=$116;
      var $117=$1;
      var $118=$1;
      var $119=$2;
      var $120=$n;
      var $121=($120<<1);
      var $122=(($119+($121<<2))|0);
      var $123=$n;
      var $124=___gmpn_add_n($117, $118, $122, $123);
      var $125=$cy;
      var $126=((($125)+($124))|0);
      $cy=$126;
      var $127=$cy;
      var $128=($127<<1);
      var $129=$1;
      var $130=$1;
      var $131=$n;
      var $132=___gmpn_lshift($129, $130, $131, 1);
      var $133=((($128)+($132))|0);
      $cy=$133;
      var $134=$cy;
      var $135=$1;
      var $136=$1;
      var $137=$n;
      var $138=$2;
      var $139=$n;
      var $140=((($139)*(3))&-1);
      var $141=(($138+($140<<2))|0);
      var $142=$s;
      var $143=___gmpn_add($135, $136, $137, $141, $142);
      var $144=((($134)+($143))|0);
      var $145=$n;
      var $146=$1;
      var $147=(($146+($145<<2))|0);
      HEAP32[(($147)>>2)]=$144;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $151=$n;
      var $152=((($151)+(1))|0);
      var $153=(($152)|0) >= 120;
      if ($153) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $155=$4;
      var $156=$n;
      var $157=($156<<2);
      var $158=(($155+($157<<2))|0);
      var $159=(($158+8)|0);
      var $160=$1;
      var $161=$n;
      var $162=((($161)+(1))|0);
      var $163=$4;
      var $164=$n;
      var $165=($164<<3);
      var $166=(($163+($165<<2))|0);
      var $167=(($166+20)|0);
      ___gmpn_toom2_sqr($159, $160, $162, $167);
      label = 20; break;
    case 19: 
      var $169=$4;
      var $170=$n;
      var $171=($170<<2);
      var $172=(($169+($171<<2))|0);
      var $173=(($172+8)|0);
      var $174=$1;
      var $175=$n;
      var $176=((($175)+(1))|0);
      var $177=$4;
      var $178=$n;
      var $179=($178<<3);
      var $180=(($177+($179<<2))|0);
      var $181=(($180+20)|0);
      ___gmpn_toom3_sqr($173, $174, $176, $181);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $184=$1;
      var $185=$1;
      var $186=$n;
      var $187=($186<<2);
      var $188=(($185+($187<<2))|0);
      var $189=(($188+8)|0);
      var $190=$2;
      var $191=$n;
      var $192=$s;
      var $193=$4;
      var $194=$n;
      var $195=($194<<3);
      var $196=(($193+($195<<2))|0);
      var $197=(($196+20)|0);
      var $198=___gmpn_toom_eval_dgr3_pm1($184, $189, $190, $191, $192, $197);
      label = 22; break;
    case 22: 
      var $200=$n;
      var $201=((($200)+(1))|0);
      var $202=(($201)|0) >= 120;
      if ($202) { label = 24; break; } else { label = 23; break; }
    case 23: 
      var $204=$1;
      var $205=$n;
      var $206=($205<<1);
      var $207=(($204+($206<<2))|0);
      var $208=$1;
      var $209=$n;
      var $210=((($209)+(1))|0);
      var $211=$4;
      var $212=$n;
      var $213=($212<<3);
      var $214=(($211+($213<<2))|0);
      var $215=(($214+20)|0);
      ___gmpn_toom2_sqr($207, $208, $210, $215);
      label = 25; break;
    case 24: 
      var $217=$1;
      var $218=$n;
      var $219=($218<<1);
      var $220=(($217+($219<<2))|0);
      var $221=$1;
      var $222=$n;
      var $223=((($222)+(1))|0);
      var $224=$4;
      var $225=$n;
      var $226=($225<<3);
      var $227=(($224+($226<<2))|0);
      var $228=(($227+20)|0);
      ___gmpn_toom3_sqr($220, $221, $223, $228);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $232=$n;
      var $233=((($232)+(1))|0);
      var $234=(($233)|0) >= 120;
      if ($234) { label = 29; break; } else { label = 28; break; }
    case 28: 
      var $236=$4;
      var $237=$n;
      var $238=((($237)*(6))&-1);
      var $239=(($236+($238<<2))|0);
      var $240=(($239+12)|0);
      var $241=$1;
      var $242=$n;
      var $243=($242<<2);
      var $244=(($241+($243<<2))|0);
      var $245=(($244+8)|0);
      var $246=$n;
      var $247=((($246)+(1))|0);
      var $248=$4;
      var $249=$n;
      var $250=($249<<3);
      var $251=(($248+($250<<2))|0);
      var $252=(($251+20)|0);
      ___gmpn_toom2_sqr($240, $245, $247, $252);
      label = 30; break;
    case 29: 
      var $254=$4;
      var $255=$n;
      var $256=((($255)*(6))&-1);
      var $257=(($254+($256<<2))|0);
      var $258=(($257+12)|0);
      var $259=$1;
      var $260=$n;
      var $261=($260<<2);
      var $262=(($259+($261<<2))|0);
      var $263=(($262+8)|0);
      var $264=$n;
      var $265=((($264)+(1))|0);
      var $266=$4;
      var $267=$n;
      var $268=($267<<3);
      var $269=(($266+($268<<2))|0);
      var $270=(($269+20)|0);
      ___gmpn_toom3_sqr($258, $263, $265, $270);
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $274=$n;
      var $275=(($274)|0) >= 120;
      if ($275) { label = 34; break; } else { label = 33; break; }
    case 33: 
      var $277=$1;
      var $278=$2;
      var $279=$n;
      var $280=$4;
      var $281=$n;
      var $282=($281<<3);
      var $283=(($280+($282<<2))|0);
      var $284=(($283+20)|0);
      ___gmpn_toom2_sqr($277, $278, $279, $284);
      label = 35; break;
    case 34: 
      var $286=$1;
      var $287=$2;
      var $288=$n;
      var $289=$4;
      var $290=$n;
      var $291=($290<<3);
      var $292=(($289+($291<<2))|0);
      var $293=(($292+20)|0);
      ___gmpn_toom3_sqr($286, $287, $288, $293);
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $297=$s;
      var $298=(($297)|0) >= 120;
      if ($298) { label = 39; break; } else { label = 38; break; }
    case 38: 
      var $300=$1;
      var $301=$n;
      var $302=((($301)*(6))&-1);
      var $303=(($300+($302<<2))|0);
      var $304=$2;
      var $305=$n;
      var $306=((($305)*(3))&-1);
      var $307=(($304+($306<<2))|0);
      var $308=$s;
      var $309=$4;
      var $310=$n;
      var $311=($310<<3);
      var $312=(($309+($311<<2))|0);
      var $313=(($312+20)|0);
      ___gmpn_toom2_sqr($303, $307, $308, $313);
      label = 40; break;
    case 39: 
      var $315=$1;
      var $316=$n;
      var $317=((($316)*(6))&-1);
      var $318=(($315+($317<<2))|0);
      var $319=$2;
      var $320=$n;
      var $321=((($320)*(3))&-1);
      var $322=(($319+($321<<2))|0);
      var $323=$s;
      var $324=$4;
      var $325=$n;
      var $326=($325<<3);
      var $327=(($324+($326<<2))|0);
      var $328=(($327+20)|0);
      ___gmpn_toom3_sqr($318, $322, $323, $328);
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $331=$1;
      var $332=$n;
      var $333=$4;
      var $334=$n;
      var $335=($334<<1);
      var $336=(($333+($335<<2))|0);
      var $337=(($336+4)|0);
      var $338=$4;
      var $339=$n;
      var $340=((($339)*(6))&-1);
      var $341=(($338+($340<<2))|0);
      var $342=(($341+12)|0);
      var $343=$4;
      var $344=$4;
      var $345=$n;
      var $346=($345<<2);
      var $347=(($344+($346<<2))|0);
      var $348=(($347+8)|0);
      var $349=$s;
      var $350=($349<<1);
      var $351=$4;
      var $352=$n;
      var $353=($352<<3);
      var $354=(($351+($353<<2))|0);
      var $355=(($354+20)|0);
      ___gmpn_toom_interpolate_7pts($331, $332, 0, $337, $342, $343, $348, $350, $355);

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom4_sqr["X"]=1;

function ___gmpn_toom_eval_dgr3_pm1($xp1, $xm1, $xp, $n, $x3n, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $neg;
      $1=$xp1;
      $2=$xm1;
      $3=$xp;
      $4=$n;
      $5=$x3n;
      $6=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $11=$1;
      var $12=$3;
      var $13=$3;
      var $14=$4;
      var $15=($14<<1);
      var $16=(($13+($15<<2))|0);
      var $17=$4;
      var $18=___gmpn_add_n($11, $12, $16, $17);
      var $19=$4;
      var $20=$1;
      var $21=(($20+($19<<2))|0);
      HEAP32[(($21)>>2)]=$18;
      var $22=$6;
      var $23=$3;
      var $24=$4;
      var $25=(($23+($24<<2))|0);
      var $26=$4;
      var $27=$3;
      var $28=$4;
      var $29=((($28)*(3))&-1);
      var $30=(($27+($29<<2))|0);
      var $31=$5;
      var $32=___gmpn_add($22, $25, $26, $30, $31);
      var $33=$4;
      var $34=$6;
      var $35=(($34+($33<<2))|0);
      HEAP32[(($35)>>2)]=$32;
      var $36=$1;
      var $37=$6;
      var $38=$4;
      var $39=((($38)+(1))|0);
      var $40=___gmpn_cmp($36, $37, $39);
      var $41=(($40)|0) < 0;
      var $42=$41 ? -1 : 0;
      $neg=$42;
      var $43=$neg;
      var $44=(($43)|0)!=0;
      if ($44) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $46=$2;
      var $47=$6;
      var $48=$1;
      var $49=$4;
      var $50=((($49)+(1))|0);
      var $51=___gmpn_sub_n($46, $47, $48, $50);
      label = 9; break;
    case 8: 
      var $53=$2;
      var $54=$1;
      var $55=$6;
      var $56=$4;
      var $57=((($56)+(1))|0);
      var $58=___gmpn_sub_n($53, $54, $55, $57);
      label = 9; break;
    case 9: 
      var $60=$1;
      var $61=$1;
      var $62=$6;
      var $63=$4;
      var $64=((($63)+(1))|0);
      var $65=___gmpn_add_n($60, $61, $62, $64);
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      var $70=$neg;

      return $70;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_eval_dgr3_pm1["X"]=1;

function ___gmpn_toom_eval_dgr3_pm2($xp2, $xm2, $xp, $n, $x3n, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $cy;
      var $neg;
      $1=$xp2;
      $2=$xm2;
      $3=$xp;
      $4=$n;
      $5=$x3n;
      $6=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $11=$6;
      var $12=$3;
      var $13=$4;
      var $14=($13<<1);
      var $15=(($12+($14<<2))|0);
      var $16=$4;
      var $17=___gmpn_lshift($11, $15, $16, 2);
      $cy=$17;
      var $18=$cy;
      var $19=$1;
      var $20=$6;
      var $21=$3;
      var $22=$4;
      var $23=___gmpn_add_n($19, $20, $21, $22);
      var $24=((($18)+($23))|0);
      var $25=$4;
      var $26=$1;
      var $27=(($26+($25<<2))|0);
      HEAP32[(($27)>>2)]=$24;
      var $28=$6;
      var $29=$3;
      var $30=$4;
      var $31=((($30)*(3))&-1);
      var $32=(($29+($31<<2))|0);
      var $33=$5;
      var $34=___gmpn_lshift($28, $32, $33, 2);
      var $35=$5;
      var $36=$6;
      var $37=(($36+($35<<2))|0);
      HEAP32[(($37)>>2)]=$34;
      var $38=$5;
      var $39=$4;
      var $40=(($38)|0) < (($39)|0);
      if ($40) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $42=$6;
      var $43=$3;
      var $44=$4;
      var $45=(($43+($44<<2))|0);
      var $46=$4;
      var $47=$6;
      var $48=$5;
      var $49=((($48)+(1))|0);
      var $50=___gmpn_add($42, $45, $46, $47, $49);
      var $51=$4;
      var $52=$6;
      var $53=(($52+($51<<2))|0);
      HEAP32[(($53)>>2)]=$50;
      label = 9; break;
    case 8: 
      var $55=$6;
      var $56=$3;
      var $57=$4;
      var $58=(($56+($57<<2))|0);
      var $59=$6;
      var $60=$4;
      var $61=___gmpn_add_n($55, $58, $59, $60);
      var $62=$4;
      var $63=$6;
      var $64=(($63+($62<<2))|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=((($65)+($61))|0);
      HEAP32[(($64)>>2)]=$66;
      label = 9; break;
    case 9: 
      var $68=$6;
      var $69=$6;
      var $70=$4;
      var $71=((($70)+(1))|0);
      var $72=___gmpn_lshift($68, $69, $71, 1);
      var $73=$1;
      var $74=$6;
      var $75=$4;
      var $76=((($75)+(1))|0);
      var $77=___gmpn_cmp($73, $74, $76);
      var $78=(($77)|0) < 0;
      var $79=$78 ? -1 : 0;
      $neg=$79;
      var $80=$neg;
      var $81=(($80)|0)!=0;
      if ($81) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $83=$2;
      var $84=$6;
      var $85=$1;
      var $86=$4;
      var $87=((($86)+(1))|0);
      var $88=___gmpn_sub_n($83, $84, $85, $87);
      label = 12; break;
    case 11: 
      var $90=$2;
      var $91=$1;
      var $92=$6;
      var $93=$4;
      var $94=((($93)+(1))|0);
      var $95=___gmpn_sub_n($90, $91, $92, $94);
      label = 12; break;
    case 12: 
      var $97=$1;
      var $98=$1;
      var $99=$6;
      var $100=$4;
      var $101=((($100)+(1))|0);
      var $102=___gmpn_add_n($97, $98, $99, $101);
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $107=$neg;

      return $107;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_eval_dgr3_pm2["X"]=1;

function ___gmpn_toom_eval_pm1($xp1, $xm1, $k, $xp, $n, $hn, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $i;
      var $neg;
      $1=$xp1;
      $2=$xm1;
      $3=$k;
      $4=$xp;
      $5=$n;
      $6=$hn;
      $7=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $14=$1;
      var $15=$4;
      var $16=$4;
      var $17=$5;
      var $18=($17<<1);
      var $19=(($16+($18<<2))|0);
      var $20=$5;
      var $21=___gmpn_add_n($14, $15, $19, $20);
      var $22=$5;
      var $23=$1;
      var $24=(($23+($22<<2))|0);
      HEAP32[(($24)>>2)]=$21;
      $i=4;
      label = 9; break;
    case 9: 
      var $26=$i;
      var $27=$3;
      var $28=(($26)>>>0) < (($27)>>>0);
      if ($28) { label = 10; break; } else { label = 12; break; }
    case 10: 
      var $30=$1;
      var $31=$1;
      var $32=$5;
      var $33=((($32)+(1))|0);
      var $34=$4;
      var $35=$i;
      var $36=$5;
      var $37=Math.imul($35,$36);
      var $38=(($34+($37<<2))|0);
      var $39=$5;
      var $40=___gmpn_add($30, $31, $33, $38, $39);
      label = 11; break;
    case 11: 
      var $42=$i;
      var $43=((($42)+(2))|0);
      $i=$43;
      label = 9; break;
    case 12: 
      var $45=$7;
      var $46=$4;
      var $47=$5;
      var $48=(($46+($47<<2))|0);
      var $49=$4;
      var $50=$5;
      var $51=((($50)*(3))&-1);
      var $52=(($49+($51<<2))|0);
      var $53=$5;
      var $54=___gmpn_add_n($45, $48, $52, $53);
      var $55=$5;
      var $56=$7;
      var $57=(($56+($55<<2))|0);
      HEAP32[(($57)>>2)]=$54;
      $i=5;
      label = 13; break;
    case 13: 
      var $59=$i;
      var $60=$3;
      var $61=(($59)>>>0) < (($60)>>>0);
      if ($61) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $63=$7;
      var $64=$7;
      var $65=$5;
      var $66=((($65)+(1))|0);
      var $67=$4;
      var $68=$i;
      var $69=$5;
      var $70=Math.imul($68,$69);
      var $71=(($67+($70<<2))|0);
      var $72=$5;
      var $73=___gmpn_add($63, $64, $66, $71, $72);
      label = 15; break;
    case 15: 
      var $75=$i;
      var $76=((($75)+(2))|0);
      $i=$76;
      label = 13; break;
    case 16: 
      var $78=$3;
      var $79=$78 & 1;
      var $80=(($79)|0)!=0;
      if ($80) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $82=$7;
      var $83=$7;
      var $84=$5;
      var $85=((($84)+(1))|0);
      var $86=$4;
      var $87=$3;
      var $88=$5;
      var $89=Math.imul($87,$88);
      var $90=(($86+($89<<2))|0);
      var $91=$6;
      var $92=___gmpn_add($82, $83, $85, $90, $91);
      label = 19; break;
    case 18: 
      var $94=$1;
      var $95=$1;
      var $96=$5;
      var $97=((($96)+(1))|0);
      var $98=$4;
      var $99=$3;
      var $100=$5;
      var $101=Math.imul($99,$100);
      var $102=(($98+($101<<2))|0);
      var $103=$6;
      var $104=___gmpn_add($94, $95, $97, $102, $103);
      label = 19; break;
    case 19: 
      var $106=$1;
      var $107=$7;
      var $108=$5;
      var $109=((($108)+(1))|0);
      var $110=___gmpn_cmp($106, $107, $109);
      var $111=(($110)|0) < 0;
      var $112=$111 ? -1 : 0;
      $neg=$112;
      var $113=$neg;
      var $114=(($113)|0)!=0;
      if ($114) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $116=$2;
      var $117=$7;
      var $118=$1;
      var $119=$5;
      var $120=((($119)+(1))|0);
      var $121=___gmpn_sub_n($116, $117, $118, $120);
      label = 22; break;
    case 21: 
      var $123=$2;
      var $124=$1;
      var $125=$7;
      var $126=$5;
      var $127=((($126)+(1))|0);
      var $128=___gmpn_sub_n($123, $124, $125, $127);
      label = 22; break;
    case 22: 
      var $130=$1;
      var $131=$1;
      var $132=$7;
      var $133=$5;
      var $134=((($133)+(1))|0);
      var $135=___gmpn_add_n($130, $131, $132, $134);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $140=$neg;

      return $140;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_eval_pm1["X"]=1;

function ___gmpn_toom_eval_pm2($xp2, $xm2, $k, $xp, $n, $hn, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $i;
      var $neg;
      var $cy;
      $1=$xp2;
      $2=$xm2;
      $3=$k;
      $4=$xp;
      $5=$n;
      $6=$hn;
      $7=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      $cy=0;
      label = 11; break;
    case 11: 
      var $17=$cy;
      var $18=$17 << 2;
      $cy=$18;
      var $19=$1;
      var $20=$4;
      var $21=$3;
      var $22=$5;
      var $23=Math.imul($21,$22);
      var $24=(($20+($23<<2))|0);
      var $25=$6;
      var $26=___gmpn_lshift($19, $24, $25, 2);
      var $27=$cy;
      var $28=((($27)+($26))|0);
      $cy=$28;
      var $29=$1;
      var $30=$1;
      var $31=$4;
      var $32=$3;
      var $33=((($32)-(2))|0);
      var $34=$5;
      var $35=Math.imul($33,$34);
      var $36=(($31+($35<<2))|0);
      var $37=$6;
      var $38=___gmpn_add_n($29, $30, $36, $37);
      var $39=$cy;
      var $40=((($39)+($38))|0);
      $cy=$40;
      label = 12; break;
    case 12: 
      var $42=$6;
      var $43=$5;
      var $44=(($42)|0)!=(($43)|0);
      if ($44) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $46=$1;
      var $47=$6;
      var $48=(($46+($47<<2))|0);
      var $49=$4;
      var $50=$3;
      var $51=((($50)-(2))|0);
      var $52=$5;
      var $53=Math.imul($51,$52);
      var $54=(($49+($53<<2))|0);
      var $55=$6;
      var $56=(($54+($55<<2))|0);
      var $57=$5;
      var $58=$6;
      var $59=((($57)-($58))|0);
      var $60=$cy;
      var $61=___gmpn_add_1($48, $56, $59, $60);
      $cy=$61;
      label = 14; break;
    case 14: 
      var $63=$3;
      var $64=((($63)-(4))|0);
      $i=$64;
      label = 15; break;
    case 15: 
      var $66=$i;
      var $67=(($66)|0) >= 0;
      if ($67) { label = 16; break; } else { label = 20; break; }
    case 16: 
      label = 17; break;
    case 17: 
      var $70=$cy;
      var $71=$70 << 2;
      $cy=$71;
      var $72=$1;
      var $73=$1;
      var $74=$5;
      var $75=___gmpn_lshift($72, $73, $74, 2);
      var $76=$cy;
      var $77=((($76)+($75))|0);
      $cy=$77;
      var $78=$1;
      var $79=$1;
      var $80=$4;
      var $81=$i;
      var $82=$5;
      var $83=Math.imul($81,$82);
      var $84=(($80+($83<<2))|0);
      var $85=$5;
      var $86=___gmpn_add_n($78, $79, $84, $85);
      var $87=$cy;
      var $88=((($87)+($86))|0);
      $cy=$88;
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $91=$i;
      var $92=((($91)-(2))|0);
      $i=$92;
      label = 15; break;
    case 20: 
      var $94=$cy;
      var $95=$5;
      var $96=$1;
      var $97=(($96+($95<<2))|0);
      HEAP32[(($97)>>2)]=$94;
      var $98=$3;
      var $99=((($98)-(1))|0);
      $3=$99;
      $cy=0;
      label = 21; break;
    case 21: 
      var $101=$cy;
      var $102=$101 << 2;
      $cy=$102;
      var $103=$7;
      var $104=$4;
      var $105=$3;
      var $106=$5;
      var $107=Math.imul($105,$106);
      var $108=(($104+($107<<2))|0);
      var $109=$5;
      var $110=___gmpn_lshift($103, $108, $109, 2);
      var $111=$cy;
      var $112=((($111)+($110))|0);
      $cy=$112;
      var $113=$7;
      var $114=$7;
      var $115=$4;
      var $116=$3;
      var $117=((($116)-(2))|0);
      var $118=$5;
      var $119=Math.imul($117,$118);
      var $120=(($115+($119<<2))|0);
      var $121=$5;
      var $122=___gmpn_add_n($113, $114, $120, $121);
      var $123=$cy;
      var $124=((($123)+($122))|0);
      $cy=$124;
      label = 22; break;
    case 22: 
      var $126=$3;
      var $127=((($126)-(4))|0);
      $i=$127;
      label = 23; break;
    case 23: 
      var $129=$i;
      var $130=(($129)|0) >= 0;
      if ($130) { label = 24; break; } else { label = 28; break; }
    case 24: 
      label = 25; break;
    case 25: 
      var $133=$cy;
      var $134=$133 << 2;
      $cy=$134;
      var $135=$7;
      var $136=$7;
      var $137=$5;
      var $138=___gmpn_lshift($135, $136, $137, 2);
      var $139=$cy;
      var $140=((($139)+($138))|0);
      $cy=$140;
      var $141=$7;
      var $142=$7;
      var $143=$4;
      var $144=$i;
      var $145=$5;
      var $146=Math.imul($144,$145);
      var $147=(($143+($146<<2))|0);
      var $148=$5;
      var $149=___gmpn_add_n($141, $142, $147, $148);
      var $150=$cy;
      var $151=((($150)+($149))|0);
      $cy=$151;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $154=$i;
      var $155=((($154)-(2))|0);
      $i=$155;
      label = 23; break;
    case 28: 
      var $157=$cy;
      var $158=$5;
      var $159=$7;
      var $160=(($159+($158<<2))|0);
      HEAP32[(($160)>>2)]=$157;
      var $161=$3;
      var $162=$161 & 1;
      var $163=(($162)|0)!=0;
      if ($163) { label = 29; break; } else { label = 30; break; }
    case 29: 
      var $165=$7;
      var $166=$7;
      var $167=$5;
      var $168=((($167)+(1))|0);
      var $169=___gmpn_lshift($165, $166, $168, 1);
      label = 31; break;
    case 30: 
      var $171=$1;
      var $172=$1;
      var $173=$5;
      var $174=((($173)+(1))|0);
      var $175=___gmpn_lshift($171, $172, $174, 1);
      label = 31; break;
    case 31: 
      var $177=$1;
      var $178=$7;
      var $179=$5;
      var $180=((($179)+(1))|0);
      var $181=___gmpn_cmp($177, $178, $180);
      var $182=(($181)|0) < 0;
      var $183=$182 ? -1 : 0;
      $neg=$183;
      var $184=$neg;
      var $185=(($184)|0)!=0;
      if ($185) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $187=$2;
      var $188=$7;
      var $189=$1;
      var $190=$5;
      var $191=((($190)+(1))|0);
      var $192=___gmpn_sub_n($187, $188, $189, $191);
      label = 34; break;
    case 33: 
      var $194=$2;
      var $195=$1;
      var $196=$7;
      var $197=$5;
      var $198=((($197)+(1))|0);
      var $199=___gmpn_sub_n($194, $195, $196, $198);
      label = 34; break;
    case 34: 
      var $201=$1;
      var $202=$1;
      var $203=$7;
      var $204=$5;
      var $205=((($204)+(1))|0);
      var $206=___gmpn_add_n($201, $202, $203, $205);
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $211=$3;
      var $212=$211 & 1;
      var $213=((($212)-(1))|0);
      var $214=$neg;
      var $215=$214 ^ $213;
      $neg=$215;
      var $216=$neg;

      return $216;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_eval_pm2["X"]=1;

function ___gmpn_toom_eval_pm2exp($xp2, $xm2, $k, $xp, $n, $hn, $shift, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $i;
      var $neg;
      $1=$xp2;
      $2=$xm2;
      $3=$k;
      $4=$xp;
      $5=$n;
      $6=$hn;
      $7=$shift;
      $8=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $17=$8;
      var $18=$4;
      var $19=$5;
      var $20=($19<<1);
      var $21=(($18+($20<<2))|0);
      var $22=$5;
      var $23=$7;
      var $24=($23<<1);
      var $25=___gmpn_lshift($17, $21, $22, $24);
      var $26=$5;
      var $27=$1;
      var $28=(($27+($26<<2))|0);
      HEAP32[(($28)>>2)]=$25;
      var $29=$1;
      var $30=$4;
      var $31=$8;
      var $32=$5;
      var $33=___gmpn_add_n($29, $30, $31, $32);
      var $34=$5;
      var $35=$1;
      var $36=(($35+($34<<2))|0);
      var $37=HEAP32[(($36)>>2)];
      var $38=((($37)+($33))|0);
      HEAP32[(($36)>>2)]=$38;
      $i=4;
      label = 11; break;
    case 11: 
      var $40=$i;
      var $41=$3;
      var $42=(($40)>>>0) < (($41)>>>0);
      if ($42) { label = 12; break; } else { label = 14; break; }
    case 12: 
      var $44=$8;
      var $45=$4;
      var $46=$i;
      var $47=$5;
      var $48=Math.imul($46,$47);
      var $49=(($45+($48<<2))|0);
      var $50=$5;
      var $51=$i;
      var $52=$7;
      var $53=Math.imul($51,$52);
      var $54=___gmpn_lshift($44, $49, $50, $53);
      var $55=$5;
      var $56=$1;
      var $57=(($56+($55<<2))|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=((($58)+($54))|0);
      HEAP32[(($57)>>2)]=$59;
      var $60=$1;
      var $61=$1;
      var $62=$8;
      var $63=$5;
      var $64=___gmpn_add_n($60, $61, $62, $63);
      var $65=$5;
      var $66=$1;
      var $67=(($66+($65<<2))|0);
      var $68=HEAP32[(($67)>>2)];
      var $69=((($68)+($64))|0);
      HEAP32[(($67)>>2)]=$69;
      label = 13; break;
    case 13: 
      var $71=$i;
      var $72=((($71)+(2))|0);
      $i=$72;
      label = 11; break;
    case 14: 
      var $74=$8;
      var $75=$4;
      var $76=$5;
      var $77=(($75+($76<<2))|0);
      var $78=$5;
      var $79=$7;
      var $80=___gmpn_lshift($74, $77, $78, $79);
      var $81=$5;
      var $82=$8;
      var $83=(($82+($81<<2))|0);
      HEAP32[(($83)>>2)]=$80;
      $i=3;
      label = 15; break;
    case 15: 
      var $85=$i;
      var $86=$3;
      var $87=(($85)>>>0) < (($86)>>>0);
      if ($87) { label = 16; break; } else { label = 18; break; }
    case 16: 
      var $89=$2;
      var $90=$4;
      var $91=$i;
      var $92=$5;
      var $93=Math.imul($91,$92);
      var $94=(($90+($93<<2))|0);
      var $95=$5;
      var $96=$i;
      var $97=$7;
      var $98=Math.imul($96,$97);
      var $99=___gmpn_lshift($89, $94, $95, $98);
      var $100=$5;
      var $101=$8;
      var $102=(($101+($100<<2))|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=((($103)+($99))|0);
      HEAP32[(($102)>>2)]=$104;
      var $105=$8;
      var $106=$8;
      var $107=$2;
      var $108=$5;
      var $109=___gmpn_add_n($105, $106, $107, $108);
      var $110=$5;
      var $111=$8;
      var $112=(($111+($110<<2))|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=((($113)+($109))|0);
      HEAP32[(($112)>>2)]=$114;
      label = 17; break;
    case 17: 
      var $116=$i;
      var $117=((($116)+(2))|0);
      $i=$117;
      label = 15; break;
    case 18: 
      var $119=$2;
      var $120=$4;
      var $121=$3;
      var $122=$5;
      var $123=Math.imul($121,$122);
      var $124=(($120+($123<<2))|0);
      var $125=$6;
      var $126=$3;
      var $127=$7;
      var $128=Math.imul($126,$127);
      var $129=___gmpn_lshift($119, $124, $125, $128);
      var $130=$6;
      var $131=$2;
      var $132=(($131+($130<<2))|0);
      HEAP32[(($132)>>2)]=$129;
      var $133=$3;
      var $134=$133 & 1;
      var $135=(($134)|0)!=0;
      if ($135) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $137=$8;
      var $138=$8;
      var $139=$5;
      var $140=((($139)+(1))|0);
      var $141=$2;
      var $142=$6;
      var $143=((($142)+(1))|0);
      var $144=___gmpn_add($137, $138, $140, $141, $143);
      label = 21; break;
    case 20: 
      var $146=$1;
      var $147=$1;
      var $148=$5;
      var $149=((($148)+(1))|0);
      var $150=$2;
      var $151=$6;
      var $152=((($151)+(1))|0);
      var $153=___gmpn_add($146, $147, $149, $150, $152);
      label = 21; break;
    case 21: 
      var $155=$1;
      var $156=$8;
      var $157=$5;
      var $158=((($157)+(1))|0);
      var $159=___gmpn_cmp($155, $156, $158);
      var $160=(($159)|0) < 0;
      var $161=$160 ? -1 : 0;
      $neg=$161;
      var $162=$neg;
      var $163=(($162)|0)!=0;
      if ($163) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $165=$2;
      var $166=$8;
      var $167=$1;
      var $168=$5;
      var $169=((($168)+(1))|0);
      var $170=___gmpn_sub_n($165, $166, $167, $169);
      label = 24; break;
    case 23: 
      var $172=$2;
      var $173=$1;
      var $174=$8;
      var $175=$5;
      var $176=((($175)+(1))|0);
      var $177=___gmpn_sub_n($172, $173, $174, $176);
      label = 24; break;
    case 24: 
      var $179=$1;
      var $180=$1;
      var $181=$8;
      var $182=$5;
      var $183=((($182)+(1))|0);
      var $184=___gmpn_add_n($179, $180, $181, $183);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $189=$neg;

      return $189;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_eval_pm2exp["X"]=1;

function ___gmpn_toom_eval_pm2rexp($rp, $rm, $q, $ap, $n, $t, $s, $ws) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $i;
      var $neg;
      $1=$rp;
      $2=$rm;
      $3=$q;
      $4=$ap;
      $5=$n;
      $6=$t;
      $7=$s;
      $8=$ws;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $17=$1;
      var $18=$4;
      var $19=$5;
      var $20=$7;
      var $21=$3;
      var $22=Math.imul($20,$21);
      var $23=___gmpn_lshift($17, $18, $19, $22);
      var $24=$5;
      var $25=$1;
      var $26=(($25+($24<<2))|0);
      HEAP32[(($26)>>2)]=$23;
      var $27=$8;
      var $28=$4;
      var $29=$5;
      var $30=(($28+($29<<2))|0);
      var $31=$5;
      var $32=$7;
      var $33=$3;
      var $34=((($33)-(1))|0);
      var $35=Math.imul($32,$34);
      var $36=___gmpn_lshift($27, $30, $31, $35);
      var $37=$5;
      var $38=$8;
      var $39=(($38+($37<<2))|0);
      HEAP32[(($39)>>2)]=$36;
      var $40=$3;
      var $41=$40 & 1;
      var $42=(($41)|0)!=0;
      if ($42) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $44=$8;
      var $45=$8;
      var $46=$5;
      var $47=((($46)+(1))|0);
      var $48=$4;
      var $49=$5;
      var $50=$3;
      var $51=Math.imul($49,$50);
      var $52=(($48+($51<<2))|0);
      var $53=$6;
      var $54=___gmpn_add($44, $45, $47, $52, $53);
      var $55=$1;
      var $56=$4;
      var $57=$5;
      var $58=$3;
      var $59=((($58)-(1))|0);
      var $60=Math.imul($57,$59);
      var $61=(($56+($60<<2))|0);
      var $62=$5;
      var $63=$7;
      var $64=$2;
      var $65=_DO_mpn_addlsh_n($55, $61, $62, $63, $64);
      var $66=$5;
      var $67=$1;
      var $68=(($67+($66<<2))|0);
      var $69=HEAP32[(($68)>>2)];
      var $70=((($69)+($65))|0);
      HEAP32[(($68)>>2)]=$70;
      label = 13; break;
    case 12: 
      var $72=$1;
      var $73=$1;
      var $74=$5;
      var $75=((($74)+(1))|0);
      var $76=$4;
      var $77=$5;
      var $78=$3;
      var $79=Math.imul($77,$78);
      var $80=(($76+($79<<2))|0);
      var $81=$6;
      var $82=___gmpn_add($72, $73, $75, $80, $81);
      label = 13; break;
    case 13: 
      $i=2;
      label = 14; break;
    case 14: 
      var $85=$i;
      var $86=$3;
      var $87=((($86)-(1))|0);
      var $88=(($85)>>>0) < (($87)>>>0);
      if ($88) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $90=$1;
      var $91=$4;
      var $92=$5;
      var $93=$i;
      var $94=Math.imul($92,$93);
      var $95=(($91+($94<<2))|0);
      var $96=$5;
      var $97=$7;
      var $98=$3;
      var $99=$i;
      var $100=((($98)-($99))|0);
      var $101=Math.imul($97,$100);
      var $102=$2;
      var $103=_DO_mpn_addlsh_n($90, $95, $96, $101, $102);
      var $104=$5;
      var $105=$1;
      var $106=(($105+($104<<2))|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=((($107)+($103))|0);
      HEAP32[(($106)>>2)]=$108;
      var $109=$i;
      var $110=((($109)+(1))|0);
      $i=$110;
      var $111=$8;
      var $112=$4;
      var $113=$5;
      var $114=$i;
      var $115=Math.imul($113,$114);
      var $116=(($112+($115<<2))|0);
      var $117=$5;
      var $118=$7;
      var $119=$3;
      var $120=$i;
      var $121=((($119)-($120))|0);
      var $122=Math.imul($118,$121);
      var $123=$2;
      var $124=_DO_mpn_addlsh_n($111, $116, $117, $122, $123);
      var $125=$5;
      var $126=$8;
      var $127=(($126+($125<<2))|0);
      var $128=HEAP32[(($127)>>2)];
      var $129=((($128)+($124))|0);
      HEAP32[(($127)>>2)]=$129;
      label = 16; break;
    case 16: 
      var $131=$i;
      var $132=((($131)+(1))|0);
      $i=$132;
      label = 14; break;
    case 17: 
      var $134=$1;
      var $135=$8;
      var $136=$5;
      var $137=((($136)+(1))|0);
      var $138=___gmpn_cmp($134, $135, $137);
      var $139=(($138)|0) < 0;
      var $140=$139 ? -1 : 0;
      $neg=$140;
      var $141=$neg;
      var $142=(($141)|0)!=0;
      if ($142) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $144=$2;
      var $145=$8;
      var $146=$1;
      var $147=$5;
      var $148=((($147)+(1))|0);
      var $149=___gmpn_sub_n($144, $145, $146, $148);
      label = 20; break;
    case 19: 
      var $151=$2;
      var $152=$1;
      var $153=$8;
      var $154=$5;
      var $155=((($154)+(1))|0);
      var $156=___gmpn_sub_n($151, $152, $153, $155);
      label = 20; break;
    case 20: 
      var $158=$1;
      var $159=$1;
      var $160=$8;
      var $161=$5;
      var $162=((($161)+(1))|0);
      var $163=___gmpn_add_n($158, $159, $160, $162);
      var $164=$neg;

      return $164;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_eval_pm2rexp["X"]=1;

function _DO_mpn_addlsh_n($dst, $src, $n, $s, $ws) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $__cy;
  $1=$dst;
  $2=$src;
  $3=$n;
  $4=$s;
  $5=$ws;
  var $6=$5;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_lshift($6, $7, $8, $9);
  $__cy=$10;
  var $11=$__cy;
  var $12=$1;
  var $13=$1;
  var $14=$5;
  var $15=$3;
  var $16=___gmpn_add_n($12, $13, $14, $15);
  var $17=((($11)+($16))|0);

  return $17;
}


function ___gmpn_toom_interpolate_5pts($c, $v2, $vm1, $k, $twor, $sa, $vinf0) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $cy;
      var $saved;
      var $twok;
      var $kk1;
      var $c1;
      var $v1;
      var $c3;
      var $vinf;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      var $__x7;
      var $__p8;
      var $__x9;
      var $__p10;
      $1=$c;
      $2=$v2;
      $3=$vm1;
      $4=$k;
      $5=$twor;
      $6=$sa;
      $7=$vinf0;
      var $8=$4;
      var $9=$4;
      var $10=((($8)+($9))|0);
      $twok=$10;
      var $11=$twok;
      var $12=((($11)+(1))|0);
      $kk1=$12;
      var $13=$1;
      var $14=$4;
      var $15=(($13+($14<<2))|0);
      $c1=$15;
      var $16=$c1;
      var $17=$4;
      var $18=(($16+($17<<2))|0);
      $v1=$18;
      var $19=$v1;
      var $20=$4;
      var $21=(($19+($20<<2))|0);
      $c3=$21;
      var $22=$c3;
      var $23=$4;
      var $24=(($22+($23<<2))|0);
      $vinf=$24;
      var $25=$6;
      var $26=(($25)|0)!=0;
      if ($26) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $28=$2;
      var $29=$2;
      var $30=$3;
      var $31=$kk1;
      var $32=___gmpn_add_n($28, $29, $30, $31);
      label = 5; break;
    case 4: 
      var $34=$2;
      var $35=$2;
      var $36=$3;
      var $37=$kk1;
      var $38=___gmpn_sub_n($34, $35, $36, $37);
      label = 5; break;
    case 5: 
      var $40=$2;
      var $41=$2;
      var $42=$kk1;
      var $43=___gmpn_bdiv_dbm1c($40, $41, $42, 1431655765, 0);
      var $44=3 & $43;
      var $45=$6;
      var $46=(($45)|0)!=0;
      if ($46) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $48=$3;
      var $49=$v1;
      var $50=$3;
      var $51=$kk1;
      var $52=___gmpn_add_n($48, $49, $50, $51);
      var $53=$3;
      var $54=$3;
      var $55=$kk1;
      var $56=___gmpn_rshift($53, $54, $55, 1);
      label = 8; break;
    case 7: 
      var $58=$3;
      var $59=$v1;
      var $60=$3;
      var $61=$kk1;
      var $62=___gmpn_sub_n($58, $59, $60, $61);
      var $63=$3;
      var $64=$3;
      var $65=$kk1;
      var $66=___gmpn_rshift($63, $64, $65, 1);
      label = 8; break;
    case 8: 
      var $68=$v1;
      var $69=$v1;
      var $70=$1;
      var $71=$twok;
      var $72=___gmpn_sub_n($68, $69, $70, $71);
      var $73=$vinf;
      var $74=(($73)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=((($75)-($72))|0);
      HEAP32[(($74)>>2)]=$76;
      var $77=$2;
      var $78=$2;
      var $79=$v1;
      var $80=$kk1;
      var $81=___gmpn_sub_n($77, $78, $79, $80);
      var $82=$2;
      var $83=$2;
      var $84=$kk1;
      var $85=___gmpn_rshift($82, $83, $84, 1);
      var $86=$v1;
      var $87=$v1;
      var $88=$3;
      var $89=$kk1;
      var $90=___gmpn_sub_n($86, $87, $88, $89);
      var $91=$c1;
      var $92=$c1;
      var $93=$3;
      var $94=$kk1;
      var $95=___gmpn_add_n($91, $92, $93, $94);
      $cy=$95;
      label = 9; break;
    case 9: 
      var $97=$c3;
      var $98=(($97+4)|0);
      $__p=$98;
      var $99=$__p;
      var $100=HEAP32[(($99)>>2)];
      var $101=$cy;
      var $102=((($100)+($101))|0);
      $__x=$102;
      var $103=$__x;
      var $104=$__p;
      HEAP32[(($104)>>2)]=$103;
      var $105=$__x;
      var $106=$cy;
      var $107=(($105)>>>0) < (($106)>>>0);
      if ($107) { label = 10; break; } else { label = 14; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $110=$__p;
      var $111=(($110+4)|0);
      $__p=$111;
      var $112=HEAP32[(($111)>>2)];
      var $113=((($112)+(1))|0);
      HEAP32[(($111)>>2)]=$113;
      var $114=(($113)|0)==0;
      if ($114) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 11; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $119=$vinf;
      var $120=(($119)|0);
      var $121=HEAP32[(($120)>>2)];
      $saved=$121;
      var $122=$7;
      var $123=$vinf;
      var $124=(($123)|0);
      HEAP32[(($124)>>2)]=$122;
      var $125=$3;
      var $126=$vinf;
      var $127=$5;
      var $128=___gmpn_lshift($125, $126, $127, 1);
      $cy=$128;
      var $129=$2;
      var $130=$2;
      var $131=$3;
      var $132=$5;
      var $133=___gmpn_sub_n($129, $130, $131, $132);
      var $134=$cy;
      var $135=((($134)+($133))|0);
      $cy=$135;
      label = 16; break;
    case 16: 
      var $137=$2;
      var $138=$5;
      var $139=(($137+($138<<2))|0);
      $__p2=$139;
      var $140=$__p2;
      var $141=HEAP32[(($140)>>2)];
      $__x1=$141;
      var $142=$__x1;
      var $143=$cy;
      var $144=((($142)-($143))|0);
      var $145=$__p2;
      HEAP32[(($145)>>2)]=$144;
      var $146=$__x1;
      var $147=$cy;
      var $148=(($146)>>>0) < (($147)>>>0);
      if ($148) { label = 17; break; } else { label = 21; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $151=$__p2;
      var $152=(($151+4)|0);
      $__p2=$152;
      var $153=HEAP32[(($152)>>2)];
      var $154=((($153)-(1))|0);
      HEAP32[(($152)>>2)]=$154;
      var $155=(($153)|0)==0;
      if ($155) { label = 19; break; } else { label = 20; break; }
    case 19: 
      label = 18; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $160=$5;
      var $161=$4;
      var $162=((($161)+(1))|0);
      var $163=(($160)|0) > (($162)|0);
      var $164=(($163)&1);
      var $165=(($164)|0)!=0;
      var $166=(($165)&1);
      var $167=($166);
      var $168=(($167)|0)!=0;
      if ($168) { label = 23; break; } else { label = 31; break; }
    case 23: 
      var $170=$vinf;
      var $171=$vinf;
      var $172=$2;
      var $173=$4;
      var $174=(($172+($173<<2))|0);
      var $175=$4;
      var $176=((($175)+(1))|0);
      var $177=___gmpn_add_n($170, $171, $174, $176);
      $cy=$177;
      label = 24; break;
    case 24: 
      var $179=$c3;
      var $180=$kk1;
      var $181=(($179+($180<<2))|0);
      $__p4=$181;
      var $182=$__p4;
      var $183=HEAP32[(($182)>>2)];
      var $184=$cy;
      var $185=((($183)+($184))|0);
      $__x3=$185;
      var $186=$__x3;
      var $187=$__p4;
      HEAP32[(($187)>>2)]=$186;
      var $188=$__x3;
      var $189=$cy;
      var $190=(($188)>>>0) < (($189)>>>0);
      if ($190) { label = 25; break; } else { label = 29; break; }
    case 25: 
      label = 26; break;
    case 26: 
      var $193=$__p4;
      var $194=(($193+4)|0);
      $__p4=$194;
      var $195=HEAP32[(($194)>>2)];
      var $196=((($195)+(1))|0);
      HEAP32[(($194)>>2)]=$196;
      var $197=(($196)|0)==0;
      if ($197) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 26; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 32; break;
    case 31: 
      var $203=$vinf;
      var $204=$vinf;
      var $205=$2;
      var $206=$4;
      var $207=(($205+($206<<2))|0);
      var $208=$5;
      var $209=___gmpn_add_n($203, $204, $207, $208);
      label = 32; break;
    case 32: 
      var $211=$v1;
      var $212=$v1;
      var $213=$vinf;
      var $214=$5;
      var $215=___gmpn_sub_n($211, $212, $213, $214);
      $cy=$215;
      var $216=$vinf;
      var $217=(($216)|0);
      var $218=HEAP32[(($217)>>2)];
      $7=$218;
      var $219=$saved;
      var $220=$vinf;
      var $221=(($220)|0);
      HEAP32[(($221)>>2)]=$219;
      label = 33; break;
    case 33: 
      var $223=$v1;
      var $224=$5;
      var $225=(($223+($224<<2))|0);
      $__p6=$225;
      var $226=$__p6;
      var $227=HEAP32[(($226)>>2)];
      $__x5=$227;
      var $228=$__x5;
      var $229=$cy;
      var $230=((($228)-($229))|0);
      var $231=$__p6;
      HEAP32[(($231)>>2)]=$230;
      var $232=$__x5;
      var $233=$cy;
      var $234=(($232)>>>0) < (($233)>>>0);
      if ($234) { label = 34; break; } else { label = 38; break; }
    case 34: 
      label = 35; break;
    case 35: 
      var $237=$__p6;
      var $238=(($237+4)|0);
      $__p6=$238;
      var $239=HEAP32[(($238)>>2)];
      var $240=((($239)-(1))|0);
      HEAP32[(($238)>>2)]=$240;
      var $241=(($239)|0)==0;
      if ($241) { label = 36; break; } else { label = 37; break; }
    case 36: 
      label = 35; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      var $246=$c1;
      var $247=$c1;
      var $248=$2;
      var $249=$4;
      var $250=___gmpn_sub_n($246, $247, $248, $249);
      $cy=$250;
      label = 40; break;
    case 40: 
      var $252=$v1;
      $__p8=$252;
      var $253=$__p8;
      var $254=HEAP32[(($253)>>2)];
      $__x7=$254;
      var $255=$__x7;
      var $256=$cy;
      var $257=((($255)-($256))|0);
      var $258=$__p8;
      HEAP32[(($258)>>2)]=$257;
      var $259=$__x7;
      var $260=$cy;
      var $261=(($259)>>>0) < (($260)>>>0);
      if ($261) { label = 41; break; } else { label = 45; break; }
    case 41: 
      label = 42; break;
    case 42: 
      var $264=$__p8;
      var $265=(($264+4)|0);
      $__p8=$265;
      var $266=HEAP32[(($265)>>2)];
      var $267=((($266)-(1))|0);
      HEAP32[(($265)>>2)]=$267;
      var $268=(($266)|0)==0;
      if ($268) { label = 43; break; } else { label = 44; break; }
    case 43: 
      label = 42; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $273=$c3;
      var $274=$c3;
      var $275=$2;
      var $276=$4;
      var $277=___gmpn_add_n($273, $274, $275, $276);
      $cy=$277;
      var $278=$cy;
      var $279=$vinf;
      var $280=(($279)|0);
      var $281=HEAP32[(($280)>>2)];
      var $282=((($281)+($278))|0);
      HEAP32[(($280)>>2)]=$282;
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      var $286=$vinf;
      $__p10=$286;
      var $287=$__p10;
      var $288=HEAP32[(($287)>>2)];
      var $289=$7;
      var $290=((($288)+($289))|0);
      $__x9=$290;
      var $291=$__x9;
      var $292=$__p10;
      HEAP32[(($292)>>2)]=$291;
      var $293=$__x9;
      var $294=$7;
      var $295=(($293)>>>0) < (($294)>>>0);
      if ($295) { label = 50; break; } else { label = 54; break; }
    case 50: 
      label = 51; break;
    case 51: 
      var $298=$__p10;
      var $299=(($298+4)|0);
      $__p10=$299;
      var $300=HEAP32[(($299)>>2)];
      var $301=((($300)+(1))|0);
      HEAP32[(($299)>>2)]=$301;
      var $302=(($301)|0)==0;
      if ($302) { label = 52; break; } else { label = 53; break; }
    case 52: 
      label = 51; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_interpolate_5pts["X"]=1;

function ___gmpn_toom_interpolate_6pts($pp, $n, $flags, $w4, $w2, $w1, $w0n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $cy;
      var $cy4;
      var $cy6;
      var $embankment;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      var $__x7;
      var $__p8;
      var $__x9;
      var $__p10;
      var $__x11;
      var $__p12;
      var $__x13;
      var $__p14;
      var $__x15;
      var $__p16;
      var $__x17;
      var $__p18;
      $1=$pp;
      $2=$n;
      $3=$flags;
      $4=$w4;
      $5=$w2;
      $6=$w1;
      $7=$w0n;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $12=$3;
      var $13=$12 & 2;
      var $14=(($13)|0)!=0;
      if ($14) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $16=$5;
      var $17=$6;
      var $18=$5;
      var $19=$2;
      var $20=($19<<1);
      var $21=((($20)+(1))|0);
      var $22=___gmpn_add_n($16, $17, $18, $21);
      label = 9; break;
    case 8: 
      var $24=$5;
      var $25=$6;
      var $26=$5;
      var $27=$2;
      var $28=($27<<1);
      var $29=((($28)+(1))|0);
      var $30=___gmpn_sub_n($24, $25, $26, $29);
      label = 9; break;
    case 9: 
      var $32=$5;
      var $33=$5;
      var $34=$2;
      var $35=($34<<1);
      var $36=((($35)+(1))|0);
      var $37=___gmpn_rshift($32, $33, $36, 2);
      var $38=$6;
      var $39=$6;
      var $40=$1;
      var $41=$2;
      var $42=($41<<1);
      var $43=___gmpn_sub_n($38, $39, $40, $42);
      var $44=$2;
      var $45=($44<<1);
      var $46=$6;
      var $47=(($46+($45<<2))|0);
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)-($43))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=$6;
      var $51=$6;
      var $52=$2;
      var $53=($52<<1);
      var $54=((($53)+(1))|0);
      var $55=___gmpn_rshift($50, $51, $54, 1);
      var $56=$6;
      var $57=$6;
      var $58=$5;
      var $59=$2;
      var $60=($59<<1);
      var $61=((($60)+(1))|0);
      var $62=___gmpn_sub_n($56, $57, $58, $61);
      var $63=$6;
      var $64=$6;
      var $65=$2;
      var $66=($65<<1);
      var $67=((($66)+(1))|0);
      var $68=___gmpn_rshift($63, $64, $67, 1);
      var $69=$3;
      var $70=$69 & 1;
      var $71=(($70)|0)!=0;
      if ($71) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $73=$4;
      var $74=$1;
      var $75=$2;
      var $76=($75<<1);
      var $77=(($74+($76<<2))|0);
      var $78=$4;
      var $79=$2;
      var $80=($79<<1);
      var $81=((($80)+(1))|0);
      var $82=___gmpn_add_n($73, $77, $78, $81);
      var $83=$4;
      var $84=$4;
      var $85=$2;
      var $86=($85<<1);
      var $87=((($86)+(1))|0);
      var $88=___gmpn_rshift($83, $84, $87, 1);
      label = 12; break;
    case 11: 
      var $90=$4;
      var $91=$1;
      var $92=$2;
      var $93=($92<<1);
      var $94=(($91+($93<<2))|0);
      var $95=$4;
      var $96=$2;
      var $97=($96<<1);
      var $98=((($97)+(1))|0);
      var $99=___gmpn_sub_n($90, $94, $95, $98);
      var $100=$4;
      var $101=$4;
      var $102=$2;
      var $103=($102<<1);
      var $104=((($103)+(1))|0);
      var $105=___gmpn_rshift($100, $101, $104, 1);
      label = 12; break;
    case 12: 
      var $107=$5;
      var $108=$5;
      var $109=$4;
      var $110=$2;
      var $111=($110<<1);
      var $112=((($111)+(1))|0);
      var $113=___gmpn_sub_n($107, $108, $109, $112);
      var $114=$5;
      var $115=$5;
      var $116=$2;
      var $117=($116<<1);
      var $118=((($117)+(1))|0);
      var $119=___gmpn_bdiv_dbm1c($114, $115, $118, 1431655765, 0);
      var $120=3 & $119;
      var $121=$1;
      var $122=$2;
      var $123=($122<<1);
      var $124=(($121+($123<<2))|0);
      var $125=$1;
      var $126=$2;
      var $127=($126<<1);
      var $128=(($125+($127<<2))|0);
      var $129=$4;
      var $130=$2;
      var $131=($130<<1);
      var $132=((($131)+(1))|0);
      var $133=___gmpn_sub_n($124, $128, $129, $132);
      var $134=$1;
      var $135=$2;
      var $136=($135<<1);
      var $137=(($134+($136<<2))|0);
      var $138=$1;
      var $139=$2;
      var $140=($139<<1);
      var $141=(($138+($140<<2))|0);
      var $142=$1;
      var $143=$2;
      var $144=($143<<1);
      var $145=___gmpn_sub_n($137, $141, $142, $144);
      var $146=$2;
      var $147=($146<<1);
      var $148=$1;
      var $149=$2;
      var $150=($149<<1);
      var $151=(($148+($150<<2))|0);
      var $152=(($151+($147<<2))|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=((($153)-($145))|0);
      HEAP32[(($152)>>2)]=$154;
      var $155=$6;
      var $156=$6;
      var $157=$1;
      var $158=$2;
      var $159=($158<<1);
      var $160=(($157+($159<<2))|0);
      var $161=$2;
      var $162=($161<<1);
      var $163=((($162)+(1))|0);
      var $164=___gmpn_sub_n($155, $156, $160, $163);
      var $165=$6;
      var $166=$6;
      var $167=$2;
      var $168=($167<<1);
      var $169=((($168)+(1))|0);
      var $170=___gmpn_bdiv_dbm1c($165, $166, $169, 1431655765, 0);
      var $171=3 & $170;
      var $172=$1;
      var $173=$2;
      var $174=(($172+($173<<2))|0);
      var $175=$1;
      var $176=$2;
      var $177=(($175+($176<<2))|0);
      var $178=$4;
      var $179=$2;
      var $180=($179<<1);
      var $181=((($180)+(1))|0);
      var $182=___gmpn_add_n($174, $177, $178, $181);
      $cy=$182;
      label = 13; break;
    case 13: 
      var $184=$1;
      var $185=$2;
      var $186=((($185)*(3))&-1);
      var $187=(($184+($186<<2))|0);
      var $188=(($187+4)|0);
      $__p=$188;
      var $189=$__p;
      var $190=HEAP32[(($189)>>2)];
      var $191=$cy;
      var $192=((($190)+($191))|0);
      $__x=$192;
      var $193=$__x;
      var $194=$__p;
      HEAP32[(($194)>>2)]=$193;
      var $195=$__x;
      var $196=$cy;
      var $197=(($195)>>>0) < (($196)>>>0);
      if ($197) { label = 14; break; } else { label = 18; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $200=$__p;
      var $201=(($200+4)|0);
      $__p=$201;
      var $202=HEAP32[(($201)>>2)];
      var $203=((($202)+(1))|0);
      HEAP32[(($201)>>2)]=$203;
      var $204=(($203)|0)==0;
      if ($204) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 15; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $209=$4;
      var $210=$1;
      var $211=$2;
      var $212=((($211)*(5))&-1);
      var $213=(($210+($212<<2))|0);
      var $214=$7;
      var $215=___gmpn_lshift($209, $213, $214, 2);
      $cy=$215;
      var $216=$5;
      var $217=$5;
      var $218=$4;
      var $219=$7;
      var $220=___gmpn_sub_n($216, $217, $218, $219);
      var $221=$cy;
      var $222=((($221)+($220))|0);
      $cy=$222;
      label = 20; break;
    case 20: 
      var $224=$5;
      var $225=$7;
      var $226=(($224+($225<<2))|0);
      $__p2=$226;
      var $227=$__p2;
      var $228=HEAP32[(($227)>>2)];
      $__x1=$228;
      var $229=$__x1;
      var $230=$cy;
      var $231=((($229)-($230))|0);
      var $232=$__p2;
      HEAP32[(($232)>>2)]=$231;
      var $233=$__x1;
      var $234=$cy;
      var $235=(($233)>>>0) < (($234)>>>0);
      if ($235) { label = 21; break; } else { label = 25; break; }
    case 21: 
      label = 22; break;
    case 22: 
      var $238=$__p2;
      var $239=(($238+4)|0);
      $__p2=$239;
      var $240=HEAP32[(($239)>>2)];
      var $241=((($240)-(1))|0);
      HEAP32[(($239)>>2)]=$241;
      var $242=(($240)|0)==0;
      if ($242) { label = 23; break; } else { label = 24; break; }
    case 23: 
      label = 22; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $247=$1;
      var $248=$2;
      var $249=(($247+($248<<2))|0);
      var $250=$1;
      var $251=$2;
      var $252=(($250+($251<<2))|0);
      var $253=$5;
      var $254=$2;
      var $255=___gmpn_sub_n($249, $252, $253, $254);
      $cy=$255;
      label = 27; break;
    case 27: 
      var $257=$1;
      var $258=$2;
      var $259=($258<<1);
      var $260=(($257+($259<<2))|0);
      $__p4=$260;
      var $261=$__p4;
      var $262=HEAP32[(($261)>>2)];
      $__x3=$262;
      var $263=$__x3;
      var $264=$cy;
      var $265=((($263)-($264))|0);
      var $266=$__p4;
      HEAP32[(($266)>>2)]=$265;
      var $267=$__x3;
      var $268=$cy;
      var $269=(($267)>>>0) < (($268)>>>0);
      if ($269) { label = 28; break; } else { label = 32; break; }
    case 28: 
      label = 29; break;
    case 29: 
      var $272=$__p4;
      var $273=(($272+4)|0);
      $__p4=$273;
      var $274=HEAP32[(($273)>>2)];
      var $275=((($274)-(1))|0);
      HEAP32[(($273)>>2)]=$275;
      var $276=(($274)|0)==0;
      if ($276) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 29; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $281=$2;
      var $282=($281<<1);
      var $283=$1;
      var $284=$2;
      var $285=($284<<1);
      var $286=(($283+($285<<2))|0);
      var $287=(($286+($282<<2))|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=$1;
      var $290=$2;
      var $291=((($290)*(3))&-1);
      var $292=(($289+($291<<2))|0);
      var $293=$1;
      var $294=$2;
      var $295=((($294)*(3))&-1);
      var $296=(($293+($295<<2))|0);
      var $297=$5;
      var $298=$2;
      var $299=___gmpn_add_n($292, $296, $297, $298);
      var $300=((($288)+($299))|0);
      $cy4=$300;
      var $301=$2;
      var $302=($301<<1);
      var $303=$5;
      var $304=(($303+($302<<2))|0);
      var $305=HEAP32[(($304)>>2)];
      var $306=$1;
      var $307=$2;
      var $308=($307<<2);
      var $309=(($306+($308<<2))|0);
      var $310=$6;
      var $311=$5;
      var $312=$2;
      var $313=(($311+($312<<2))|0);
      var $314=$2;
      var $315=___gmpn_add_n($309, $310, $313, $314);
      var $316=((($305)+($315))|0);
      $cy=$316;
      label = 34; break;
    case 34: 
      var $318=$6;
      var $319=$2;
      var $320=(($318+($319<<2))|0);
      $__p6=$320;
      var $321=$__p6;
      var $322=HEAP32[(($321)>>2)];
      var $323=$cy;
      var $324=((($322)+($323))|0);
      $__x5=$324;
      var $325=$__x5;
      var $326=$__p6;
      HEAP32[(($326)>>2)]=$325;
      var $327=$__x5;
      var $328=$cy;
      var $329=(($327)>>>0) < (($328)>>>0);
      if ($329) { label = 35; break; } else { label = 39; break; }
    case 35: 
      label = 36; break;
    case 36: 
      var $332=$__p6;
      var $333=(($332+4)|0);
      $__p6=$333;
      var $334=HEAP32[(($333)>>2)];
      var $335=((($334)+(1))|0);
      HEAP32[(($333)>>2)]=$335;
      var $336=(($335)|0)==0;
      if ($336) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 36; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $341=$7;
      var $342=$2;
      var $343=(($341)|0) > (($342)|0);
      var $344=(($343)&1);
      var $345=(($344)|0)!=0;
      var $346=(($345)&1);
      var $347=($346);
      var $348=(($347)|0)!=0;
      if ($348) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $350=$2;
      var $351=($350<<1);
      var $352=$6;
      var $353=(($352+($351<<2))|0);
      var $354=HEAP32[(($353)>>2)];
      var $355=$1;
      var $356=$2;
      var $357=((($356)*(5))&-1);
      var $358=(($355+($357<<2))|0);
      var $359=$1;
      var $360=$2;
      var $361=((($360)*(5))&-1);
      var $362=(($359+($361<<2))|0);
      var $363=$6;
      var $364=$2;
      var $365=(($363+($364<<2))|0);
      var $366=$2;
      var $367=___gmpn_add_n($358, $362, $365, $366);
      var $368=((($354)+($367))|0);
      $cy6=$368;
      label = 43; break;
    case 42: 
      var $370=$1;
      var $371=$2;
      var $372=((($371)*(5))&-1);
      var $373=(($370+($372<<2))|0);
      var $374=$1;
      var $375=$2;
      var $376=((($375)*(5))&-1);
      var $377=(($374+($376<<2))|0);
      var $378=$6;
      var $379=$2;
      var $380=(($378+($379<<2))|0);
      var $381=$7;
      var $382=___gmpn_add_n($373, $377, $380, $381);
      $cy6=$382;
      label = 43; break;
    case 43: 
      var $384=$1;
      var $385=$2;
      var $386=($385<<1);
      var $387=(($384+($386<<2))|0);
      var $388=$1;
      var $389=$2;
      var $390=($389<<1);
      var $391=(($388+($390<<2))|0);
      var $392=$1;
      var $393=$2;
      var $394=($393<<2);
      var $395=(($392+($394<<2))|0);
      var $396=$2;
      var $397=$7;
      var $398=((($396)+($397))|0);
      var $399=___gmpn_sub_n($387, $391, $395, $398);
      $cy=$399;
      var $400=$7;
      var $401=((($400)-(1))|0);
      var $402=$1;
      var $403=$2;
      var $404=((($403)*(5))&-1);
      var $405=(($402+($404<<2))|0);
      var $406=(($405+($401<<2))|0);
      var $407=HEAP32[(($406)>>2)];
      var $408=((($407)-(1))|0);
      $embankment=$408;
      var $409=$7;
      var $410=((($409)-(1))|0);
      var $411=$1;
      var $412=$2;
      var $413=((($412)*(5))&-1);
      var $414=(($411+($413<<2))|0);
      var $415=(($414+($410<<2))|0);
      HEAP32[(($415)>>2)]=1;
      var $416=$7;
      var $417=$2;
      var $418=(($416)|0) > (($417)|0);
      var $419=(($418)&1);
      var $420=(($419)|0)!=0;
      var $421=(($420)&1);
      var $422=($421);
      var $423=(($422)|0)!=0;
      if ($423) { label = 44; break; } else { label = 76; break; }
    case 44: 
      var $425=$cy4;
      var $426=$cy6;
      var $427=(($425)>>>0) > (($426)>>>0);
      if ($427) { label = 45; break; } else { label = 53; break; }
    case 45: 
      label = 46; break;
    case 46: 
      var $430=$1;
      var $431=$2;
      var $432=($431<<2);
      var $433=(($430+($432<<2))|0);
      $__p8=$433;
      var $434=$__p8;
      var $435=HEAP32[(($434)>>2)];
      var $436=$cy4;
      var $437=$cy6;
      var $438=((($436)-($437))|0);
      var $439=((($435)+($438))|0);
      $__x7=$439;
      var $440=$__x7;
      var $441=$__p8;
      HEAP32[(($441)>>2)]=$440;
      var $442=$__x7;
      var $443=$cy4;
      var $444=$cy6;
      var $445=((($443)-($444))|0);
      var $446=(($442)>>>0) < (($445)>>>0);
      if ($446) { label = 47; break; } else { label = 51; break; }
    case 47: 
      label = 48; break;
    case 48: 
      var $449=$__p8;
      var $450=(($449+4)|0);
      $__p8=$450;
      var $451=HEAP32[(($450)>>2)];
      var $452=((($451)+(1))|0);
      HEAP32[(($450)>>2)]=$452;
      var $453=(($452)|0)==0;
      if ($453) { label = 49; break; } else { label = 50; break; }
    case 49: 
      label = 48; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 61; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $460=$1;
      var $461=$2;
      var $462=($461<<2);
      var $463=(($460+($462<<2))|0);
      $__p10=$463;
      var $464=$__p10;
      var $465=HEAP32[(($464)>>2)];
      $__x9=$465;
      var $466=$__x9;
      var $467=$cy6;
      var $468=$cy4;
      var $469=((($467)-($468))|0);
      var $470=((($466)-($469))|0);
      var $471=$__p10;
      HEAP32[(($471)>>2)]=$470;
      var $472=$__x9;
      var $473=$cy6;
      var $474=$cy4;
      var $475=((($473)-($474))|0);
      var $476=(($472)>>>0) < (($475)>>>0);
      if ($476) { label = 55; break; } else { label = 59; break; }
    case 55: 
      label = 56; break;
    case 56: 
      var $479=$__p10;
      var $480=(($479+4)|0);
      $__p10=$480;
      var $481=HEAP32[(($480)>>2)];
      var $482=((($481)-(1))|0);
      HEAP32[(($480)>>2)]=$482;
      var $483=(($481)|0)==0;
      if ($483) { label = 57; break; } else { label = 58; break; }
    case 57: 
      label = 56; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $490=$1;
      var $491=$2;
      var $492=((($491)*(3))&-1);
      var $493=(($490+($492<<2))|0);
      var $494=$7;
      var $495=(($493+($494<<2))|0);
      $__p12=$495;
      var $496=$__p12;
      var $497=HEAP32[(($496)>>2)];
      $__x11=$497;
      var $498=$__x11;
      var $499=$cy;
      var $500=((($498)-($499))|0);
      var $501=$__p12;
      HEAP32[(($501)>>2)]=$500;
      var $502=$__x11;
      var $503=$cy;
      var $504=(($502)>>>0) < (($503)>>>0);
      if ($504) { label = 63; break; } else { label = 67; break; }
    case 63: 
      label = 64; break;
    case 64: 
      var $507=$__p12;
      var $508=(($507+4)|0);
      $__p12=$508;
      var $509=HEAP32[(($508)>>2)];
      var $510=((($509)-(1))|0);
      HEAP32[(($508)>>2)]=$510;
      var $511=(($509)|0)==0;
      if ($511) { label = 65; break; } else { label = 66; break; }
    case 65: 
      label = 64; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $517=$1;
      var $518=$2;
      var $519=((($518)*(5))&-1);
      var $520=(($517+($519<<2))|0);
      var $521=$2;
      var $522=(($520+($521<<2))|0);
      $__p14=$522;
      var $523=$__p14;
      var $524=HEAP32[(($523)>>2)];
      var $525=$cy6;
      var $526=((($524)+($525))|0);
      $__x13=$526;
      var $527=$__x13;
      var $528=$__p14;
      HEAP32[(($528)>>2)]=$527;
      var $529=$__x13;
      var $530=$cy6;
      var $531=(($529)>>>0) < (($530)>>>0);
      if ($531) { label = 70; break; } else { label = 74; break; }
    case 70: 
      label = 71; break;
    case 71: 
      var $534=$__p14;
      var $535=(($534+4)|0);
      $__p14=$535;
      var $536=HEAP32[(($535)>>2)];
      var $537=((($536)+(1))|0);
      HEAP32[(($535)>>2)]=$537;
      var $538=(($537)|0)==0;
      if ($538) { label = 72; break; } else { label = 73; break; }
    case 72: 
      label = 71; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 91; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $545=$1;
      var $546=$2;
      var $547=($546<<2);
      var $548=(($545+($547<<2))|0);
      $__p16=$548;
      var $549=$__p16;
      var $550=HEAP32[(($549)>>2)];
      var $551=$cy4;
      var $552=((($550)+($551))|0);
      $__x15=$552;
      var $553=$__x15;
      var $554=$__p16;
      HEAP32[(($554)>>2)]=$553;
      var $555=$__x15;
      var $556=$cy4;
      var $557=(($555)>>>0) < (($556)>>>0);
      if ($557) { label = 78; break; } else { label = 82; break; }
    case 78: 
      label = 79; break;
    case 79: 
      var $560=$__p16;
      var $561=(($560+4)|0);
      $__p16=$561;
      var $562=HEAP32[(($561)>>2)];
      var $563=((($562)+(1))|0);
      HEAP32[(($561)>>2)]=$563;
      var $564=(($563)|0)==0;
      if ($564) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 79; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 84; break;
    case 84: 
      var $570=$1;
      var $571=$2;
      var $572=((($571)*(3))&-1);
      var $573=(($570+($572<<2))|0);
      var $574=$7;
      var $575=(($573+($574<<2))|0);
      $__p18=$575;
      var $576=$__p18;
      var $577=HEAP32[(($576)>>2)];
      $__x17=$577;
      var $578=$__x17;
      var $579=$cy;
      var $580=$cy6;
      var $581=((($579)+($580))|0);
      var $582=((($578)-($581))|0);
      var $583=$__p18;
      HEAP32[(($583)>>2)]=$582;
      var $584=$__x17;
      var $585=$cy;
      var $586=$cy6;
      var $587=((($585)+($586))|0);
      var $588=(($584)>>>0) < (($587)>>>0);
      if ($588) { label = 85; break; } else { label = 89; break; }
    case 85: 
      label = 86; break;
    case 86: 
      var $591=$__p18;
      var $592=(($591+4)|0);
      $__p18=$592;
      var $593=HEAP32[(($592)>>2)];
      var $594=((($593)-(1))|0);
      HEAP32[(($592)>>2)]=$594;
      var $595=(($593)|0)==0;
      if ($595) { label = 87; break; } else { label = 88; break; }
    case 87: 
      label = 86; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $601=$embankment;
      var $602=$7;
      var $603=((($602)-(1))|0);
      var $604=$1;
      var $605=$2;
      var $606=((($605)*(5))&-1);
      var $607=(($604+($606<<2))|0);
      var $608=(($607+($603<<2))|0);
      var $609=HEAP32[(($608)>>2)];
      var $610=((($609)+($601))|0);
      HEAP32[(($608)>>2)]=$610;

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_interpolate_6pts["X"]=1;

function ___gmpn_toom_interpolate_7pts($rp, $n, $flags, $w1, $w3, $w4, $w5, $w6n, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $m;
      var $cy;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      $1=$rp;
      $2=$n;
      $3=$flags;
      $4=$w1;
      $5=$w3;
      $6=$w4;
      $7=$w5;
      $8=$w6n;
      $9=$tp;
      var $10=$2;
      var $11=($10<<1);
      var $12=((($11)+(1))|0);
      $m=$12;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $17=$7;
      var $18=$7;
      var $19=$6;
      var $20=$m;
      var $21=___gmpn_add_n($17, $18, $19, $20);
      var $22=$3;
      var $23=$22 & 1;
      var $24=(($23)|0)!=0;
      if ($24) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $26=$4;
      var $27=$4;
      var $28=$6;
      var $29=$m;
      var $30=___gmpn_add_n($26, $27, $28, $29);
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $33=$4;
      var $34=$4;
      var $35=$m;
      var $36=___gmpn_rshift($33, $34, $35, 1);
      label = 13; break;
    case 10: 
      var $38=$4;
      var $39=$6;
      var $40=$4;
      var $41=$m;
      var $42=___gmpn_sub_n($38, $39, $40, $41);
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $45=$4;
      var $46=$4;
      var $47=$m;
      var $48=___gmpn_rshift($45, $46, $47, 1);
      label = 13; break;
    case 13: 
      var $50=$6;
      var $51=$6;
      var $52=$m;
      var $53=$1;
      var $54=$2;
      var $55=($54<<1);
      var $56=___gmpn_sub($50, $51, $52, $53, $55);
      var $57=$6;
      var $58=$6;
      var $59=$4;
      var $60=$m;
      var $61=___gmpn_sub_n($57, $58, $59, $60);
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $64=$6;
      var $65=$6;
      var $66=$m;
      var $67=___gmpn_rshift($64, $65, $66, 2);
      var $68=$9;
      var $69=$1;
      var $70=$2;
      var $71=((($70)*(6))&-1);
      var $72=(($69+($71<<2))|0);
      var $73=$8;
      var $74=___gmpn_lshift($68, $72, $73, 4);
      var $75=$8;
      var $76=$9;
      var $77=(($76+($75<<2))|0);
      HEAP32[(($77)>>2)]=$74;
      var $78=$6;
      var $79=$6;
      var $80=$m;
      var $81=$9;
      var $82=$8;
      var $83=((($82)+(1))|0);
      var $84=___gmpn_sub($78, $79, $80, $81, $83);
      var $85=$3;
      var $86=$85 & 2;
      var $87=(($86)|0)!=0;
      if ($87) { label = 16; break; } else { label = 19; break; }
    case 16: 
      var $89=$5;
      var $90=$5;
      var $91=$1;
      var $92=$2;
      var $93=($92<<1);
      var $94=(($91+($93<<2))|0);
      var $95=$m;
      var $96=___gmpn_add_n($89, $90, $94, $95);
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $99=$5;
      var $100=$5;
      var $101=$m;
      var $102=___gmpn_rshift($99, $100, $101, 1);
      label = 22; break;
    case 19: 
      var $104=$5;
      var $105=$1;
      var $106=$2;
      var $107=($106<<1);
      var $108=(($105+($107<<2))|0);
      var $109=$5;
      var $110=$m;
      var $111=___gmpn_sub_n($104, $108, $109, $110);
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $114=$5;
      var $115=$5;
      var $116=$m;
      var $117=___gmpn_rshift($114, $115, $116, 1);
      label = 22; break;
    case 22: 
      var $119=$1;
      var $120=$2;
      var $121=($120<<1);
      var $122=(($119+($121<<2))|0);
      var $123=$1;
      var $124=$2;
      var $125=($124<<1);
      var $126=(($123+($125<<2))|0);
      var $127=$5;
      var $128=$m;
      var $129=___gmpn_sub_n($122, $126, $127, $128);
      var $130=$7;
      var $131=$1;
      var $132=$2;
      var $133=($132<<1);
      var $134=(($131+($133<<2))|0);
      var $135=$m;
      var $136=___gmpn_submul_1($130, $134, $135, 65);
      var $137=$1;
      var $138=$2;
      var $139=($138<<1);
      var $140=(($137+($139<<2))|0);
      var $141=$1;
      var $142=$2;
      var $143=($142<<1);
      var $144=(($141+($143<<2))|0);
      var $145=$m;
      var $146=$1;
      var $147=$2;
      var $148=((($147)*(6))&-1);
      var $149=(($146+($148<<2))|0);
      var $150=$8;
      var $151=___gmpn_sub($140, $144, $145, $149, $150);
      var $152=$1;
      var $153=$2;
      var $154=($153<<1);
      var $155=(($152+($154<<2))|0);
      var $156=$1;
      var $157=$2;
      var $158=($157<<1);
      var $159=(($156+($158<<2))|0);
      var $160=$m;
      var $161=$1;
      var $162=$2;
      var $163=($162<<1);
      var $164=___gmpn_sub($155, $159, $160, $161, $163);
      var $165=$7;
      var $166=$1;
      var $167=$2;
      var $168=($167<<1);
      var $169=(($166+($168<<2))|0);
      var $170=$m;
      var $171=___gmpn_addmul_1($165, $169, $170, 45);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $174=$7;
      var $175=$7;
      var $176=$m;
      var $177=___gmpn_rshift($174, $175, $176, 1);
      var $178=$6;
      var $179=$6;
      var $180=$1;
      var $181=$2;
      var $182=($181<<1);
      var $183=(($180+($182<<2))|0);
      var $184=$m;
      var $185=___gmpn_sub_n($178, $179, $183, $184);
      var $186=$6;
      var $187=$6;
      var $188=$m;
      var $189=___gmpn_bdiv_dbm1c($186, $187, $188, 1431655765, 0);
      var $190=3 & $189;
      var $191=$1;
      var $192=$2;
      var $193=($192<<1);
      var $194=(($191+($193<<2))|0);
      var $195=$1;
      var $196=$2;
      var $197=($196<<1);
      var $198=(($195+($197<<2))|0);
      var $199=$6;
      var $200=$m;
      var $201=___gmpn_sub_n($194, $198, $199, $200);
      var $202=$4;
      var $203=$7;
      var $204=$4;
      var $205=$m;
      var $206=___gmpn_sub_n($202, $203, $204, $205);
      var $207=$9;
      var $208=$5;
      var $209=$m;
      var $210=___gmpn_lshift($207, $208, $209, 3);
      var $211=$7;
      var $212=$7;
      var $213=$9;
      var $214=$m;
      var $215=___gmpn_sub_n($211, $212, $213, $214);
      var $216=$7;
      var $217=$7;
      var $218=$m;
      ___gmpn_divexact_1($216, $217, $218, 9);
      var $219=$5;
      var $220=$5;
      var $221=$7;
      var $222=$m;
      var $223=___gmpn_sub_n($219, $220, $221, $222);
      var $224=$4;
      var $225=$4;
      var $226=$m;
      var $227=___gmpn_bdiv_dbm1c($224, $225, $226, 286331153, 0);
      var $228=$227;
      var $229=15 & $228;
      var $230=$4;
      var $231=$4;
      var $232=$7;
      var $233=$m;
      var $234=___gmpn_add_n($230, $231, $232, $233);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $237=$4;
      var $238=$4;
      var $239=$m;
      var $240=___gmpn_rshift($237, $238, $239, 1);
      var $241=$7;
      var $242=$7;
      var $243=$4;
      var $244=$m;
      var $245=___gmpn_sub_n($241, $242, $243, $244);
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $256=$1;
      var $257=$2;
      var $258=(($256+($257<<2))|0);
      var $259=$1;
      var $260=$2;
      var $261=(($259+($260<<2))|0);
      var $262=$4;
      var $263=$m;
      var $264=___gmpn_add_n($258, $261, $262, $263);
      $cy=$264;
      label = 37; break;
    case 37: 
      var $266=$1;
      var $267=$2;
      var $268=($267<<1);
      var $269=(($266+($268<<2))|0);
      var $270=$2;
      var $271=(($269+($270<<2))|0);
      var $272=(($271+4)|0);
      $__p=$272;
      var $273=$__p;
      var $274=HEAP32[(($273)>>2)];
      var $275=$cy;
      var $276=((($274)+($275))|0);
      $__x=$276;
      var $277=$__x;
      var $278=$__p;
      HEAP32[(($278)>>2)]=$277;
      var $279=$__x;
      var $280=$cy;
      var $281=(($279)>>>0) < (($280)>>>0);
      if ($281) { label = 38; break; } else { label = 42; break; }
    case 38: 
      label = 39; break;
    case 39: 
      var $284=$__p;
      var $285=(($284+4)|0);
      $__p=$285;
      var $286=HEAP32[(($285)>>2)];
      var $287=((($286)+(1))|0);
      HEAP32[(($285)>>2)]=$287;
      var $288=(($287)|0)==0;
      if ($288) { label = 40; break; } else { label = 41; break; }
    case 40: 
      label = 39; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $293=$1;
      var $294=$2;
      var $295=((($294)*(3))&-1);
      var $296=(($293+($295<<2))|0);
      var $297=$1;
      var $298=$2;
      var $299=((($298)*(3))&-1);
      var $300=(($297+($299<<2))|0);
      var $301=$5;
      var $302=$2;
      var $303=___gmpn_add_n($296, $300, $301, $302);
      $cy=$303;
      label = 44; break;
    case 44: 
      var $305=$5;
      var $306=$2;
      var $307=(($305+($306<<2))|0);
      $__p2=$307;
      var $308=$__p2;
      var $309=HEAP32[(($308)>>2)];
      var $310=$2;
      var $311=($310<<1);
      var $312=$1;
      var $313=$2;
      var $314=($313<<1);
      var $315=(($312+($314<<2))|0);
      var $316=(($315+($311<<2))|0);
      var $317=HEAP32[(($316)>>2)];
      var $318=$cy;
      var $319=((($317)+($318))|0);
      var $320=((($309)+($319))|0);
      $__x1=$320;
      var $321=$__x1;
      var $322=$__p2;
      HEAP32[(($322)>>2)]=$321;
      var $323=$__x1;
      var $324=$2;
      var $325=($324<<1);
      var $326=$1;
      var $327=$2;
      var $328=($327<<1);
      var $329=(($326+($328<<2))|0);
      var $330=(($329+($325<<2))|0);
      var $331=HEAP32[(($330)>>2)];
      var $332=$cy;
      var $333=((($331)+($332))|0);
      var $334=(($323)>>>0) < (($333)>>>0);
      if ($334) { label = 45; break; } else { label = 49; break; }
    case 45: 
      label = 46; break;
    case 46: 
      var $337=$__p2;
      var $338=(($337+4)|0);
      $__p2=$338;
      var $339=HEAP32[(($338)>>2)];
      var $340=((($339)+(1))|0);
      HEAP32[(($338)>>2)]=$340;
      var $341=(($340)|0)==0;
      if ($341) { label = 47; break; } else { label = 48; break; }
    case 47: 
      label = 46; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $346=$1;
      var $347=$2;
      var $348=($347<<2);
      var $349=(($346+($348<<2))|0);
      var $350=$5;
      var $351=$2;
      var $352=(($350+($351<<2))|0);
      var $353=$6;
      var $354=$2;
      var $355=___gmpn_add_n($349, $352, $353, $354);
      $cy=$355;
      label = 51; break;
    case 51: 
      var $357=$6;
      var $358=$2;
      var $359=(($357+($358<<2))|0);
      $__p4=$359;
      var $360=$__p4;
      var $361=HEAP32[(($360)>>2)];
      var $362=$2;
      var $363=($362<<1);
      var $364=$5;
      var $365=(($364+($363<<2))|0);
      var $366=HEAP32[(($365)>>2)];
      var $367=$cy;
      var $368=((($366)+($367))|0);
      var $369=((($361)+($368))|0);
      $__x3=$369;
      var $370=$__x3;
      var $371=$__p4;
      HEAP32[(($371)>>2)]=$370;
      var $372=$__x3;
      var $373=$2;
      var $374=($373<<1);
      var $375=$5;
      var $376=(($375+($374<<2))|0);
      var $377=HEAP32[(($376)>>2)];
      var $378=$cy;
      var $379=((($377)+($378))|0);
      var $380=(($372)>>>0) < (($379)>>>0);
      if ($380) { label = 52; break; } else { label = 56; break; }
    case 52: 
      label = 53; break;
    case 53: 
      var $383=$__p4;
      var $384=(($383+4)|0);
      $__p4=$384;
      var $385=HEAP32[(($384)>>2)];
      var $386=((($385)+(1))|0);
      HEAP32[(($384)>>2)]=$386;
      var $387=(($386)|0)==0;
      if ($387) { label = 54; break; } else { label = 55; break; }
    case 54: 
      label = 53; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $392=$1;
      var $393=$2;
      var $394=((($393)*(5))&-1);
      var $395=(($392+($394<<2))|0);
      var $396=$6;
      var $397=$2;
      var $398=(($396+($397<<2))|0);
      var $399=$7;
      var $400=$2;
      var $401=___gmpn_add_n($395, $398, $399, $400);
      $cy=$401;
      label = 58; break;
    case 58: 
      var $403=$7;
      var $404=$2;
      var $405=(($403+($404<<2))|0);
      $__p6=$405;
      var $406=$__p6;
      var $407=HEAP32[(($406)>>2)];
      var $408=$2;
      var $409=($408<<1);
      var $410=$6;
      var $411=(($410+($409<<2))|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=$cy;
      var $414=((($412)+($413))|0);
      var $415=((($407)+($414))|0);
      $__x5=$415;
      var $416=$__x5;
      var $417=$__p6;
      HEAP32[(($417)>>2)]=$416;
      var $418=$__x5;
      var $419=$2;
      var $420=($419<<1);
      var $421=$6;
      var $422=(($421+($420<<2))|0);
      var $423=HEAP32[(($422)>>2)];
      var $424=$cy;
      var $425=((($423)+($424))|0);
      var $426=(($418)>>>0) < (($425)>>>0);
      if ($426) { label = 59; break; } else { label = 63; break; }
    case 59: 
      label = 60; break;
    case 60: 
      var $429=$__p6;
      var $430=(($429+4)|0);
      $__p6=$430;
      var $431=HEAP32[(($430)>>2)];
      var $432=((($431)+(1))|0);
      HEAP32[(($430)>>2)]=$432;
      var $433=(($432)|0)==0;
      if ($433) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 60; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $438=$8;
      var $439=$2;
      var $440=((($439)+(1))|0);
      var $441=(($438)|0) > (($440)|0);
      if ($441) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $443=$1;
      var $444=$2;
      var $445=((($444)*(6))&-1);
      var $446=(($443+($445<<2))|0);
      var $447=$1;
      var $448=$2;
      var $449=((($448)*(6))&-1);
      var $450=(($447+($449<<2))|0);
      var $451=$8;
      var $452=$7;
      var $453=$2;
      var $454=(($452+($453<<2))|0);
      var $455=$2;
      var $456=((($455)+(1))|0);
      var $457=___gmpn_add($446, $450, $451, $454, $456);
      label = 67; break;
    case 66: 
      var $459=$1;
      var $460=$2;
      var $461=((($460)*(6))&-1);
      var $462=(($459+($461<<2))|0);
      var $463=$1;
      var $464=$2;
      var $465=((($464)*(6))&-1);
      var $466=(($463+($465<<2))|0);
      var $467=$7;
      var $468=$2;
      var $469=(($467+($468<<2))|0);
      var $470=$8;
      var $471=___gmpn_add_n($462, $466, $469, $470);
      label = 67; break;
    case 67: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_interpolate_7pts["X"]=1;

function ___gmpn_toom_interpolate_8pts($pp, $n, $r3, $r7, $spt, $ws) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $cy;
      var $r5;
      var $r1;
      var $__cy;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__x3;
      var $__p4;
      var $__cy5;
      var $__x6;
      var $__p7;
      var $__x8;
      var $__p9;
      var $__x10;
      var $__p11;
      var $__x12;
      var $__p13;
      var $__x14;
      var $__p15;
      var $__x16;
      var $__p17;
      var $__x18;
      var $__p19;
      var $__x20;
      var $__p21;
      var $__x22;
      var $__p23;
      var $__x24;
      var $__p25;
      var $__x26;
      var $__p27;
      $1=$pp;
      $2=$n;
      $3=$r3;
      $4=$r7;
      $5=$spt;
      $6=$ws;
      var $7=$1;
      var $8=$2;
      var $9=((($8)*(3))&-1);
      var $10=(($7+($9<<2))|0);
      $r5=$10;
      var $11=$1;
      var $12=$2;
      var $13=((($12)*(7))&-1);
      var $14=(($11+($13<<2))|0);
      $r1=$14;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $17=$3;
      var $18=$2;
      var $19=(($17+($18<<2))|0);
      $__p=$19;
      var $20=$__p;
      var $21=HEAP32[(($20)>>2)];
      $__x=$21;
      var $22=$__x;
      var $23=$1;
      var $24=(($23)|0);
      var $25=HEAP32[(($24)>>2)];
      var $26=$25 >>> 4;
      var $27=((($22)-($26))|0);
      var $28=$__p;
      HEAP32[(($28)>>2)]=$27;
      var $29=$__x;
      var $30=$1;
      var $31=(($30)|0);
      var $32=HEAP32[(($31)>>2)];
      var $33=$32 >>> 4;
      var $34=(($29)>>>0) < (($33)>>>0);
      if ($34) { label = 5; break; } else { label = 9; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $37=$__p;
      var $38=(($37+4)|0);
      $__p=$38;
      var $39=HEAP32[(($38)>>2)];
      var $40=((($39)-(1))|0);
      HEAP32[(($38)>>2)]=$40;
      var $41=(($39)|0)==0;
      if ($41) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $46=$3;
      var $47=$2;
      var $48=(($46+($47<<2))|0);
      var $49=$1;
      var $50=(($49+4)|0);
      var $51=$2;
      var $52=($51<<1);
      var $53=((($52)-(1))|0);
      var $54=$6;
      var $55=_DO_mpn_sublsh_n($48, $50, $53, 28, $54);
      $__cy=$55;
      label = 11; break;
    case 11: 
      var $57=$3;
      var $58=$2;
      var $59=(($57+($58<<2))|0);
      var $60=$2;
      var $61=($60<<1);
      var $62=(($59+($61<<2))|0);
      var $63=((($62)-(4))|0);
      $__p2=$63;
      var $64=$__p2;
      var $65=HEAP32[(($64)>>2)];
      $__x1=$65;
      var $66=$__x1;
      var $67=$__cy;
      var $68=((($66)-($67))|0);
      var $69=$__p2;
      HEAP32[(($69)>>2)]=$68;
      var $70=$__x1;
      var $71=$__cy;
      var $72=(($70)>>>0) < (($71)>>>0);
      if ($72) { label = 12; break; } else { label = 16; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $75=$__p2;
      var $76=(($75+4)|0);
      $__p2=$76;
      var $77=HEAP32[(($76)>>2)];
      var $78=((($77)-(1))|0);
      HEAP32[(($76)>>2)]=$78;
      var $79=(($77)|0)==0;
      if ($79) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 13; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $85=$3;
      var $86=$r1;
      var $87=$5;
      var $88=$6;
      var $89=_DO_mpn_sublsh_n($85, $86, $87, 12, $88);
      $cy=$89;
      label = 19; break;
    case 19: 
      var $91=$3;
      var $92=$5;
      var $93=(($91+($92<<2))|0);
      $__p4=$93;
      var $94=$__p4;
      var $95=HEAP32[(($94)>>2)];
      $__x3=$95;
      var $96=$__x3;
      var $97=$cy;
      var $98=((($96)-($97))|0);
      var $99=$__p4;
      HEAP32[(($99)>>2)]=$98;
      var $100=$__x3;
      var $101=$cy;
      var $102=(($100)>>>0) < (($101)>>>0);
      if ($102) { label = 20; break; } else { label = 24; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $105=$__p4;
      var $106=(($105+4)|0);
      $__p4=$106;
      var $107=HEAP32[(($106)>>2)];
      var $108=((($107)-(1))|0);
      HEAP32[(($106)>>2)]=$108;
      var $109=(($107)|0)==0;
      if ($109) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 21; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $116=$r5;
      var $117=$2;
      var $118=(($116+($117<<2))|0);
      $__p7=$118;
      var $119=$__p7;
      var $120=HEAP32[(($119)>>2)];
      $__x6=$120;
      var $121=$__x6;
      var $122=$1;
      var $123=(($122)|0);
      var $124=HEAP32[(($123)>>2)];
      var $125=$124 >>> 2;
      var $126=((($121)-($125))|0);
      var $127=$__p7;
      HEAP32[(($127)>>2)]=$126;
      var $128=$__x6;
      var $129=$1;
      var $130=(($129)|0);
      var $131=HEAP32[(($130)>>2)];
      var $132=$131 >>> 2;
      var $133=(($128)>>>0) < (($132)>>>0);
      if ($133) { label = 28; break; } else { label = 32; break; }
    case 28: 
      label = 29; break;
    case 29: 
      var $136=$__p7;
      var $137=(($136+4)|0);
      $__p7=$137;
      var $138=HEAP32[(($137)>>2)];
      var $139=((($138)-(1))|0);
      HEAP32[(($137)>>2)]=$139;
      var $140=(($138)|0)==0;
      if ($140) { label = 30; break; } else { label = 31; break; }
    case 30: 
      label = 29; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $145=$r5;
      var $146=$2;
      var $147=(($145+($146<<2))|0);
      var $148=$1;
      var $149=(($148+4)|0);
      var $150=$2;
      var $151=($150<<1);
      var $152=((($151)-(1))|0);
      var $153=$6;
      var $154=_DO_mpn_sublsh_n($147, $149, $152, 30, $153);
      $__cy5=$154;
      label = 34; break;
    case 34: 
      var $156=$r5;
      var $157=$2;
      var $158=(($156+($157<<2))|0);
      var $159=$2;
      var $160=($159<<1);
      var $161=(($158+($160<<2))|0);
      var $162=((($161)-(4))|0);
      $__p9=$162;
      var $163=$__p9;
      var $164=HEAP32[(($163)>>2)];
      $__x8=$164;
      var $165=$__x8;
      var $166=$__cy5;
      var $167=((($165)-($166))|0);
      var $168=$__p9;
      HEAP32[(($168)>>2)]=$167;
      var $169=$__x8;
      var $170=$__cy5;
      var $171=(($169)>>>0) < (($170)>>>0);
      if ($171) { label = 35; break; } else { label = 39; break; }
    case 35: 
      label = 36; break;
    case 36: 
      var $174=$__p9;
      var $175=(($174+4)|0);
      $__p9=$175;
      var $176=HEAP32[(($175)>>2)];
      var $177=((($176)-(1))|0);
      HEAP32[(($175)>>2)]=$177;
      var $178=(($176)|0)==0;
      if ($178) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 36; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $184=$r5;
      var $185=$r1;
      var $186=$5;
      var $187=$6;
      var $188=_DO_mpn_sublsh_n($184, $185, $186, 6, $187);
      $cy=$188;
      label = 42; break;
    case 42: 
      var $190=$r5;
      var $191=$5;
      var $192=(($190+($191<<2))|0);
      $__p11=$192;
      var $193=$__p11;
      var $194=HEAP32[(($193)>>2)];
      $__x10=$194;
      var $195=$__x10;
      var $196=$cy;
      var $197=((($195)-($196))|0);
      var $198=$__p11;
      HEAP32[(($198)>>2)]=$197;
      var $199=$__x10;
      var $200=$cy;
      var $201=(($199)>>>0) < (($200)>>>0);
      if ($201) { label = 43; break; } else { label = 47; break; }
    case 43: 
      label = 44; break;
    case 44: 
      var $204=$__p11;
      var $205=(($204+4)|0);
      $__p11=$205;
      var $206=HEAP32[(($205)>>2)];
      var $207=((($206)-(1))|0);
      HEAP32[(($205)>>2)]=$207;
      var $208=(($206)|0)==0;
      if ($208) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 44; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $213=$4;
      var $214=$2;
      var $215=(($213+($214<<2))|0);
      var $216=$4;
      var $217=$2;
      var $218=(($216+($217<<2))|0);
      var $219=$1;
      var $220=$2;
      var $221=($220<<1);
      var $222=___gmpn_sub_n($215, $218, $219, $221);
      var $223=$2;
      var $224=((($223)*(3))&-1);
      var $225=$4;
      var $226=(($225+($224<<2))|0);
      var $227=HEAP32[(($226)>>2)];
      var $228=((($227)-($222))|0);
      HEAP32[(($226)>>2)]=$228;
      var $229=$4;
      var $230=$4;
      var $231=$r1;
      var $232=$5;
      var $233=___gmpn_sub_n($229, $230, $231, $232);
      $cy=$233;
      label = 49; break;
    case 49: 
      var $235=$4;
      var $236=$5;
      var $237=(($235+($236<<2))|0);
      $__p13=$237;
      var $238=$__p13;
      var $239=HEAP32[(($238)>>2)];
      $__x12=$239;
      var $240=$__x12;
      var $241=$cy;
      var $242=((($240)-($241))|0);
      var $243=$__p13;
      HEAP32[(($243)>>2)]=$242;
      var $244=$__x12;
      var $245=$cy;
      var $246=(($244)>>>0) < (($245)>>>0);
      if ($246) { label = 50; break; } else { label = 54; break; }
    case 50: 
      label = 51; break;
    case 51: 
      var $249=$__p13;
      var $250=(($249+4)|0);
      $__p13=$250;
      var $251=HEAP32[(($250)>>2)];
      var $252=((($251)-(1))|0);
      HEAP32[(($250)>>2)]=$252;
      var $253=(($251)|0)==0;
      if ($253) { label = 52; break; } else { label = 53; break; }
    case 52: 
      label = 51; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      var $258=$3;
      var $259=$3;
      var $260=$r5;
      var $261=$2;
      var $262=((($261)*(3))&-1);
      var $263=((($262)+(1))|0);
      var $264=___gmpn_sub_n($258, $259, $260, $263);
      var $265=$3;
      var $266=$3;
      var $267=$2;
      var $268=((($267)*(3))&-1);
      var $269=((($268)+(1))|0);
      var $270=___gmpn_rshift($265, $266, $269, 2);
      var $271=$r5;
      var $272=$r5;
      var $273=$4;
      var $274=$2;
      var $275=((($274)*(3))&-1);
      var $276=((($275)+(1))|0);
      var $277=___gmpn_sub_n($271, $272, $273, $276);
      var $278=$3;
      var $279=$3;
      var $280=$r5;
      var $281=$2;
      var $282=((($281)*(3))&-1);
      var $283=((($282)+(1))|0);
      var $284=___gmpn_sub_n($278, $279, $280, $283);
      var $285=$3;
      var $286=$3;
      var $287=$2;
      var $288=((($287)*(3))&-1);
      var $289=((($288)+(1))|0);
      ___gmpn_divexact_1($285, $286, $289, 45);
      var $290=$r5;
      var $291=$r5;
      var $292=$2;
      var $293=((($292)*(3))&-1);
      var $294=((($293)+(1))|0);
      var $295=___gmpn_bdiv_dbm1c($290, $291, $294, 1431655765, 0);
      var $296=3 & $295;
      var $297=$r5;
      var $298=$3;
      var $299=$2;
      var $300=((($299)*(3))&-1);
      var $301=((($300)+(1))|0);
      var $302=$6;
      var $303=_DO_mpn_sublsh_n($297, $298, $301, 2, $302);
      var $304=$1;
      var $305=$2;
      var $306=(($304+($305<<2))|0);
      var $307=$1;
      var $308=$2;
      var $309=(($307+($308<<2))|0);
      var $310=$4;
      var $311=$2;
      var $312=___gmpn_add_n($306, $309, $310, $311);
      $cy=$312;
      var $313=$1;
      var $314=$2;
      var $315=(($313+($314<<2))|0);
      var $316=$1;
      var $317=$2;
      var $318=(($316+($317<<2))|0);
      var $319=$r5;
      var $320=$2;
      var $321=___gmpn_sub_n($315, $318, $319, $320);
      var $322=$cy;
      var $323=((($322)-($321))|0);
      $cy=$323;
      var $324=$cy;
      var $325=0 > (($324)|0);
      if ($325) { label = 56; break; } else { label = 62; break; }
    case 56: 
      label = 57; break;
    case 57: 
      var $328=$4;
      var $329=$2;
      var $330=(($328+($329<<2))|0);
      $__p15=$330;
      label = 58; break;
    case 58: 
      var $332=$__p15;
      var $333=(($332+4)|0);
      $__p15=$333;
      var $334=HEAP32[(($332)>>2)];
      var $335=((($334)-(1))|0);
      HEAP32[(($332)>>2)]=$335;
      var $336=(($334)|0)==0;
      if ($336) { label = 59; break; } else { label = 60; break; }
    case 59: 
      label = 58; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 70; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $342=$4;
      var $343=$2;
      var $344=(($342+($343<<2))|0);
      $__p17=$344;
      var $345=$__p17;
      var $346=HEAP32[(($345)>>2)];
      var $347=$cy;
      var $348=((($346)+($347))|0);
      $__x16=$348;
      var $349=$__x16;
      var $350=$__p17;
      HEAP32[(($350)>>2)]=$349;
      var $351=$__x16;
      var $352=$cy;
      var $353=(($351)>>>0) < (($352)>>>0);
      if ($353) { label = 64; break; } else { label = 68; break; }
    case 64: 
      label = 65; break;
    case 65: 
      var $356=$__p17;
      var $357=(($356+4)|0);
      $__p17=$357;
      var $358=HEAP32[(($357)>>2)];
      var $359=((($358)+(1))|0);
      HEAP32[(($357)>>2)]=$359;
      var $360=(($359)|0)==0;
      if ($360) { label = 66; break; } else { label = 67; break; }
    case 66: 
      label = 65; break;
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      var $366=$1;
      var $367=$2;
      var $368=($367<<1);
      var $369=(($366+($368<<2))|0);
      var $370=$4;
      var $371=$2;
      var $372=(($370+($371<<2))|0);
      var $373=$r5;
      var $374=$2;
      var $375=(($373+($374<<2))|0);
      var $376=$2;
      var $377=___gmpn_sub_n($369, $372, $375, $376);
      $cy=$377;
      label = 71; break;
    case 71: 
      var $379=$4;
      var $380=$2;
      var $381=($380<<1);
      var $382=(($379+($381<<2))|0);
      $__p19=$382;
      var $383=$__p19;
      var $384=HEAP32[(($383)>>2)];
      $__x18=$384;
      var $385=$__x18;
      var $386=$cy;
      var $387=((($385)-($386))|0);
      var $388=$__p19;
      HEAP32[(($388)>>2)]=$387;
      var $389=$__x18;
      var $390=$cy;
      var $391=(($389)>>>0) < (($390)>>>0);
      if ($391) { label = 72; break; } else { label = 76; break; }
    case 72: 
      label = 73; break;
    case 73: 
      var $394=$__p19;
      var $395=(($394+4)|0);
      $__p19=$395;
      var $396=HEAP32[(($395)>>2)];
      var $397=((($396)-(1))|0);
      HEAP32[(($395)>>2)]=$397;
      var $398=(($396)|0)==0;
      if ($398) { label = 74; break; } else { label = 75; break; }
    case 74: 
      label = 73; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $403=$1;
      var $404=$2;
      var $405=((($404)*(3))&-1);
      var $406=(($403+($405<<2))|0);
      var $407=$r5;
      var $408=$4;
      var $409=$2;
      var $410=($409<<1);
      var $411=(($408+($410<<2))|0);
      var $412=$2;
      var $413=((($412)+(1))|0);
      var $414=___gmpn_add_n($406, $407, $411, $413);
      $cy=$414;
      var $415=$r5;
      var $416=$2;
      var $417=($416<<1);
      var $418=(($415+($417<<2))|0);
      var $419=$r5;
      var $420=$2;
      var $421=($420<<1);
      var $422=(($419+($421<<2))|0);
      var $423=$3;
      var $424=$2;
      var $425=___gmpn_add_n($418, $422, $423, $424);
      var $426=$2;
      var $427=((($426)*(3))&-1);
      var $428=$r5;
      var $429=(($428+($427<<2))|0);
      var $430=HEAP32[(($429)>>2)];
      var $431=((($430)+($425))|0);
      HEAP32[(($429)>>2)]=$431;
      var $432=$1;
      var $433=$2;
      var $434=((($433)*(3))&-1);
      var $435=(($432+($434<<2))|0);
      var $436=$1;
      var $437=$2;
      var $438=((($437)*(3))&-1);
      var $439=(($436+($438<<2))|0);
      var $440=$r5;
      var $441=$2;
      var $442=($441<<1);
      var $443=(($440+($442<<2))|0);
      var $444=$2;
      var $445=((($444)+(1))|0);
      var $446=___gmpn_sub_n($435, $439, $443, $445);
      var $447=$cy;
      var $448=((($447)-($446))|0);
      $cy=$448;
      var $449=$cy;
      var $450=0 > (($449)|0);
      var $451=(($450)&1);
      var $452=(($451)|0)!=0;
      var $453=(($452)&1);
      var $454=($453);
      var $455=(($454)|0)!=0;
      if ($455) { label = 78; break; } else { label = 84; break; }
    case 78: 
      label = 79; break;
    case 79: 
      var $458=$r5;
      var $459=$2;
      var $460=(($458+($459<<2))|0);
      var $461=(($460+4)|0);
      $__p21=$461;
      label = 80; break;
    case 80: 
      var $463=$__p21;
      var $464=(($463+4)|0);
      $__p21=$464;
      var $465=HEAP32[(($463)>>2)];
      var $466=((($465)-(1))|0);
      HEAP32[(($463)>>2)]=$466;
      var $467=(($465)|0)==0;
      if ($467) { label = 81; break; } else { label = 82; break; }
    case 81: 
      label = 80; break;
    case 82: 
      label = 83; break;
    case 83: 
      label = 92; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $473=$r5;
      var $474=$2;
      var $475=(($473+($474<<2))|0);
      var $476=(($475+4)|0);
      $__p23=$476;
      var $477=$__p23;
      var $478=HEAP32[(($477)>>2)];
      var $479=$cy;
      var $480=((($478)+($479))|0);
      $__x22=$480;
      var $481=$__x22;
      var $482=$__p23;
      HEAP32[(($482)>>2)]=$481;
      var $483=$__x22;
      var $484=$cy;
      var $485=(($483)>>>0) < (($484)>>>0);
      if ($485) { label = 86; break; } else { label = 90; break; }
    case 86: 
      label = 87; break;
    case 87: 
      var $488=$__p23;
      var $489=(($488+4)|0);
      $__p23=$489;
      var $490=HEAP32[(($489)>>2)];
      var $491=((($490)+(1))|0);
      HEAP32[(($489)>>2)]=$491;
      var $492=(($491)|0)==0;
      if ($492) { label = 88; break; } else { label = 89; break; }
    case 88: 
      label = 87; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $498=$1;
      var $499=$2;
      var $500=($499<<2);
      var $501=(($498+($500<<2))|0);
      var $502=$r5;
      var $503=$2;
      var $504=(($502+($503<<2))|0);
      var $505=$3;
      var $506=$2;
      var $507=(($505+($506<<2))|0);
      var $508=$2;
      var $509=($508<<1);
      var $510=((($509)+(1))|0);
      var $511=___gmpn_sub_n($501, $504, $507, $510);
      var $512=$1;
      var $513=$2;
      var $514=((($513)*(6))&-1);
      var $515=(($512+($514<<2))|0);
      var $516=$3;
      var $517=$2;
      var $518=(($516+($517<<2))|0);
      var $519=$2;
      var $520=$2;
      var $521=((($520)*(6))&-1);
      var $522=$1;
      var $523=(($522+($521<<2))|0);
      var $524=HEAP32[(($523)>>2)];
      var $525=___gmpn_add_1($515, $518, $519, $524);
      $cy=$525;
      label = 93; break;
    case 93: 
      var $527=$3;
      var $528=$2;
      var $529=($528<<1);
      var $530=(($527+($529<<2))|0);
      $__p25=$530;
      var $531=$__p25;
      var $532=HEAP32[(($531)>>2)];
      var $533=$cy;
      var $534=((($532)+($533))|0);
      $__x24=$534;
      var $535=$__x24;
      var $536=$__p25;
      HEAP32[(($536)>>2)]=$535;
      var $537=$__x24;
      var $538=$cy;
      var $539=(($537)>>>0) < (($538)>>>0);
      if ($539) { label = 94; break; } else { label = 98; break; }
    case 94: 
      label = 95; break;
    case 95: 
      var $542=$__p25;
      var $543=(($542+4)|0);
      $__p25=$543;
      var $544=HEAP32[(($543)>>2)];
      var $545=((($544)+(1))|0);
      HEAP32[(($543)>>2)]=$545;
      var $546=(($545)|0)==0;
      if ($546) { label = 96; break; } else { label = 97; break; }
    case 96: 
      label = 95; break;
    case 97: 
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      var $551=$1;
      var $552=$2;
      var $553=((($552)*(7))&-1);
      var $554=(($551+($553<<2))|0);
      var $555=$1;
      var $556=$2;
      var $557=((($556)*(7))&-1);
      var $558=(($555+($557<<2))|0);
      var $559=$3;
      var $560=$2;
      var $561=($560<<1);
      var $562=(($559+($561<<2))|0);
      var $563=$2;
      var $564=___gmpn_add_n($554, $558, $562, $563);
      $cy=$564;
      var $565=$5;
      var $566=$2;
      var $567=(($565)|0)!=(($566)|0);
      var $568=(($567)&1);
      var $569=(($568)|0)!=0;
      var $570=(($569)&1);
      var $571=($570);
      var $572=(($571)|0)!=0;
      if ($572) { label = 100; break; } else { label = 108; break; }
    case 100: 
      label = 101; break;
    case 101: 
      var $575=$1;
      var $576=$2;
      var $577=($576<<3);
      var $578=(($575+($577<<2))|0);
      $__p27=$578;
      var $579=$__p27;
      var $580=HEAP32[(($579)>>2)];
      var $581=$cy;
      var $582=$2;
      var $583=((($582)*(3))&-1);
      var $584=$3;
      var $585=(($584+($583<<2))|0);
      var $586=HEAP32[(($585)>>2)];
      var $587=((($581)+($586))|0);
      var $588=((($580)+($587))|0);
      $__x26=$588;
      var $589=$__x26;
      var $590=$__p27;
      HEAP32[(($590)>>2)]=$589;
      var $591=$__x26;
      var $592=$cy;
      var $593=$2;
      var $594=((($593)*(3))&-1);
      var $595=$3;
      var $596=(($595+($594<<2))|0);
      var $597=HEAP32[(($596)>>2)];
      var $598=((($592)+($597))|0);
      var $599=(($591)>>>0) < (($598)>>>0);
      if ($599) { label = 102; break; } else { label = 106; break; }
    case 102: 
      label = 103; break;
    case 103: 
      var $602=$__p27;
      var $603=(($602+4)|0);
      $__p27=$603;
      var $604=HEAP32[(($603)>>2)];
      var $605=((($604)+(1))|0);
      HEAP32[(($603)>>2)]=$605;
      var $606=(($605)|0)==0;
      if ($606) { label = 104; break; } else { label = 105; break; }
    case 104: 
      label = 103; break;
    case 105: 
      label = 106; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 111; break;
    case 108: 
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      label = 111; break;
    case 111: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_interpolate_8pts["X"]=1;

function _DO_mpn_sublsh_n($dst, $src, $n, $s, $ws) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $__cy;
  $1=$dst;
  $2=$src;
  $3=$n;
  $4=$s;
  $5=$ws;
  var $6=$5;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_lshift($6, $7, $8, $9);
  $__cy=$10;
  var $11=$__cy;
  var $12=$1;
  var $13=$1;
  var $14=$5;
  var $15=$3;
  var $16=___gmpn_sub_n($12, $13, $14, $15);
  var $17=((($11)+($16))|0);

  return $17;
}


function ___gmpn_toom_interpolate_12pts($pp, $r1, $r3, $r5, $n, $spt, $half, $wsi) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $cy;
      var $n3;
      var $n3p1;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__cy;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      var $__x7;
      var $__p8;
      var $__cy9;
      var $__x10;
      var $__p11;
      var $__x12;
      var $__p13;
      var $__cy14;
      var $__x15;
      var $__p16;
      var $__x17;
      var $__p18;
      var $__mp_ptr_swap__tmp;
      var $__cy19;
      var $__x20;
      var $__p21;
      var $__x22;
      var $__p23;
      var $__mp_ptr_swap__tmp24;
      var $__x25;
      var $__p26;
      var $__x27;
      var $__p28;
      var $__x29;
      var $__p30;
      var $__x31;
      var $__p32;
      var $__x33;
      var $__p34;
      var $__x35;
      var $__p36;
      $1=$pp;
      $2=$r1;
      $3=$r3;
      $4=$r5;
      $5=$n;
      $6=$spt;
      $7=$half;
      $8=$wsi;
      var $9=$5;
      var $10=((($9)*(3))&-1);
      $n3=$10;
      var $11=$n3;
      var $12=((($11)+(1))|0);
      $n3p1=$12;
      var $13=$7;
      var $14=(($13)|0)!=0;
      if ($14) { label = 3; break; } else { label = 57; break; }
    case 3: 
      var $16=$3;
      var $17=$3;
      var $18=$1;
      var $19=$5;
      var $20=((($19)*(11))&-1);
      var $21=(($18+($20<<2))|0);
      var $22=$6;
      var $23=___gmpn_sub_n($16, $17, $21, $22);
      $cy=$23;
      label = 4; break;
    case 4: 
      var $25=$3;
      var $26=$6;
      var $27=(($25+($26<<2))|0);
      $__p=$27;
      var $28=$__p;
      var $29=HEAP32[(($28)>>2)];
      $__x=$29;
      var $30=$__x;
      var $31=$cy;
      var $32=((($30)-($31))|0);
      var $33=$__p;
      HEAP32[(($33)>>2)]=$32;
      var $34=$__x;
      var $35=$cy;
      var $36=(($34)>>>0) < (($35)>>>0);
      if ($36) { label = 5; break; } else { label = 9; break; }
    case 5: 
      label = 6; break;
    case 6: 
      var $39=$__p;
      var $40=(($39+4)|0);
      $__p=$40;
      var $41=HEAP32[(($40)>>2)];
      var $42=((($41)-(1))|0);
      HEAP32[(($40)>>2)]=$42;
      var $43=(($41)|0)==0;
      if ($43) { label = 7; break; } else { label = 8; break; }
    case 7: 
      label = 6; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $48=$1;
      var $49=$5;
      var $50=((($49)*(7))&-1);
      var $51=(($48+($50<<2))|0);
      var $52=$1;
      var $53=$5;
      var $54=((($53)*(11))&-1);
      var $55=(($52+($54<<2))|0);
      var $56=$6;
      var $57=$8;
      var $58=_DO_mpn_sublsh_n340($51, $55, $56, 10, $57);
      $cy=$58;
      label = 11; break;
    case 11: 
      var $60=$1;
      var $61=$5;
      var $62=((($61)*(7))&-1);
      var $63=(($60+($62<<2))|0);
      var $64=$6;
      var $65=(($63+($64<<2))|0);
      $__p2=$65;
      var $66=$__p2;
      var $67=HEAP32[(($66)>>2)];
      $__x1=$67;
      var $68=$__x1;
      var $69=$cy;
      var $70=((($68)-($69))|0);
      var $71=$__p2;
      HEAP32[(($71)>>2)]=$70;
      var $72=$__x1;
      var $73=$cy;
      var $74=(($72)>>>0) < (($73)>>>0);
      if ($74) { label = 12; break; } else { label = 16; break; }
    case 12: 
      label = 13; break;
    case 13: 
      var $77=$__p2;
      var $78=(($77+4)|0);
      $__p2=$78;
      var $79=HEAP32[(($78)>>2)];
      var $80=((($79)-(1))|0);
      HEAP32[(($78)>>2)]=$80;
      var $81=(($79)|0)==0;
      if ($81) { label = 14; break; } else { label = 15; break; }
    case 14: 
      label = 13; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $88=$4;
      $__p4=$88;
      var $89=$__p4;
      var $90=HEAP32[(($89)>>2)];
      $__x3=$90;
      var $91=$__x3;
      var $92=$1;
      var $93=$5;
      var $94=((($93)*(11))&-1);
      var $95=(($92+($94<<2))|0);
      var $96=(($95)|0);
      var $97=HEAP32[(($96)>>2)];
      var $98=$97 >>> 2;
      var $99=((($91)-($98))|0);
      var $100=$__p4;
      HEAP32[(($100)>>2)]=$99;
      var $101=$__x3;
      var $102=$1;
      var $103=$5;
      var $104=((($103)*(11))&-1);
      var $105=(($102+($104<<2))|0);
      var $106=(($105)|0);
      var $107=HEAP32[(($106)>>2)];
      var $108=$107 >>> 2;
      var $109=(($101)>>>0) < (($108)>>>0);
      if ($109) { label = 20; break; } else { label = 24; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $112=$__p4;
      var $113=(($112+4)|0);
      $__p4=$113;
      var $114=HEAP32[(($113)>>2)];
      var $115=((($114)-(1))|0);
      HEAP32[(($113)>>2)]=$115;
      var $116=(($114)|0)==0;
      if ($116) { label = 22; break; } else { label = 23; break; }
    case 22: 
      label = 21; break;
    case 23: 
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $121=$4;
      var $122=$1;
      var $123=$5;
      var $124=((($123)*(11))&-1);
      var $125=(($122+($124<<2))|0);
      var $126=(($125+4)|0);
      var $127=$6;
      var $128=((($127)-(1))|0);
      var $129=$8;
      var $130=_DO_mpn_sublsh_n340($121, $126, $128, 30, $129);
      $__cy=$130;
      label = 26; break;
    case 26: 
      var $132=$4;
      var $133=$6;
      var $134=(($132+($133<<2))|0);
      var $135=((($134)-(4))|0);
      $__p6=$135;
      var $136=$__p6;
      var $137=HEAP32[(($136)>>2)];
      $__x5=$137;
      var $138=$__x5;
      var $139=$__cy;
      var $140=((($138)-($139))|0);
      var $141=$__p6;
      HEAP32[(($141)>>2)]=$140;
      var $142=$__x5;
      var $143=$__cy;
      var $144=(($142)>>>0) < (($143)>>>0);
      if ($144) { label = 27; break; } else { label = 31; break; }
    case 27: 
      label = 28; break;
    case 28: 
      var $147=$__p6;
      var $148=(($147+4)|0);
      $__p6=$148;
      var $149=HEAP32[(($148)>>2)];
      var $150=((($149)-(1))|0);
      HEAP32[(($148)>>2)]=$150;
      var $151=(($149)|0)==0;
      if ($151) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 28; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $157=$2;
      var $158=$1;
      var $159=$5;
      var $160=((($159)*(11))&-1);
      var $161=(($158+($160<<2))|0);
      var $162=$6;
      var $163=$8;
      var $164=_DO_mpn_sublsh_n340($157, $161, $162, 20, $163);
      $cy=$164;
      label = 34; break;
    case 34: 
      var $166=$2;
      var $167=$6;
      var $168=(($166+($167<<2))|0);
      $__p8=$168;
      var $169=$__p8;
      var $170=HEAP32[(($169)>>2)];
      $__x7=$170;
      var $171=$__x7;
      var $172=$cy;
      var $173=((($171)-($172))|0);
      var $174=$__p8;
      HEAP32[(($174)>>2)]=$173;
      var $175=$__x7;
      var $176=$cy;
      var $177=(($175)>>>0) < (($176)>>>0);
      if ($177) { label = 35; break; } else { label = 39; break; }
    case 35: 
      label = 36; break;
    case 36: 
      var $180=$__p8;
      var $181=(($180+4)|0);
      $__p8=$181;
      var $182=HEAP32[(($181)>>2)];
      var $183=((($182)-(1))|0);
      HEAP32[(($181)>>2)]=$183;
      var $184=(($182)|0)==0;
      if ($184) { label = 37; break; } else { label = 38; break; }
    case 37: 
      label = 36; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $191=$1;
      var $192=$n3;
      var $193=(($191+($192<<2))|0);
      $__p11=$193;
      var $194=$__p11;
      var $195=HEAP32[(($194)>>2)];
      $__x10=$195;
      var $196=$__x10;
      var $197=$1;
      var $198=$5;
      var $199=((($198)*(11))&-1);
      var $200=(($197+($199<<2))|0);
      var $201=(($200)|0);
      var $202=HEAP32[(($201)>>2)];
      var $203=$202 >>> 4;
      var $204=((($196)-($203))|0);
      var $205=$__p11;
      HEAP32[(($205)>>2)]=$204;
      var $206=$__x10;
      var $207=$1;
      var $208=$5;
      var $209=((($208)*(11))&-1);
      var $210=(($207+($209<<2))|0);
      var $211=(($210)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=$212 >>> 4;
      var $214=(($206)>>>0) < (($213)>>>0);
      if ($214) { label = 43; break; } else { label = 47; break; }
    case 43: 
      label = 44; break;
    case 44: 
      var $217=$__p11;
      var $218=(($217+4)|0);
      $__p11=$218;
      var $219=HEAP32[(($218)>>2)];
      var $220=((($219)-(1))|0);
      HEAP32[(($218)>>2)]=$220;
      var $221=(($219)|0)==0;
      if ($221) { label = 45; break; } else { label = 46; break; }
    case 45: 
      label = 44; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      var $226=$1;
      var $227=$n3;
      var $228=(($226+($227<<2))|0);
      var $229=$1;
      var $230=$5;
      var $231=((($230)*(11))&-1);
      var $232=(($229+($231<<2))|0);
      var $233=(($232+4)|0);
      var $234=$6;
      var $235=((($234)-(1))|0);
      var $236=$8;
      var $237=_DO_mpn_sublsh_n340($228, $233, $235, 28, $236);
      $__cy9=$237;
      label = 49; break;
    case 49: 
      var $239=$1;
      var $240=$n3;
      var $241=(($239+($240<<2))|0);
      var $242=$6;
      var $243=(($241+($242<<2))|0);
      var $244=((($243)-(4))|0);
      $__p13=$244;
      var $245=$__p13;
      var $246=HEAP32[(($245)>>2)];
      $__x12=$246;
      var $247=$__x12;
      var $248=$__cy9;
      var $249=((($247)-($248))|0);
      var $250=$__p13;
      HEAP32[(($250)>>2)]=$249;
      var $251=$__x12;
      var $252=$__cy9;
      var $253=(($251)>>>0) < (($252)>>>0);
      if ($253) { label = 50; break; } else { label = 54; break; }
    case 50: 
      label = 51; break;
    case 51: 
      var $256=$__p13;
      var $257=(($256+4)|0);
      $__p13=$257;
      var $258=HEAP32[(($257)>>2)];
      var $259=((($258)-(1))|0);
      HEAP32[(($257)>>2)]=$259;
      var $260=(($258)|0)==0;
      if ($260) { label = 52; break; } else { label = 53; break; }
    case 52: 
      label = 51; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $267=$1;
      var $268=$n3;
      var $269=(($267+($268<<2))|0);
      var $270=$5;
      var $271=(($269+($270<<2))|0);
      var $272=$1;
      var $273=$5;
      var $274=($273<<1);
      var $275=$8;
      var $276=_DO_mpn_sublsh_n340($271, $272, $274, 20, $275);
      var $277=$n3;
      var $278=$1;
      var $279=$n3;
      var $280=(($278+($279<<2))|0);
      var $281=(($280+($277<<2))|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=((($282)-($276))|0);
      HEAP32[(($281)>>2)]=$283;
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $286=$2;
      var $287=$5;
      var $288=(($286+($287<<2))|0);
      $__p16=$288;
      var $289=$__p16;
      var $290=HEAP32[(($289)>>2)];
      $__x15=$290;
      var $291=$__x15;
      var $292=$1;
      var $293=(($292)|0);
      var $294=HEAP32[(($293)>>2)];
      var $295=$294 >>> 4;
      var $296=((($291)-($295))|0);
      var $297=$__p16;
      HEAP32[(($297)>>2)]=$296;
      var $298=$__x15;
      var $299=$1;
      var $300=(($299)|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=$301 >>> 4;
      var $303=(($298)>>>0) < (($302)>>>0);
      if ($303) { label = 60; break; } else { label = 64; break; }
    case 60: 
      label = 61; break;
    case 61: 
      var $306=$__p16;
      var $307=(($306+4)|0);
      $__p16=$307;
      var $308=HEAP32[(($307)>>2)];
      var $309=((($308)-(1))|0);
      HEAP32[(($307)>>2)]=$309;
      var $310=(($308)|0)==0;
      if ($310) { label = 62; break; } else { label = 63; break; }
    case 62: 
      label = 61; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $315=$2;
      var $316=$5;
      var $317=(($315+($316<<2))|0);
      var $318=$1;
      var $319=(($318+4)|0);
      var $320=$5;
      var $321=($320<<1);
      var $322=((($321)-(1))|0);
      var $323=$8;
      var $324=_DO_mpn_sublsh_n340($317, $319, $322, 28, $323);
      $__cy14=$324;
      label = 66; break;
    case 66: 
      var $326=$2;
      var $327=$5;
      var $328=(($326+($327<<2))|0);
      var $329=$5;
      var $330=($329<<1);
      var $331=(($328+($330<<2))|0);
      var $332=((($331)-(4))|0);
      $__p18=$332;
      var $333=$__p18;
      var $334=HEAP32[(($333)>>2)];
      $__x17=$334;
      var $335=$__x17;
      var $336=$__cy14;
      var $337=((($335)-($336))|0);
      var $338=$__p18;
      HEAP32[(($338)>>2)]=$337;
      var $339=$__x17;
      var $340=$__cy14;
      var $341=(($339)>>>0) < (($340)>>>0);
      if ($341) { label = 67; break; } else { label = 71; break; }
    case 67: 
      label = 68; break;
    case 68: 
      var $344=$__p18;
      var $345=(($344+4)|0);
      $__p18=$345;
      var $346=HEAP32[(($345)>>2)];
      var $347=((($346)-(1))|0);
      HEAP32[(($345)>>2)]=$347;
      var $348=(($346)|0)==0;
      if ($348) { label = 69; break; } else { label = 70; break; }
    case 69: 
      label = 68; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      var $354=$8;
      var $355=$2;
      var $356=$1;
      var $357=$n3;
      var $358=(($356+($357<<2))|0);
      var $359=$n3p1;
      var $360=___gmpn_add_n($354, $355, $358, $359);
      var $361=$1;
      var $362=$n3;
      var $363=(($361+($362<<2))|0);
      var $364=$1;
      var $365=$n3;
      var $366=(($364+($365<<2))|0);
      var $367=$2;
      var $368=$n3p1;
      var $369=___gmpn_sub_n($363, $366, $367, $368);
      label = 74; break;
    case 74: 
      var $371=$2;
      $__mp_ptr_swap__tmp=$371;
      var $372=$8;
      $2=$372;
      var $373=$__mp_ptr_swap__tmp;
      $8=$373;
      label = 75; break;
    case 75: 
      var $375=$4;
      var $376=$5;
      var $377=(($375+($376<<2))|0);
      var $378=$1;
      var $379=$5;
      var $380=($379<<1);
      var $381=$8;
      var $382=_DO_mpn_sublsh_n340($377, $378, $380, 10, $381);
      var $383=$n3;
      var $384=$4;
      var $385=(($384+($383<<2))|0);
      var $386=HEAP32[(($385)>>2)];
      var $387=((($386)-($382))|0);
      HEAP32[(($385)>>2)]=$387;
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $390=$1;
      var $391=$5;
      var $392=((($391)*(7))&-1);
      var $393=(($390+($392<<2))|0);
      var $394=$5;
      var $395=(($393+($394<<2))|0);
      $__p21=$395;
      var $396=$__p21;
      var $397=HEAP32[(($396)>>2)];
      $__x20=$397;
      var $398=$__x20;
      var $399=$1;
      var $400=(($399)|0);
      var $401=HEAP32[(($400)>>2)];
      var $402=$401 >>> 2;
      var $403=((($398)-($402))|0);
      var $404=$__p21;
      HEAP32[(($404)>>2)]=$403;
      var $405=$__x20;
      var $406=$1;
      var $407=(($406)|0);
      var $408=HEAP32[(($407)>>2)];
      var $409=$408 >>> 2;
      var $410=(($405)>>>0) < (($409)>>>0);
      if ($410) { label = 78; break; } else { label = 82; break; }
    case 78: 
      label = 79; break;
    case 79: 
      var $413=$__p21;
      var $414=(($413+4)|0);
      $__p21=$414;
      var $415=HEAP32[(($414)>>2)];
      var $416=((($415)-(1))|0);
      HEAP32[(($414)>>2)]=$416;
      var $417=(($415)|0)==0;
      if ($417) { label = 80; break; } else { label = 81; break; }
    case 80: 
      label = 79; break;
    case 81: 
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $422=$1;
      var $423=$5;
      var $424=((($423)*(7))&-1);
      var $425=(($422+($424<<2))|0);
      var $426=$5;
      var $427=(($425+($426<<2))|0);
      var $428=$1;
      var $429=(($428+4)|0);
      var $430=$5;
      var $431=($430<<1);
      var $432=((($431)-(1))|0);
      var $433=$8;
      var $434=_DO_mpn_sublsh_n340($427, $429, $432, 30, $433);
      $__cy19=$434;
      label = 84; break;
    case 84: 
      var $436=$1;
      var $437=$5;
      var $438=((($437)*(7))&-1);
      var $439=(($436+($438<<2))|0);
      var $440=$5;
      var $441=(($439+($440<<2))|0);
      var $442=$5;
      var $443=($442<<1);
      var $444=(($441+($443<<2))|0);
      var $445=((($444)-(4))|0);
      $__p23=$445;
      var $446=$__p23;
      var $447=HEAP32[(($446)>>2)];
      $__x22=$447;
      var $448=$__x22;
      var $449=$__cy19;
      var $450=((($448)-($449))|0);
      var $451=$__p23;
      HEAP32[(($451)>>2)]=$450;
      var $452=$__x22;
      var $453=$__cy19;
      var $454=(($452)>>>0) < (($453)>>>0);
      if ($454) { label = 85; break; } else { label = 89; break; }
    case 85: 
      label = 86; break;
    case 86: 
      var $457=$__p23;
      var $458=(($457+4)|0);
      $__p23=$458;
      var $459=HEAP32[(($458)>>2)];
      var $460=((($459)-(1))|0);
      HEAP32[(($458)>>2)]=$460;
      var $461=(($459)|0)==0;
      if ($461) { label = 87; break; } else { label = 88; break; }
    case 87: 
      label = 86; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 91; break;
    case 91: 
      var $467=$8;
      var $468=$4;
      var $469=$1;
      var $470=$5;
      var $471=((($470)*(7))&-1);
      var $472=(($469+($471<<2))|0);
      var $473=$n3p1;
      var $474=___gmpn_sub_n($467, $468, $472, $473);
      var $475=$1;
      var $476=$5;
      var $477=((($476)*(7))&-1);
      var $478=(($475+($477<<2))|0);
      var $479=$1;
      var $480=$5;
      var $481=((($480)*(7))&-1);
      var $482=(($479+($481<<2))|0);
      var $483=$4;
      var $484=$n3p1;
      var $485=___gmpn_add_n($478, $482, $483, $484);
      label = 92; break;
    case 92: 
      var $487=$4;
      $__mp_ptr_swap__tmp24=$487;
      var $488=$8;
      $4=$488;
      var $489=$__mp_ptr_swap__tmp24;
      $8=$489;
      label = 93; break;
    case 93: 
      var $491=$3;
      var $492=$5;
      var $493=(($491+($492<<2))|0);
      var $494=$3;
      var $495=$5;
      var $496=(($494+($495<<2))|0);
      var $497=$1;
      var $498=$5;
      var $499=($498<<1);
      var $500=___gmpn_sub_n($493, $496, $497, $499);
      var $501=$n3;
      var $502=$3;
      var $503=(($502+($501<<2))|0);
      var $504=HEAP32[(($503)>>2)];
      var $505=((($504)-($500))|0);
      HEAP32[(($503)>>2)]=$505;
      var $506=$1;
      var $507=$n3;
      var $508=(($506+($507<<2))|0);
      var $509=$4;
      var $510=$n3p1;
      var $511=___gmpn_submul_1($508, $509, $510, 257);
      var $512=$1;
      var $513=$n3;
      var $514=(($512+($513<<2))|0);
      var $515=$1;
      var $516=$n3;
      var $517=(($515+($516<<2))|0);
      var $518=$n3p1;
      ___gmpn_divexact_1($514, $517, $518, 11340);
      var $519=$n3;
      var $520=$1;
      var $521=$n3;
      var $522=(($520+($521<<2))|0);
      var $523=(($522+($519<<2))|0);
      var $524=HEAP32[(($523)>>2)];
      var $525=$524 & -536870912;
      var $526=(($525)|0)!=0;
      if ($526) { label = 94; break; } else { label = 95; break; }
    case 94: 
      var $528=$n3;
      var $529=$1;
      var $530=$n3;
      var $531=(($529+($530<<2))|0);
      var $532=(($531+($528<<2))|0);
      var $533=HEAP32[(($532)>>2)];
      var $534=$533 | -1073741824;
      HEAP32[(($532)>>2)]=$534;
      label = 95; break;
    case 95: 
      var $536=$4;
      var $537=$1;
      var $538=$n3;
      var $539=(($537+($538<<2))|0);
      var $540=$n3p1;
      var $541=___gmpn_addmul_1($536, $539, $540, 60);
      var $542=$4;
      var $543=$4;
      var $544=$n3p1;
      var $545=___gmpn_bdiv_dbm1c($542, $543, $544, 16843009, 0);
      var $546=$545;
      var $547=255 & $546;
      var $548=$1;
      var $549=$5;
      var $550=((($549)*(7))&-1);
      var $551=(($548+($550<<2))|0);
      var $552=$3;
      var $553=$n3p1;
      var $554=$8;
      var $555=_DO_mpn_sublsh_n340($551, $552, $553, 5, $554);
      var $556=$2;
      var $557=$1;
      var $558=$5;
      var $559=((($558)*(7))&-1);
      var $560=(($557+($559<<2))|0);
      var $561=$n3p1;
      var $562=___gmpn_submul_1($556, $560, $561, 100);
      var $563=$2;
      var $564=$3;
      var $565=$n3p1;
      var $566=$8;
      var $567=_DO_mpn_sublsh_n340($563, $564, $565, 9, $566);
      var $568=$2;
      var $569=$2;
      var $570=$n3p1;
      ___gmpn_divexact_1($568, $569, $570, 42525);
      var $571=$1;
      var $572=$5;
      var $573=((($572)*(7))&-1);
      var $574=(($571+($573<<2))|0);
      var $575=$2;
      var $576=$n3p1;
      var $577=___gmpn_submul_1($574, $575, $576, 225);
      var $578=$1;
      var $579=$5;
      var $580=((($579)*(7))&-1);
      var $581=(($578+($580<<2))|0);
      var $582=$1;
      var $583=$5;
      var $584=((($583)*(7))&-1);
      var $585=(($582+($584<<2))|0);
      var $586=$n3p1;
      ___gmpn_divexact_1($581, $585, $586, 36);
      var $587=$3;
      var $588=$3;
      var $589=$1;
      var $590=$5;
      var $591=((($590)*(7))&-1);
      var $592=(($589+($591<<2))|0);
      var $593=$n3p1;
      var $594=___gmpn_sub_n($587, $588, $592, $593);
      var $595=$1;
      var $596=$n3;
      var $597=(($595+($596<<2))|0);
      var $598=$1;
      var $599=$5;
      var $600=((($599)*(7))&-1);
      var $601=(($598+($600<<2))|0);
      var $602=$1;
      var $603=$n3;
      var $604=(($602+($603<<2))|0);
      var $605=$n3p1;
      var $606=___gmpn_sub_n($597, $601, $604, $605);
      var $607=$1;
      var $608=$n3;
      var $609=(($607+($608<<2))|0);
      var $610=$1;
      var $611=$n3;
      var $612=(($610+($611<<2))|0);
      var $613=$n3p1;
      var $614=___gmpn_rshift($609, $612, $613, 1);
      var $615=$1;
      var $616=$5;
      var $617=((($616)*(7))&-1);
      var $618=(($615+($617<<2))|0);
      var $619=$1;
      var $620=$5;
      var $621=((($620)*(7))&-1);
      var $622=(($619+($621<<2))|0);
      var $623=$1;
      var $624=$n3;
      var $625=(($623+($624<<2))|0);
      var $626=$n3p1;
      var $627=___gmpn_sub_n($618, $622, $625, $626);
      var $628=$4;
      var $629=$4;
      var $630=$2;
      var $631=$n3p1;
      var $632=___gmpn_add_n($628, $629, $630, $631);
      var $633=$4;
      var $634=$4;
      var $635=$n3p1;
      var $636=___gmpn_rshift($633, $634, $635, 1);
      var $637=$3;
      var $638=$3;
      var $639=$2;
      var $640=$n3p1;
      var $641=___gmpn_sub_n($637, $638, $639, $640);
      var $642=$2;
      var $643=$2;
      var $644=$4;
      var $645=$n3p1;
      var $646=___gmpn_sub_n($642, $643, $644, $645);
      var $647=$1;
      var $648=$5;
      var $649=(($647+($648<<2))|0);
      var $650=$1;
      var $651=$5;
      var $652=(($650+($651<<2))|0);
      var $653=$4;
      var $654=$5;
      var $655=___gmpn_add_n($649, $652, $653, $654);
      $cy=$655;
      var $656=$1;
      var $657=$5;
      var $658=($657<<1);
      var $659=(($656+($658<<2))|0);
      var $660=$4;
      var $661=$5;
      var $662=(($660+($661<<2))|0);
      var $663=$5;
      var $664=$cy;
      var $665=___gmpn_add_1($659, $662, $663, $664);
      $cy=$665;
      label = 96; break;
    case 96: 
      var $667=$4;
      var $668=$5;
      var $669=($668<<1);
      var $670=(($667+($669<<2))|0);
      $__p26=$670;
      var $671=$__p26;
      var $672=HEAP32[(($671)>>2)];
      var $673=$cy;
      var $674=((($672)+($673))|0);
      $__x25=$674;
      var $675=$__x25;
      var $676=$__p26;
      HEAP32[(($676)>>2)]=$675;
      var $677=$__x25;
      var $678=$cy;
      var $679=(($677)>>>0) < (($678)>>>0);
      if ($679) { label = 97; break; } else { label = 101; break; }
    case 97: 
      label = 98; break;
    case 98: 
      var $682=$__p26;
      var $683=(($682+4)|0);
      $__p26=$683;
      var $684=HEAP32[(($683)>>2)];
      var $685=((($684)+(1))|0);
      HEAP32[(($683)>>2)]=$685;
      var $686=(($685)|0)==0;
      if ($686) { label = 99; break; } else { label = 100; break; }
    case 99: 
      label = 98; break;
    case 100: 
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $691=$n3;
      var $692=$4;
      var $693=(($692+($691<<2))|0);
      var $694=HEAP32[(($693)>>2)];
      var $695=$1;
      var $696=$n3;
      var $697=(($695+($696<<2))|0);
      var $698=$1;
      var $699=$n3;
      var $700=(($698+($699<<2))|0);
      var $701=$4;
      var $702=$5;
      var $703=($702<<1);
      var $704=(($701+($703<<2))|0);
      var $705=$5;
      var $706=___gmpn_add_n($697, $700, $704, $705);
      var $707=((($694)+($706))|0);
      $cy=$707;
      label = 103; break;
    case 103: 
      var $709=$1;
      var $710=$n3;
      var $711=(($709+($710<<2))|0);
      var $712=$5;
      var $713=(($711+($712<<2))|0);
      $__p28=$713;
      var $714=$__p28;
      var $715=HEAP32[(($714)>>2)];
      var $716=$cy;
      var $717=((($715)+($716))|0);
      $__x27=$717;
      var $718=$__x27;
      var $719=$__p28;
      HEAP32[(($719)>>2)]=$718;
      var $720=$__x27;
      var $721=$cy;
      var $722=(($720)>>>0) < (($721)>>>0);
      if ($722) { label = 104; break; } else { label = 108; break; }
    case 104: 
      label = 105; break;
    case 105: 
      var $725=$__p28;
      var $726=(($725+4)|0);
      $__p28=$726;
      var $727=HEAP32[(($726)>>2)];
      var $728=((($727)+(1))|0);
      HEAP32[(($726)>>2)]=$728;
      var $729=(($728)|0)==0;
      if ($729) { label = 106; break; } else { label = 107; break; }
    case 106: 
      label = 105; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      var $734=$1;
      var $735=$5;
      var $736=((($735)*(5))&-1);
      var $737=(($734+($736<<2))|0);
      var $738=$1;
      var $739=$5;
      var $740=((($739)*(5))&-1);
      var $741=(($738+($740<<2))|0);
      var $742=$3;
      var $743=$5;
      var $744=___gmpn_add_n($737, $741, $742, $743);
      var $745=$n3;
      var $746=($745<<1);
      var $747=$1;
      var $748=(($747+($746<<2))|0);
      var $749=HEAP32[(($748)>>2)];
      var $750=((($749)+($744))|0);
      HEAP32[(($748)>>2)]=$750;
      var $751=$1;
      var $752=$n3;
      var $753=($752<<1);
      var $754=(($751+($753<<2))|0);
      var $755=$3;
      var $756=$5;
      var $757=(($755+($756<<2))|0);
      var $758=$5;
      var $759=$n3;
      var $760=($759<<1);
      var $761=$1;
      var $762=(($761+($760<<2))|0);
      var $763=HEAP32[(($762)>>2)];
      var $764=___gmpn_add_1($754, $757, $758, $763);
      $cy=$764;
      label = 110; break;
    case 110: 
      var $766=$3;
      var $767=$5;
      var $768=($767<<1);
      var $769=(($766+($768<<2))|0);
      $__p30=$769;
      var $770=$__p30;
      var $771=HEAP32[(($770)>>2)];
      var $772=$cy;
      var $773=((($771)+($772))|0);
      $__x29=$773;
      var $774=$__x29;
      var $775=$__p30;
      HEAP32[(($775)>>2)]=$774;
      var $776=$__x29;
      var $777=$cy;
      var $778=(($776)>>>0) < (($777)>>>0);
      if ($778) { label = 111; break; } else { label = 115; break; }
    case 111: 
      label = 112; break;
    case 112: 
      var $781=$__p30;
      var $782=(($781+4)|0);
      $__p30=$782;
      var $783=HEAP32[(($782)>>2)];
      var $784=((($783)+(1))|0);
      HEAP32[(($782)>>2)]=$784;
      var $785=(($784)|0)==0;
      if ($785) { label = 113; break; } else { label = 114; break; }
    case 113: 
      label = 112; break;
    case 114: 
      label = 115; break;
    case 115: 
      label = 116; break;
    case 116: 
      var $790=$n3;
      var $791=$3;
      var $792=(($791+($790<<2))|0);
      var $793=HEAP32[(($792)>>2)];
      var $794=$1;
      var $795=$5;
      var $796=((($795)*(7))&-1);
      var $797=(($794+($796<<2))|0);
      var $798=$1;
      var $799=$5;
      var $800=((($799)*(7))&-1);
      var $801=(($798+($800<<2))|0);
      var $802=$3;
      var $803=$5;
      var $804=($803<<1);
      var $805=(($802+($804<<2))|0);
      var $806=$5;
      var $807=___gmpn_add_n($797, $801, $805, $806);
      var $808=((($793)+($807))|0);
      $cy=$808;
      label = 117; break;
    case 117: 
      var $810=$1;
      var $811=$5;
      var $812=($811<<3);
      var $813=(($810+($812<<2))|0);
      $__p32=$813;
      var $814=$__p32;
      var $815=HEAP32[(($814)>>2)];
      var $816=$cy;
      var $817=((($815)+($816))|0);
      $__x31=$817;
      var $818=$__x31;
      var $819=$__p32;
      HEAP32[(($819)>>2)]=$818;
      var $820=$__x31;
      var $821=$cy;
      var $822=(($820)>>>0) < (($821)>>>0);
      if ($822) { label = 118; break; } else { label = 122; break; }
    case 118: 
      label = 119; break;
    case 119: 
      var $825=$__p32;
      var $826=(($825+4)|0);
      $__p32=$826;
      var $827=HEAP32[(($826)>>2)];
      var $828=((($827)+(1))|0);
      HEAP32[(($826)>>2)]=$828;
      var $829=(($828)|0)==0;
      if ($829) { label = 120; break; } else { label = 121; break; }
    case 120: 
      label = 119; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      var $834=$1;
      var $835=$5;
      var $836=((($835)*(9))&-1);
      var $837=(($834+($836<<2))|0);
      var $838=$1;
      var $839=$5;
      var $840=((($839)*(9))&-1);
      var $841=(($838+($840<<2))|0);
      var $842=$2;
      var $843=$5;
      var $844=___gmpn_add_n($837, $841, $842, $843);
      var $845=$5;
      var $846=((($845)*(10))&-1);
      var $847=$1;
      var $848=(($847+($846<<2))|0);
      var $849=HEAP32[(($848)>>2)];
      var $850=((($849)+($844))|0);
      HEAP32[(($848)>>2)]=$850;
      var $851=$7;
      var $852=(($851)|0)!=0;
      if ($852) { label = 124; break; } else { label = 142; break; }
    case 124: 
      var $854=$1;
      var $855=$5;
      var $856=((($855)*(10))&-1);
      var $857=(($854+($856<<2))|0);
      var $858=$2;
      var $859=$5;
      var $860=(($858+($859<<2))|0);
      var $861=$5;
      var $862=$5;
      var $863=((($862)*(10))&-1);
      var $864=$1;
      var $865=(($864+($863<<2))|0);
      var $866=HEAP32[(($865)>>2)];
      var $867=___gmpn_add_1($857, $860, $861, $866);
      $cy=$867;
      label = 125; break;
    case 125: 
      var $869=$2;
      var $870=$5;
      var $871=($870<<1);
      var $872=(($869+($871<<2))|0);
      $__p34=$872;
      var $873=$__p34;
      var $874=HEAP32[(($873)>>2)];
      var $875=$cy;
      var $876=((($874)+($875))|0);
      $__x33=$876;
      var $877=$__x33;
      var $878=$__p34;
      HEAP32[(($878)>>2)]=$877;
      var $879=$__x33;
      var $880=$cy;
      var $881=(($879)>>>0) < (($880)>>>0);
      if ($881) { label = 126; break; } else { label = 130; break; }
    case 126: 
      label = 127; break;
    case 127: 
      var $884=$__p34;
      var $885=(($884+4)|0);
      $__p34=$885;
      var $886=HEAP32[(($885)>>2)];
      var $887=((($886)+(1))|0);
      HEAP32[(($885)>>2)]=$887;
      var $888=(($887)|0)==0;
      if ($888) { label = 128; break; } else { label = 129; break; }
    case 128: 
      label = 127; break;
    case 129: 
      label = 130; break;
    case 130: 
      label = 131; break;
    case 131: 
      var $893=$6;
      var $894=$5;
      var $895=(($893)|0) > (($894)|0);
      var $896=(($895)&1);
      var $897=(($896)|0)!=0;
      var $898=(($897)&1);
      var $899=($898);
      var $900=(($899)|0)!=0;
      if ($900) { label = 132; break; } else { label = 140; break; }
    case 132: 
      var $902=$n3;
      var $903=$2;
      var $904=(($903+($902<<2))|0);
      var $905=HEAP32[(($904)>>2)];
      var $906=$1;
      var $907=$5;
      var $908=((($907)*(11))&-1);
      var $909=(($906+($908<<2))|0);
      var $910=$1;
      var $911=$5;
      var $912=((($911)*(11))&-1);
      var $913=(($910+($912<<2))|0);
      var $914=$2;
      var $915=$5;
      var $916=($915<<1);
      var $917=(($914+($916<<2))|0);
      var $918=$5;
      var $919=___gmpn_add_n($909, $913, $917, $918);
      var $920=((($905)+($919))|0);
      $cy=$920;
      label = 133; break;
    case 133: 
      var $922=$1;
      var $923=$n3;
      var $924=($923<<2);
      var $925=(($922+($924<<2))|0);
      $__p36=$925;
      var $926=$__p36;
      var $927=HEAP32[(($926)>>2)];
      var $928=$cy;
      var $929=((($927)+($928))|0);
      $__x35=$929;
      var $930=$__x35;
      var $931=$__p36;
      HEAP32[(($931)>>2)]=$930;
      var $932=$__x35;
      var $933=$cy;
      var $934=(($932)>>>0) < (($933)>>>0);
      if ($934) { label = 134; break; } else { label = 138; break; }
    case 134: 
      label = 135; break;
    case 135: 
      var $937=$__p36;
      var $938=(($937+4)|0);
      $__p36=$938;
      var $939=HEAP32[(($938)>>2)];
      var $940=((($939)+(1))|0);
      HEAP32[(($938)>>2)]=$940;
      var $941=(($940)|0)==0;
      if ($941) { label = 136; break; } else { label = 137; break; }
    case 136: 
      label = 135; break;
    case 137: 
      label = 138; break;
    case 138: 
      label = 139; break;
    case 139: 
      label = 141; break;
    case 140: 
      var $947=$1;
      var $948=$5;
      var $949=((($948)*(11))&-1);
      var $950=(($947+($949<<2))|0);
      var $951=$1;
      var $952=$5;
      var $953=((($952)*(11))&-1);
      var $954=(($951+($953<<2))|0);
      var $955=$2;
      var $956=$5;
      var $957=($956<<1);
      var $958=(($955+($957<<2))|0);
      var $959=$6;
      var $960=___gmpn_add_n($950, $954, $958, $959);
      label = 141; break;
    case 141: 
      label = 143; break;
    case 142: 
      var $963=$1;
      var $964=$5;
      var $965=((($964)*(10))&-1);
      var $966=(($963+($965<<2))|0);
      var $967=$2;
      var $968=$5;
      var $969=(($967+($968<<2))|0);
      var $970=$6;
      var $971=$5;
      var $972=((($971)*(10))&-1);
      var $973=$1;
      var $974=(($973+($972<<2))|0);
      var $975=HEAP32[(($974)>>2)];
      var $976=___gmpn_add_1($966, $969, $970, $975);
      label = 143; break;
    case 143: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_interpolate_12pts["X"]=1;

function _DO_mpn_sublsh_n340($dst, $src, $n, $s, $ws) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $__cy;
  $1=$dst;
  $2=$src;
  $3=$n;
  $4=$s;
  $5=$ws;
  var $6=$5;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_lshift($6, $7, $8, $9);
  $__cy=$10;
  var $11=$__cy;
  var $12=$1;
  var $13=$1;
  var $14=$5;
  var $15=$3;
  var $16=___gmpn_sub_n($12, $13, $14, $15);
  var $17=((($11)+($16))|0);

  return $17;
}


function ___gmpn_toom_interpolate_16pts($pp, $r1, $r3, $r5, $r7, $n, $spt, $half, $wsi) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $cy;
      var $n3;
      var $n3p1;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__cy;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      var $__x7;
      var $__p8;
      var $__cy9;
      var $__x10;
      var $__p11;
      var $__x12;
      var $__p13;
      var $__cy14;
      var $__x15;
      var $__p16;
      var $__x17;
      var $__p18;
      var $__cy19;
      var $__x20;
      var $__p21;
      var $__x22;
      var $__p23;
      var $__mp_ptr_swap__tmp;
      var $__cy24;
      var $__x25;
      var $__p26;
      var $__x27;
      var $__p28;
      var $__mp_ptr_swap__tmp29;
      var $__x30;
      var $__p31;
      var $__mp_ptr_swap__tmp32;
      var $__x33;
      var $__p34;
      var $__x35;
      var $__p36;
      var $__x37;
      var $__p38;
      var $__x39;
      var $__p40;
      var $__x41;
      var $__p42;
      var $__x43;
      var $__p44;
      var $__x45;
      var $__p46;
      var $__x47;
      var $__p48;
      $1=$pp;
      $2=$r1;
      $3=$r3;
      $4=$r5;
      $5=$r7;
      $6=$n;
      $7=$spt;
      $8=$half;
      $9=$wsi;
      var $10=$6;
      var $11=((($10)*(3))&-1);
      $n3=$11;
      var $12=$n3;
      var $13=((($12)+(1))|0);
      $n3p1=$13;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $16=$8;
      var $17=(($16)|0)!=0;
      if ($17) { label = 5; break; } else { label = 79; break; }
    case 5: 
      var $19=$1;
      var $20=$6;
      var $21=((($20)*(7))&-1);
      var $22=(($19+($21<<2))|0);
      var $23=$1;
      var $24=$6;
      var $25=((($24)*(7))&-1);
      var $26=(($23+($25<<2))|0);
      var $27=$1;
      var $28=$6;
      var $29=((($28)*(15))&-1);
      var $30=(($27+($29<<2))|0);
      var $31=$7;
      var $32=___gmpn_sub_n($22, $26, $30, $31);
      $cy=$32;
      label = 6; break;
    case 6: 
      var $34=$1;
      var $35=$6;
      var $36=((($35)*(7))&-1);
      var $37=(($34+($36<<2))|0);
      var $38=$7;
      var $39=(($37+($38<<2))|0);
      $__p=$39;
      var $40=$__p;
      var $41=HEAP32[(($40)>>2)];
      $__x=$41;
      var $42=$__x;
      var $43=$cy;
      var $44=((($42)-($43))|0);
      var $45=$__p;
      HEAP32[(($45)>>2)]=$44;
      var $46=$__x;
      var $47=$cy;
      var $48=(($46)>>>0) < (($47)>>>0);
      if ($48) { label = 7; break; } else { label = 11; break; }
    case 7: 
      label = 8; break;
    case 8: 
      var $51=$__p;
      var $52=(($51+4)|0);
      $__p=$52;
      var $53=HEAP32[(($52)>>2)];
      var $54=((($53)-(1))|0);
      HEAP32[(($52)>>2)]=$54;
      var $55=(($53)|0)==0;
      if ($55) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 8; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $60=$3;
      var $61=$1;
      var $62=$6;
      var $63=((($62)*(15))&-1);
      var $64=(($61+($63<<2))|0);
      var $65=$7;
      var $66=$9;
      var $67=_DO_mpn_sublsh_n343($60, $64, $65, 14, $66);
      $cy=$67;
      label = 13; break;
    case 13: 
      var $69=$3;
      var $70=$7;
      var $71=(($69+($70<<2))|0);
      $__p2=$71;
      var $72=$__p2;
      var $73=HEAP32[(($72)>>2)];
      $__x1=$73;
      var $74=$__x1;
      var $75=$cy;
      var $76=((($74)-($75))|0);
      var $77=$__p2;
      HEAP32[(($77)>>2)]=$76;
      var $78=$__x1;
      var $79=$cy;
      var $80=(($78)>>>0) < (($79)>>>0);
      if ($80) { label = 14; break; } else { label = 18; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $83=$__p2;
      var $84=(($83+4)|0);
      $__p2=$84;
      var $85=HEAP32[(($84)>>2)];
      var $86=((($85)-(1))|0);
      HEAP32[(($84)>>2)]=$86;
      var $87=(($85)|0)==0;
      if ($87) { label = 16; break; } else { label = 17; break; }
    case 16: 
      label = 15; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $94=$1;
      var $95=$n3;
      var $96=(($94+($95<<2))|0);
      $__p4=$96;
      var $97=$__p4;
      var $98=HEAP32[(($97)>>2)];
      $__x3=$98;
      var $99=$__x3;
      var $100=$1;
      var $101=$6;
      var $102=((($101)*(15))&-1);
      var $103=(($100+($102<<2))|0);
      var $104=(($103)|0);
      var $105=HEAP32[(($104)>>2)];
      var $106=$105 >>> 2;
      var $107=((($99)-($106))|0);
      var $108=$__p4;
      HEAP32[(($108)>>2)]=$107;
      var $109=$__x3;
      var $110=$1;
      var $111=$6;
      var $112=((($111)*(15))&-1);
      var $113=(($110+($112<<2))|0);
      var $114=(($113)|0);
      var $115=HEAP32[(($114)>>2)];
      var $116=$115 >>> 2;
      var $117=(($109)>>>0) < (($116)>>>0);
      if ($117) { label = 22; break; } else { label = 26; break; }
    case 22: 
      label = 23; break;
    case 23: 
      var $120=$__p4;
      var $121=(($120+4)|0);
      $__p4=$121;
      var $122=HEAP32[(($121)>>2)];
      var $123=((($122)-(1))|0);
      HEAP32[(($121)>>2)]=$123;
      var $124=(($122)|0)==0;
      if ($124) { label = 24; break; } else { label = 25; break; }
    case 24: 
      label = 23; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $129=$1;
      var $130=$n3;
      var $131=(($129+($130<<2))|0);
      var $132=$1;
      var $133=$6;
      var $134=((($133)*(15))&-1);
      var $135=(($132+($134<<2))|0);
      var $136=(($135+4)|0);
      var $137=$7;
      var $138=((($137)-(1))|0);
      var $139=$9;
      var $140=_DO_mpn_sublsh_n343($131, $136, $138, 30, $139);
      $__cy=$140;
      label = 28; break;
    case 28: 
      var $142=$1;
      var $143=$n3;
      var $144=(($142+($143<<2))|0);
      var $145=$7;
      var $146=(($144+($145<<2))|0);
      var $147=((($146)-(4))|0);
      $__p6=$147;
      var $148=$__p6;
      var $149=HEAP32[(($148)>>2)];
      $__x5=$149;
      var $150=$__x5;
      var $151=$__cy;
      var $152=((($150)-($151))|0);
      var $153=$__p6;
      HEAP32[(($153)>>2)]=$152;
      var $154=$__x5;
      var $155=$__cy;
      var $156=(($154)>>>0) < (($155)>>>0);
      if ($156) { label = 29; break; } else { label = 33; break; }
    case 29: 
      label = 30; break;
    case 30: 
      var $159=$__p6;
      var $160=(($159+4)|0);
      $__p6=$160;
      var $161=HEAP32[(($160)>>2)];
      var $162=((($161)-(1))|0);
      HEAP32[(($160)>>2)]=$162;
      var $163=(($161)|0)==0;
      if ($163) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 30; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      var $169=$1;
      var $170=$6;
      var $171=((($170)*(11))&-1);
      var $172=(($169+($171<<2))|0);
      var $173=$1;
      var $174=$6;
      var $175=((($174)*(15))&-1);
      var $176=(($173+($175<<2))|0);
      var $177=$7;
      var $178=$9;
      var $179=_DO_mpn_sublsh_n343($172, $176, $177, 28, $178);
      $cy=$179;
      label = 36; break;
    case 36: 
      var $181=$1;
      var $182=$6;
      var $183=((($182)*(11))&-1);
      var $184=(($181+($183<<2))|0);
      var $185=$7;
      var $186=(($184+($185<<2))|0);
      $__p8=$186;
      var $187=$__p8;
      var $188=HEAP32[(($187)>>2)];
      $__x7=$188;
      var $189=$__x7;
      var $190=$cy;
      var $191=((($189)-($190))|0);
      var $192=$__p8;
      HEAP32[(($192)>>2)]=$191;
      var $193=$__x7;
      var $194=$cy;
      var $195=(($193)>>>0) < (($194)>>>0);
      if ($195) { label = 37; break; } else { label = 41; break; }
    case 37: 
      label = 38; break;
    case 38: 
      var $198=$__p8;
      var $199=(($198+4)|0);
      $__p8=$199;
      var $200=HEAP32[(($199)>>2)];
      var $201=((($200)-(1))|0);
      HEAP32[(($199)>>2)]=$201;
      var $202=(($200)|0)==0;
      if ($202) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 38; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $209=$4;
      $__p11=$209;
      var $210=$__p11;
      var $211=HEAP32[(($210)>>2)];
      $__x10=$211;
      var $212=$__x10;
      var $213=$1;
      var $214=$6;
      var $215=((($214)*(15))&-1);
      var $216=(($213+($215<<2))|0);
      var $217=(($216)|0);
      var $218=HEAP32[(($217)>>2)];
      var $219=$218 >>> 4;
      var $220=((($212)-($219))|0);
      var $221=$__p11;
      HEAP32[(($221)>>2)]=$220;
      var $222=$__x10;
      var $223=$1;
      var $224=$6;
      var $225=((($224)*(15))&-1);
      var $226=(($223+($225<<2))|0);
      var $227=(($226)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=$228 >>> 4;
      var $230=(($222)>>>0) < (($229)>>>0);
      if ($230) { label = 45; break; } else { label = 49; break; }
    case 45: 
      label = 46; break;
    case 46: 
      var $233=$__p11;
      var $234=(($233+4)|0);
      $__p11=$234;
      var $235=HEAP32[(($234)>>2)];
      var $236=((($235)-(1))|0);
      HEAP32[(($234)>>2)]=$236;
      var $237=(($235)|0)==0;
      if ($237) { label = 47; break; } else { label = 48; break; }
    case 47: 
      label = 46; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $242=$4;
      var $243=$1;
      var $244=$6;
      var $245=((($244)*(15))&-1);
      var $246=(($243+($245<<2))|0);
      var $247=(($246+4)|0);
      var $248=$7;
      var $249=((($248)-(1))|0);
      var $250=$9;
      var $251=_DO_mpn_sublsh_n343($242, $247, $249, 28, $250);
      $__cy9=$251;
      label = 51; break;
    case 51: 
      var $253=$4;
      var $254=$7;
      var $255=(($253+($254<<2))|0);
      var $256=((($255)-(4))|0);
      $__p13=$256;
      var $257=$__p13;
      var $258=HEAP32[(($257)>>2)];
      $__x12=$258;
      var $259=$__x12;
      var $260=$__cy9;
      var $261=((($259)-($260))|0);
      var $262=$__p13;
      HEAP32[(($262)>>2)]=$261;
      var $263=$__x12;
      var $264=$__cy9;
      var $265=(($263)>>>0) < (($264)>>>0);
      if ($265) { label = 52; break; } else { label = 56; break; }
    case 52: 
      label = 53; break;
    case 53: 
      var $268=$__p13;
      var $269=(($268+4)|0);
      $__p13=$269;
      var $270=HEAP32[(($269)>>2)];
      var $271=((($270)-(1))|0);
      HEAP32[(($269)>>2)]=$271;
      var $272=(($270)|0)==0;
      if ($272) { label = 54; break; } else { label = 55; break; }
    case 54: 
      label = 53; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $278=$2;
      var $279=(($278+4)|0);
      var $280=$1;
      var $281=$6;
      var $282=((($281)*(15))&-1);
      var $283=(($280+($282<<2))|0);
      var $284=$7;
      var $285=$9;
      var $286=_DO_mpn_sublsh_n343($279, $283, $284, 10, $285);
      $cy=$286;
      var $287=$2;
      var $288=$7;
      var $289=(($287+($288<<2))|0);
      var $290=(($289+4)|0);
      var $291=$2;
      var $292=$7;
      var $293=(($291+($292<<2))|0);
      var $294=(($293+4)|0);
      var $295=$n3p1;
      var $296=$7;
      var $297=((($295)-($296))|0);
      var $298=((($297)-(1))|0);
      var $299=$cy;
      var $300=___gmpn_sub_1($290, $294, $298, $299);
      $cy=$300;
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $303=$n3p1;
      var $304=$5;
      var $305=(($304+($303<<2))|0);
      var $306=HEAP32[(($305)>>2)];
      $cy=$306;
      var $307=$n3p1;
      var $308=$5;
      var $309=(($308+($307<<2))|0);
      HEAP32[(($309)>>2)]=128;
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      var $312=$5;
      $__p16=$312;
      var $313=$__p16;
      var $314=HEAP32[(($313)>>2)];
      $__x15=$314;
      var $315=$__x15;
      var $316=$1;
      var $317=$6;
      var $318=((($317)*(15))&-1);
      var $319=(($316+($318<<2))|0);
      var $320=(($319)|0);
      var $321=HEAP32[(($320)>>2)];
      var $322=$321 >>> 6;
      var $323=((($315)-($322))|0);
      var $324=$__p16;
      HEAP32[(($324)>>2)]=$323;
      var $325=$__x15;
      var $326=$1;
      var $327=$6;
      var $328=((($327)*(15))&-1);
      var $329=(($326+($328<<2))|0);
      var $330=(($329)|0);
      var $331=HEAP32[(($330)>>2)];
      var $332=$331 >>> 6;
      var $333=(($325)>>>0) < (($332)>>>0);
      if ($333) { label = 63; break; } else { label = 67; break; }
    case 63: 
      label = 64; break;
    case 64: 
      var $336=$__p16;
      var $337=(($336+4)|0);
      $__p16=$337;
      var $338=HEAP32[(($337)>>2)];
      var $339=((($338)-(1))|0);
      HEAP32[(($337)>>2)]=$339;
      var $340=(($338)|0)==0;
      if ($340) { label = 65; break; } else { label = 66; break; }
    case 65: 
      label = 64; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $345=$5;
      var $346=$1;
      var $347=$6;
      var $348=((($347)*(15))&-1);
      var $349=(($346+($348<<2))|0);
      var $350=(($349+4)|0);
      var $351=$7;
      var $352=((($351)-(1))|0);
      var $353=$9;
      var $354=_DO_mpn_sublsh_n343($345, $350, $352, 26, $353);
      $__cy14=$354;
      label = 69; break;
    case 69: 
      var $356=$5;
      var $357=$7;
      var $358=(($356+($357<<2))|0);
      var $359=((($358)-(4))|0);
      $__p18=$359;
      var $360=$__p18;
      var $361=HEAP32[(($360)>>2)];
      $__x17=$361;
      var $362=$__x17;
      var $363=$__cy14;
      var $364=((($362)-($363))|0);
      var $365=$__p18;
      HEAP32[(($365)>>2)]=$364;
      var $366=$__x17;
      var $367=$__cy14;
      var $368=(($366)>>>0) < (($367)>>>0);
      if ($368) { label = 70; break; } else { label = 74; break; }
    case 70: 
      label = 71; break;
    case 71: 
      var $371=$__p18;
      var $372=(($371+4)|0);
      $__p18=$372;
      var $373=HEAP32[(($372)>>2)];
      var $374=((($373)-(1))|0);
      HEAP32[(($372)>>2)]=$374;
      var $375=(($373)|0)==0;
      if ($375) { label = 72; break; } else { label = 73; break; }
    case 72: 
      label = 71; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $383=$cy;
      var $384=$n3p1;
      var $385=$5;
      var $386=(($385+($384<<2))|0);
      HEAP32[(($386)>>2)]=$383;
      label = 79; break;
    case 79: 
      var $388=$4;
      var $389=$6;
      var $390=(($388+($389<<2))|0);
      var $391=$1;
      var $392=$6;
      var $393=($392<<1);
      var $394=$9;
      var $395=_DO_mpn_sublsh_n343($390, $391, $393, 28, $394);
      var $396=$n3;
      var $397=$4;
      var $398=(($397+($396<<2))|0);
      var $399=HEAP32[(($398)>>2)];
      var $400=((($399)-($395))|0);
      HEAP32[(($398)>>2)]=$400;
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      var $403=$1;
      var $404=$6;
      var $405=((($404)*(11))&-1);
      var $406=(($403+($405<<2))|0);
      var $407=$6;
      var $408=(($406+($407<<2))|0);
      $__p21=$408;
      var $409=$__p21;
      var $410=HEAP32[(($409)>>2)];
      $__x20=$410;
      var $411=$__x20;
      var $412=$1;
      var $413=(($412)|0);
      var $414=HEAP32[(($413)>>2)];
      var $415=$414 >>> 4;
      var $416=((($411)-($415))|0);
      var $417=$__p21;
      HEAP32[(($417)>>2)]=$416;
      var $418=$__x20;
      var $419=$1;
      var $420=(($419)|0);
      var $421=HEAP32[(($420)>>2)];
      var $422=$421 >>> 4;
      var $423=(($418)>>>0) < (($422)>>>0);
      if ($423) { label = 82; break; } else { label = 86; break; }
    case 82: 
      label = 83; break;
    case 83: 
      var $426=$__p21;
      var $427=(($426+4)|0);
      $__p21=$427;
      var $428=HEAP32[(($427)>>2)];
      var $429=((($428)-(1))|0);
      HEAP32[(($427)>>2)]=$429;
      var $430=(($428)|0)==0;
      if ($430) { label = 84; break; } else { label = 85; break; }
    case 84: 
      label = 83; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $435=$1;
      var $436=$6;
      var $437=((($436)*(11))&-1);
      var $438=(($435+($437<<2))|0);
      var $439=$6;
      var $440=(($438+($439<<2))|0);
      var $441=$1;
      var $442=(($441+4)|0);
      var $443=$6;
      var $444=($443<<1);
      var $445=((($444)-(1))|0);
      var $446=$9;
      var $447=_DO_mpn_sublsh_n343($440, $442, $445, 28, $446);
      $__cy19=$447;
      label = 88; break;
    case 88: 
      var $449=$1;
      var $450=$6;
      var $451=((($450)*(11))&-1);
      var $452=(($449+($451<<2))|0);
      var $453=$6;
      var $454=(($452+($453<<2))|0);
      var $455=$6;
      var $456=($455<<1);
      var $457=(($454+($456<<2))|0);
      var $458=((($457)-(4))|0);
      $__p23=$458;
      var $459=$__p23;
      var $460=HEAP32[(($459)>>2)];
      $__x22=$460;
      var $461=$__x22;
      var $462=$__cy19;
      var $463=((($461)-($462))|0);
      var $464=$__p23;
      HEAP32[(($464)>>2)]=$463;
      var $465=$__x22;
      var $466=$__cy19;
      var $467=(($465)>>>0) < (($466)>>>0);
      if ($467) { label = 89; break; } else { label = 93; break; }
    case 89: 
      label = 90; break;
    case 90: 
      var $470=$__p23;
      var $471=(($470+4)|0);
      $__p23=$471;
      var $472=HEAP32[(($471)>>2)];
      var $473=((($472)-(1))|0);
      HEAP32[(($471)>>2)]=$473;
      var $474=(($472)|0)==0;
      if ($474) { label = 91; break; } else { label = 92; break; }
    case 91: 
      label = 90; break;
    case 92: 
      label = 93; break;
    case 93: 
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $480=$9;
      var $481=$4;
      var $482=$1;
      var $483=$6;
      var $484=((($483)*(11))&-1);
      var $485=(($482+($484<<2))|0);
      var $486=$n3p1;
      var $487=___gmpn_sub_n($480, $481, $485, $486);
      var $488=$1;
      var $489=$6;
      var $490=((($489)*(11))&-1);
      var $491=(($488+($490<<2))|0);
      var $492=$1;
      var $493=$6;
      var $494=((($493)*(11))&-1);
      var $495=(($492+($494<<2))|0);
      var $496=$4;
      var $497=$n3p1;
      var $498=___gmpn_add_n($491, $495, $496, $497);
      label = 96; break;
    case 96: 
      var $500=$4;
      $__mp_ptr_swap__tmp=$500;
      var $501=$9;
      $4=$501;
      var $502=$__mp_ptr_swap__tmp;
      $9=$502;
      label = 97; break;
    case 97: 
      var $504=$1;
      var $505=$n3;
      var $506=(($504+($505<<2))|0);
      var $507=$6;
      var $508=(($506+($507<<2))|0);
      var $509=$1;
      var $510=$6;
      var $511=($510<<1);
      var $512=$9;
      var $513=_DO_mpn_sublsh_n343($508, $509, $511, 14, $512);
      var $514=$n3;
      var $515=$1;
      var $516=$n3;
      var $517=(($515+($516<<2))|0);
      var $518=(($517+($514<<2))|0);
      var $519=HEAP32[(($518)>>2)];
      var $520=((($519)-($513))|0);
      HEAP32[(($518)>>2)]=$520;
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      var $523=$3;
      var $524=$6;
      var $525=(($523+($524<<2))|0);
      $__p26=$525;
      var $526=$__p26;
      var $527=HEAP32[(($526)>>2)];
      $__x25=$527;
      var $528=$__x25;
      var $529=$1;
      var $530=(($529)|0);
      var $531=HEAP32[(($530)>>2)];
      var $532=$531 >>> 2;
      var $533=((($528)-($532))|0);
      var $534=$__p26;
      HEAP32[(($534)>>2)]=$533;
      var $535=$__x25;
      var $536=$1;
      var $537=(($536)|0);
      var $538=HEAP32[(($537)>>2)];
      var $539=$538 >>> 2;
      var $540=(($535)>>>0) < (($539)>>>0);
      if ($540) { label = 100; break; } else { label = 104; break; }
    case 100: 
      label = 101; break;
    case 101: 
      var $543=$__p26;
      var $544=(($543+4)|0);
      $__p26=$544;
      var $545=HEAP32[(($544)>>2)];
      var $546=((($545)-(1))|0);
      HEAP32[(($544)>>2)]=$546;
      var $547=(($545)|0)==0;
      if ($547) { label = 102; break; } else { label = 103; break; }
    case 102: 
      label = 101; break;
    case 103: 
      label = 104; break;
    case 104: 
      label = 105; break;
    case 105: 
      var $552=$3;
      var $553=$6;
      var $554=(($552+($553<<2))|0);
      var $555=$1;
      var $556=(($555+4)|0);
      var $557=$6;
      var $558=($557<<1);
      var $559=((($558)-(1))|0);
      var $560=$9;
      var $561=_DO_mpn_sublsh_n343($554, $556, $559, 30, $560);
      $__cy24=$561;
      label = 106; break;
    case 106: 
      var $563=$3;
      var $564=$6;
      var $565=(($563+($564<<2))|0);
      var $566=$6;
      var $567=($566<<1);
      var $568=(($565+($567<<2))|0);
      var $569=((($568)-(4))|0);
      $__p28=$569;
      var $570=$__p28;
      var $571=HEAP32[(($570)>>2)];
      $__x27=$571;
      var $572=$__x27;
      var $573=$__cy24;
      var $574=((($572)-($573))|0);
      var $575=$__p28;
      HEAP32[(($575)>>2)]=$574;
      var $576=$__x27;
      var $577=$__cy24;
      var $578=(($576)>>>0) < (($577)>>>0);
      if ($578) { label = 107; break; } else { label = 111; break; }
    case 107: 
      label = 108; break;
    case 108: 
      var $581=$__p28;
      var $582=(($581+4)|0);
      $__p28=$582;
      var $583=HEAP32[(($582)>>2)];
      var $584=((($583)-(1))|0);
      HEAP32[(($582)>>2)]=$584;
      var $585=(($583)|0)==0;
      if ($585) { label = 109; break; } else { label = 110; break; }
    case 109: 
      label = 108; break;
    case 110: 
      label = 111; break;
    case 111: 
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      var $591=$9;
      var $592=$3;
      var $593=$1;
      var $594=$n3;
      var $595=(($593+($594<<2))|0);
      var $596=$n3p1;
      var $597=___gmpn_add_n($591, $592, $595, $596);
      var $598=$1;
      var $599=$n3;
      var $600=(($598+($599<<2))|0);
      var $601=$1;
      var $602=$n3;
      var $603=(($601+($602<<2))|0);
      var $604=$3;
      var $605=$n3p1;
      var $606=___gmpn_sub_n($600, $603, $604, $605);
      label = 114; break;
    case 114: 
      var $608=$3;
      $__mp_ptr_swap__tmp29=$608;
      var $609=$9;
      $3=$609;
      var $610=$__mp_ptr_swap__tmp29;
      $9=$610;
      label = 115; break;
    case 115: 
      var $612=$5;
      var $613=$6;
      var $614=(($612+($613<<2))|0);
      var $615=(($614+4)|0);
      var $616=$1;
      var $617=$6;
      var $618=($617<<1);
      var $619=$9;
      var $620=_DO_mpn_sublsh_n343($615, $616, $618, 10, $619);
      $cy=$620;
      label = 116; break;
    case 116: 
      var $622=$2;
      var $623=$6;
      var $624=(($622+($623<<2))|0);
      $__p31=$624;
      var $625=$__p31;
      var $626=HEAP32[(($625)>>2)];
      $__x30=$626;
      var $627=$__x30;
      var $628=$1;
      var $629=(($628)|0);
      var $630=HEAP32[(($629)>>2)];
      var $631=$630 >>> 6;
      var $632=((($627)-($631))|0);
      var $633=$__p31;
      HEAP32[(($633)>>2)]=$632;
      var $634=$__x30;
      var $635=$1;
      var $636=(($635)|0);
      var $637=HEAP32[(($636)>>2)];
      var $638=$637 >>> 6;
      var $639=(($634)>>>0) < (($638)>>>0);
      if ($639) { label = 117; break; } else { label = 121; break; }
    case 117: 
      label = 118; break;
    case 118: 
      var $642=$__p31;
      var $643=(($642+4)|0);
      $__p31=$643;
      var $644=HEAP32[(($643)>>2)];
      var $645=((($644)-(1))|0);
      HEAP32[(($643)>>2)]=$645;
      var $646=(($644)|0)==0;
      if ($646) { label = 119; break; } else { label = 120; break; }
    case 119: 
      label = 118; break;
    case 120: 
      label = 121; break;
    case 121: 
      label = 122; break;
    case 122: 
      var $651=$2;
      var $652=$6;
      var $653=(($651+($652<<2))|0);
      var $654=$1;
      var $655=(($654+4)|0);
      var $656=$6;
      var $657=($656<<1);
      var $658=((($657)-(1))|0);
      var $659=$9;
      var $660=_DO_mpn_sublsh_n343($653, $655, $658, 26, $659);
      $cy=$660;
      var $661=$2;
      var $662=$6;
      var $663=((($662)*(3))&-1);
      var $664=(($661+($663<<2))|0);
      var $665=((($664)-(4))|0);
      var $666=$2;
      var $667=$6;
      var $668=((($667)*(3))&-1);
      var $669=(($666+($668<<2))|0);
      var $670=((($669)-(4))|0);
      var $671=$cy;
      var $672=___gmpn_sub_1($665, $670, 2, $671);
      $cy=$672;
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      var $675=$9;
      var $676=$5;
      var $677=$2;
      var $678=$n3p1;
      var $679=___gmpn_sub_n($675, $676, $677, $678);
      var $680=$2;
      var $681=$2;
      var $682=$5;
      var $683=$n3p1;
      var $684=___gmpn_add_n($680, $681, $682, $683);
      label = 125; break;
    case 125: 
      var $686=$5;
      $__mp_ptr_swap__tmp32=$686;
      var $687=$9;
      $5=$687;
      var $688=$__mp_ptr_swap__tmp32;
      $9=$688;
      label = 126; break;
    case 126: 
      var $690=$1;
      var $691=$6;
      var $692=((($691)*(7))&-1);
      var $693=(($690+($692<<2))|0);
      var $694=$6;
      var $695=(($693+($694<<2))|0);
      var $696=$1;
      var $697=$6;
      var $698=((($697)*(7))&-1);
      var $699=(($696+($698<<2))|0);
      var $700=$6;
      var $701=(($699+($700<<2))|0);
      var $702=$1;
      var $703=$6;
      var $704=($703<<1);
      var $705=___gmpn_sub_n($695, $701, $702, $704);
      var $706=$n3;
      var $707=$1;
      var $708=$6;
      var $709=((($708)*(7))&-1);
      var $710=(($707+($709<<2))|0);
      var $711=(($710+($706<<2))|0);
      var $712=HEAP32[(($711)>>2)];
      var $713=((($712)-($705))|0);
      HEAP32[(($711)>>2)]=$713;
      var $714=$4;
      var $715=$1;
      var $716=$n3;
      var $717=(($715+($716<<2))|0);
      var $718=$n3p1;
      var $719=___gmpn_submul_1($714, $717, $718, 1028);
      var $720=$5;
      var $721=$4;
      var $722=$n3p1;
      var $723=___gmpn_submul_1($720, $721, $722, 1300);
      var $724=$5;
      var $725=$1;
      var $726=$n3;
      var $727=(($725+($726<<2))|0);
      var $728=$n3p1;
      var $729=___gmpn_submul_1($724, $727, $728, 1052688);
      label = 127; break;
    case 127: 
      var $731=$5;
      var $732=$5;
      var $733=$n3p1;
      ___gmpn_divexact_1($731, $732, $733, 188513325);
      var $734=$5;
      var $735=$5;
      var $736=$n3p1;
      var $737=___gmpn_bdiv_dbm1c($734, $735, $736, 16843009, 0);
      var $738=$737;
      var $739=255 & $738;
      label = 128; break;
    case 128: 
      var $741=$4;
      var $742=$5;
      var $743=$n3p1;
      var $744=___gmpn_submul_1($741, $742, $743, 12567555);
      var $745=$4;
      var $746=$4;
      var $747=$n3p1;
      ___gmpn_divexact_1($745, $746, $747, 181440);
      var $748=$n3;
      var $749=$4;
      var $750=(($749+($748<<2))|0);
      var $751=HEAP32[(($750)>>2)];
      var $752=$751 & -33554432;
      var $753=(($752)|0)!=0;
      if ($753) { label = 129; break; } else { label = 130; break; }
    case 129: 
      var $755=$n3;
      var $756=$4;
      var $757=(($756+($755<<2))|0);
      var $758=HEAP32[(($757)>>2)];
      var $759=$758 | -67108864;
      HEAP32[(($757)>>2)]=$759;
      label = 130; break;
    case 130: 
      var $761=$1;
      var $762=$n3;
      var $763=(($761+($762<<2))|0);
      var $764=$5;
      var $765=$n3p1;
      var $766=___gmpn_submul_1($763, $764, $765, 4095);
      var $767=$1;
      var $768=$n3;
      var $769=(($767+($768<<2))|0);
      var $770=$4;
      var $771=$n3p1;
      var $772=___gmpn_addmul_1($769, $770, $771, 240);
      var $773=$1;
      var $774=$n3;
      var $775=(($773+($774<<2))|0);
      var $776=$1;
      var $777=$n3;
      var $778=(($776+($777<<2))|0);
      var $779=$n3p1;
      ___gmpn_divexact_1($775, $778, $779, 1020);
      var $780=$n3;
      var $781=$1;
      var $782=$n3;
      var $783=(($781+($782<<2))|0);
      var $784=(($783+($780<<2))|0);
      var $785=HEAP32[(($784)>>2)];
      var $786=$785 & -536870912;
      var $787=(($786)|0)!=0;
      if ($787) { label = 131; break; } else { label = 132; break; }
    case 131: 
      var $789=$n3;
      var $790=$1;
      var $791=$n3;
      var $792=(($790+($791<<2))|0);
      var $793=(($792+($789<<2))|0);
      var $794=HEAP32[(($793)>>2)];
      var $795=$794 | -1073741824;
      HEAP32[(($793)>>2)]=$795;
      label = 132; break;
    case 132: 
      var $797=$3;
      var $798=$1;
      var $799=$6;
      var $800=((($799)*(7))&-1);
      var $801=(($798+($800<<2))|0);
      var $802=$n3p1;
      var $803=$9;
      var $804=_DO_mpn_sublsh_n343($797, $801, $802, 7, $803);
      var $805=$1;
      var $806=$6;
      var $807=((($806)*(11))&-1);
      var $808=(($805+($807<<2))|0);
      var $809=$1;
      var $810=$6;
      var $811=((($810)*(7))&-1);
      var $812=(($809+($811<<2))|0);
      var $813=$n3p1;
      var $814=$9;
      var $815=_DO_mpn_sublsh_n343($808, $812, $813, 13, $814);
      var $816=$1;
      var $817=$6;
      var $818=((($817)*(11))&-1);
      var $819=(($816+($818<<2))|0);
      var $820=$3;
      var $821=$n3p1;
      var $822=___gmpn_submul_1($819, $820, $821, 400);
      var $823=$2;
      var $824=$1;
      var $825=$6;
      var $826=((($825)*(7))&-1);
      var $827=(($824+($826<<2))|0);
      var $828=$n3p1;
      var $829=$9;
      var $830=_DO_mpn_sublsh_n343($823, $827, $828, 19, $829);
      var $831=$2;
      var $832=$1;
      var $833=$6;
      var $834=((($833)*(11))&-1);
      var $835=(($832+($834<<2))|0);
      var $836=$n3p1;
      var $837=___gmpn_submul_1($831, $835, $836, 1428);
      var $838=$2;
      var $839=$3;
      var $840=$n3p1;
      var $841=___gmpn_submul_1($838, $839, $840, 112896);
      label = 133; break;
    case 133: 
      var $843=$2;
      var $844=$2;
      var $845=$n3p1;
      ___gmpn_divexact_1($843, $844, $845, 182712915);
      var $846=$2;
      var $847=$2;
      var $848=$n3p1;
      var $849=___gmpn_bdiv_dbm1c($846, $847, $848, 16843009, 0);
      var $850=$849;
      var $851=255 & $850;
      label = 134; break;
    case 134: 
      var $853=$1;
      var $854=$6;
      var $855=((($854)*(11))&-1);
      var $856=(($853+($855<<2))|0);
      var $857=$2;
      var $858=$n3p1;
      var $859=___gmpn_submul_1($856, $857, $858, 15181425);
      var $860=$1;
      var $861=$6;
      var $862=((($861)*(11))&-1);
      var $863=(($860+($862<<2))|0);
      var $864=$1;
      var $865=$6;
      var $866=((($865)*(11))&-1);
      var $867=(($864+($866<<2))|0);
      var $868=$n3p1;
      ___gmpn_divexact_1($863, $867, $868, 680400);
      var $869=$3;
      var $870=$2;
      var $871=$n3p1;
      var $872=___gmpn_submul_1($869, $870, $871, 3969);
      var $873=$3;
      var $874=$1;
      var $875=$6;
      var $876=((($875)*(11))&-1);
      var $877=(($874+($876<<2))|0);
      var $878=$n3p1;
      var $879=___gmpn_submul_1($873, $877, $878, 900);
      var $880=$3;
      var $881=$3;
      var $882=$n3p1;
      ___gmpn_divexact_1($880, $881, $882, 144);
      var $883=$1;
      var $884=$6;
      var $885=((($884)*(7))&-1);
      var $886=(($883+($885<<2))|0);
      var $887=$1;
      var $888=$6;
      var $889=((($888)*(7))&-1);
      var $890=(($887+($889<<2))|0);
      var $891=$2;
      var $892=$n3p1;
      var $893=___gmpn_sub_n($886, $890, $891, $892);
      var $894=$1;
      var $895=$6;
      var $896=((($895)*(7))&-1);
      var $897=(($894+($896<<2))|0);
      var $898=$1;
      var $899=$6;
      var $900=((($899)*(7))&-1);
      var $901=(($898+($900<<2))|0);
      var $902=$3;
      var $903=$n3p1;
      var $904=___gmpn_sub_n($897, $901, $902, $903);
      var $905=$1;
      var $906=$6;
      var $907=((($906)*(7))&-1);
      var $908=(($905+($907<<2))|0);
      var $909=$1;
      var $910=$6;
      var $911=((($910)*(7))&-1);
      var $912=(($909+($911<<2))|0);
      var $913=$1;
      var $914=$6;
      var $915=((($914)*(11))&-1);
      var $916=(($913+($915<<2))|0);
      var $917=$n3p1;
      var $918=___gmpn_sub_n($908, $912, $916, $917);
      var $919=$1;
      var $920=$n3;
      var $921=(($919+($920<<2))|0);
      var $922=$1;
      var $923=$6;
      var $924=((($923)*(11))&-1);
      var $925=(($922+($924<<2))|0);
      var $926=$1;
      var $927=$n3;
      var $928=(($926+($927<<2))|0);
      var $929=$n3p1;
      var $930=___gmpn_add_n($921, $925, $928, $929);
      var $931=$1;
      var $932=$n3;
      var $933=(($931+($932<<2))|0);
      var $934=$1;
      var $935=$n3;
      var $936=(($934+($935<<2))|0);
      var $937=$n3p1;
      var $938=___gmpn_rshift($933, $936, $937, 1);
      var $939=$1;
      var $940=$6;
      var $941=((($940)*(11))&-1);
      var $942=(($939+($941<<2))|0);
      var $943=$1;
      var $944=$6;
      var $945=((($944)*(11))&-1);
      var $946=(($943+($945<<2))|0);
      var $947=$1;
      var $948=$n3;
      var $949=(($947+($948<<2))|0);
      var $950=$n3p1;
      var $951=___gmpn_sub_n($942, $946, $949, $950);
      var $952=$4;
      var $953=$3;
      var $954=$4;
      var $955=$n3p1;
      var $956=___gmpn_sub_n($952, $953, $954, $955);
      var $957=$4;
      var $958=$4;
      var $959=$n3p1;
      var $960=___gmpn_rshift($957, $958, $959, 1);
      var $961=$3;
      var $962=$3;
      var $963=$4;
      var $964=$n3p1;
      var $965=___gmpn_sub_n($961, $962, $963, $964);
      var $966=$5;
      var $967=$2;
      var $968=$5;
      var $969=$n3p1;
      var $970=___gmpn_add_n($966, $967, $968, $969);
      var $971=$5;
      var $972=$5;
      var $973=$n3p1;
      var $974=___gmpn_rshift($971, $972, $973, 1);
      var $975=$2;
      var $976=$2;
      var $977=$5;
      var $978=$n3p1;
      var $979=___gmpn_sub_n($975, $976, $977, $978);
      var $980=$1;
      var $981=$6;
      var $982=(($980+($981<<2))|0);
      var $983=$1;
      var $984=$6;
      var $985=(($983+($984<<2))|0);
      var $986=$5;
      var $987=$6;
      var $988=___gmpn_add_n($982, $985, $986, $987);
      $cy=$988;
      var $989=$1;
      var $990=$6;
      var $991=($990<<1);
      var $992=(($989+($991<<2))|0);
      var $993=$5;
      var $994=$6;
      var $995=(($993+($994<<2))|0);
      var $996=$6;
      var $997=$cy;
      var $998=___gmpn_add_1($992, $995, $996, $997);
      $cy=$998;
      label = 135; break;
    case 135: 
      var $1000=$5;
      var $1001=$6;
      var $1002=($1001<<1);
      var $1003=(($1000+($1002<<2))|0);
      $__p34=$1003;
      var $1004=$__p34;
      var $1005=HEAP32[(($1004)>>2)];
      var $1006=$cy;
      var $1007=((($1005)+($1006))|0);
      $__x33=$1007;
      var $1008=$__x33;
      var $1009=$__p34;
      HEAP32[(($1009)>>2)]=$1008;
      var $1010=$__x33;
      var $1011=$cy;
      var $1012=(($1010)>>>0) < (($1011)>>>0);
      if ($1012) { label = 136; break; } else { label = 140; break; }
    case 136: 
      label = 137; break;
    case 137: 
      var $1015=$__p34;
      var $1016=(($1015+4)|0);
      $__p34=$1016;
      var $1017=HEAP32[(($1016)>>2)];
      var $1018=((($1017)+(1))|0);
      HEAP32[(($1016)>>2)]=$1018;
      var $1019=(($1018)|0)==0;
      if ($1019) { label = 138; break; } else { label = 139; break; }
    case 138: 
      label = 137; break;
    case 139: 
      label = 140; break;
    case 140: 
      label = 141; break;
    case 141: 
      var $1024=$n3;
      var $1025=$5;
      var $1026=(($1025+($1024<<2))|0);
      var $1027=HEAP32[(($1026)>>2)];
      var $1028=$1;
      var $1029=$n3;
      var $1030=(($1028+($1029<<2))|0);
      var $1031=$1;
      var $1032=$n3;
      var $1033=(($1031+($1032<<2))|0);
      var $1034=$5;
      var $1035=$6;
      var $1036=($1035<<1);
      var $1037=(($1034+($1036<<2))|0);
      var $1038=$6;
      var $1039=___gmpn_add_n($1030, $1033, $1037, $1038);
      var $1040=((($1027)+($1039))|0);
      $cy=$1040;
      label = 142; break;
    case 142: 
      var $1042=$1;
      var $1043=$6;
      var $1044=($1043<<2);
      var $1045=(($1042+($1044<<2))|0);
      $__p36=$1045;
      var $1046=$__p36;
      var $1047=HEAP32[(($1046)>>2)];
      var $1048=$cy;
      var $1049=((($1047)+($1048))|0);
      $__x35=$1049;
      var $1050=$__x35;
      var $1051=$__p36;
      HEAP32[(($1051)>>2)]=$1050;
      var $1052=$__x35;
      var $1053=$cy;
      var $1054=(($1052)>>>0) < (($1053)>>>0);
      if ($1054) { label = 143; break; } else { label = 147; break; }
    case 143: 
      label = 144; break;
    case 144: 
      var $1057=$__p36;
      var $1058=(($1057+4)|0);
      $__p36=$1058;
      var $1059=HEAP32[(($1058)>>2)];
      var $1060=((($1059)+(1))|0);
      HEAP32[(($1058)>>2)]=$1060;
      var $1061=(($1060)|0)==0;
      if ($1061) { label = 145; break; } else { label = 146; break; }
    case 145: 
      label = 144; break;
    case 146: 
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      var $1066=$1;
      var $1067=$6;
      var $1068=((($1067)*(5))&-1);
      var $1069=(($1066+($1068<<2))|0);
      var $1070=$1;
      var $1071=$6;
      var $1072=((($1071)*(5))&-1);
      var $1073=(($1070+($1072<<2))|0);
      var $1074=$4;
      var $1075=$6;
      var $1076=___gmpn_add_n($1069, $1073, $1074, $1075);
      var $1077=$n3;
      var $1078=($1077<<1);
      var $1079=$1;
      var $1080=(($1079+($1078<<2))|0);
      var $1081=HEAP32[(($1080)>>2)];
      var $1082=((($1081)+($1076))|0);
      HEAP32[(($1080)>>2)]=$1082;
      var $1083=$1;
      var $1084=$n3;
      var $1085=($1084<<1);
      var $1086=(($1083+($1085<<2))|0);
      var $1087=$4;
      var $1088=$6;
      var $1089=(($1087+($1088<<2))|0);
      var $1090=$6;
      var $1091=$n3;
      var $1092=($1091<<1);
      var $1093=$1;
      var $1094=(($1093+($1092<<2))|0);
      var $1095=HEAP32[(($1094)>>2)];
      var $1096=___gmpn_add_1($1086, $1089, $1090, $1095);
      $cy=$1096;
      label = 149; break;
    case 149: 
      var $1098=$4;
      var $1099=$6;
      var $1100=($1099<<1);
      var $1101=(($1098+($1100<<2))|0);
      $__p38=$1101;
      var $1102=$__p38;
      var $1103=HEAP32[(($1102)>>2)];
      var $1104=$cy;
      var $1105=((($1103)+($1104))|0);
      $__x37=$1105;
      var $1106=$__x37;
      var $1107=$__p38;
      HEAP32[(($1107)>>2)]=$1106;
      var $1108=$__x37;
      var $1109=$cy;
      var $1110=(($1108)>>>0) < (($1109)>>>0);
      if ($1110) { label = 150; break; } else { label = 154; break; }
    case 150: 
      label = 151; break;
    case 151: 
      var $1113=$__p38;
      var $1114=(($1113+4)|0);
      $__p38=$1114;
      var $1115=HEAP32[(($1114)>>2)];
      var $1116=((($1115)+(1))|0);
      HEAP32[(($1114)>>2)]=$1116;
      var $1117=(($1116)|0)==0;
      if ($1117) { label = 152; break; } else { label = 153; break; }
    case 152: 
      label = 151; break;
    case 153: 
      label = 154; break;
    case 154: 
      label = 155; break;
    case 155: 
      var $1122=$n3;
      var $1123=$4;
      var $1124=(($1123+($1122<<2))|0);
      var $1125=HEAP32[(($1124)>>2)];
      var $1126=$1;
      var $1127=$6;
      var $1128=((($1127)*(7))&-1);
      var $1129=(($1126+($1128<<2))|0);
      var $1130=$1;
      var $1131=$6;
      var $1132=((($1131)*(7))&-1);
      var $1133=(($1130+($1132<<2))|0);
      var $1134=$4;
      var $1135=$6;
      var $1136=($1135<<1);
      var $1137=(($1134+($1136<<2))|0);
      var $1138=$6;
      var $1139=___gmpn_add_n($1129, $1133, $1137, $1138);
      var $1140=((($1125)+($1139))|0);
      $cy=$1140;
      label = 156; break;
    case 156: 
      var $1142=$1;
      var $1143=$6;
      var $1144=($1143<<3);
      var $1145=(($1142+($1144<<2))|0);
      $__p40=$1145;
      var $1146=$__p40;
      var $1147=HEAP32[(($1146)>>2)];
      var $1148=$cy;
      var $1149=((($1147)+($1148))|0);
      $__x39=$1149;
      var $1150=$__x39;
      var $1151=$__p40;
      HEAP32[(($1151)>>2)]=$1150;
      var $1152=$__x39;
      var $1153=$cy;
      var $1154=(($1152)>>>0) < (($1153)>>>0);
      if ($1154) { label = 157; break; } else { label = 161; break; }
    case 157: 
      label = 158; break;
    case 158: 
      var $1157=$__p40;
      var $1158=(($1157+4)|0);
      $__p40=$1158;
      var $1159=HEAP32[(($1158)>>2)];
      var $1160=((($1159)+(1))|0);
      HEAP32[(($1158)>>2)]=$1160;
      var $1161=(($1160)|0)==0;
      if ($1161) { label = 159; break; } else { label = 160; break; }
    case 159: 
      label = 158; break;
    case 160: 
      label = 161; break;
    case 161: 
      label = 162; break;
    case 162: 
      var $1166=$1;
      var $1167=$6;
      var $1168=((($1167)*(9))&-1);
      var $1169=(($1166+($1168<<2))|0);
      var $1170=$1;
      var $1171=$6;
      var $1172=((($1171)*(9))&-1);
      var $1173=(($1170+($1172<<2))|0);
      var $1174=$3;
      var $1175=$6;
      var $1176=___gmpn_add_n($1169, $1173, $1174, $1175);
      var $1177=$6;
      var $1178=((($1177)*(10))&-1);
      var $1179=$1;
      var $1180=(($1179+($1178<<2))|0);
      var $1181=HEAP32[(($1180)>>2)];
      var $1182=((($1181)+($1176))|0);
      HEAP32[(($1180)>>2)]=$1182;
      var $1183=$1;
      var $1184=$6;
      var $1185=((($1184)*(10))&-1);
      var $1186=(($1183+($1185<<2))|0);
      var $1187=$3;
      var $1188=$6;
      var $1189=(($1187+($1188<<2))|0);
      var $1190=$6;
      var $1191=$6;
      var $1192=((($1191)*(10))&-1);
      var $1193=$1;
      var $1194=(($1193+($1192<<2))|0);
      var $1195=HEAP32[(($1194)>>2)];
      var $1196=___gmpn_add_1($1186, $1189, $1190, $1195);
      $cy=$1196;
      label = 163; break;
    case 163: 
      var $1198=$3;
      var $1199=$6;
      var $1200=($1199<<1);
      var $1201=(($1198+($1200<<2))|0);
      $__p42=$1201;
      var $1202=$__p42;
      var $1203=HEAP32[(($1202)>>2)];
      var $1204=$cy;
      var $1205=((($1203)+($1204))|0);
      $__x41=$1205;
      var $1206=$__x41;
      var $1207=$__p42;
      HEAP32[(($1207)>>2)]=$1206;
      var $1208=$__x41;
      var $1209=$cy;
      var $1210=(($1208)>>>0) < (($1209)>>>0);
      if ($1210) { label = 164; break; } else { label = 168; break; }
    case 164: 
      label = 165; break;
    case 165: 
      var $1213=$__p42;
      var $1214=(($1213+4)|0);
      $__p42=$1214;
      var $1215=HEAP32[(($1214)>>2)];
      var $1216=((($1215)+(1))|0);
      HEAP32[(($1214)>>2)]=$1216;
      var $1217=(($1216)|0)==0;
      if ($1217) { label = 166; break; } else { label = 167; break; }
    case 166: 
      label = 165; break;
    case 167: 
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      var $1222=$n3;
      var $1223=$3;
      var $1224=(($1223+($1222<<2))|0);
      var $1225=HEAP32[(($1224)>>2)];
      var $1226=$1;
      var $1227=$6;
      var $1228=((($1227)*(11))&-1);
      var $1229=(($1226+($1228<<2))|0);
      var $1230=$1;
      var $1231=$6;
      var $1232=((($1231)*(11))&-1);
      var $1233=(($1230+($1232<<2))|0);
      var $1234=$3;
      var $1235=$6;
      var $1236=($1235<<1);
      var $1237=(($1234+($1236<<2))|0);
      var $1238=$6;
      var $1239=___gmpn_add_n($1229, $1233, $1237, $1238);
      var $1240=((($1225)+($1239))|0);
      $cy=$1240;
      label = 170; break;
    case 170: 
      var $1242=$1;
      var $1243=$6;
      var $1244=((($1243)*(12))&-1);
      var $1245=(($1242+($1244<<2))|0);
      $__p44=$1245;
      var $1246=$__p44;
      var $1247=HEAP32[(($1246)>>2)];
      var $1248=$cy;
      var $1249=((($1247)+($1248))|0);
      $__x43=$1249;
      var $1250=$__x43;
      var $1251=$__p44;
      HEAP32[(($1251)>>2)]=$1250;
      var $1252=$__x43;
      var $1253=$cy;
      var $1254=(($1252)>>>0) < (($1253)>>>0);
      if ($1254) { label = 171; break; } else { label = 175; break; }
    case 171: 
      label = 172; break;
    case 172: 
      var $1257=$__p44;
      var $1258=(($1257+4)|0);
      $__p44=$1258;
      var $1259=HEAP32[(($1258)>>2)];
      var $1260=((($1259)+(1))|0);
      HEAP32[(($1258)>>2)]=$1260;
      var $1261=(($1260)|0)==0;
      if ($1261) { label = 173; break; } else { label = 174; break; }
    case 173: 
      label = 172; break;
    case 174: 
      label = 175; break;
    case 175: 
      label = 176; break;
    case 176: 
      var $1266=$1;
      var $1267=$6;
      var $1268=((($1267)*(13))&-1);
      var $1269=(($1266+($1268<<2))|0);
      var $1270=$1;
      var $1271=$6;
      var $1272=((($1271)*(13))&-1);
      var $1273=(($1270+($1272<<2))|0);
      var $1274=$2;
      var $1275=$6;
      var $1276=___gmpn_add_n($1269, $1273, $1274, $1275);
      var $1277=$6;
      var $1278=((($1277)*(14))&-1);
      var $1279=$1;
      var $1280=(($1279+($1278<<2))|0);
      var $1281=HEAP32[(($1280)>>2)];
      var $1282=((($1281)+($1276))|0);
      HEAP32[(($1280)>>2)]=$1282;
      var $1283=$8;
      var $1284=(($1283)|0)!=0;
      if ($1284) { label = 177; break; } else { label = 195; break; }
    case 177: 
      var $1286=$1;
      var $1287=$6;
      var $1288=((($1287)*(14))&-1);
      var $1289=(($1286+($1288<<2))|0);
      var $1290=$2;
      var $1291=$6;
      var $1292=(($1290+($1291<<2))|0);
      var $1293=$6;
      var $1294=$6;
      var $1295=((($1294)*(14))&-1);
      var $1296=$1;
      var $1297=(($1296+($1295<<2))|0);
      var $1298=HEAP32[(($1297)>>2)];
      var $1299=___gmpn_add_1($1289, $1292, $1293, $1298);
      $cy=$1299;
      label = 178; break;
    case 178: 
      var $1301=$2;
      var $1302=$6;
      var $1303=($1302<<1);
      var $1304=(($1301+($1303<<2))|0);
      $__p46=$1304;
      var $1305=$__p46;
      var $1306=HEAP32[(($1305)>>2)];
      var $1307=$cy;
      var $1308=((($1306)+($1307))|0);
      $__x45=$1308;
      var $1309=$__x45;
      var $1310=$__p46;
      HEAP32[(($1310)>>2)]=$1309;
      var $1311=$__x45;
      var $1312=$cy;
      var $1313=(($1311)>>>0) < (($1312)>>>0);
      if ($1313) { label = 179; break; } else { label = 183; break; }
    case 179: 
      label = 180; break;
    case 180: 
      var $1316=$__p46;
      var $1317=(($1316+4)|0);
      $__p46=$1317;
      var $1318=HEAP32[(($1317)>>2)];
      var $1319=((($1318)+(1))|0);
      HEAP32[(($1317)>>2)]=$1319;
      var $1320=(($1319)|0)==0;
      if ($1320) { label = 181; break; } else { label = 182; break; }
    case 181: 
      label = 180; break;
    case 182: 
      label = 183; break;
    case 183: 
      label = 184; break;
    case 184: 
      var $1325=$7;
      var $1326=$6;
      var $1327=(($1325)|0) > (($1326)|0);
      var $1328=(($1327)&1);
      var $1329=(($1328)|0)!=0;
      var $1330=(($1329)&1);
      var $1331=($1330);
      var $1332=(($1331)|0)!=0;
      if ($1332) { label = 185; break; } else { label = 193; break; }
    case 185: 
      var $1334=$n3;
      var $1335=$2;
      var $1336=(($1335+($1334<<2))|0);
      var $1337=HEAP32[(($1336)>>2)];
      var $1338=$1;
      var $1339=$6;
      var $1340=((($1339)*(15))&-1);
      var $1341=(($1338+($1340<<2))|0);
      var $1342=$1;
      var $1343=$6;
      var $1344=((($1343)*(15))&-1);
      var $1345=(($1342+($1344<<2))|0);
      var $1346=$2;
      var $1347=$6;
      var $1348=($1347<<1);
      var $1349=(($1346+($1348<<2))|0);
      var $1350=$6;
      var $1351=___gmpn_add_n($1341, $1345, $1349, $1350);
      var $1352=((($1337)+($1351))|0);
      $cy=$1352;
      label = 186; break;
    case 186: 
      var $1354=$1;
      var $1355=$6;
      var $1356=($1355<<4);
      var $1357=(($1354+($1356<<2))|0);
      $__p48=$1357;
      var $1358=$__p48;
      var $1359=HEAP32[(($1358)>>2)];
      var $1360=$cy;
      var $1361=((($1359)+($1360))|0);
      $__x47=$1361;
      var $1362=$__x47;
      var $1363=$__p48;
      HEAP32[(($1363)>>2)]=$1362;
      var $1364=$__x47;
      var $1365=$cy;
      var $1366=(($1364)>>>0) < (($1365)>>>0);
      if ($1366) { label = 187; break; } else { label = 191; break; }
    case 187: 
      label = 188; break;
    case 188: 
      var $1369=$__p48;
      var $1370=(($1369+4)|0);
      $__p48=$1370;
      var $1371=HEAP32[(($1370)>>2)];
      var $1372=((($1371)+(1))|0);
      HEAP32[(($1370)>>2)]=$1372;
      var $1373=(($1372)|0)==0;
      if ($1373) { label = 189; break; } else { label = 190; break; }
    case 189: 
      label = 188; break;
    case 190: 
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      label = 194; break;
    case 193: 
      var $1379=$1;
      var $1380=$6;
      var $1381=((($1380)*(15))&-1);
      var $1382=(($1379+($1381<<2))|0);
      var $1383=$1;
      var $1384=$6;
      var $1385=((($1384)*(15))&-1);
      var $1386=(($1383+($1385<<2))|0);
      var $1387=$2;
      var $1388=$6;
      var $1389=($1388<<1);
      var $1390=(($1387+($1389<<2))|0);
      var $1391=$7;
      var $1392=___gmpn_add_n($1382, $1386, $1390, $1391);
      label = 194; break;
    case 194: 
      label = 196; break;
    case 195: 
      var $1395=$1;
      var $1396=$6;
      var $1397=((($1396)*(14))&-1);
      var $1398=(($1395+($1397<<2))|0);
      var $1399=$2;
      var $1400=$6;
      var $1401=(($1399+($1400<<2))|0);
      var $1402=$7;
      var $1403=$6;
      var $1404=((($1403)*(14))&-1);
      var $1405=$1;
      var $1406=(($1405+($1404<<2))|0);
      var $1407=HEAP32[(($1406)>>2)];
      var $1408=___gmpn_add_1($1398, $1401, $1402, $1407);
      label = 196; break;
    case 196: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_toom_interpolate_16pts["X"]=1;

function _DO_mpn_sublsh_n343($dst, $src, $n, $s, $ws) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $__cy;
  $1=$dst;
  $2=$src;
  $3=$n;
  $4=$s;
  $5=$ws;
  var $6=$5;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_lshift($6, $7, $8, $9);
  $__cy=$10;
  var $11=$__cy;
  var $12=$1;
  var $13=$1;
  var $14=$5;
  var $15=$3;
  var $16=___gmpn_sub_n($12, $13, $14, $15);
  var $17=((($11)+($16))|0);

  return $17;
}


function ___gmpn_ni_invertappr($ip, $dp, $n, $scratch) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 100)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $cy;
      var $xp;
      var $rn;
      var $mn;
      var $sizes=__stackBase__;
      var $sizp;
      var $tp;
      var $__tmp_marker=(__stackBase__)+(96);
      var $method;
      var $__x;
      var $__p;
      var $__x1;
      var $__p2;
      var $__x3;
      var $__p4;
      var $__x5;
      var $__p6;
      var $__x7;
      var $__p8;
      var $__d;
      var $__s;
      var $__n;
      var $__x9;
      var $__p10;
      var $__x11;
      var $__p12;
      var $__x13;
      var $__p14;
      $1=$ip;
      $2=$dp;
      $3=$n;
      $4=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $15=(($sizes)|0);
      $sizp=$15;
      var $16=$3;
      $rn=$16;
      label = 13; break;
    case 13: 
      var $18=$rn;
      var $19=$sizp;
      HEAP32[(($19)>>2)]=$18;
      var $20=$rn;
      var $21=$20 >> 1;
      var $22=((($21)+(1))|0);
      $rn=$22;
      var $23=$sizp;
      var $24=(($23+4)|0);
      $sizp=$24;
      label = 14; break;
    case 14: 
      var $26=$rn;
      var $27=(($26)|0) >= 200;
      if ($27) { label = 13; break; } else { label = 15; break; }
    case 15: 
      var $29=$3;
      var $30=$2;
      var $31=(($30+($29<<2))|0);
      $2=$31;
      var $32=$3;
      var $33=$1;
      var $34=(($33+($32<<2))|0);
      $1=$34;
      var $35=$1;
      var $36=$rn;
      var $37=(((-$36))|0);
      var $38=(($35+($37<<2))|0);
      var $39=$2;
      var $40=$rn;
      var $41=(((-$40))|0);
      var $42=(($39+($41<<2))|0);
      var $43=$rn;
      var $44=$4;
      var $45=_mpn_bc_invertappr($38, $42, $43, $44);
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $46=$3;
      var $47=((($46)+(1))|0);
      var $48=___gmpn_mulmod_bnm1_next_size($47);
      $mn=$48;
      var $49=$mn;
      var $50=$3;
      var $51=$3;
      var $52=$51 >> 1;
      var $53=((($52)+(1))|0);
      var $54=_mpn_mulmod_bnm1_itch344($49, $50, $53);
      var $55=($54<<2);
      var $56=(($55)>>>0) < 65536;
      var $57=(($56)&1);
      var $58=(($57)|0)!=0;
      var $59=(($58)&1);
      var $60=($59);
      var $61=(($60)|0)!=0;
      if ($61) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $63=$mn;
      var $64=$3;
      var $65=$3;
      var $66=$65 >> 1;
      var $67=((($66)+(1))|0);
      var $68=_mpn_mulmod_bnm1_itch344($63, $64, $67);
      var $69=($68<<2);
      var $70=STACKTOP;STACKTOP = (STACKTOP + $69)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $81 = $70;label = 18; break;
    case 17: 
      var $72=$mn;
      var $73=$3;
      var $74=$3;
      var $75=$74 >> 1;
      var $76=((($75)+(1))|0);
      var $77=_mpn_mulmod_bnm1_itch344($72, $73, $76);
      var $78=($77<<2);
      var $79=___gmp_tmp_reentrant_alloc($__tmp_marker, $78);
      var $81 = $79;label = 18; break;
    case 18: 
      var $81;
      var $82=$81;
      $tp=$82;
      var $83=$4;
      var $84=$3;
      var $85=(($83+($84<<2))|0);
      var $86=(($85+12)|0);
      $xp=$86;
      label = 19; break;
    case 19: 
      var $88=$sizp;
      var $89=((($88)-(4))|0);
      $sizp=$89;
      var $90=HEAP32[(($89)>>2)];
      $3=$90;
      var $91=$3;
      var $92=((($91)+(1))|0);
      var $93=___gmpn_mulmod_bnm1_next_size($92);
      $mn=$93;
      var $94=$3;
      var $95=$rn;
      var $96=((($94)+($95))|0);
      var $97=(($93)|0) > (($96)|0);
      if ($97) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $99=$xp;
      var $100=$2;
      var $101=$3;
      var $102=(((-$101))|0);
      var $103=(($100+($102<<2))|0);
      var $104=$3;
      var $105=$1;
      var $106=$rn;
      var $107=(((-$106))|0);
      var $108=(($105+($107<<2))|0);
      var $109=$rn;
      var $110=___gmpn_mul($99, $103, $104, $108, $109);
      var $111=$xp;
      var $112=$rn;
      var $113=(($111+($112<<2))|0);
      var $114=$xp;
      var $115=$rn;
      var $116=(($114+($115<<2))|0);
      var $117=$2;
      var $118=$3;
      var $119=(((-$118))|0);
      var $120=(($117+($119<<2))|0);
      var $121=$3;
      var $122=$rn;
      var $123=((($121)-($122))|0);
      var $124=((($123)+(1))|0);
      var $125=___gmpn_add_n($113, $116, $120, $124);
      $method=1;
      label = 53; break;
    case 21: 
      var $127=$xp;
      var $128=$mn;
      var $129=$2;
      var $130=$3;
      var $131=(((-$130))|0);
      var $132=(($129+($131<<2))|0);
      var $133=$3;
      var $134=$1;
      var $135=$rn;
      var $136=(((-$135))|0);
      var $137=(($134+($136<<2))|0);
      var $138=$rn;
      var $139=$tp;
      ___gmpn_mulmod_bnm1($127, $128, $132, $133, $137, $138, $139);
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $142=$xp;
      var $143=$rn;
      var $144=(($142+($143<<2))|0);
      var $145=$xp;
      var $146=$rn;
      var $147=(($145+($146<<2))|0);
      var $148=$2;
      var $149=$3;
      var $150=(((-$149))|0);
      var $151=(($148+($150<<2))|0);
      var $152=$mn;
      var $153=$rn;
      var $154=((($152)-($153))|0);
      var $155=___gmpn_add_n($144, $147, $151, $154);
      var $156=((($155)+(1))|0);
      var $157=$mn;
      var $158=$xp;
      var $159=(($158+($157<<2))|0);
      HEAP32[(($159)>>2)]=$156;
      var $160=$xp;
      var $161=$xp;
      var $162=$2;
      var $163=$3;
      var $164=$mn;
      var $165=$rn;
      var $166=((($164)-($165))|0);
      var $167=((($163)-($166))|0);
      var $168=(((-$167))|0);
      var $169=(($162+($168<<2))|0);
      var $170=$3;
      var $171=$mn;
      var $172=$rn;
      var $173=((($171)-($172))|0);
      var $174=((($170)-($173))|0);
      var $175=___gmpn_add_n($160, $161, $169, $174);
      $cy=$175;
      label = 24; break;
    case 24: 
      var $177=$xp;
      var $178=$3;
      var $179=(($177+($178<<2))|0);
      var $180=$mn;
      var $181=$rn;
      var $182=((($180)-($181))|0);
      var $183=(((-$182))|0);
      var $184=(($179+($183<<2))|0);
      $__p=$184;
      var $185=$__p;
      var $186=HEAP32[(($185)>>2)];
      var $187=$cy;
      var $188=((($186)+($187))|0);
      $__x=$188;
      var $189=$__x;
      var $190=$__p;
      HEAP32[(($190)>>2)]=$189;
      var $191=$__x;
      var $192=$cy;
      var $193=(($191)>>>0) < (($192)>>>0);
      if ($193) { label = 25; break; } else { label = 29; break; }
    case 25: 
      label = 26; break;
    case 26: 
      var $196=$__p;
      var $197=(($196+4)|0);
      $__p=$197;
      var $198=HEAP32[(($197)>>2)];
      var $199=((($198)+(1))|0);
      HEAP32[(($197)>>2)]=$199;
      var $200=(($199)|0)==0;
      if ($200) { label = 27; break; } else { label = 28; break; }
    case 27: 
      label = 26; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $208=$xp;
      var $209=$rn;
      var $210=(($208+($209<<2))|0);
      var $211=$3;
      var $212=(($210+($211<<2))|0);
      var $213=$mn;
      var $214=(((-$213))|0);
      var $215=(($212+($214<<2))|0);
      $__p2=$215;
      label = 34; break;
    case 34: 
      var $217=$__p2;
      var $218=(($217+4)|0);
      $__p2=$218;
      var $219=HEAP32[(($217)>>2)];
      var $220=((($219)-(1))|0);
      HEAP32[(($217)>>2)]=$220;
      var $221=(($219)|0)==0;
      if ($221) { label = 35; break; } else { label = 36; break; }
    case 35: 
      label = 34; break;
    case 36: 
      label = 37; break;
    case 37: 
      var $225=$mn;
      var $226=$xp;
      var $227=(($226+($225<<2))|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=(($228)|0)!=0;
      if ($229) { label = 38; break; } else { label = 46; break; }
    case 38: 
      label = 39; break;
    case 39: 
      var $232=$xp;
      $__p4=$232;
      var $233=$__p4;
      var $234=HEAP32[(($233)>>2)];
      var $235=$mn;
      var $236=$xp;
      var $237=(($236+($235<<2))|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=((($238)-(1))|0);
      var $240=((($234)+($239))|0);
      $__x3=$240;
      var $241=$__x3;
      var $242=$__p4;
      HEAP32[(($242)>>2)]=$241;
      var $243=$__x3;
      var $244=$mn;
      var $245=$xp;
      var $246=(($245+($244<<2))|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=((($247)-(1))|0);
      var $249=(($243)>>>0) < (($248)>>>0);
      if ($249) { label = 40; break; } else { label = 44; break; }
    case 40: 
      label = 41; break;
    case 41: 
      var $252=$__p4;
      var $253=(($252+4)|0);
      $__p4=$253;
      var $254=HEAP32[(($253)>>2)];
      var $255=((($254)+(1))|0);
      HEAP32[(($253)>>2)]=$255;
      var $256=(($255)|0)==0;
      if ($256) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 41; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 52; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $263=$xp;
      $__p6=$263;
      label = 48; break;
    case 48: 
      var $265=$__p6;
      var $266=(($265+4)|0);
      $__p6=$266;
      var $267=HEAP32[(($265)>>2)];
      var $268=((($267)-(1))|0);
      HEAP32[(($265)>>2)]=$268;
      var $269=(($267)|0)==0;
      if ($269) { label = 49; break; } else { label = 50; break; }
    case 49: 
      label = 48; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      $method=0;
      label = 53; break;
    case 53: 
      var $275=$3;
      var $276=$xp;
      var $277=(($276+($275<<2))|0);
      var $278=HEAP32[(($277)>>2)];
      var $279=(($278)>>>0) < 2;
      if ($279) { label = 54; break; } else { label = 71; break; }
    case 54: 
      $cy=1;
      label = 55; break;
    case 55: 
      var $282=$3;
      var $283=$xp;
      var $284=(($283+($282<<2))|0);
      var $285=HEAP32[(($284)>>2)];
      var $286=(($285)|0)!=0;
      if ($286) { var $297 = 1;label = 57; break; } else { label = 56; break; }
    case 56: 
      var $288=$xp;
      var $289=$2;
      var $290=$3;
      var $291=(((-$290))|0);
      var $292=(($289+($291<<2))|0);
      var $293=$3;
      var $294=___gmpn_cmp($288, $292, $293);
      var $295=(($294)|0) > 0;
      var $297 = $295;label = 57; break;
    case 57: 
      var $297;
      if ($297) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $299=$xp;
      var $300=$xp;
      var $301=$2;
      var $302=$3;
      var $303=(((-$302))|0);
      var $304=(($301+($303<<2))|0);
      var $305=$3;
      var $306=___gmpn_sub_n($299, $300, $304, $305);
      var $307=$3;
      var $308=$xp;
      var $309=(($308+($307<<2))|0);
      var $310=HEAP32[(($309)>>2)];
      var $311=((($310)-($306))|0);
      HEAP32[(($309)>>2)]=$311;
      var $312=$cy;
      var $313=((($312)+(1))|0);
      $cy=$313;
      label = 55; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $316=$1;
      var $317=$rn;
      var $318=(((-$317))|0);
      var $319=(($316+($318<<2))|0);
      $__p8=$319;
      var $320=$__p8;
      var $321=HEAP32[(($320)>>2)];
      $__x7=$321;
      var $322=$__x7;
      var $323=$cy;
      var $324=((($322)-($323))|0);
      var $325=$__p8;
      HEAP32[(($325)>>2)]=$324;
      var $326=$__x7;
      var $327=$cy;
      var $328=(($326)>>>0) < (($327)>>>0);
      if ($328) { label = 61; break; } else { label = 65; break; }
    case 61: 
      label = 62; break;
    case 62: 
      var $331=$__p8;
      var $332=(($331+4)|0);
      $__p8=$332;
      var $333=HEAP32[(($332)>>2)];
      var $334=((($333)-(1))|0);
      HEAP32[(($332)>>2)]=$334;
      var $335=(($333)|0)==0;
      if ($335) { label = 63; break; } else { label = 64; break; }
    case 63: 
      label = 62; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      label = 68; break;
    case 68: 
      var $342=$xp;
      var $343=$2;
      var $344=$3;
      var $345=(((-$344))|0);
      var $346=(($343+($345<<2))|0);
      var $347=$xp;
      var $348=$3;
      var $349=___gmpn_sub_n($342, $346, $347, $348);
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 97; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $354=$xp;
      $__d=$354;
      var $355=$xp;
      $__s=$355;
      var $356=$3;
      var $357=((($356)+(1))|0);
      $__n=$357;
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $363=$__s;
      var $364=(($363+4)|0);
      $__s=$364;
      var $365=HEAP32[(($363)>>2)];
      var $366=$365 ^ -1;
      var $367=$__d;
      var $368=(($367+4)|0);
      $__d=$368;
      HEAP32[(($367)>>2)]=$366;
      label = 78; break;
    case 78: 
      var $370=$__n;
      var $371=((($370)-(1))|0);
      $__n=$371;
      var $372=(($371)|0)!=0;
      if ($372) { label = 77; break; } else { label = 79; break; }
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      var $376=$xp;
      $__p10=$376;
      var $377=$__p10;
      var $378=HEAP32[(($377)>>2)];
      var $379=$method;
      var $380=((($378)+($379))|0);
      $__x9=$380;
      var $381=$__x9;
      var $382=$__p10;
      HEAP32[(($382)>>2)]=$381;
      var $383=$__x9;
      var $384=$method;
      var $385=(($383)>>>0) < (($384)>>>0);
      if ($385) { label = 82; break; } else { label = 86; break; }
    case 82: 
      label = 83; break;
    case 83: 
      var $388=$__p10;
      var $389=(($388+4)|0);
      $__p10=$389;
      var $390=HEAP32[(($389)>>2)];
      var $391=((($390)+(1))|0);
      HEAP32[(($389)>>2)]=$391;
      var $392=(($391)|0)==0;
      if ($392) { label = 84; break; } else { label = 85; break; }
    case 84: 
      label = 83; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $399=$3;
      var $400=$xp;
      var $401=(($400+($399<<2))|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=(($402)|0)!=0;
      if ($403) { label = 90; break; } else { label = 96; break; }
    case 90: 
      label = 91; break;
    case 91: 
      var $406=$1;
      var $407=$rn;
      var $408=(((-$407))|0);
      var $409=(($406+($408<<2))|0);
      $__p12=$409;
      label = 92; break;
    case 92: 
      var $411=$__p12;
      var $412=(($411+4)|0);
      $__p12=$412;
      var $413=HEAP32[(($411)>>2)];
      var $414=((($413)+(1))|0);
      HEAP32[(($411)>>2)]=$414;
      var $415=(($414)|0)==0;
      if ($415) { label = 93; break; } else { label = 94; break; }
    case 93: 
      label = 92; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $419=$xp;
      var $420=$xp;
      var $421=$2;
      var $422=$3;
      var $423=(((-$422))|0);
      var $424=(($421+($423<<2))|0);
      var $425=$3;
      var $426=___gmpn_sub_n($419, $420, $424, $425);
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      var $429=$4;
      var $430=$xp;
      var $431=$3;
      var $432=(($430+($431<<2))|0);
      var $433=$rn;
      var $434=(((-$433))|0);
      var $435=(($432+($434<<2))|0);
      var $436=$1;
      var $437=$rn;
      var $438=(((-$437))|0);
      var $439=(($436+($438<<2))|0);
      var $440=$rn;
      ___gmpn_mul_n($429, $435, $439, $440);
      var $441=$4;
      var $442=$rn;
      var $443=(($441+($442<<2))|0);
      var $444=$4;
      var $445=$rn;
      var $446=(($444+($445<<2))|0);
      var $447=$xp;
      var $448=$3;
      var $449=(($447+($448<<2))|0);
      var $450=$rn;
      var $451=(((-$450))|0);
      var $452=(($449+($451<<2))|0);
      var $453=$rn;
      var $454=($453<<1);
      var $455=$3;
      var $456=((($454)-($455))|0);
      var $457=___gmpn_add_n($443, $446, $452, $456);
      $cy=$457;
      var $458=$1;
      var $459=$3;
      var $460=(((-$459))|0);
      var $461=(($458+($460<<2))|0);
      var $462=$4;
      var $463=$rn;
      var $464=((($463)*(3))&-1);
      var $465=(($462+($464<<2))|0);
      var $466=$3;
      var $467=(((-$466))|0);
      var $468=(($465+($467<<2))|0);
      var $469=$xp;
      var $470=$rn;
      var $471=(($469+($470<<2))|0);
      var $472=$3;
      var $473=$rn;
      var $474=((($472)-($473))|0);
      var $475=$cy;
      var $476=_mpn_add_nc345($461, $468, $471, $474, $475);
      $cy=$476;
      label = 98; break;
    case 98: 
      var $478=$1;
      var $479=$rn;
      var $480=(((-$479))|0);
      var $481=(($478+($480<<2))|0);
      $__p14=$481;
      var $482=$__p14;
      var $483=HEAP32[(($482)>>2)];
      var $484=$cy;
      var $485=$rn;
      var $486=($485<<1);
      var $487=$4;
      var $488=(($487+($486<<2))|0);
      var $489=HEAP32[(($488)>>2)];
      var $490=$3;
      var $491=$xp;
      var $492=(($491+($490<<2))|0);
      var $493=HEAP32[(($492)>>2)];
      var $494=((($489)+($493))|0);
      var $495=0;
      var $496=((($484)+($495))|0);
      var $497=((($483)+($496))|0);
      $__x13=$497;
      var $498=$__x13;
      var $499=$__p14;
      HEAP32[(($499)>>2)]=$498;
      var $500=$__x13;
      var $501=$cy;
      var $502=$rn;
      var $503=($502<<1);
      var $504=$4;
      var $505=(($504+($503<<2))|0);
      var $506=HEAP32[(($505)>>2)];
      var $507=$3;
      var $508=$xp;
      var $509=(($508+($507<<2))|0);
      var $510=HEAP32[(($509)>>2)];
      var $511=((($506)+($510))|0);
      var $512=0;
      var $513=((($501)+($512))|0);
      var $514=(($500)>>>0) < (($513)>>>0);
      if ($514) { label = 99; break; } else { label = 103; break; }
    case 99: 
      label = 100; break;
    case 100: 
      var $517=$__p14;
      var $518=(($517+4)|0);
      $__p14=$518;
      var $519=HEAP32[(($518)>>2)];
      var $520=((($519)+(1))|0);
      HEAP32[(($518)>>2)]=$520;
      var $521=(($520)|0)==0;
      if ($521) { label = 101; break; } else { label = 102; break; }
    case 101: 
      label = 100; break;
    case 102: 
      label = 103; break;
    case 103: 
      label = 104; break;
    case 104: 
      var $526=$sizp;
      var $527=(($sizes)|0);
      var $528=(($526)|0)==(($527)|0);
      if ($528) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $530=$rn;
      var $531=((($530)*(3))&-1);
      var $532=$3;
      var $533=((($531)-($532))|0);
      var $534=((($533)-(1))|0);
      var $535=$4;
      var $536=(($535+($534<<2))|0);
      var $537=HEAP32[(($536)>>2)];
      var $538=(($537)>>>0) > 4294967288;
      var $539=(($538)&1);
      $cy=$539;
      label = 107; break;
    case 106: 
      var $541=$3;
      $rn=$541;
      label = 19; break;
    case 107: 
      label = 108; break;
    case 108: 
      var $544=HEAP32[(($__tmp_marker)>>2)];
      var $545=(($544)|0)!=0;
      var $546=(($545)&1);
      var $547=(($546)|0)!=0;
      var $548=(($547)&1);
      var $549=($548);
      var $550=(($549)|0)!=0;
      if ($550) { label = 109; break; } else { label = 110; break; }
    case 109: 
      var $552=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($552);
      label = 110; break;
    case 110: 
      label = 111; break;
    case 111: 
      var $555=$cy;
      STACKTOP = __stackBase__;
      return $555;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_ni_invertappr["X"]=1;

function _mpn_mulmod_bnm1_itch344($rn, $an, $bn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $itch;
      $1=$rn;
      $2=$an;
      $3=$bn;
      var $4=$1;
      var $5=$4 >> 1;
      $n=$5;
      var $6=$1;
      var $7=((($6)+(4))|0);
      var $8=$2;
      var $9=$n;
      var $10=(($8)|0) > (($9)|0);
      if ($10) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $12=$3;
      var $13=$n;
      var $14=(($12)|0) > (($13)|0);
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$1;
      var $20 = $16;label = 6; break;
    case 5: 
      var $18=$n;
      var $20 = $18;label = 6; break;
    case 6: 
      var $20;
      var $23 = $20;label = 8; break;
    case 7: 
      var $23 = 0;label = 8; break;
    case 8: 
      var $23;
      var $24=((($7)+($23))|0);
      $itch=$24;
      var $25=$itch;

      return $25;
    default: assert(0, "bad label: " + label);
  }

}


function _mpn_bc_invertappr($ip, $dp, $n, $tp) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $xp;
      var $_dummy;
      var $__d1;
      var $__d0;
      var $__q1;
      var $__q0;
      var $__r1;
      var $__r0;
      var $__m;
      var $i;
      var $__d;
      var $__s;
      var $__n;
      var $inv=__stackBase__;
      var $_v;
      var $_p;
      var $_t1;
      var $_t0;
      var $_mask;
      var $_dummy1;
      var $__d12;
      var $__d03;
      var $__q14;
      var $__q05;
      var $__r16;
      var $__r07;
      var $__m8;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x;
      var $__p;
      $2=$ip;
      $3=$dp;
      $4=$n;
      $5=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      var $16=$4;
      var $17=(($16)|0)==1;
      if ($17) { label = 13; break; } else { label = 36; break; }
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $27=$3;
      var $28=HEAP32[(($27)>>2)];
      var $29=$28 >>> 16;
      $__d1=$29;
      var $30=$3;
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & 65535;
      $__d0=$32;
      var $33=$3;
      var $34=HEAP32[(($33)>>2)];
      var $35=$34 ^ -1;
      var $36=$__d1;
      var $37=Math.floor(((($35)>>>0))/((($36)>>>0)));
      $__q1=$37;
      var $38=$3;
      var $39=HEAP32[(($38)>>2)];
      var $40=$39 ^ -1;
      var $41=$__q1;
      var $42=$__d1;
      var $43=Math.imul($41,$42);
      var $44=((($40)-($43))|0);
      $__r1=$44;
      var $45=$__q1;
      var $46=$__d0;
      var $47=Math.imul($45,$46);
      $__m=$47;
      var $48=$__r1;
      var $49=($48<<16);
      var $50=$49 | 65535;
      $__r1=$50;
      var $51=$__r1;
      var $52=$__m;
      var $53=(($51)>>>0) < (($52)>>>0);
      if ($53) { label = 22; break; } else { label = 27; break; }
    case 22: 
      var $55=$__q1;
      var $56=((($55)-(1))|0);
      $__q1=$56;
      var $57=$3;
      var $58=HEAP32[(($57)>>2)];
      var $59=$__r1;
      var $60=((($59)+($58))|0);
      $__r1=$60;
      var $61=$__r1;
      var $62=$3;
      var $63=HEAP32[(($62)>>2)];
      var $64=(($61)>>>0) >= (($63)>>>0);
      if ($64) { label = 23; break; } else { label = 26; break; }
    case 23: 
      var $66=$__r1;
      var $67=$__m;
      var $68=(($66)>>>0) < (($67)>>>0);
      if ($68) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $70=$__q1;
      var $71=((($70)-(1))|0);
      $__q1=$71;
      var $72=$3;
      var $73=HEAP32[(($72)>>2)];
      var $74=$__r1;
      var $75=((($74)+($73))|0);
      $__r1=$75;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $79=$__m;
      var $80=$__r1;
      var $81=((($80)-($79))|0);
      $__r1=$81;
      var $82=$__r1;
      var $83=$__d1;
      var $84=Math.floor(((($82)>>>0))/((($83)>>>0)));
      $__q0=$84;
      var $85=$__r1;
      var $86=$__q0;
      var $87=$__d1;
      var $88=Math.imul($86,$87);
      var $89=((($85)-($88))|0);
      $__r0=$89;
      var $90=$__q0;
      var $91=$__d0;
      var $92=Math.imul($90,$91);
      $__m=$92;
      var $93=$__r0;
      var $94=($93<<16);
      var $95=$94 | 65535;
      $__r0=$95;
      var $96=$__r0;
      var $97=$__m;
      var $98=(($96)>>>0) < (($97)>>>0);
      if ($98) { label = 28; break; } else { label = 33; break; }
    case 28: 
      var $100=$__q0;
      var $101=((($100)-(1))|0);
      $__q0=$101;
      var $102=$3;
      var $103=HEAP32[(($102)>>2)];
      var $104=$__r0;
      var $105=((($104)+($103))|0);
      $__r0=$105;
      var $106=$__r0;
      var $107=$3;
      var $108=HEAP32[(($107)>>2)];
      var $109=(($106)>>>0) >= (($108)>>>0);
      if ($109) { label = 29; break; } else { label = 32; break; }
    case 29: 
      var $111=$__r0;
      var $112=$__m;
      var $113=(($111)>>>0) < (($112)>>>0);
      if ($113) { label = 30; break; } else { label = 31; break; }
    case 30: 
      var $115=$__q0;
      var $116=((($115)-(1))|0);
      $__q0=$116;
      var $117=$3;
      var $118=HEAP32[(($117)>>2)];
      var $119=$__r0;
      var $120=((($119)+($118))|0);
      $__r0=$120;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      label = 33; break;
    case 33: 
      var $124=$__m;
      var $125=$__r0;
      var $126=((($125)-($124))|0);
      $__r0=$126;
      var $127=$__q1;
      var $128=($127<<16);
      var $129=$__q0;
      var $130=$128 | $129;
      var $131=$2;
      HEAP32[(($131)>>2)]=$130;
      var $132=$__r0;
      $_dummy=$132;
      label = 34; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 95; break;
    case 36: 
      var $136=$5;
      var $137=$4;
      var $138=(($136+($137<<2))|0);
      var $139=(($138+8)|0);
      $xp=$139;
      var $140=$4;
      var $141=((($140)-(1))|0);
      $i=$141;
      label = 37; break;
    case 37: 
      var $143=$i;
      var $144=(($143)|0) >= 0;
      if ($144) { label = 38; break; } else { label = 40; break; }
    case 38: 
      var $146=$i;
      var $147=$xp;
      var $148=(($147+($146<<2))|0);
      HEAP32[(($148)>>2)]=-1;
      label = 39; break;
    case 39: 
      var $150=$i;
      var $151=((($150)-(1))|0);
      $i=$151;
      label = 37; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $154=$xp;
      var $155=$4;
      var $156=(($154+($155<<2))|0);
      $__d=$156;
      var $157=$3;
      $__s=$157;
      var $158=$4;
      $__n=$158;
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      var $164=$__s;
      var $165=(($164+4)|0);
      $__s=$165;
      var $166=HEAP32[(($164)>>2)];
      var $167=$166 ^ -1;
      var $168=$__d;
      var $169=(($168+4)|0);
      $__d=$169;
      HEAP32[(($168)>>2)]=$167;
      label = 47; break;
    case 47: 
      var $171=$__n;
      var $172=((($171)-(1))|0);
      $__n=$172;
      var $173=(($172)|0)!=0;
      if ($173) { label = 46; break; } else { label = 48; break; }
    case 48: 
      label = 49; break;
    case 49: 
      var $176=$4;
      var $177=(($176)|0)==2;
      if ($177) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $179=$2;
      var $180=$xp;
      var $181=$3;
      var $182=___gmpn_divrem_2($179, 0, $180, 4, $181);
      label = 94; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $193=$4;
      var $194=((($193)-(1))|0);
      var $195=$3;
      var $196=(($195+($194<<2))|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=$197 >>> 16;
      $__d12=$198;
      var $199=$4;
      var $200=((($199)-(1))|0);
      var $201=$3;
      var $202=(($201+($200<<2))|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$203 & 65535;
      $__d03=$204;
      var $205=$4;
      var $206=((($205)-(1))|0);
      var $207=$3;
      var $208=(($207+($206<<2))|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=$209 ^ -1;
      var $211=$__d12;
      var $212=Math.floor(((($210)>>>0))/((($211)>>>0)));
      $__q14=$212;
      var $213=$4;
      var $214=((($213)-(1))|0);
      var $215=$3;
      var $216=(($215+($214<<2))|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=$217 ^ -1;
      var $219=$__q14;
      var $220=$__d12;
      var $221=Math.imul($219,$220);
      var $222=((($218)-($221))|0);
      $__r16=$222;
      var $223=$__q14;
      var $224=$__d03;
      var $225=Math.imul($223,$224);
      $__m8=$225;
      var $226=$__r16;
      var $227=($226<<16);
      var $228=$227 | 65535;
      $__r16=$228;
      var $229=$__r16;
      var $230=$__m8;
      var $231=(($229)>>>0) < (($230)>>>0);
      if ($231) { label = 61; break; } else { label = 66; break; }
    case 61: 
      var $233=$__q14;
      var $234=((($233)-(1))|0);
      $__q14=$234;
      var $235=$4;
      var $236=((($235)-(1))|0);
      var $237=$3;
      var $238=(($237+($236<<2))|0);
      var $239=HEAP32[(($238)>>2)];
      var $240=$__r16;
      var $241=((($240)+($239))|0);
      $__r16=$241;
      var $242=$__r16;
      var $243=$4;
      var $244=((($243)-(1))|0);
      var $245=$3;
      var $246=(($245+($244<<2))|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=(($242)>>>0) >= (($247)>>>0);
      if ($248) { label = 62; break; } else { label = 65; break; }
    case 62: 
      var $250=$__r16;
      var $251=$__m8;
      var $252=(($250)>>>0) < (($251)>>>0);
      if ($252) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $254=$__q14;
      var $255=((($254)-(1))|0);
      $__q14=$255;
      var $256=$4;
      var $257=((($256)-(1))|0);
      var $258=$3;
      var $259=(($258+($257<<2))|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=$__r16;
      var $262=((($261)+($260))|0);
      $__r16=$262;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      label = 66; break;
    case 66: 
      var $266=$__m8;
      var $267=$__r16;
      var $268=((($267)-($266))|0);
      $__r16=$268;
      var $269=$__r16;
      var $270=$__d12;
      var $271=Math.floor(((($269)>>>0))/((($270)>>>0)));
      $__q05=$271;
      var $272=$__r16;
      var $273=$__q05;
      var $274=$__d12;
      var $275=Math.imul($273,$274);
      var $276=((($272)-($275))|0);
      $__r07=$276;
      var $277=$__q05;
      var $278=$__d03;
      var $279=Math.imul($277,$278);
      $__m8=$279;
      var $280=$__r07;
      var $281=($280<<16);
      var $282=$281 | 65535;
      $__r07=$282;
      var $283=$__r07;
      var $284=$__m8;
      var $285=(($283)>>>0) < (($284)>>>0);
      if ($285) { label = 67; break; } else { label = 72; break; }
    case 67: 
      var $287=$__q05;
      var $288=((($287)-(1))|0);
      $__q05=$288;
      var $289=$4;
      var $290=((($289)-(1))|0);
      var $291=$3;
      var $292=(($291+($290<<2))|0);
      var $293=HEAP32[(($292)>>2)];
      var $294=$__r07;
      var $295=((($294)+($293))|0);
      $__r07=$295;
      var $296=$__r07;
      var $297=$4;
      var $298=((($297)-(1))|0);
      var $299=$3;
      var $300=(($299+($298<<2))|0);
      var $301=HEAP32[(($300)>>2)];
      var $302=(($296)>>>0) >= (($301)>>>0);
      if ($302) { label = 68; break; } else { label = 71; break; }
    case 68: 
      var $304=$__r07;
      var $305=$__m8;
      var $306=(($304)>>>0) < (($305)>>>0);
      if ($306) { label = 69; break; } else { label = 70; break; }
    case 69: 
      var $308=$__q05;
      var $309=((($308)-(1))|0);
      $__q05=$309;
      var $310=$4;
      var $311=((($310)-(1))|0);
      var $312=$3;
      var $313=(($312+($311<<2))|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$__r07;
      var $316=((($315)+($314))|0);
      $__r07=$316;
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $320=$__m8;
      var $321=$__r07;
      var $322=((($321)-($320))|0);
      $__r07=$322;
      var $323=$__q14;
      var $324=($323<<16);
      var $325=$__q05;
      var $326=$324 | $325;
      $_v=$326;
      var $327=$__r07;
      $_dummy1=$327;
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      var $330=$4;
      var $331=((($330)-(1))|0);
      var $332=$3;
      var $333=(($332+($331<<2))|0);
      var $334=HEAP32[(($333)>>2)];
      var $335=$_v;
      var $336=Math.imul($334,$335);
      $_p=$336;
      var $337=$4;
      var $338=((($337)-(2))|0);
      var $339=$3;
      var $340=(($339+($338<<2))|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=$_p;
      var $343=((($342)+($341))|0);
      $_p=$343;
      var $344=$_p;
      var $345=$4;
      var $346=((($345)-(2))|0);
      var $347=$3;
      var $348=(($347+($346<<2))|0);
      var $349=HEAP32[(($348)>>2)];
      var $350=(($344)>>>0) < (($349)>>>0);
      if ($350) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $352=$_v;
      var $353=((($352)-(1))|0);
      $_v=$353;
      var $354=$_p;
      var $355=$4;
      var $356=((($355)-(1))|0);
      var $357=$3;
      var $358=(($357+($356<<2))|0);
      var $359=HEAP32[(($358)>>2)];
      var $360=(($354)>>>0) >= (($359)>>>0);
      var $361=(($360)&1);
      var $362=(((-$361))|0);
      $_mask=$362;
      var $363=$4;
      var $364=((($363)-(1))|0);
      var $365=$3;
      var $366=(($365+($364<<2))|0);
      var $367=HEAP32[(($366)>>2)];
      var $368=$_p;
      var $369=((($368)-($367))|0);
      $_p=$369;
      var $370=$_mask;
      var $371=$_v;
      var $372=((($371)+($370))|0);
      $_v=$372;
      var $373=$_mask;
      var $374=$4;
      var $375=((($374)-(1))|0);
      var $376=$3;
      var $377=(($376+($375<<2))|0);
      var $378=HEAP32[(($377)>>2)];
      var $379=$373 & $378;
      var $380=$_p;
      var $381=((($380)-($379))|0);
      $_p=$381;
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      var $384=$4;
      var $385=((($384)-(2))|0);
      var $386=$3;
      var $387=(($386+($385<<2))|0);
      var $388=HEAP32[(($387)>>2)];
      $__u=$388;
      var $389=$_v;
      $__v=$389;
      var $390=$__u;
      var $391=$390 & 65535;
      $__ul=$391;
      var $392=$__u;
      var $393=$392 >>> 16;
      $__uh=$393;
      var $394=$__v;
      var $395=$394 & 65535;
      $__vl=$395;
      var $396=$__v;
      var $397=$396 >>> 16;
      $__vh=$397;
      var $398=$__ul;
      var $399=$__vl;
      var $400=Math.imul($398,$399);
      $__x0=$400;
      var $401=$__ul;
      var $402=$__vh;
      var $403=Math.imul($401,$402);
      $__x1=$403;
      var $404=$__uh;
      var $405=$__vl;
      var $406=Math.imul($404,$405);
      $__x2=$406;
      var $407=$__uh;
      var $408=$__vh;
      var $409=Math.imul($407,$408);
      $__x3=$409;
      var $410=$__x0;
      var $411=$410 >>> 16;
      var $412=$__x1;
      var $413=((($412)+($411))|0);
      $__x1=$413;
      var $414=$__x2;
      var $415=$__x1;
      var $416=((($415)+($414))|0);
      $__x1=$416;
      var $417=$__x1;
      var $418=$__x2;
      var $419=(($417)>>>0) < (($418)>>>0);
      if ($419) { label = 78; break; } else { label = 79; break; }
    case 78: 
      var $421=$__x3;
      var $422=((($421)+(65536))|0);
      $__x3=$422;
      label = 79; break;
    case 79: 
      var $424=$__x3;
      var $425=$__x1;
      var $426=$425 >>> 16;
      var $427=((($424)+($426))|0);
      $_t1=$427;
      var $428=$__x1;
      var $429=$428 << 16;
      var $430=$__x0;
      var $431=$430 & 65535;
      var $432=((($429)+($431))|0);
      $_t0=$432;
      label = 80; break;
    case 80: 
      var $434=$_t1;
      var $435=$_p;
      var $436=((($435)+($434))|0);
      $_p=$436;
      var $437=$_p;
      var $438=$_t1;
      var $439=(($437)>>>0) < (($438)>>>0);
      if ($439) { label = 81; break; } else { label = 87; break; }
    case 81: 
      var $441=$_v;
      var $442=((($441)-(1))|0);
      $_v=$442;
      var $443=$_p;
      var $444=$4;
      var $445=((($444)-(1))|0);
      var $446=$3;
      var $447=(($446+($445<<2))|0);
      var $448=HEAP32[(($447)>>2)];
      var $449=(($443)>>>0) >= (($448)>>>0);
      var $450=(($449)&1);
      var $451=(($450)|0)!=0;
      var $452=(($451)&1);
      var $453=($452);
      var $454=(($453)|0)!=0;
      if ($454) { label = 82; break; } else { label = 86; break; }
    case 82: 
      var $456=$_p;
      var $457=$4;
      var $458=((($457)-(1))|0);
      var $459=$3;
      var $460=(($459+($458<<2))|0);
      var $461=HEAP32[(($460)>>2)];
      var $462=(($456)>>>0) > (($461)>>>0);
      if ($462) { label = 84; break; } else { label = 83; break; }
    case 83: 
      var $464=$_t0;
      var $465=$4;
      var $466=((($465)-(2))|0);
      var $467=$3;
      var $468=(($467+($466<<2))|0);
      var $469=HEAP32[(($468)>>2)];
      var $470=(($464)>>>0) >= (($469)>>>0);
      if ($470) { label = 84; break; } else { label = 85; break; }
    case 84: 
      var $472=$_v;
      var $473=((($472)-(1))|0);
      $_v=$473;
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $477=$_v;
      var $478=(($inv)|0);
      HEAP32[(($478)>>2)]=$477;
      label = 88; break;
    case 88: 
      var $480=$2;
      var $481=$xp;
      var $482=$4;
      var $483=($482<<1);
      var $484=$3;
      var $485=$4;
      var $486=(($inv)|0);
      var $487=HEAP32[(($486)>>2)];
      var $488=___gmpn_sbpi1_divappr_q($480, $481, $483, $484, $485, $487);
      label = 89; break;
    case 89: 
      var $490=$2;
      $__p=$490;
      label = 90; break;
    case 90: 
      var $492=$__p;
      var $493=(($492+4)|0);
      $__p=$493;
      var $494=HEAP32[(($492)>>2)];
      var $495=((($494)-(1))|0);
      HEAP32[(($492)>>2)]=$495;
      var $496=(($494)|0)==0;
      if ($496) { label = 91; break; } else { label = 92; break; }
    case 91: 
      label = 90; break;
    case 92: 
      label = 93; break;
    case 93: 
      $1=1;
      label = 96; break;
    case 94: 
      label = 95; break;
    case 95: 
      $1=0;
      label = 96; break;
    case 96: 
      var $503=$1;
      STACKTOP = __stackBase__;
      return $503;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_bc_invertappr["X"]=1;

function _mpn_add_nc345($rp, $up, $vp, $n, $ci) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $co;
  $1=$rp;
  $2=$up;
  $3=$vp;
  $4=$n;
  $5=$ci;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_add_n($6, $7, $8, $9);
  $co=$10;
  var $11=$1;
  var $12=$1;
  var $13=$4;
  var $14=$5;
  var $15=___gmpn_add_1($11, $12, $13, $14);
  var $16=$co;
  var $17=((($16)+($15))|0);
  $co=$17;
  var $18=$co;

  return $18;
}


function ___gmpn_invertappr($ip, $dp, $n, $scratch) {
  var label = 0;
  var __stackBase__  = STACKTOP; STACKTOP = (STACKTOP + 4)|0; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $res;
      var $__tmp_marker=__stackBase__;
      $1=$ip;
      $2=$dp;
      $3=$n;
      $4=$scratch;
      HEAP32[(($__tmp_marker)>>2)]=0;
      var $5=$4;
      var $6=(($5)|0)==0;
      if ($6) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $8=$3;
      var $9=((($8)*(3))&-1);
      var $10=((($9)+(2))|0);
      var $11=($10<<2);
      var $12=(($11)>>>0) < 65536;
      var $13=(($12)&1);
      var $14=(($13)|0)!=0;
      var $15=(($14)&1);
      var $16=($15);
      var $17=(($16)|0)!=0;
      if ($17) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $19=$3;
      var $20=((($19)*(3))&-1);
      var $21=((($20)+(2))|0);
      var $22=($21<<2);
      var $23=STACKTOP;STACKTOP = (STACKTOP + $22)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $31 = $23;label = 6; break;
    case 5: 
      var $25=$3;
      var $26=((($25)*(3))&-1);
      var $27=((($26)+(2))|0);
      var $28=($27<<2);
      var $29=___gmp_tmp_reentrant_alloc($__tmp_marker, $28);
      var $31 = $29;label = 6; break;
    case 6: 
      var $31;
      var $32=$31;
      $4=$32;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $44=$3;
      var $45=(($44)|0) >= 200;
      if ($45) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $47=$1;
      var $48=$2;
      var $49=$3;
      var $50=$4;
      var $51=_mpn_bc_invertappr($47, $48, $49, $50);
      $res=$51;
      label = 20; break;
    case 19: 
      var $53=$1;
      var $54=$2;
      var $55=$3;
      var $56=$4;
      var $57=___gmpn_ni_invertappr($53, $54, $55, $56);
      $res=$57;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $60=HEAP32[(($__tmp_marker)>>2)];
      var $61=(($60)|0)!=0;
      var $62=(($61)&1);
      var $63=(($62)|0)!=0;
      var $64=(($63)&1);
      var $65=($64);
      var $66=(($65)|0)!=0;
      if ($66) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $68=HEAP32[(($__tmp_marker)>>2)];
      ___gmp_tmp_reentrant_free($68);
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $71=$res;
      STACKTOP = __stackBase__;
      return $71;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_invertappr["X"]=1;

function ___gmpn_bc_mulmod_bnm1($rp, $ap, $bp, $rn, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $cy;
      var $__x;
      var $__p;
      $1=$rp;
      $2=$ap;
      $3=$bp;
      $4=$rn;
      $5=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $8=$5;
      var $9=$2;
      var $10=$3;
      var $11=$4;
      ___gmpn_mul_n($8, $9, $10, $11);
      var $12=$1;
      var $13=$5;
      var $14=$5;
      var $15=$4;
      var $16=(($14+($15<<2))|0);
      var $17=$4;
      var $18=___gmpn_add_n($12, $13, $16, $17);
      $cy=$18;
      label = 5; break;
    case 5: 
      var $20=$1;
      $__p=$20;
      var $21=$__p;
      var $22=HEAP32[(($21)>>2)];
      var $23=$cy;
      var $24=((($22)+($23))|0);
      $__x=$24;
      var $25=$__x;
      var $26=$__p;
      HEAP32[(($26)>>2)]=$25;
      var $27=$__x;
      var $28=$cy;
      var $29=(($27)>>>0) < (($28)>>>0);
      if ($29) { label = 6; break; } else { label = 10; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $32=$__p;
      var $33=(($32+4)|0);
      $__p=$33;
      var $34=HEAP32[(($33)>>2)];
      var $35=((($34)+(1))|0);
      HEAP32[(($33)>>2)]=$35;
      var $36=(($35)|0)==0;
      if ($36) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 7; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_bc_mulmod_bnm1["X"]=1;

function ___gmpn_mulmod_bnm1($rp, $rn, $ap, $an, $bp, $bn, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $cy;
      var $__x;
      var $__p;
      var $n;
      var $cy1;
      var $hi;
      var $am1;
      var $bm1;
      var $anm;
      var $bnm;
      var $so;
      var $__x2;
      var $__p3;
      var $__x4;
      var $__p5;
      var $k;
      var $ap1;
      var $bp1;
      var $anp;
      var $bnp;
      var $__x6;
      var $__p7;
      var $__x8;
      var $__p9;
      var $mask;
      var $__x10;
      var $__p11;
      var $__x12;
      var $__p13;
      var $__x14;
      var $__p15;
      $1=$rp;
      $2=$rn;
      $3=$ap;
      $4=$an;
      $5=$bp;
      $6=$bn;
      $7=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $14=$2;
      var $15=$14 & 1;
      var $16=(($15)|0)!=0;
      if ($16) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $18=$2;
      var $19=(($18)|0) >= 16;
      if ($19) { label = 24; break; } else { label = 10; break; }
    case 10: 
      var $21=$6;
      var $22=$2;
      var $23=(($21)|0) < (($22)|0);
      var $24=(($23)&1);
      var $25=(($24)|0)!=0;
      var $26=(($25)&1);
      var $27=($26);
      var $28=(($27)|0)!=0;
      if ($28) { label = 11; break; } else { label = 22; break; }
    case 11: 
      var $30=$4;
      var $31=$6;
      var $32=((($30)+($31))|0);
      var $33=$2;
      var $34=(($32)|0) <= (($33)|0);
      var $35=(($34)&1);
      var $36=(($35)|0)!=0;
      var $37=(($36)&1);
      var $38=($37);
      var $39=(($38)|0)!=0;
      if ($39) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $41=$1;
      var $42=$3;
      var $43=$4;
      var $44=$5;
      var $45=$6;
      var $46=___gmpn_mul($41, $42, $43, $44, $45);
      label = 21; break;
    case 13: 
      var $48=$7;
      var $49=$3;
      var $50=$4;
      var $51=$5;
      var $52=$6;
      var $53=___gmpn_mul($48, $49, $50, $51, $52);
      var $54=$1;
      var $55=$7;
      var $56=$2;
      var $57=$7;
      var $58=$2;
      var $59=(($57+($58<<2))|0);
      var $60=$4;
      var $61=$6;
      var $62=((($60)+($61))|0);
      var $63=$2;
      var $64=((($62)-($63))|0);
      var $65=___gmpn_add($54, $55, $56, $59, $64);
      $cy=$65;
      label = 14; break;
    case 14: 
      var $67=$1;
      $__p=$67;
      var $68=$__p;
      var $69=HEAP32[(($68)>>2)];
      var $70=$cy;
      var $71=((($69)+($70))|0);
      $__x=$71;
      var $72=$__x;
      var $73=$__p;
      HEAP32[(($73)>>2)]=$72;
      var $74=$__x;
      var $75=$cy;
      var $76=(($74)>>>0) < (($75)>>>0);
      if ($76) { label = 15; break; } else { label = 19; break; }
    case 15: 
      label = 16; break;
    case 16: 
      var $79=$__p;
      var $80=(($79+4)|0);
      $__p=$80;
      var $81=HEAP32[(($80)>>2)];
      var $82=((($81)+(1))|0);
      HEAP32[(($80)>>2)]=$82;
      var $83=(($82)|0)==0;
      if ($83) { label = 17; break; } else { label = 18; break; }
    case 17: 
      label = 16; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 23; break;
    case 22: 
      var $90=$1;
      var $91=$3;
      var $92=$5;
      var $93=$2;
      var $94=$7;
      ___gmpn_bc_mulmod_bnm1($90, $91, $92, $93, $94);
      label = 23; break;
    case 23: 
      label = 123; break;
    case 24: 
      var $97=$2;
      var $98=$97 >> 1;
      $n=$98;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $101=$4;
      var $102=$n;
      var $103=(($101)|0) > (($102)|0);
      var $104=(($103)&1);
      var $105=(($104)|0)!=0;
      var $106=(($105)&1);
      var $107=($106);
      var $108=(($107)|0)!=0;
      if ($108) { label = 27; break; } else { label = 45; break; }
    case 27: 
      var $110=$7;
      $am1=$110;
      var $111=$7;
      var $112=$3;
      var $113=$n;
      var $114=$3;
      var $115=$n;
      var $116=(($114+($115<<2))|0);
      var $117=$4;
      var $118=$n;
      var $119=((($117)-($118))|0);
      var $120=___gmpn_add($111, $112, $113, $116, $119);
      $cy1=$120;
      label = 28; break;
    case 28: 
      var $122=$7;
      $__p3=$122;
      var $123=$__p3;
      var $124=HEAP32[(($123)>>2)];
      var $125=$cy1;
      var $126=((($124)+($125))|0);
      $__x2=$126;
      var $127=$__x2;
      var $128=$__p3;
      HEAP32[(($128)>>2)]=$127;
      var $129=$__x2;
      var $130=$cy1;
      var $131=(($129)>>>0) < (($130)>>>0);
      if ($131) { label = 29; break; } else { label = 33; break; }
    case 29: 
      label = 30; break;
    case 30: 
      var $134=$__p3;
      var $135=(($134+4)|0);
      $__p3=$135;
      var $136=HEAP32[(($135)>>2)];
      var $137=((($136)+(1))|0);
      HEAP32[(($135)>>2)]=$137;
      var $138=(($137)|0)==0;
      if ($138) { label = 31; break; } else { label = 32; break; }
    case 31: 
      label = 30; break;
    case 32: 
      label = 33; break;
    case 33: 
      label = 34; break;
    case 34: 
      var $143=$n;
      $anm=$143;
      var $144=$6;
      var $145=$n;
      var $146=(($144)|0) > (($145)|0);
      var $147=(($146)&1);
      var $148=(($147)|0)!=0;
      var $149=(($148)&1);
      var $150=($149);
      var $151=(($150)|0)!=0;
      if ($151) { label = 35; break; } else { label = 43; break; }
    case 35: 
      var $153=$7;
      var $154=$n;
      var $155=(($153+($154<<2))|0);
      $bm1=$155;
      var $156=$7;
      var $157=$n;
      var $158=(($156+($157<<2))|0);
      var $159=$5;
      var $160=$n;
      var $161=$5;
      var $162=$n;
      var $163=(($161+($162<<2))|0);
      var $164=$6;
      var $165=$n;
      var $166=((($164)-($165))|0);
      var $167=___gmpn_add($158, $159, $160, $163, $166);
      $cy1=$167;
      label = 36; break;
    case 36: 
      var $169=$7;
      var $170=$n;
      var $171=(($169+($170<<2))|0);
      $__p5=$171;
      var $172=$__p5;
      var $173=HEAP32[(($172)>>2)];
      var $174=$cy1;
      var $175=((($173)+($174))|0);
      $__x4=$175;
      var $176=$__x4;
      var $177=$__p5;
      HEAP32[(($177)>>2)]=$176;
      var $178=$__x4;
      var $179=$cy1;
      var $180=(($178)>>>0) < (($179)>>>0);
      if ($180) { label = 37; break; } else { label = 41; break; }
    case 37: 
      label = 38; break;
    case 38: 
      var $183=$__p5;
      var $184=(($183+4)|0);
      $__p5=$184;
      var $185=HEAP32[(($184)>>2)];
      var $186=((($185)+(1))|0);
      HEAP32[(($184)>>2)]=$186;
      var $187=(($186)|0)==0;
      if ($187) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 38; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $192=$n;
      $bnm=$192;
      var $193=$7;
      var $194=$n;
      var $195=($194<<1);
      var $196=(($193+($195<<2))|0);
      $so=$196;
      label = 44; break;
    case 43: 
      var $198=$7;
      var $199=$n;
      var $200=(($198+($199<<2))|0);
      $so=$200;
      var $201=$5;
      $bm1=$201;
      var $202=$6;
      $bnm=$202;
      label = 44; break;
    case 44: 
      label = 46; break;
    case 45: 
      var $205=$7;
      $so=$205;
      var $206=$3;
      $am1=$206;
      var $207=$4;
      $anm=$207;
      var $208=$5;
      $bm1=$208;
      var $209=$6;
      $bnm=$209;
      label = 46; break;
    case 46: 
      var $211=$1;
      var $212=$n;
      var $213=$am1;
      var $214=$anm;
      var $215=$bm1;
      var $216=$bnm;
      var $217=$so;
      ___gmpn_mulmod_bnm1($211, $212, $213, $214, $215, $216, $217);
      var $218=$4;
      var $219=$n;
      var $220=(($218)|0) > (($219)|0);
      var $221=(($220)&1);
      var $222=(($221)|0)!=0;
      var $223=(($222)&1);
      var $224=($223);
      var $225=(($224)|0)!=0;
      if ($225) { label = 47; break; } else { label = 55; break; }
    case 47: 
      var $227=$7;
      var $228=$n;
      var $229=($228<<1);
      var $230=(($227+($229<<2))|0);
      var $231=(($230+8)|0);
      $ap1=$231;
      var $232=$7;
      var $233=$n;
      var $234=($233<<1);
      var $235=(($232+($234<<2))|0);
      var $236=(($235+8)|0);
      var $237=$3;
      var $238=$n;
      var $239=$3;
      var $240=$n;
      var $241=(($239+($240<<2))|0);
      var $242=$4;
      var $243=$n;
      var $244=((($242)-($243))|0);
      var $245=___gmpn_sub($236, $237, $238, $241, $244);
      $cy1=$245;
      var $246=$n;
      var $247=$7;
      var $248=$n;
      var $249=($248<<1);
      var $250=(($247+($249<<2))|0);
      var $251=(($250+8)|0);
      var $252=(($251+($246<<2))|0);
      HEAP32[(($252)>>2)]=0;
      label = 48; break;
    case 48: 
      var $254=$7;
      var $255=$n;
      var $256=($255<<1);
      var $257=(($254+($256<<2))|0);
      var $258=(($257+8)|0);
      $__p7=$258;
      var $259=$__p7;
      var $260=HEAP32[(($259)>>2)];
      var $261=$cy1;
      var $262=((($260)+($261))|0);
      $__x6=$262;
      var $263=$__x6;
      var $264=$__p7;
      HEAP32[(($264)>>2)]=$263;
      var $265=$__x6;
      var $266=$cy1;
      var $267=(($265)>>>0) < (($266)>>>0);
      if ($267) { label = 49; break; } else { label = 53; break; }
    case 49: 
      label = 50; break;
    case 50: 
      var $270=$__p7;
      var $271=(($270+4)|0);
      $__p7=$271;
      var $272=HEAP32[(($271)>>2)];
      var $273=((($272)+(1))|0);
      HEAP32[(($271)>>2)]=$273;
      var $274=(($273)|0)==0;
      if ($274) { label = 51; break; } else { label = 52; break; }
    case 51: 
      label = 50; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $279=$n;
      var $280=$n;
      var $281=$ap1;
      var $282=(($281+($280<<2))|0);
      var $283=HEAP32[(($282)>>2)];
      var $284=((($279)+($283))|0);
      $anp=$284;
      label = 56; break;
    case 55: 
      var $286=$3;
      $ap1=$286;
      var $287=$4;
      $anp=$287;
      label = 56; break;
    case 56: 
      var $289=$6;
      var $290=$n;
      var $291=(($289)|0) > (($290)|0);
      var $292=(($291)&1);
      var $293=(($292)|0)!=0;
      var $294=(($293)&1);
      var $295=($294);
      var $296=(($295)|0)!=0;
      if ($296) { label = 57; break; } else { label = 65; break; }
    case 57: 
      var $298=$7;
      var $299=$n;
      var $300=($299<<1);
      var $301=(($298+($300<<2))|0);
      var $302=(($301+8)|0);
      var $303=$n;
      var $304=(($302+($303<<2))|0);
      var $305=(($304+4)|0);
      $bp1=$305;
      var $306=$7;
      var $307=$n;
      var $308=($307<<1);
      var $309=(($306+($308<<2))|0);
      var $310=(($309+8)|0);
      var $311=$n;
      var $312=(($310+($311<<2))|0);
      var $313=(($312+4)|0);
      var $314=$5;
      var $315=$n;
      var $316=$5;
      var $317=$n;
      var $318=(($316+($317<<2))|0);
      var $319=$6;
      var $320=$n;
      var $321=((($319)-($320))|0);
      var $322=___gmpn_sub($313, $314, $315, $318, $321);
      $cy1=$322;
      var $323=$n;
      var $324=($323<<1);
      var $325=((($324)+(1))|0);
      var $326=$7;
      var $327=$n;
      var $328=($327<<1);
      var $329=(($326+($328<<2))|0);
      var $330=(($329+8)|0);
      var $331=(($330+($325<<2))|0);
      HEAP32[(($331)>>2)]=0;
      label = 58; break;
    case 58: 
      var $333=$7;
      var $334=$n;
      var $335=($334<<1);
      var $336=(($333+($335<<2))|0);
      var $337=(($336+8)|0);
      var $338=$n;
      var $339=(($337+($338<<2))|0);
      var $340=(($339+4)|0);
      $__p9=$340;
      var $341=$__p9;
      var $342=HEAP32[(($341)>>2)];
      var $343=$cy1;
      var $344=((($342)+($343))|0);
      $__x8=$344;
      var $345=$__x8;
      var $346=$__p9;
      HEAP32[(($346)>>2)]=$345;
      var $347=$__x8;
      var $348=$cy1;
      var $349=(($347)>>>0) < (($348)>>>0);
      if ($349) { label = 59; break; } else { label = 63; break; }
    case 59: 
      label = 60; break;
    case 60: 
      var $352=$__p9;
      var $353=(($352+4)|0);
      $__p9=$353;
      var $354=HEAP32[(($353)>>2)];
      var $355=((($354)+(1))|0);
      HEAP32[(($353)>>2)]=$355;
      var $356=(($355)|0)==0;
      if ($356) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 60; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $361=$n;
      var $362=$n;
      var $363=$bp1;
      var $364=(($363+($362<<2))|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=((($361)+($365))|0);
      $bnp=$366;
      label = 66; break;
    case 65: 
      var $368=$5;
      $bp1=$368;
      var $369=$6;
      $bnp=$369;
      label = 66; break;
    case 66: 
      var $371=$n;
      var $372=(($371)|0) >= 300;
      if ($372) { label = 68; break; } else { label = 67; break; }
    case 67: 
      $k=0;
      label = 72; break;
    case 68: 
      var $375=$n;
      var $376=___gmpn_fft_best_k($375, 0);
      $k=$376;
      var $377=$k;
      var $378=1 << $377;
      var $379=((($378)-(1))|0);
      $mask=$379;
      label = 69; break;
    case 69: 
      var $381=$n;
      var $382=$mask;
      var $383=$381 & $382;
      var $384=(($383)|0)!=0;
      if ($384) { label = 70; break; } else { label = 71; break; }
    case 70: 
      var $386=$k;
      var $387=((($386)-(1))|0);
      $k=$387;
      var $388=$mask;
      var $389=$388 >> 1;
      $mask=$389;
      label = 69; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $392=$k;
      var $393=(($392)|0) >= 4;
      if ($393) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $395=$7;
      var $396=$n;
      var $397=$ap1;
      var $398=$anp;
      var $399=$bp1;
      var $400=$bnp;
      var $401=$k;
      var $402=___gmpn_mul_fft($395, $396, $397, $398, $399, $400, $401);
      var $403=$n;
      var $404=$7;
      var $405=(($404+($403<<2))|0);
      HEAP32[(($405)>>2)]=$402;
      label = 93; break;
    case 74: 
      var $407=$bp1;
      var $408=$5;
      var $409=(($407)|0)==(($408)|0);
      var $410=(($409)&1);
      var $411=(($410)|0)!=0;
      var $412=(($411)&1);
      var $413=($412);
      var $414=(($413)|0)!=0;
      if ($414) { label = 75; break; } else { label = 91; break; }
    case 75: 
      label = 76; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      var $422=$7;
      var $423=$ap1;
      var $424=$anp;
      var $425=$bp1;
      var $426=$bnp;
      var $427=___gmpn_mul($422, $423, $424, $425, $426);
      var $428=$anp;
      var $429=$bnp;
      var $430=((($428)+($429))|0);
      var $431=$n;
      var $432=((($430)-($431))|0);
      $anp=$432;
      label = 82; break;
    case 82: 
      label = 83; break;
    case 83: 
      var $435=$anp;
      var $436=$n;
      var $437=(($435)|0) > (($436)|0);
      var $438=(($437)&1);
      var $439=$anp;
      var $440=((($439)-($438))|0);
      $anp=$440;
      var $441=$7;
      var $442=$7;
      var $443=$n;
      var $444=$7;
      var $445=$n;
      var $446=(($444+($445<<2))|0);
      var $447=$anp;
      var $448=___gmpn_sub($441, $442, $443, $446, $447);
      $cy1=$448;
      var $449=$n;
      var $450=$7;
      var $451=(($450+($449<<2))|0);
      HEAP32[(($451)>>2)]=0;
      label = 84; break;
    case 84: 
      var $453=$7;
      $__p11=$453;
      var $454=$__p11;
      var $455=HEAP32[(($454)>>2)];
      var $456=$cy1;
      var $457=((($455)+($456))|0);
      $__x10=$457;
      var $458=$__x10;
      var $459=$__p11;
      HEAP32[(($459)>>2)]=$458;
      var $460=$__x10;
      var $461=$cy1;
      var $462=(($460)>>>0) < (($461)>>>0);
      if ($462) { label = 85; break; } else { label = 89; break; }
    case 85: 
      label = 86; break;
    case 86: 
      var $465=$__p11;
      var $466=(($465+4)|0);
      $__p11=$466;
      var $467=HEAP32[(($466)>>2)];
      var $468=((($467)+(1))|0);
      HEAP32[(($466)>>2)]=$468;
      var $469=(($468)|0)==0;
      if ($469) { label = 87; break; } else { label = 88; break; }
    case 87: 
      label = 86; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      label = 92; break;
    case 91: 
      var $475=$7;
      var $476=$ap1;
      var $477=$bp1;
      var $478=$n;
      var $479=$7;
      _mpn_bc_mulmod_bnp1($475, $476, $477, $478, $479);
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $482=$n;
      var $483=$7;
      var $484=(($483+($482<<2))|0);
      var $485=HEAP32[(($484)>>2)];
      var $486=$1;
      var $487=$1;
      var $488=$7;
      var $489=$n;
      var $490=___gmpn_add_n($486, $487, $488, $489);
      var $491=((($485)+($490))|0);
      $cy1=$491;
      var $492=$1;
      var $493=(($492)|0);
      var $494=HEAP32[(($493)>>2)];
      var $495=$494 & 1;
      var $496=$cy1;
      var $497=((($496)+($495))|0);
      $cy1=$497;
      var $498=$1;
      var $499=$1;
      var $500=$n;
      var $501=___gmpn_rshift($498, $499, $500, 1);
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $504=$cy1;
      var $505=$504 << 31;
      $hi=$505;
      var $506=$cy1;
      var $507=$506 >>> 1;
      $cy1=$507;
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 
      var $510=$hi;
      var $511=$n;
      var $512=((($511)-(1))|0);
      var $513=$1;
      var $514=(($513+($512<<2))|0);
      var $515=HEAP32[(($514)>>2)];
      var $516=$515 | $510;
      HEAP32[(($514)>>2)]=$516;
      label = 98; break;
    case 98: 
      label = 99; break;
    case 99: 
      label = 100; break;
    case 100: 
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $522=$1;
      $__p13=$522;
      var $523=$__p13;
      var $524=HEAP32[(($523)>>2)];
      var $525=$cy1;
      var $526=((($524)+($525))|0);
      $__x12=$526;
      var $527=$__x12;
      var $528=$__p13;
      HEAP32[(($528)>>2)]=$527;
      var $529=$__x12;
      var $530=$cy1;
      var $531=(($529)>>>0) < (($530)>>>0);
      if ($531) { label = 103; break; } else { label = 107; break; }
    case 103: 
      label = 104; break;
    case 104: 
      var $534=$__p13;
      var $535=(($534+4)|0);
      $__p13=$535;
      var $536=HEAP32[(($535)>>2)];
      var $537=((($536)+(1))|0);
      HEAP32[(($535)>>2)]=$537;
      var $538=(($537)|0)==0;
      if ($538) { label = 105; break; } else { label = 106; break; }
    case 105: 
      label = 104; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      var $543=$4;
      var $544=$6;
      var $545=((($543)+($544))|0);
      var $546=$2;
      var $547=(($545)|0) < (($546)|0);
      var $548=(($547)&1);
      var $549=(($548)|0)!=0;
      var $550=(($549)&1);
      var $551=($550);
      var $552=(($551)|0)!=0;
      if ($552) { label = 109; break; } else { label = 114; break; }
    case 109: 
      var $554=$1;
      var $555=$n;
      var $556=(($554+($555<<2))|0);
      var $557=$1;
      var $558=$7;
      var $559=$4;
      var $560=$6;
      var $561=((($559)+($560))|0);
      var $562=$n;
      var $563=((($561)-($562))|0);
      var $564=___gmpn_sub_n($556, $557, $558, $563);
      $cy1=$564;
      var $565=$n;
      var $566=$7;
      var $567=(($566+($565<<2))|0);
      var $568=HEAP32[(($567)>>2)];
      var $569=$7;
      var $570=$4;
      var $571=(($569+($570<<2))|0);
      var $572=$6;
      var $573=(($571+($572<<2))|0);
      var $574=$n;
      var $575=(((-$574))|0);
      var $576=(($573+($575<<2))|0);
      var $577=$1;
      var $578=$4;
      var $579=(($577+($578<<2))|0);
      var $580=$6;
      var $581=(($579+($580<<2))|0);
      var $582=$n;
      var $583=(((-$582))|0);
      var $584=(($581+($583<<2))|0);
      var $585=$7;
      var $586=$4;
      var $587=(($585+($586<<2))|0);
      var $588=$6;
      var $589=(($587+($588<<2))|0);
      var $590=$n;
      var $591=(((-$590))|0);
      var $592=(($589+($591<<2))|0);
      var $593=$2;
      var $594=$4;
      var $595=$6;
      var $596=((($594)+($595))|0);
      var $597=((($593)-($596))|0);
      var $598=$cy1;
      var $599=_mpn_sub_nc353($576, $584, $592, $597, $598);
      var $600=((($568)+($599))|0);
      $cy1=$600;
      label = 110; break;
    case 110: 
      label = 111; break;
    case 111: 
      var $603=$1;
      var $604=$1;
      var $605=$4;
      var $606=$6;
      var $607=((($605)+($606))|0);
      var $608=$cy1;
      var $609=___gmpn_sub_1($603, $604, $607, $608);
      $cy1=$609;
      label = 112; break;
    case 112: 
      label = 113; break;
    case 113: 
      label = 122; break;
    case 114: 
      var $613=$n;
      var $614=$7;
      var $615=(($614+($613<<2))|0);
      var $616=HEAP32[(($615)>>2)];
      var $617=$1;
      var $618=$n;
      var $619=(($617+($618<<2))|0);
      var $620=$1;
      var $621=$7;
      var $622=$n;
      var $623=___gmpn_sub_n($619, $620, $621, $622);
      var $624=((($616)+($623))|0);
      $cy1=$624;
      label = 115; break;
    case 115: 
      var $626=$1;
      $__p15=$626;
      var $627=$__p15;
      var $628=HEAP32[(($627)>>2)];
      $__x14=$628;
      var $629=$__x14;
      var $630=$cy1;
      var $631=((($629)-($630))|0);
      var $632=$__p15;
      HEAP32[(($632)>>2)]=$631;
      var $633=$__x14;
      var $634=$cy1;
      var $635=(($633)>>>0) < (($634)>>>0);
      if ($635) { label = 116; break; } else { label = 120; break; }
    case 116: 
      label = 117; break;
    case 117: 
      var $638=$__p15;
      var $639=(($638+4)|0);
      $__p15=$639;
      var $640=HEAP32[(($639)>>2)];
      var $641=((($640)-(1))|0);
      HEAP32[(($639)>>2)]=$641;
      var $642=(($640)|0)==0;
      if ($642) { label = 118; break; } else { label = 119; break; }
    case 118: 
      label = 117; break;
    case 119: 
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mulmod_bnm1["X"]=1;

function _mpn_bc_mulmod_bnp1($rp, $ap, $bp, $rn, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $cy;
      var $__x;
      var $__p;
      $1=$rp;
      $2=$ap;
      $3=$bp;
      $4=$rn;
      $5=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $8=$5;
      var $9=$2;
      var $10=$3;
      var $11=$4;
      var $12=((($11)+(1))|0);
      ___gmpn_mul_n($8, $9, $10, $12);
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $17=$4;
      var $18=($17<<1);
      var $19=$5;
      var $20=(($19+($18<<2))|0);
      var $21=HEAP32[(($20)>>2)];
      var $22=$1;
      var $23=$5;
      var $24=$5;
      var $25=$4;
      var $26=(($24+($25<<2))|0);
      var $27=$4;
      var $28=___gmpn_sub_n($22, $23, $26, $27);
      var $29=((($21)+($28))|0);
      $cy=$29;
      var $30=$4;
      var $31=$1;
      var $32=(($31+($30<<2))|0);
      HEAP32[(($32)>>2)]=0;
      label = 9; break;
    case 9: 
      var $34=$1;
      $__p=$34;
      var $35=$__p;
      var $36=HEAP32[(($35)>>2)];
      var $37=$cy;
      var $38=((($36)+($37))|0);
      $__x=$38;
      var $39=$__x;
      var $40=$__p;
      HEAP32[(($40)>>2)]=$39;
      var $41=$__x;
      var $42=$cy;
      var $43=(($41)>>>0) < (($42)>>>0);
      if ($43) { label = 10; break; } else { label = 14; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $46=$__p;
      var $47=(($46+4)|0);
      $__p=$47;
      var $48=HEAP32[(($47)>>2)];
      var $49=((($48)+(1))|0);
      HEAP32[(($47)>>2)]=$49;
      var $50=(($49)|0)==0;
      if ($50) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 11; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_bc_mulmod_bnp1["X"]=1;

function _mpn_sub_nc353($rp, $up, $vp, $n, $ci) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $co;
  $1=$rp;
  $2=$up;
  $3=$vp;
  $4=$n;
  $5=$ci;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_sub_n($6, $7, $8, $9);
  $co=$10;
  var $11=$1;
  var $12=$1;
  var $13=$4;
  var $14=$5;
  var $15=___gmpn_sub_1($11, $12, $13, $14);
  var $16=$co;
  var $17=((($16)+($15))|0);
  $co=$17;
  var $18=$co;

  return $18;
}


function ___gmpn_mulmod_bnm1_next_size($n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $nh;
      $2=$n;
      var $3=$2;
      var $4=(($3)|0) >= 16;
      if ($4) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=$2;
      $1=$6;
      label = 11; break;
    case 4: 
      var $8=$2;
      var $9=(($8)|0) >= 61;
      if ($9) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $11=$2;
      var $12=((($11)+(1))|0);
      var $13=$12 & -2;
      $1=$13;
      label = 11; break;
    case 6: 
      var $15=$2;
      var $16=(($15)|0) >= 121;
      if ($16) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $18=$2;
      var $19=((($18)+(3))|0);
      var $20=$19 & -4;
      $1=$20;
      label = 11; break;
    case 8: 
      var $22=$2;
      var $23=((($22)+(1))|0);
      var $24=$23 >> 1;
      $nh=$24;
      var $25=$nh;
      var $26=(($25)|0) >= 300;
      if ($26) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $28=$2;
      var $29=((($28)+(7))|0);
      var $30=$29 & -8;
      $1=$30;
      label = 11; break;
    case 10: 
      var $32=$nh;
      var $33=$nh;
      var $34=___gmpn_fft_best_k($33, 0);
      var $35=___gmpn_fft_next_size($32, $34);
      var $36=($35<<1);
      $1=$36;
      label = 11; break;
    case 11: 
      var $38=$1;

      return $38;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_sqrmod_bnm1($rp, $rn, $ap, $an, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $cy;
      var $__x;
      var $__p;
      var $n;
      var $cy1;
      var $hi;
      var $am1;
      var $anm;
      var $so;
      var $__x2;
      var $__p3;
      var $k;
      var $ap1;
      var $anp;
      var $__x4;
      var $__p5;
      var $mask;
      var $__x6;
      var $__p7;
      var $__x8;
      var $__p9;
      var $__x10;
      var $__p11;
      $1=$rp;
      $2=$rn;
      $3=$ap;
      $4=$an;
      $5=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $10=$2;
      var $11=$10 & 1;
      var $12=(($11)|0)!=0;
      if ($12) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $14=$2;
      var $15=(($14)|0) >= 16;
      if ($15) { label = 22; break; } else { label = 8; break; }
    case 8: 
      var $17=$4;
      var $18=$2;
      var $19=(($17)|0) < (($18)|0);
      var $20=(($19)&1);
      var $21=(($20)|0)!=0;
      var $22=(($21)&1);
      var $23=($22);
      var $24=(($23)|0)!=0;
      if ($24) { label = 9; break; } else { label = 20; break; }
    case 9: 
      var $26=$4;
      var $27=($26<<1);
      var $28=$2;
      var $29=(($27)|0) <= (($28)|0);
      var $30=(($29)&1);
      var $31=(($30)|0)!=0;
      var $32=(($31)&1);
      var $33=($32);
      var $34=(($33)|0)!=0;
      if ($34) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $36=$1;
      var $37=$3;
      var $38=$4;
      ___gmpn_sqr($36, $37, $38);
      label = 19; break;
    case 11: 
      var $40=$5;
      var $41=$3;
      var $42=$4;
      ___gmpn_sqr($40, $41, $42);
      var $43=$1;
      var $44=$5;
      var $45=$2;
      var $46=$5;
      var $47=$2;
      var $48=(($46+($47<<2))|0);
      var $49=$4;
      var $50=($49<<1);
      var $51=$2;
      var $52=((($50)-($51))|0);
      var $53=___gmpn_add($43, $44, $45, $48, $52);
      $cy=$53;
      label = 12; break;
    case 12: 
      var $55=$1;
      $__p=$55;
      var $56=$__p;
      var $57=HEAP32[(($56)>>2)];
      var $58=$cy;
      var $59=((($57)+($58))|0);
      $__x=$59;
      var $60=$__x;
      var $61=$__p;
      HEAP32[(($61)>>2)]=$60;
      var $62=$__x;
      var $63=$cy;
      var $64=(($62)>>>0) < (($63)>>>0);
      if ($64) { label = 13; break; } else { label = 17; break; }
    case 13: 
      label = 14; break;
    case 14: 
      var $67=$__p;
      var $68=(($67+4)|0);
      $__p=$68;
      var $69=HEAP32[(($68)>>2)];
      var $70=((($69)+(1))|0);
      HEAP32[(($68)>>2)]=$70;
      var $71=(($70)|0)==0;
      if ($71) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 14; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      label = 21; break;
    case 20: 
      var $78=$1;
      var $79=$3;
      var $80=$2;
      var $81=$5;
      _mpn_bc_sqrmod_bnm1($78, $79, $80, $81);
      label = 21; break;
    case 21: 
      label = 97; break;
    case 22: 
      var $84=$2;
      var $85=$84 >> 1;
      $n=$85;
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $88=$4;
      var $89=$n;
      var $90=(($88)|0) > (($89)|0);
      var $91=(($90)&1);
      var $92=(($91)|0)!=0;
      var $93=(($92)&1);
      var $94=($93);
      var $95=(($94)|0)!=0;
      if ($95) { label = 25; break; } else { label = 33; break; }
    case 25: 
      var $97=$5;
      var $98=$n;
      var $99=(($97+($98<<2))|0);
      $so=$99;
      var $100=$5;
      $am1=$100;
      var $101=$5;
      var $102=$3;
      var $103=$n;
      var $104=$3;
      var $105=$n;
      var $106=(($104+($105<<2))|0);
      var $107=$4;
      var $108=$n;
      var $109=((($107)-($108))|0);
      var $110=___gmpn_add($101, $102, $103, $106, $109);
      $cy1=$110;
      label = 26; break;
    case 26: 
      var $112=$5;
      $__p3=$112;
      var $113=$__p3;
      var $114=HEAP32[(($113)>>2)];
      var $115=$cy1;
      var $116=((($114)+($115))|0);
      $__x2=$116;
      var $117=$__x2;
      var $118=$__p3;
      HEAP32[(($118)>>2)]=$117;
      var $119=$__x2;
      var $120=$cy1;
      var $121=(($119)>>>0) < (($120)>>>0);
      if ($121) { label = 27; break; } else { label = 31; break; }
    case 27: 
      label = 28; break;
    case 28: 
      var $124=$__p3;
      var $125=(($124+4)|0);
      $__p3=$125;
      var $126=HEAP32[(($125)>>2)];
      var $127=((($126)+(1))|0);
      HEAP32[(($125)>>2)]=$127;
      var $128=(($127)|0)==0;
      if ($128) { label = 29; break; } else { label = 30; break; }
    case 29: 
      label = 28; break;
    case 30: 
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $133=$n;
      $anm=$133;
      label = 34; break;
    case 33: 
      var $135=$5;
      $so=$135;
      var $136=$3;
      $am1=$136;
      var $137=$4;
      $anm=$137;
      label = 34; break;
    case 34: 
      var $139=$1;
      var $140=$n;
      var $141=$am1;
      var $142=$anm;
      var $143=$so;
      ___gmpn_sqrmod_bnm1($139, $140, $141, $142, $143);
      var $144=$4;
      var $145=$n;
      var $146=(($144)|0) > (($145)|0);
      var $147=(($146)&1);
      var $148=(($147)|0)!=0;
      var $149=(($148)&1);
      var $150=($149);
      var $151=(($150)|0)!=0;
      if ($151) { label = 35; break; } else { label = 43; break; }
    case 35: 
      var $153=$5;
      var $154=$n;
      var $155=($154<<1);
      var $156=(($153+($155<<2))|0);
      var $157=(($156+8)|0);
      $ap1=$157;
      var $158=$5;
      var $159=$n;
      var $160=($159<<1);
      var $161=(($158+($160<<2))|0);
      var $162=(($161+8)|0);
      var $163=$3;
      var $164=$n;
      var $165=$3;
      var $166=$n;
      var $167=(($165+($166<<2))|0);
      var $168=$4;
      var $169=$n;
      var $170=((($168)-($169))|0);
      var $171=___gmpn_sub($162, $163, $164, $167, $170);
      $cy1=$171;
      var $172=$n;
      var $173=$5;
      var $174=$n;
      var $175=($174<<1);
      var $176=(($173+($175<<2))|0);
      var $177=(($176+8)|0);
      var $178=(($177+($172<<2))|0);
      HEAP32[(($178)>>2)]=0;
      label = 36; break;
    case 36: 
      var $180=$5;
      var $181=$n;
      var $182=($181<<1);
      var $183=(($180+($182<<2))|0);
      var $184=(($183+8)|0);
      $__p5=$184;
      var $185=$__p5;
      var $186=HEAP32[(($185)>>2)];
      var $187=$cy1;
      var $188=((($186)+($187))|0);
      $__x4=$188;
      var $189=$__x4;
      var $190=$__p5;
      HEAP32[(($190)>>2)]=$189;
      var $191=$__x4;
      var $192=$cy1;
      var $193=(($191)>>>0) < (($192)>>>0);
      if ($193) { label = 37; break; } else { label = 41; break; }
    case 37: 
      label = 38; break;
    case 38: 
      var $196=$__p5;
      var $197=(($196+4)|0);
      $__p5=$197;
      var $198=HEAP32[(($197)>>2)];
      var $199=((($198)+(1))|0);
      HEAP32[(($197)>>2)]=$199;
      var $200=(($199)|0)==0;
      if ($200) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 38; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $205=$n;
      var $206=$n;
      var $207=$ap1;
      var $208=(($207+($206<<2))|0);
      var $209=HEAP32[(($208)>>2)];
      var $210=((($205)+($209))|0);
      $anp=$210;
      label = 44; break;
    case 43: 
      var $212=$3;
      $ap1=$212;
      var $213=$4;
      $anp=$213;
      label = 44; break;
    case 44: 
      var $215=$n;
      var $216=(($215)|0) >= 300;
      if ($216) { label = 46; break; } else { label = 45; break; }
    case 45: 
      $k=0;
      label = 50; break;
    case 46: 
      var $219=$n;
      var $220=___gmpn_fft_best_k($219, 1);
      $k=$220;
      var $221=$k;
      var $222=1 << $221;
      var $223=((($222)-(1))|0);
      $mask=$223;
      label = 47; break;
    case 47: 
      var $225=$n;
      var $226=$mask;
      var $227=$225 & $226;
      var $228=(($227)|0)!=0;
      if ($228) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $230=$k;
      var $231=((($230)-(1))|0);
      $k=$231;
      var $232=$mask;
      var $233=$232 >> 1;
      $mask=$233;
      label = 47; break;
    case 49: 
      label = 50; break;
    case 50: 
      var $236=$k;
      var $237=(($236)|0) >= 4;
      if ($237) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $239=$5;
      var $240=$n;
      var $241=$ap1;
      var $242=$anp;
      var $243=$ap1;
      var $244=$anp;
      var $245=$k;
      var $246=___gmpn_mul_fft($239, $240, $241, $242, $243, $244, $245);
      var $247=$n;
      var $248=$5;
      var $249=(($248+($247<<2))|0);
      HEAP32[(($249)>>2)]=$246;
      label = 67; break;
    case 52: 
      var $251=$ap1;
      var $252=$3;
      var $253=(($251)|0)==(($252)|0);
      var $254=(($253)&1);
      var $255=(($254)|0)!=0;
      var $256=(($255)&1);
      var $257=($256);
      var $258=(($257)|0)!=0;
      if ($258) { label = 53; break; } else { label = 65; break; }
    case 53: 
      label = 54; break;
    case 54: 
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $264=$5;
      var $265=$3;
      var $266=$4;
      ___gmpn_sqr($264, $265, $266);
      var $267=$4;
      var $268=($267<<1);
      var $269=$n;
      var $270=((($268)-($269))|0);
      $anp=$270;
      var $271=$5;
      var $272=$5;
      var $273=$n;
      var $274=$5;
      var $275=$n;
      var $276=(($274+($275<<2))|0);
      var $277=$anp;
      var $278=___gmpn_sub($271, $272, $273, $276, $277);
      $cy1=$278;
      var $279=$n;
      var $280=$5;
      var $281=(($280+($279<<2))|0);
      HEAP32[(($281)>>2)]=0;
      label = 58; break;
    case 58: 
      var $283=$5;
      $__p7=$283;
      var $284=$__p7;
      var $285=HEAP32[(($284)>>2)];
      var $286=$cy1;
      var $287=((($285)+($286))|0);
      $__x6=$287;
      var $288=$__x6;
      var $289=$__p7;
      HEAP32[(($289)>>2)]=$288;
      var $290=$__x6;
      var $291=$cy1;
      var $292=(($290)>>>0) < (($291)>>>0);
      if ($292) { label = 59; break; } else { label = 63; break; }
    case 59: 
      label = 60; break;
    case 60: 
      var $295=$__p7;
      var $296=(($295+4)|0);
      $__p7=$296;
      var $297=HEAP32[(($296)>>2)];
      var $298=((($297)+(1))|0);
      HEAP32[(($296)>>2)]=$298;
      var $299=(($298)|0)==0;
      if ($299) { label = 61; break; } else { label = 62; break; }
    case 61: 
      label = 60; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      label = 66; break;
    case 65: 
      var $305=$5;
      var $306=$ap1;
      var $307=$n;
      var $308=$5;
      _mpn_bc_sqrmod_bnp1($305, $306, $307, $308);
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $311=$n;
      var $312=$5;
      var $313=(($312+($311<<2))|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$1;
      var $316=$1;
      var $317=$5;
      var $318=$n;
      var $319=___gmpn_add_n($315, $316, $317, $318);
      var $320=((($314)+($319))|0);
      $cy1=$320;
      var $321=$1;
      var $322=(($321)|0);
      var $323=HEAP32[(($322)>>2)];
      var $324=$323 & 1;
      var $325=$cy1;
      var $326=((($325)+($324))|0);
      $cy1=$326;
      var $327=$1;
      var $328=$1;
      var $329=$n;
      var $330=___gmpn_rshift($327, $328, $329, 1);
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      var $333=$cy1;
      var $334=$333 << 31;
      $hi=$334;
      var $335=$cy1;
      var $336=$335 >>> 1;
      $cy1=$336;
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $339=$hi;
      var $340=$n;
      var $341=((($340)-(1))|0);
      var $342=$1;
      var $343=(($342+($341<<2))|0);
      var $344=HEAP32[(($343)>>2)];
      var $345=$344 | $339;
      HEAP32[(($343)>>2)]=$345;
      label = 72; break;
    case 72: 
      label = 73; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 75; break;
    case 75: 
      label = 76; break;
    case 76: 
      var $351=$1;
      $__p9=$351;
      var $352=$__p9;
      var $353=HEAP32[(($352)>>2)];
      var $354=$cy1;
      var $355=((($353)+($354))|0);
      $__x8=$355;
      var $356=$__x8;
      var $357=$__p9;
      HEAP32[(($357)>>2)]=$356;
      var $358=$__x8;
      var $359=$cy1;
      var $360=(($358)>>>0) < (($359)>>>0);
      if ($360) { label = 77; break; } else { label = 81; break; }
    case 77: 
      label = 78; break;
    case 78: 
      var $363=$__p9;
      var $364=(($363+4)|0);
      $__p9=$364;
      var $365=HEAP32[(($364)>>2)];
      var $366=((($365)+(1))|0);
      HEAP32[(($364)>>2)]=$366;
      var $367=(($366)|0)==0;
      if ($367) { label = 79; break; } else { label = 80; break; }
    case 79: 
      label = 78; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $372=$4;
      var $373=($372<<1);
      var $374=$2;
      var $375=(($373)|0) < (($374)|0);
      var $376=(($375)&1);
      var $377=(($376)|0)!=0;
      var $378=(($377)&1);
      var $379=($378);
      var $380=(($379)|0)!=0;
      if ($380) { label = 83; break; } else { label = 88; break; }
    case 83: 
      var $382=$1;
      var $383=$n;
      var $384=(($382+($383<<2))|0);
      var $385=$1;
      var $386=$5;
      var $387=$4;
      var $388=($387<<1);
      var $389=$n;
      var $390=((($388)-($389))|0);
      var $391=___gmpn_sub_n($384, $385, $386, $390);
      $cy1=$391;
      var $392=$n;
      var $393=$5;
      var $394=(($393+($392<<2))|0);
      var $395=HEAP32[(($394)>>2)];
      var $396=$5;
      var $397=$4;
      var $398=($397<<1);
      var $399=(($396+($398<<2))|0);
      var $400=$n;
      var $401=(((-$400))|0);
      var $402=(($399+($401<<2))|0);
      var $403=$1;
      var $404=$4;
      var $405=($404<<1);
      var $406=(($403+($405<<2))|0);
      var $407=$n;
      var $408=(((-$407))|0);
      var $409=(($406+($408<<2))|0);
      var $410=$5;
      var $411=$4;
      var $412=($411<<1);
      var $413=(($410+($412<<2))|0);
      var $414=$n;
      var $415=(((-$414))|0);
      var $416=(($413+($415<<2))|0);
      var $417=$2;
      var $418=$4;
      var $419=($418<<1);
      var $420=((($417)-($419))|0);
      var $421=$cy1;
      var $422=_mpn_sub_nc358($402, $409, $416, $420, $421);
      var $423=((($395)+($422))|0);
      $cy1=$423;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $426=$1;
      var $427=$1;
      var $428=$4;
      var $429=($428<<1);
      var $430=$cy1;
      var $431=___gmpn_sub_1($426, $427, $429, $430);
      $cy1=$431;
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      label = 96; break;
    case 88: 
      var $435=$n;
      var $436=$5;
      var $437=(($436+($435<<2))|0);
      var $438=HEAP32[(($437)>>2)];
      var $439=$1;
      var $440=$n;
      var $441=(($439+($440<<2))|0);
      var $442=$1;
      var $443=$5;
      var $444=$n;
      var $445=___gmpn_sub_n($441, $442, $443, $444);
      var $446=((($438)+($445))|0);
      $cy1=$446;
      label = 89; break;
    case 89: 
      var $448=$1;
      $__p11=$448;
      var $449=$__p11;
      var $450=HEAP32[(($449)>>2)];
      $__x10=$450;
      var $451=$__x10;
      var $452=$cy1;
      var $453=((($451)-($452))|0);
      var $454=$__p11;
      HEAP32[(($454)>>2)]=$453;
      var $455=$__x10;
      var $456=$cy1;
      var $457=(($455)>>>0) < (($456)>>>0);
      if ($457) { label = 90; break; } else { label = 94; break; }
    case 90: 
      label = 91; break;
    case 91: 
      var $460=$__p11;
      var $461=(($460+4)|0);
      $__p11=$461;
      var $462=HEAP32[(($461)>>2)];
      var $463=((($462)-(1))|0);
      HEAP32[(($461)>>2)]=$463;
      var $464=(($462)|0)==0;
      if ($464) { label = 92; break; } else { label = 93; break; }
    case 92: 
      label = 91; break;
    case 93: 
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      label = 96; break;
    case 96: 
      label = 97; break;
    case 97: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sqrmod_bnm1["X"]=1;

function _mpn_bc_sqrmod_bnm1($rp, $ap, $rn, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $cy;
      var $__x;
      var $__p;
      $1=$rp;
      $2=$ap;
      $3=$rn;
      $4=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $7=$4;
      var $8=$2;
      var $9=$3;
      ___gmpn_sqr($7, $8, $9);
      var $10=$1;
      var $11=$4;
      var $12=$4;
      var $13=$3;
      var $14=(($12+($13<<2))|0);
      var $15=$3;
      var $16=___gmpn_add_n($10, $11, $14, $15);
      $cy=$16;
      label = 5; break;
    case 5: 
      var $18=$1;
      $__p=$18;
      var $19=$__p;
      var $20=HEAP32[(($19)>>2)];
      var $21=$cy;
      var $22=((($20)+($21))|0);
      $__x=$22;
      var $23=$__x;
      var $24=$__p;
      HEAP32[(($24)>>2)]=$23;
      var $25=$__x;
      var $26=$cy;
      var $27=(($25)>>>0) < (($26)>>>0);
      if ($27) { label = 6; break; } else { label = 10; break; }
    case 6: 
      label = 7; break;
    case 7: 
      var $30=$__p;
      var $31=(($30+4)|0);
      $__p=$31;
      var $32=HEAP32[(($31)>>2)];
      var $33=((($32)+(1))|0);
      HEAP32[(($31)>>2)]=$33;
      var $34=(($33)|0)==0;
      if ($34) { label = 8; break; } else { label = 9; break; }
    case 8: 
      label = 7; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_bc_sqrmod_bnm1["X"]=1;

function _mpn_bc_sqrmod_bnp1($rp, $ap, $rn, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $cy;
      var $__x;
      var $__p;
      $1=$rp;
      $2=$ap;
      $3=$rn;
      $4=$tp;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $7=$4;
      var $8=$2;
      var $9=$3;
      var $10=((($9)+(1))|0);
      ___gmpn_sqr($7, $8, $10);
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $15=$3;
      var $16=($15<<1);
      var $17=$4;
      var $18=(($17+($16<<2))|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=$1;
      var $21=$4;
      var $22=$4;
      var $23=$3;
      var $24=(($22+($23<<2))|0);
      var $25=$3;
      var $26=___gmpn_sub_n($20, $21, $24, $25);
      var $27=((($19)+($26))|0);
      $cy=$27;
      var $28=$3;
      var $29=$1;
      var $30=(($29+($28<<2))|0);
      HEAP32[(($30)>>2)]=0;
      label = 9; break;
    case 9: 
      var $32=$1;
      $__p=$32;
      var $33=$__p;
      var $34=HEAP32[(($33)>>2)];
      var $35=$cy;
      var $36=((($34)+($35))|0);
      $__x=$36;
      var $37=$__x;
      var $38=$__p;
      HEAP32[(($38)>>2)]=$37;
      var $39=$__x;
      var $40=$cy;
      var $41=(($39)>>>0) < (($40)>>>0);
      if ($41) { label = 10; break; } else { label = 14; break; }
    case 10: 
      label = 11; break;
    case 11: 
      var $44=$__p;
      var $45=(($44+4)|0);
      $__p=$45;
      var $46=HEAP32[(($45)>>2)];
      var $47=((($46)+(1))|0);
      HEAP32[(($45)>>2)]=$47;
      var $48=(($47)|0)==0;
      if ($48) { label = 12; break; } else { label = 13; break; }
    case 12: 
      label = 11; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_bc_sqrmod_bnp1["X"]=1;

function _mpn_sub_nc358($rp, $up, $vp, $n, $ci) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $co;
  $1=$rp;
  $2=$up;
  $3=$vp;
  $4=$n;
  $5=$ci;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_sub_n($6, $7, $8, $9);
  $co=$10;
  var $11=$1;
  var $12=$1;
  var $13=$4;
  var $14=$5;
  var $15=___gmpn_sub_1($11, $12, $13, $14);
  var $16=$co;
  var $17=((($16)+($15))|0);
  $co=$17;
  var $18=$co;

  return $18;
}


function ___gmpn_sqrmod_bnm1_next_size($n) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $nh;
      $2=$n;
      var $3=$2;
      var $4=(($3)|0) >= 16;
      if ($4) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=$2;
      $1=$6;
      label = 11; break;
    case 4: 
      var $8=$2;
      var $9=(($8)|0) >= 61;
      if ($9) { label = 6; break; } else { label = 5; break; }
    case 5: 
      var $11=$2;
      var $12=((($11)+(1))|0);
      var $13=$12 & -2;
      $1=$13;
      label = 11; break;
    case 6: 
      var $15=$2;
      var $16=(($15)|0) >= 121;
      if ($16) { label = 8; break; } else { label = 7; break; }
    case 7: 
      var $18=$2;
      var $19=((($18)+(3))|0);
      var $20=$19 & -4;
      $1=$20;
      label = 11; break;
    case 8: 
      var $22=$2;
      var $23=((($22)+(1))|0);
      var $24=$23 >> 1;
      $nh=$24;
      var $25=$nh;
      var $26=(($25)|0) >= 360;
      if ($26) { label = 10; break; } else { label = 9; break; }
    case 9: 
      var $28=$2;
      var $29=((($28)+(7))|0);
      var $30=$29 & -8;
      $1=$30;
      label = 11; break;
    case 10: 
      var $32=$nh;
      var $33=$nh;
      var $34=___gmpn_fft_best_k($33, 1);
      var $35=___gmpn_fft_next_size($32, $34);
      var $36=($35<<1);
      $1=$36;
      label = 11; break;
    case 11: 
      var $38=$1;

      return $38;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_sbpi1_div_qr($qp, $np, $nn, $dp, $dn, $dinv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $qh;
      var $i;
      var $n1;
      var $n0;
      var $d1;
      var $d0;
      var $cy;
      var $cy1;
      var $q;
      var $_q0;
      var $_t1;
      var $_t0;
      var $_mask;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x;
      var $__x4;
      var $__x05;
      var $__x16;
      var $__x27;
      var $__x38;
      var $__ul9;
      var $__vl10;
      var $__uh11;
      var $__vh12;
      var $__u13;
      var $__v14;
      var $__x15;
      var $__x17;
      var $__x18;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      $6=$dinv;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $13=$3;
      var $14=$2;
      var $15=(($14+($13<<2))|0);
      $2=$15;
      var $16=$2;
      var $17=$5;
      var $18=(((-$17))|0);
      var $19=(($16+($18<<2))|0);
      var $20=$4;
      var $21=$5;
      var $22=___gmpn_cmp($19, $20, $21);
      var $23=(($22)|0) >= 0;
      var $24=(($23)&1);
      $qh=$24;
      var $25=$qh;
      var $26=(($25)|0)!=0;
      if ($26) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $28=$2;
      var $29=$5;
      var $30=(((-$29))|0);
      var $31=(($28+($30<<2))|0);
      var $32=$2;
      var $33=$5;
      var $34=(((-$33))|0);
      var $35=(($32+($34<<2))|0);
      var $36=$4;
      var $37=$5;
      var $38=___gmpn_sub_n($31, $35, $36, $37);
      label = 10; break;
    case 10: 
      var $40=$3;
      var $41=$5;
      var $42=((($40)-($41))|0);
      var $43=$1;
      var $44=(($43+($42<<2))|0);
      $1=$44;
      var $45=$5;
      var $46=((($45)-(2))|0);
      $5=$46;
      var $47=$5;
      var $48=((($47)+(1))|0);
      var $49=$4;
      var $50=(($49+($48<<2))|0);
      var $51=HEAP32[(($50)>>2)];
      $d1=$51;
      var $52=$5;
      var $53=(($52)|0);
      var $54=$4;
      var $55=(($54+($53<<2))|0);
      var $56=HEAP32[(($55)>>2)];
      $d0=$56;
      var $57=$2;
      var $58=((($57)-(8))|0);
      $2=$58;
      var $59=$2;
      var $60=(($59+4)|0);
      var $61=HEAP32[(($60)>>2)];
      $n1=$61;
      var $62=$3;
      var $63=$5;
      var $64=((($63)+(2))|0);
      var $65=((($62)-($64))|0);
      $i=$65;
      label = 11; break;
    case 11: 
      var $67=$i;
      var $68=(($67)|0) > 0;
      if ($68) { label = 12; break; } else { label = 45; break; }
    case 12: 
      var $70=$2;
      var $71=((($70)-(4))|0);
      $2=$71;
      var $72=$n1;
      var $73=$d1;
      var $74=(($72)|0)==(($73)|0);
      var $75=(($74)&1);
      var $76=(($75)|0)!=0;
      var $77=(($76)&1);
      var $78=($77);
      var $79=(($78)|0)!=0;
      if ($79) { label = 13; break; } else { label = 15; break; }
    case 13: 
      var $81=$2;
      var $82=(($81+4)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=$d0;
      var $85=(($83)|0)==(($84)|0);
      if ($85) { label = 14; break; } else { label = 15; break; }
    case 14: 
      $q=-1;
      var $87=$2;
      var $88=$5;
      var $89=(((-$88))|0);
      var $90=(($87+($89<<2))|0);
      var $91=$4;
      var $92=$5;
      var $93=((($92)+(2))|0);
      var $94=$q;
      var $95=___gmpn_submul_1($90, $91, $93, $94);
      var $96=$2;
      var $97=(($96+4)|0);
      var $98=HEAP32[(($97)>>2)];
      $n1=$98;
      label = 43; break;
    case 15: 
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $102=$n1;
      $__u=$102;
      var $103=$6;
      $__v=$103;
      var $104=$__u;
      var $105=$104 & 65535;
      $__ul=$105;
      var $106=$__u;
      var $107=$106 >>> 16;
      $__uh=$107;
      var $108=$__v;
      var $109=$108 & 65535;
      $__vl=$109;
      var $110=$__v;
      var $111=$110 >>> 16;
      $__vh=$111;
      var $112=$__ul;
      var $113=$__vl;
      var $114=Math.imul($112,$113);
      $__x0=$114;
      var $115=$__ul;
      var $116=$__vh;
      var $117=Math.imul($115,$116);
      $__x1=$117;
      var $118=$__uh;
      var $119=$__vl;
      var $120=Math.imul($118,$119);
      $__x2=$120;
      var $121=$__uh;
      var $122=$__vh;
      var $123=Math.imul($121,$122);
      $__x3=$123;
      var $124=$__x0;
      var $125=$124 >>> 16;
      var $126=$__x1;
      var $127=((($126)+($125))|0);
      $__x1=$127;
      var $128=$__x2;
      var $129=$__x1;
      var $130=((($129)+($128))|0);
      $__x1=$130;
      var $131=$__x1;
      var $132=$__x2;
      var $133=(($131)>>>0) < (($132)>>>0);
      if ($133) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $135=$__x3;
      var $136=((($135)+(65536))|0);
      $__x3=$136;
      label = 19; break;
    case 19: 
      var $138=$__x3;
      var $139=$__x1;
      var $140=$139 >>> 16;
      var $141=((($138)+($140))|0);
      $q=$141;
      var $142=$__x1;
      var $143=$142 << 16;
      var $144=$__x0;
      var $145=$144 & 65535;
      var $146=((($143)+($145))|0);
      $_q0=$146;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $149=$_q0;
      var $150=$2;
      var $151=(($150+4)|0);
      var $152=HEAP32[(($151)>>2)];
      var $153=((($149)+($152))|0);
      $__x=$153;
      var $154=$q;
      var $155=$n1;
      var $156=((($154)+($155))|0);
      var $157=$__x;
      var $158=$_q0;
      var $159=(($157)>>>0) < (($158)>>>0);
      var $160=(($159)&1);
      var $161=((($156)+($160))|0);
      $q=$161;
      var $162=$__x;
      $_q0=$162;
      label = 22; break;
    case 22: 
      var $164=$2;
      var $165=(($164+4)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=$d1;
      var $168=$q;
      var $169=Math.imul($167,$168);
      var $170=((($166)-($169))|0);
      $n1=$170;
      label = 23; break;
    case 23: 
      var $172=$2;
      var $173=(($172)|0);
      var $174=HEAP32[(($173)>>2)];
      var $175=$d0;
      var $176=((($174)-($175))|0);
      $__x4=$176;
      var $177=$n1;
      var $178=$d1;
      var $179=((($177)-($178))|0);
      var $180=$2;
      var $181=(($180)|0);
      var $182=HEAP32[(($181)>>2)];
      var $183=$d0;
      var $184=(($182)>>>0) < (($183)>>>0);
      var $185=(($184)&1);
      var $186=((($179)-($185))|0);
      $n1=$186;
      var $187=$__x4;
      $n0=$187;
      label = 24; break;
    case 24: 
      label = 25; break;
    case 25: 
      var $190=$d0;
      $__u13=$190;
      var $191=$q;
      $__v14=$191;
      var $192=$__u13;
      var $193=$192 & 65535;
      $__ul9=$193;
      var $194=$__u13;
      var $195=$194 >>> 16;
      $__uh11=$195;
      var $196=$__v14;
      var $197=$196 & 65535;
      $__vl10=$197;
      var $198=$__v14;
      var $199=$198 >>> 16;
      $__vh12=$199;
      var $200=$__ul9;
      var $201=$__vl10;
      var $202=Math.imul($200,$201);
      $__x05=$202;
      var $203=$__ul9;
      var $204=$__vh12;
      var $205=Math.imul($203,$204);
      $__x16=$205;
      var $206=$__uh11;
      var $207=$__vl10;
      var $208=Math.imul($206,$207);
      $__x27=$208;
      var $209=$__uh11;
      var $210=$__vh12;
      var $211=Math.imul($209,$210);
      $__x38=$211;
      var $212=$__x05;
      var $213=$212 >>> 16;
      var $214=$__x16;
      var $215=((($214)+($213))|0);
      $__x16=$215;
      var $216=$__x27;
      var $217=$__x16;
      var $218=((($217)+($216))|0);
      $__x16=$218;
      var $219=$__x16;
      var $220=$__x27;
      var $221=(($219)>>>0) < (($220)>>>0);
      if ($221) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $223=$__x38;
      var $224=((($223)+(65536))|0);
      $__x38=$224;
      label = 27; break;
    case 27: 
      var $226=$__x38;
      var $227=$__x16;
      var $228=$227 >>> 16;
      var $229=((($226)+($228))|0);
      $_t1=$229;
      var $230=$__x16;
      var $231=$230 << 16;
      var $232=$__x05;
      var $233=$232 & 65535;
      var $234=((($231)+($233))|0);
      $_t0=$234;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $237=$n0;
      var $238=$_t0;
      var $239=((($237)-($238))|0);
      $__x15=$239;
      var $240=$n1;
      var $241=$_t1;
      var $242=((($240)-($241))|0);
      var $243=$n0;
      var $244=$_t0;
      var $245=(($243)>>>0) < (($244)>>>0);
      var $246=(($245)&1);
      var $247=((($242)-($246))|0);
      $n1=$247;
      var $248=$__x15;
      $n0=$248;
      label = 30; break;
    case 30: 
      var $250=$q;
      var $251=((($250)+(1))|0);
      $q=$251;
      var $252=$n1;
      var $253=$_q0;
      var $254=(($252)>>>0) >= (($253)>>>0);
      var $255=(($254)&1);
      var $256=(((-$255))|0);
      $_mask=$256;
      var $257=$_mask;
      var $258=$q;
      var $259=((($258)+($257))|0);
      $q=$259;
      label = 31; break;
    case 31: 
      var $261=$n0;
      var $262=$_mask;
      var $263=$d0;
      var $264=$262 & $263;
      var $265=((($261)+($264))|0);
      $__x17=$265;
      var $266=$n1;
      var $267=$_mask;
      var $268=$d1;
      var $269=$267 & $268;
      var $270=((($266)+($269))|0);
      var $271=$__x17;
      var $272=$n0;
      var $273=(($271)>>>0) < (($272)>>>0);
      var $274=(($273)&1);
      var $275=((($270)+($274))|0);
      $n1=$275;
      var $276=$__x17;
      $n0=$276;
      label = 32; break;
    case 32: 
      var $278=$n1;
      var $279=$d1;
      var $280=(($278)>>>0) >= (($279)>>>0);
      var $281=(($280)&1);
      var $282=(($281)|0)!=0;
      var $283=(($282)&1);
      var $284=($283);
      var $285=(($284)|0)!=0;
      if ($285) { label = 33; break; } else { label = 39; break; }
    case 33: 
      var $287=$n1;
      var $288=$d1;
      var $289=(($287)>>>0) > (($288)>>>0);
      if ($289) { label = 35; break; } else { label = 34; break; }
    case 34: 
      var $291=$n0;
      var $292=$d0;
      var $293=(($291)>>>0) >= (($292)>>>0);
      if ($293) { label = 35; break; } else { label = 38; break; }
    case 35: 
      var $295=$q;
      var $296=((($295)+(1))|0);
      $q=$296;
      label = 36; break;
    case 36: 
      var $298=$n0;
      var $299=$d0;
      var $300=((($298)-($299))|0);
      $__x18=$300;
      var $301=$n1;
      var $302=$d1;
      var $303=((($301)-($302))|0);
      var $304=$n0;
      var $305=$d0;
      var $306=(($304)>>>0) < (($305)>>>0);
      var $307=(($306)&1);
      var $308=((($303)-($307))|0);
      $n1=$308;
      var $309=$__x18;
      $n0=$309;
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      var $314=$2;
      var $315=$5;
      var $316=(((-$315))|0);
      var $317=(($314+($316<<2))|0);
      var $318=$4;
      var $319=$5;
      var $320=$q;
      var $321=___gmpn_submul_1($317, $318, $319, $320);
      $cy=$321;
      var $322=$n0;
      var $323=$cy;
      var $324=(($322)>>>0) < (($323)>>>0);
      var $325=(($324)&1);
      $cy1=$325;
      var $326=$n0;
      var $327=$cy;
      var $328=((($326)-($327))|0);
      $n0=$328;
      var $329=$n1;
      var $330=$cy1;
      var $331=(($329)>>>0) < (($330)>>>0);
      var $332=(($331)&1);
      $cy=$332;
      var $333=$n1;
      var $334=$cy1;
      var $335=((($333)-($334))|0);
      $n1=$335;
      var $336=$n0;
      var $337=$2;
      var $338=(($337)|0);
      HEAP32[(($338)>>2)]=$336;
      var $339=$cy;
      var $340=(($339)|0)!=0;
      var $341=(($340)&1);
      var $342=(($341)|0)!=0;
      var $343=(($342)&1);
      var $344=($343);
      var $345=(($344)|0)!=0;
      if ($345) { label = 41; break; } else { label = 42; break; }
    case 41: 
      var $347=$d1;
      var $348=$2;
      var $349=$5;
      var $350=(((-$349))|0);
      var $351=(($348+($350<<2))|0);
      var $352=$2;
      var $353=$5;
      var $354=(((-$353))|0);
      var $355=(($352+($354<<2))|0);
      var $356=$4;
      var $357=$5;
      var $358=((($357)+(1))|0);
      var $359=___gmpn_add_n($351, $355, $356, $358);
      var $360=((($347)+($359))|0);
      var $361=$n1;
      var $362=((($361)+($360))|0);
      $n1=$362;
      var $363=$q;
      var $364=((($363)-(1))|0);
      $q=$364;
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $367=$q;
      var $368=$1;
      var $369=((($368)-(4))|0);
      $1=$369;
      HEAP32[(($369)>>2)]=$367;
      label = 44; break;
    case 44: 
      var $371=$i;
      var $372=((($371)-(1))|0);
      $i=$372;
      label = 11; break;
    case 45: 
      var $374=$n1;
      var $375=$2;
      var $376=(($375+4)|0);
      HEAP32[(($376)>>2)]=$374;
      var $377=$qh;

      return $377;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sbpi1_div_qr["X"]=1;

function ___gmpn_sbpi1_divappr_q($qp, $np, $nn, $dp, $dn, $dinv) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $qh;
      var $qn;
      var $i;
      var $n1;
      var $n0;
      var $d1;
      var $d0;
      var $cy;
      var $cy1;
      var $q;
      var $flag;
      var $_q0;
      var $_t1;
      var $_t0;
      var $_mask;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x;
      var $__x4;
      var $__x05;
      var $__x16;
      var $__x27;
      var $__x38;
      var $__ul9;
      var $__vl10;
      var $__uh11;
      var $__vh12;
      var $__u13;
      var $__v14;
      var $__x15;
      var $__x17;
      var $__x18;
      var $_q019;
      var $_t120;
      var $_t021;
      var $_mask22;
      var $__x023;
      var $__x124;
      var $__x225;
      var $__x326;
      var $__ul27;
      var $__vl28;
      var $__uh29;
      var $__vh30;
      var $__u31;
      var $__v32;
      var $__x33;
      var $__x34;
      var $__x035;
      var $__x136;
      var $__x237;
      var $__x338;
      var $__ul39;
      var $__vl40;
      var $__uh41;
      var $__vh42;
      var $__u43;
      var $__v44;
      var $__x45;
      var $__x46;
      var $__x47;
      var $__x48;
      var $_q049;
      var $_t150;
      var $_t051;
      var $_mask52;
      var $__x053;
      var $__x154;
      var $__x255;
      var $__x356;
      var $__ul57;
      var $__vl58;
      var $__uh59;
      var $__vh60;
      var $__u61;
      var $__v62;
      var $__x63;
      var $__x64;
      var $__x065;
      var $__x166;
      var $__x267;
      var $__x368;
      var $__ul69;
      var $__vl70;
      var $__uh71;
      var $__vh72;
      var $__u73;
      var $__v74;
      var $__x75;
      var $__x76;
      var $__x77;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      $6=$dinv;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $13=$3;
      var $14=$2;
      var $15=(($14+($13<<2))|0);
      $2=$15;
      var $16=$3;
      var $17=$5;
      var $18=((($16)-($17))|0);
      $qn=$18;
      var $19=$qn;
      var $20=((($19)+(1))|0);
      var $21=$5;
      var $22=(($20)|0) < (($21)|0);
      if ($22) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $24=$5;
      var $25=$qn;
      var $26=((($25)+(1))|0);
      var $27=((($24)-($26))|0);
      var $28=$4;
      var $29=(($28+($27<<2))|0);
      $4=$29;
      var $30=$qn;
      var $31=((($30)+(1))|0);
      $5=$31;
      label = 10; break;
    case 10: 
      var $33=$2;
      var $34=$5;
      var $35=(((-$34))|0);
      var $36=(($33+($35<<2))|0);
      var $37=$4;
      var $38=$5;
      var $39=___gmpn_cmp($36, $37, $38);
      var $40=(($39)|0) >= 0;
      var $41=(($40)&1);
      $qh=$41;
      var $42=$qh;
      var $43=(($42)|0)!=0;
      if ($43) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $45=$2;
      var $46=$5;
      var $47=(((-$46))|0);
      var $48=(($45+($47<<2))|0);
      var $49=$2;
      var $50=$5;
      var $51=(((-$50))|0);
      var $52=(($49+($51<<2))|0);
      var $53=$4;
      var $54=$5;
      var $55=___gmpn_sub_n($48, $52, $53, $54);
      label = 12; break;
    case 12: 
      var $57=$qn;
      var $58=$1;
      var $59=(($58+($57<<2))|0);
      $1=$59;
      var $60=$5;
      var $61=((($60)-(2))|0);
      $5=$61;
      var $62=$5;
      var $63=((($62)+(1))|0);
      var $64=$4;
      var $65=(($64+($63<<2))|0);
      var $66=HEAP32[(($65)>>2)];
      $d1=$66;
      var $67=$5;
      var $68=(($67)|0);
      var $69=$4;
      var $70=(($69+($68<<2))|0);
      var $71=HEAP32[(($70)>>2)];
      $d0=$71;
      var $72=$2;
      var $73=((($72)-(8))|0);
      $2=$73;
      var $74=$2;
      var $75=(($74+4)|0);
      var $76=HEAP32[(($75)>>2)];
      $n1=$76;
      var $77=$qn;
      var $78=$5;
      var $79=((($78)+(2))|0);
      var $80=((($77)-($79))|0);
      $i=$80;
      label = 13; break;
    case 13: 
      var $82=$i;
      var $83=(($82)|0) >= 0;
      if ($83) { label = 14; break; } else { label = 47; break; }
    case 14: 
      var $85=$2;
      var $86=((($85)-(4))|0);
      $2=$86;
      var $87=$n1;
      var $88=$d1;
      var $89=(($87)|0)==(($88)|0);
      var $90=(($89)&1);
      var $91=(($90)|0)!=0;
      var $92=(($91)&1);
      var $93=($92);
      var $94=(($93)|0)!=0;
      if ($94) { label = 15; break; } else { label = 17; break; }
    case 15: 
      var $96=$2;
      var $97=(($96+4)|0);
      var $98=HEAP32[(($97)>>2)];
      var $99=$d0;
      var $100=(($98)|0)==(($99)|0);
      if ($100) { label = 16; break; } else { label = 17; break; }
    case 16: 
      $q=-1;
      var $102=$2;
      var $103=$5;
      var $104=(((-$103))|0);
      var $105=(($102+($104<<2))|0);
      var $106=$4;
      var $107=$5;
      var $108=((($107)+(2))|0);
      var $109=$q;
      var $110=___gmpn_submul_1($105, $106, $108, $109);
      var $111=$2;
      var $112=(($111+4)|0);
      var $113=HEAP32[(($112)>>2)];
      $n1=$113;
      label = 45; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $117=$n1;
      $__u=$117;
      var $118=$6;
      $__v=$118;
      var $119=$__u;
      var $120=$119 & 65535;
      $__ul=$120;
      var $121=$__u;
      var $122=$121 >>> 16;
      $__uh=$122;
      var $123=$__v;
      var $124=$123 & 65535;
      $__vl=$124;
      var $125=$__v;
      var $126=$125 >>> 16;
      $__vh=$126;
      var $127=$__ul;
      var $128=$__vl;
      var $129=Math.imul($127,$128);
      $__x0=$129;
      var $130=$__ul;
      var $131=$__vh;
      var $132=Math.imul($130,$131);
      $__x1=$132;
      var $133=$__uh;
      var $134=$__vl;
      var $135=Math.imul($133,$134);
      $__x2=$135;
      var $136=$__uh;
      var $137=$__vh;
      var $138=Math.imul($136,$137);
      $__x3=$138;
      var $139=$__x0;
      var $140=$139 >>> 16;
      var $141=$__x1;
      var $142=((($141)+($140))|0);
      $__x1=$142;
      var $143=$__x2;
      var $144=$__x1;
      var $145=((($144)+($143))|0);
      $__x1=$145;
      var $146=$__x1;
      var $147=$__x2;
      var $148=(($146)>>>0) < (($147)>>>0);
      if ($148) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $150=$__x3;
      var $151=((($150)+(65536))|0);
      $__x3=$151;
      label = 21; break;
    case 21: 
      var $153=$__x3;
      var $154=$__x1;
      var $155=$154 >>> 16;
      var $156=((($153)+($155))|0);
      $q=$156;
      var $157=$__x1;
      var $158=$157 << 16;
      var $159=$__x0;
      var $160=$159 & 65535;
      var $161=((($158)+($160))|0);
      $_q0=$161;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      var $164=$_q0;
      var $165=$2;
      var $166=(($165+4)|0);
      var $167=HEAP32[(($166)>>2)];
      var $168=((($164)+($167))|0);
      $__x=$168;
      var $169=$q;
      var $170=$n1;
      var $171=((($169)+($170))|0);
      var $172=$__x;
      var $173=$_q0;
      var $174=(($172)>>>0) < (($173)>>>0);
      var $175=(($174)&1);
      var $176=((($171)+($175))|0);
      $q=$176;
      var $177=$__x;
      $_q0=$177;
      label = 24; break;
    case 24: 
      var $179=$2;
      var $180=(($179+4)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=$d1;
      var $183=$q;
      var $184=Math.imul($182,$183);
      var $185=((($181)-($184))|0);
      $n1=$185;
      label = 25; break;
    case 25: 
      var $187=$2;
      var $188=(($187)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$d0;
      var $191=((($189)-($190))|0);
      $__x4=$191;
      var $192=$n1;
      var $193=$d1;
      var $194=((($192)-($193))|0);
      var $195=$2;
      var $196=(($195)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=$d0;
      var $199=(($197)>>>0) < (($198)>>>0);
      var $200=(($199)&1);
      var $201=((($194)-($200))|0);
      $n1=$201;
      var $202=$__x4;
      $n0=$202;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $205=$d0;
      $__u13=$205;
      var $206=$q;
      $__v14=$206;
      var $207=$__u13;
      var $208=$207 & 65535;
      $__ul9=$208;
      var $209=$__u13;
      var $210=$209 >>> 16;
      $__uh11=$210;
      var $211=$__v14;
      var $212=$211 & 65535;
      $__vl10=$212;
      var $213=$__v14;
      var $214=$213 >>> 16;
      $__vh12=$214;
      var $215=$__ul9;
      var $216=$__vl10;
      var $217=Math.imul($215,$216);
      $__x05=$217;
      var $218=$__ul9;
      var $219=$__vh12;
      var $220=Math.imul($218,$219);
      $__x16=$220;
      var $221=$__uh11;
      var $222=$__vl10;
      var $223=Math.imul($221,$222);
      $__x27=$223;
      var $224=$__uh11;
      var $225=$__vh12;
      var $226=Math.imul($224,$225);
      $__x38=$226;
      var $227=$__x05;
      var $228=$227 >>> 16;
      var $229=$__x16;
      var $230=((($229)+($228))|0);
      $__x16=$230;
      var $231=$__x27;
      var $232=$__x16;
      var $233=((($232)+($231))|0);
      $__x16=$233;
      var $234=$__x16;
      var $235=$__x27;
      var $236=(($234)>>>0) < (($235)>>>0);
      if ($236) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $238=$__x38;
      var $239=((($238)+(65536))|0);
      $__x38=$239;
      label = 29; break;
    case 29: 
      var $241=$__x38;
      var $242=$__x16;
      var $243=$242 >>> 16;
      var $244=((($241)+($243))|0);
      $_t1=$244;
      var $245=$__x16;
      var $246=$245 << 16;
      var $247=$__x05;
      var $248=$247 & 65535;
      var $249=((($246)+($248))|0);
      $_t0=$249;
      label = 30; break;
    case 30: 
      label = 31; break;
    case 31: 
      var $252=$n0;
      var $253=$_t0;
      var $254=((($252)-($253))|0);
      $__x15=$254;
      var $255=$n1;
      var $256=$_t1;
      var $257=((($255)-($256))|0);
      var $258=$n0;
      var $259=$_t0;
      var $260=(($258)>>>0) < (($259)>>>0);
      var $261=(($260)&1);
      var $262=((($257)-($261))|0);
      $n1=$262;
      var $263=$__x15;
      $n0=$263;
      label = 32; break;
    case 32: 
      var $265=$q;
      var $266=((($265)+(1))|0);
      $q=$266;
      var $267=$n1;
      var $268=$_q0;
      var $269=(($267)>>>0) >= (($268)>>>0);
      var $270=(($269)&1);
      var $271=(((-$270))|0);
      $_mask=$271;
      var $272=$_mask;
      var $273=$q;
      var $274=((($273)+($272))|0);
      $q=$274;
      label = 33; break;
    case 33: 
      var $276=$n0;
      var $277=$_mask;
      var $278=$d0;
      var $279=$277 & $278;
      var $280=((($276)+($279))|0);
      $__x17=$280;
      var $281=$n1;
      var $282=$_mask;
      var $283=$d1;
      var $284=$282 & $283;
      var $285=((($281)+($284))|0);
      var $286=$__x17;
      var $287=$n0;
      var $288=(($286)>>>0) < (($287)>>>0);
      var $289=(($288)&1);
      var $290=((($285)+($289))|0);
      $n1=$290;
      var $291=$__x17;
      $n0=$291;
      label = 34; break;
    case 34: 
      var $293=$n1;
      var $294=$d1;
      var $295=(($293)>>>0) >= (($294)>>>0);
      var $296=(($295)&1);
      var $297=(($296)|0)!=0;
      var $298=(($297)&1);
      var $299=($298);
      var $300=(($299)|0)!=0;
      if ($300) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $302=$n1;
      var $303=$d1;
      var $304=(($302)>>>0) > (($303)>>>0);
      if ($304) { label = 37; break; } else { label = 36; break; }
    case 36: 
      var $306=$n0;
      var $307=$d0;
      var $308=(($306)>>>0) >= (($307)>>>0);
      if ($308) { label = 37; break; } else { label = 40; break; }
    case 37: 
      var $310=$q;
      var $311=((($310)+(1))|0);
      $q=$311;
      label = 38; break;
    case 38: 
      var $313=$n0;
      var $314=$d0;
      var $315=((($313)-($314))|0);
      $__x18=$315;
      var $316=$n1;
      var $317=$d1;
      var $318=((($316)-($317))|0);
      var $319=$n0;
      var $320=$d0;
      var $321=(($319)>>>0) < (($320)>>>0);
      var $322=(($321)&1);
      var $323=((($318)-($322))|0);
      $n1=$323;
      var $324=$__x18;
      $n0=$324;
      label = 39; break;
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $329=$2;
      var $330=$5;
      var $331=(((-$330))|0);
      var $332=(($329+($331<<2))|0);
      var $333=$4;
      var $334=$5;
      var $335=$q;
      var $336=___gmpn_submul_1($332, $333, $334, $335);
      $cy=$336;
      var $337=$n0;
      var $338=$cy;
      var $339=(($337)>>>0) < (($338)>>>0);
      var $340=(($339)&1);
      $cy1=$340;
      var $341=$n0;
      var $342=$cy;
      var $343=((($341)-($342))|0);
      $n0=$343;
      var $344=$n1;
      var $345=$cy1;
      var $346=(($344)>>>0) < (($345)>>>0);
      var $347=(($346)&1);
      $cy=$347;
      var $348=$cy1;
      var $349=$n1;
      var $350=((($349)-($348))|0);
      $n1=$350;
      var $351=$n0;
      var $352=$2;
      var $353=(($352)|0);
      HEAP32[(($353)>>2)]=$351;
      var $354=$cy;
      var $355=(($354)|0)!=0;
      var $356=(($355)&1);
      var $357=(($356)|0)!=0;
      var $358=(($357)&1);
      var $359=($358);
      var $360=(($359)|0)!=0;
      if ($360) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $362=$d1;
      var $363=$2;
      var $364=$5;
      var $365=(((-$364))|0);
      var $366=(($363+($365<<2))|0);
      var $367=$2;
      var $368=$5;
      var $369=(((-$368))|0);
      var $370=(($367+($369<<2))|0);
      var $371=$4;
      var $372=$5;
      var $373=((($372)+(1))|0);
      var $374=___gmpn_add_n($366, $370, $371, $373);
      var $375=((($362)+($374))|0);
      var $376=$n1;
      var $377=((($376)+($375))|0);
      $n1=$377;
      var $378=$q;
      var $379=((($378)-(1))|0);
      $q=$379;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $382=$q;
      var $383=$1;
      var $384=((($383)-(4))|0);
      $1=$384;
      HEAP32[(($384)>>2)]=$382;
      label = 46; break;
    case 46: 
      var $386=$i;
      var $387=((($386)-(1))|0);
      $i=$387;
      label = 13; break;
    case 47: 
      $flag=-1;
      var $389=$5;
      var $390=(($389)|0) >= 0;
      if ($390) { label = 48; break; } else { label = 123; break; }
    case 48: 
      var $392=$5;
      $i=$392;
      label = 49; break;
    case 49: 
      var $394=$i;
      var $395=(($394)|0) > 0;
      if ($395) { label = 50; break; } else { label = 87; break; }
    case 50: 
      var $397=$2;
      var $398=((($397)-(4))|0);
      $2=$398;
      var $399=$n1;
      var $400=$d1;
      var $401=$flag;
      var $402=$400 & $401;
      var $403=(($399)>>>0) >= (($402)>>>0);
      var $404=(($403)&1);
      var $405=(($404)|0)!=0;
      var $406=(($405)&1);
      var $407=($406);
      var $408=(($407)|0)!=0;
      if ($408) { label = 51; break; } else { label = 57; break; }
    case 51: 
      $q=-1;
      var $410=$2;
      var $411=$5;
      var $412=(((-$411))|0);
      var $413=(($410+($412<<2))|0);
      var $414=$4;
      var $415=$5;
      var $416=((($415)+(2))|0);
      var $417=$q;
      var $418=___gmpn_submul_1($413, $414, $416, $417);
      $cy=$418;
      var $419=$n1;
      var $420=$cy;
      var $421=(($419)|0)!=(($420)|0);
      var $422=(($421)&1);
      var $423=(($422)|0)!=0;
      var $424=(($423)&1);
      var $425=($424);
      var $426=(($425)|0)!=0;
      if ($426) { label = 52; break; } else { label = 56; break; }
    case 52: 
      var $428=$n1;
      var $429=$cy;
      var $430=$flag;
      var $431=$429 & $430;
      var $432=(($428)>>>0) < (($431)>>>0);
      if ($432) { label = 53; break; } else { label = 54; break; }
    case 53: 
      var $434=$q;
      var $435=((($434)-(1))|0);
      $q=$435;
      var $436=$2;
      var $437=$5;
      var $438=(((-$437))|0);
      var $439=(($436+($438<<2))|0);
      var $440=$2;
      var $441=$5;
      var $442=(((-$441))|0);
      var $443=(($440+($442<<2))|0);
      var $444=$4;
      var $445=$5;
      var $446=((($445)+(2))|0);
      var $447=___gmpn_add_n($439, $443, $444, $446);
      label = 55; break;
    case 54: 
      $flag=0;
      label = 55; break;
    case 55: 
      label = 56; break;
    case 56: 
      var $451=$2;
      var $452=(($451+4)|0);
      var $453=HEAP32[(($452)>>2)];
      $n1=$453;
      label = 85; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $457=$n1;
      $__u31=$457;
      var $458=$6;
      $__v32=$458;
      var $459=$__u31;
      var $460=$459 & 65535;
      $__ul27=$460;
      var $461=$__u31;
      var $462=$461 >>> 16;
      $__uh29=$462;
      var $463=$__v32;
      var $464=$463 & 65535;
      $__vl28=$464;
      var $465=$__v32;
      var $466=$465 >>> 16;
      $__vh30=$466;
      var $467=$__ul27;
      var $468=$__vl28;
      var $469=Math.imul($467,$468);
      $__x023=$469;
      var $470=$__ul27;
      var $471=$__vh30;
      var $472=Math.imul($470,$471);
      $__x124=$472;
      var $473=$__uh29;
      var $474=$__vl28;
      var $475=Math.imul($473,$474);
      $__x225=$475;
      var $476=$__uh29;
      var $477=$__vh30;
      var $478=Math.imul($476,$477);
      $__x326=$478;
      var $479=$__x023;
      var $480=$479 >>> 16;
      var $481=$__x124;
      var $482=((($481)+($480))|0);
      $__x124=$482;
      var $483=$__x225;
      var $484=$__x124;
      var $485=((($484)+($483))|0);
      $__x124=$485;
      var $486=$__x124;
      var $487=$__x225;
      var $488=(($486)>>>0) < (($487)>>>0);
      if ($488) { label = 60; break; } else { label = 61; break; }
    case 60: 
      var $490=$__x326;
      var $491=((($490)+(65536))|0);
      $__x326=$491;
      label = 61; break;
    case 61: 
      var $493=$__x326;
      var $494=$__x124;
      var $495=$494 >>> 16;
      var $496=((($493)+($495))|0);
      $q=$496;
      var $497=$__x124;
      var $498=$497 << 16;
      var $499=$__x023;
      var $500=$499 & 65535;
      var $501=((($498)+($500))|0);
      $_q019=$501;
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      var $504=$_q019;
      var $505=$2;
      var $506=(($505+4)|0);
      var $507=HEAP32[(($506)>>2)];
      var $508=((($504)+($507))|0);
      $__x33=$508;
      var $509=$q;
      var $510=$n1;
      var $511=((($509)+($510))|0);
      var $512=$__x33;
      var $513=$_q019;
      var $514=(($512)>>>0) < (($513)>>>0);
      var $515=(($514)&1);
      var $516=((($511)+($515))|0);
      $q=$516;
      var $517=$__x33;
      $_q019=$517;
      label = 64; break;
    case 64: 
      var $519=$2;
      var $520=(($519+4)|0);
      var $521=HEAP32[(($520)>>2)];
      var $522=$d1;
      var $523=$q;
      var $524=Math.imul($522,$523);
      var $525=((($521)-($524))|0);
      $n1=$525;
      label = 65; break;
    case 65: 
      var $527=$2;
      var $528=(($527)|0);
      var $529=HEAP32[(($528)>>2)];
      var $530=$d0;
      var $531=((($529)-($530))|0);
      $__x34=$531;
      var $532=$n1;
      var $533=$d1;
      var $534=((($532)-($533))|0);
      var $535=$2;
      var $536=(($535)|0);
      var $537=HEAP32[(($536)>>2)];
      var $538=$d0;
      var $539=(($537)>>>0) < (($538)>>>0);
      var $540=(($539)&1);
      var $541=((($534)-($540))|0);
      $n1=$541;
      var $542=$__x34;
      $n0=$542;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $545=$d0;
      $__u43=$545;
      var $546=$q;
      $__v44=$546;
      var $547=$__u43;
      var $548=$547 & 65535;
      $__ul39=$548;
      var $549=$__u43;
      var $550=$549 >>> 16;
      $__uh41=$550;
      var $551=$__v44;
      var $552=$551 & 65535;
      $__vl40=$552;
      var $553=$__v44;
      var $554=$553 >>> 16;
      $__vh42=$554;
      var $555=$__ul39;
      var $556=$__vl40;
      var $557=Math.imul($555,$556);
      $__x035=$557;
      var $558=$__ul39;
      var $559=$__vh42;
      var $560=Math.imul($558,$559);
      $__x136=$560;
      var $561=$__uh41;
      var $562=$__vl40;
      var $563=Math.imul($561,$562);
      $__x237=$563;
      var $564=$__uh41;
      var $565=$__vh42;
      var $566=Math.imul($564,$565);
      $__x338=$566;
      var $567=$__x035;
      var $568=$567 >>> 16;
      var $569=$__x136;
      var $570=((($569)+($568))|0);
      $__x136=$570;
      var $571=$__x237;
      var $572=$__x136;
      var $573=((($572)+($571))|0);
      $__x136=$573;
      var $574=$__x136;
      var $575=$__x237;
      var $576=(($574)>>>0) < (($575)>>>0);
      if ($576) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $578=$__x338;
      var $579=((($578)+(65536))|0);
      $__x338=$579;
      label = 69; break;
    case 69: 
      var $581=$__x338;
      var $582=$__x136;
      var $583=$582 >>> 16;
      var $584=((($581)+($583))|0);
      $_t120=$584;
      var $585=$__x136;
      var $586=$585 << 16;
      var $587=$__x035;
      var $588=$587 & 65535;
      var $589=((($586)+($588))|0);
      $_t021=$589;
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $592=$n0;
      var $593=$_t021;
      var $594=((($592)-($593))|0);
      $__x45=$594;
      var $595=$n1;
      var $596=$_t120;
      var $597=((($595)-($596))|0);
      var $598=$n0;
      var $599=$_t021;
      var $600=(($598)>>>0) < (($599)>>>0);
      var $601=(($600)&1);
      var $602=((($597)-($601))|0);
      $n1=$602;
      var $603=$__x45;
      $n0=$603;
      label = 72; break;
    case 72: 
      var $605=$q;
      var $606=((($605)+(1))|0);
      $q=$606;
      var $607=$n1;
      var $608=$_q019;
      var $609=(($607)>>>0) >= (($608)>>>0);
      var $610=(($609)&1);
      var $611=(((-$610))|0);
      $_mask22=$611;
      var $612=$_mask22;
      var $613=$q;
      var $614=((($613)+($612))|0);
      $q=$614;
      label = 73; break;
    case 73: 
      var $616=$n0;
      var $617=$_mask22;
      var $618=$d0;
      var $619=$617 & $618;
      var $620=((($616)+($619))|0);
      $__x46=$620;
      var $621=$n1;
      var $622=$_mask22;
      var $623=$d1;
      var $624=$622 & $623;
      var $625=((($621)+($624))|0);
      var $626=$__x46;
      var $627=$n0;
      var $628=(($626)>>>0) < (($627)>>>0);
      var $629=(($628)&1);
      var $630=((($625)+($629))|0);
      $n1=$630;
      var $631=$__x46;
      $n0=$631;
      label = 74; break;
    case 74: 
      var $633=$n1;
      var $634=$d1;
      var $635=(($633)>>>0) >= (($634)>>>0);
      var $636=(($635)&1);
      var $637=(($636)|0)!=0;
      var $638=(($637)&1);
      var $639=($638);
      var $640=(($639)|0)!=0;
      if ($640) { label = 75; break; } else { label = 81; break; }
    case 75: 
      var $642=$n1;
      var $643=$d1;
      var $644=(($642)>>>0) > (($643)>>>0);
      if ($644) { label = 77; break; } else { label = 76; break; }
    case 76: 
      var $646=$n0;
      var $647=$d0;
      var $648=(($646)>>>0) >= (($647)>>>0);
      if ($648) { label = 77; break; } else { label = 80; break; }
    case 77: 
      var $650=$q;
      var $651=((($650)+(1))|0);
      $q=$651;
      label = 78; break;
    case 78: 
      var $653=$n0;
      var $654=$d0;
      var $655=((($653)-($654))|0);
      $__x47=$655;
      var $656=$n1;
      var $657=$d1;
      var $658=((($656)-($657))|0);
      var $659=$n0;
      var $660=$d0;
      var $661=(($659)>>>0) < (($660)>>>0);
      var $662=(($661)&1);
      var $663=((($658)-($662))|0);
      $n1=$663;
      var $664=$__x47;
      $n0=$664;
      label = 79; break;
    case 79: 
      label = 80; break;
    case 80: 
      label = 81; break;
    case 81: 
      label = 82; break;
    case 82: 
      var $669=$2;
      var $670=$5;
      var $671=(((-$670))|0);
      var $672=(($669+($671<<2))|0);
      var $673=$4;
      var $674=$5;
      var $675=$q;
      var $676=___gmpn_submul_1($672, $673, $674, $675);
      $cy=$676;
      var $677=$n0;
      var $678=$cy;
      var $679=(($677)>>>0) < (($678)>>>0);
      var $680=(($679)&1);
      $cy1=$680;
      var $681=$n0;
      var $682=$cy;
      var $683=((($681)-($682))|0);
      $n0=$683;
      var $684=$n1;
      var $685=$cy1;
      var $686=(($684)>>>0) < (($685)>>>0);
      var $687=(($686)&1);
      $cy=$687;
      var $688=$cy1;
      var $689=$n1;
      var $690=((($689)-($688))|0);
      $n1=$690;
      var $691=$n0;
      var $692=$2;
      var $693=(($692)|0);
      HEAP32[(($693)>>2)]=$691;
      var $694=$cy;
      var $695=(($694)|0)!=0;
      var $696=(($695)&1);
      var $697=(($696)|0)!=0;
      var $698=(($697)&1);
      var $699=($698);
      var $700=(($699)|0)!=0;
      if ($700) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $702=$d1;
      var $703=$2;
      var $704=$5;
      var $705=(((-$704))|0);
      var $706=(($703+($705<<2))|0);
      var $707=$2;
      var $708=$5;
      var $709=(((-$708))|0);
      var $710=(($707+($709<<2))|0);
      var $711=$4;
      var $712=$5;
      var $713=((($712)+(1))|0);
      var $714=___gmpn_add_n($706, $710, $711, $713);
      var $715=((($702)+($714))|0);
      var $716=$n1;
      var $717=((($716)+($715))|0);
      $n1=$717;
      var $718=$q;
      var $719=((($718)-(1))|0);
      $q=$719;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $722=$q;
      var $723=$1;
      var $724=((($723)-(4))|0);
      $1=$724;
      HEAP32[(($724)>>2)]=$722;
      var $725=$5;
      var $726=((($725)-(1))|0);
      $5=$726;
      var $727=$4;
      var $728=(($727+4)|0);
      $4=$728;
      label = 86; break;
    case 86: 
      var $730=$i;
      var $731=((($730)-(1))|0);
      $i=$731;
      label = 49; break;
    case 87: 
      var $733=$2;
      var $734=((($733)-(4))|0);
      $2=$734;
      var $735=$n1;
      var $736=$d1;
      var $737=$flag;
      var $738=$736 & $737;
      var $739=(($735)>>>0) >= (($738)>>>0);
      var $740=(($739)&1);
      var $741=(($740)|0)!=0;
      var $742=(($741)&1);
      var $743=($742);
      var $744=(($743)|0)!=0;
      if ($744) { label = 88; break; } else { label = 96; break; }
    case 88: 
      $q=-1;
      var $746=$2;
      var $747=$4;
      var $748=$q;
      var $749=___gmpn_submul_1($746, $747, 2, $748);
      $cy=$749;
      var $750=$n1;
      var $751=$cy;
      var $752=(($750)|0)!=(($751)|0);
      var $753=(($752)&1);
      var $754=(($753)|0)!=0;
      var $755=(($754)&1);
      var $756=($755);
      var $757=(($756)|0)!=0;
      if ($757) { label = 89; break; } else { label = 95; break; }
    case 89: 
      var $759=$n1;
      var $760=$cy;
      var $761=$flag;
      var $762=$760 & $761;
      var $763=(($759)>>>0) < (($762)>>>0);
      if ($763) { label = 90; break; } else { label = 93; break; }
    case 90: 
      var $765=$q;
      var $766=((($765)-(1))|0);
      $q=$766;
      label = 91; break;
    case 91: 
      var $768=$2;
      var $769=(($768)|0);
      var $770=HEAP32[(($769)>>2)];
      var $771=$4;
      var $772=(($771)|0);
      var $773=HEAP32[(($772)>>2)];
      var $774=((($770)+($773))|0);
      $__x48=$774;
      var $775=$2;
      var $776=(($775+4)|0);
      var $777=HEAP32[(($776)>>2)];
      var $778=$4;
      var $779=(($778+4)|0);
      var $780=HEAP32[(($779)>>2)];
      var $781=((($777)+($780))|0);
      var $782=$__x48;
      var $783=$2;
      var $784=(($783)|0);
      var $785=HEAP32[(($784)>>2)];
      var $786=(($782)>>>0) < (($785)>>>0);
      var $787=(($786)&1);
      var $788=((($781)+($787))|0);
      var $789=$2;
      var $790=(($789+4)|0);
      HEAP32[(($790)>>2)]=$788;
      var $791=$__x48;
      var $792=$2;
      var $793=(($792)|0);
      HEAP32[(($793)>>2)]=$791;
      label = 92; break;
    case 92: 
      label = 94; break;
    case 93: 
      $flag=0;
      label = 94; break;
    case 94: 
      label = 95; break;
    case 95: 
      var $798=$2;
      var $799=(($798+4)|0);
      var $800=HEAP32[(($799)>>2)];
      $n1=$800;
      label = 122; break;
    case 96: 
      label = 97; break;
    case 97: 
      label = 98; break;
    case 98: 
      var $804=$n1;
      $__u61=$804;
      var $805=$6;
      $__v62=$805;
      var $806=$__u61;
      var $807=$806 & 65535;
      $__ul57=$807;
      var $808=$__u61;
      var $809=$808 >>> 16;
      $__uh59=$809;
      var $810=$__v62;
      var $811=$810 & 65535;
      $__vl58=$811;
      var $812=$__v62;
      var $813=$812 >>> 16;
      $__vh60=$813;
      var $814=$__ul57;
      var $815=$__vl58;
      var $816=Math.imul($814,$815);
      $__x053=$816;
      var $817=$__ul57;
      var $818=$__vh60;
      var $819=Math.imul($817,$818);
      $__x154=$819;
      var $820=$__uh59;
      var $821=$__vl58;
      var $822=Math.imul($820,$821);
      $__x255=$822;
      var $823=$__uh59;
      var $824=$__vh60;
      var $825=Math.imul($823,$824);
      $__x356=$825;
      var $826=$__x053;
      var $827=$826 >>> 16;
      var $828=$__x154;
      var $829=((($828)+($827))|0);
      $__x154=$829;
      var $830=$__x255;
      var $831=$__x154;
      var $832=((($831)+($830))|0);
      $__x154=$832;
      var $833=$__x154;
      var $834=$__x255;
      var $835=(($833)>>>0) < (($834)>>>0);
      if ($835) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $837=$__x356;
      var $838=((($837)+(65536))|0);
      $__x356=$838;
      label = 100; break;
    case 100: 
      var $840=$__x356;
      var $841=$__x154;
      var $842=$841 >>> 16;
      var $843=((($840)+($842))|0);
      $q=$843;
      var $844=$__x154;
      var $845=$844 << 16;
      var $846=$__x053;
      var $847=$846 & 65535;
      var $848=((($845)+($847))|0);
      $_q049=$848;
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $851=$_q049;
      var $852=$2;
      var $853=(($852+4)|0);
      var $854=HEAP32[(($853)>>2)];
      var $855=((($851)+($854))|0);
      $__x63=$855;
      var $856=$q;
      var $857=$n1;
      var $858=((($856)+($857))|0);
      var $859=$__x63;
      var $860=$_q049;
      var $861=(($859)>>>0) < (($860)>>>0);
      var $862=(($861)&1);
      var $863=((($858)+($862))|0);
      $q=$863;
      var $864=$__x63;
      $_q049=$864;
      label = 103; break;
    case 103: 
      var $866=$2;
      var $867=(($866+4)|0);
      var $868=HEAP32[(($867)>>2)];
      var $869=$d1;
      var $870=$q;
      var $871=Math.imul($869,$870);
      var $872=((($868)-($871))|0);
      $n1=$872;
      label = 104; break;
    case 104: 
      var $874=$2;
      var $875=(($874)|0);
      var $876=HEAP32[(($875)>>2)];
      var $877=$d0;
      var $878=((($876)-($877))|0);
      $__x64=$878;
      var $879=$n1;
      var $880=$d1;
      var $881=((($879)-($880))|0);
      var $882=$2;
      var $883=(($882)|0);
      var $884=HEAP32[(($883)>>2)];
      var $885=$d0;
      var $886=(($884)>>>0) < (($885)>>>0);
      var $887=(($886)&1);
      var $888=((($881)-($887))|0);
      $n1=$888;
      var $889=$__x64;
      $n0=$889;
      label = 105; break;
    case 105: 
      label = 106; break;
    case 106: 
      var $892=$d0;
      $__u73=$892;
      var $893=$q;
      $__v74=$893;
      var $894=$__u73;
      var $895=$894 & 65535;
      $__ul69=$895;
      var $896=$__u73;
      var $897=$896 >>> 16;
      $__uh71=$897;
      var $898=$__v74;
      var $899=$898 & 65535;
      $__vl70=$899;
      var $900=$__v74;
      var $901=$900 >>> 16;
      $__vh72=$901;
      var $902=$__ul69;
      var $903=$__vl70;
      var $904=Math.imul($902,$903);
      $__x065=$904;
      var $905=$__ul69;
      var $906=$__vh72;
      var $907=Math.imul($905,$906);
      $__x166=$907;
      var $908=$__uh71;
      var $909=$__vl70;
      var $910=Math.imul($908,$909);
      $__x267=$910;
      var $911=$__uh71;
      var $912=$__vh72;
      var $913=Math.imul($911,$912);
      $__x368=$913;
      var $914=$__x065;
      var $915=$914 >>> 16;
      var $916=$__x166;
      var $917=((($916)+($915))|0);
      $__x166=$917;
      var $918=$__x267;
      var $919=$__x166;
      var $920=((($919)+($918))|0);
      $__x166=$920;
      var $921=$__x166;
      var $922=$__x267;
      var $923=(($921)>>>0) < (($922)>>>0);
      if ($923) { label = 107; break; } else { label = 108; break; }
    case 107: 
      var $925=$__x368;
      var $926=((($925)+(65536))|0);
      $__x368=$926;
      label = 108; break;
    case 108: 
      var $928=$__x368;
      var $929=$__x166;
      var $930=$929 >>> 16;
      var $931=((($928)+($930))|0);
      $_t150=$931;
      var $932=$__x166;
      var $933=$932 << 16;
      var $934=$__x065;
      var $935=$934 & 65535;
      var $936=((($933)+($935))|0);
      $_t051=$936;
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $939=$n0;
      var $940=$_t051;
      var $941=((($939)-($940))|0);
      $__x75=$941;
      var $942=$n1;
      var $943=$_t150;
      var $944=((($942)-($943))|0);
      var $945=$n0;
      var $946=$_t051;
      var $947=(($945)>>>0) < (($946)>>>0);
      var $948=(($947)&1);
      var $949=((($944)-($948))|0);
      $n1=$949;
      var $950=$__x75;
      $n0=$950;
      label = 111; break;
    case 111: 
      var $952=$q;
      var $953=((($952)+(1))|0);
      $q=$953;
      var $954=$n1;
      var $955=$_q049;
      var $956=(($954)>>>0) >= (($955)>>>0);
      var $957=(($956)&1);
      var $958=(((-$957))|0);
      $_mask52=$958;
      var $959=$_mask52;
      var $960=$q;
      var $961=((($960)+($959))|0);
      $q=$961;
      label = 112; break;
    case 112: 
      var $963=$n0;
      var $964=$_mask52;
      var $965=$d0;
      var $966=$964 & $965;
      var $967=((($963)+($966))|0);
      $__x76=$967;
      var $968=$n1;
      var $969=$_mask52;
      var $970=$d1;
      var $971=$969 & $970;
      var $972=((($968)+($971))|0);
      var $973=$__x76;
      var $974=$n0;
      var $975=(($973)>>>0) < (($974)>>>0);
      var $976=(($975)&1);
      var $977=((($972)+($976))|0);
      $n1=$977;
      var $978=$__x76;
      $n0=$978;
      label = 113; break;
    case 113: 
      var $980=$n1;
      var $981=$d1;
      var $982=(($980)>>>0) >= (($981)>>>0);
      var $983=(($982)&1);
      var $984=(($983)|0)!=0;
      var $985=(($984)&1);
      var $986=($985);
      var $987=(($986)|0)!=0;
      if ($987) { label = 114; break; } else { label = 120; break; }
    case 114: 
      var $989=$n1;
      var $990=$d1;
      var $991=(($989)>>>0) > (($990)>>>0);
      if ($991) { label = 116; break; } else { label = 115; break; }
    case 115: 
      var $993=$n0;
      var $994=$d0;
      var $995=(($993)>>>0) >= (($994)>>>0);
      if ($995) { label = 116; break; } else { label = 119; break; }
    case 116: 
      var $997=$q;
      var $998=((($997)+(1))|0);
      $q=$998;
      label = 117; break;
    case 117: 
      var $1000=$n0;
      var $1001=$d0;
      var $1002=((($1000)-($1001))|0);
      $__x77=$1002;
      var $1003=$n1;
      var $1004=$d1;
      var $1005=((($1003)-($1004))|0);
      var $1006=$n0;
      var $1007=$d0;
      var $1008=(($1006)>>>0) < (($1007)>>>0);
      var $1009=(($1008)&1);
      var $1010=((($1005)-($1009))|0);
      $n1=$1010;
      var $1011=$__x77;
      $n0=$1011;
      label = 118; break;
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      label = 121; break;
    case 121: 
      var $1016=$n1;
      var $1017=$2;
      var $1018=(($1017+4)|0);
      HEAP32[(($1018)>>2)]=$1016;
      var $1019=$n0;
      var $1020=$2;
      var $1021=(($1020)|0);
      HEAP32[(($1021)>>2)]=$1019;
      label = 122; break;
    case 122: 
      var $1023=$q;
      var $1024=$1;
      var $1025=((($1024)-(4))|0);
      $1=$1025;
      HEAP32[(($1025)>>2)]=$1023;
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      var $1028=$2;
      var $1029=(($1028+4)|0);
      var $1030=HEAP32[(($1029)>>2)];
      var $1031=$n1;
      var $1032=(($1030)|0)==(($1031)|0);
      var $1033=$1032 ^ 1;
      var $1034=(($1033)&1);
      var $1035=(($1034)|0)!=0;
      var $1036=(($1035)&1);
      var $1037=($1036);
      var $1038=(($1037)|0)!=0;
      if ($1038) { label = 125; break; } else { label = 126; break; }
    case 125: 
      ___gmp_assert_fail(((5248736)|0), 185, ((5249648)|0));
      throw "Reached an unreachable!"
    case 126: 
      label = 127; break;
    case 127: 
      var $1042=$qh;

      return $1042;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_sbpi1_divappr_q["X"]=1;

function ___gmpn_dcpi1_div_qr_n($qp, $np, $dp, $n, $dinv, $tp) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $lo;
      var $hi;
      var $cy;
      var $qh;
      var $ql;
      $1=$qp;
      $2=$np;
      $3=$dp;
      $4=$n;
      $5=$dinv;
      $6=$tp;
      var $7=$4;
      var $8=$7 >> 1;
      $lo=$8;
      var $9=$4;
      var $10=$lo;
      var $11=((($9)-($10))|0);
      $hi=$11;
      var $12=$hi;
      var $13=(($12)|0) >= 50;
      if ($13) { label = 4; break; } else { label = 3; break; }
    case 3: 
      var $15=$1;
      var $16=$lo;
      var $17=(($15+($16<<2))|0);
      var $18=$2;
      var $19=$lo;
      var $20=($19<<1);
      var $21=(($18+($20<<2))|0);
      var $22=$hi;
      var $23=($22<<1);
      var $24=$3;
      var $25=$lo;
      var $26=(($24+($25<<2))|0);
      var $27=$hi;
      var $28=$5;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=___gmpn_sbpi1_div_qr($17, $21, $23, $26, $27, $30);
      $qh=$31;
      label = 5; break;
    case 4: 
      var $33=$1;
      var $34=$lo;
      var $35=(($33+($34<<2))|0);
      var $36=$2;
      var $37=$lo;
      var $38=($37<<1);
      var $39=(($36+($38<<2))|0);
      var $40=$3;
      var $41=$lo;
      var $42=(($40+($41<<2))|0);
      var $43=$hi;
      var $44=$5;
      var $45=$6;
      var $46=___gmpn_dcpi1_div_qr_n($35, $39, $42, $43, $44, $45);
      $qh=$46;
      label = 5; break;
    case 5: 
      var $48=$6;
      var $49=$1;
      var $50=$lo;
      var $51=(($49+($50<<2))|0);
      var $52=$hi;
      var $53=$3;
      var $54=$lo;
      var $55=___gmpn_mul($48, $51, $52, $53, $54);
      var $56=$2;
      var $57=$lo;
      var $58=(($56+($57<<2))|0);
      var $59=$2;
      var $60=$lo;
      var $61=(($59+($60<<2))|0);
      var $62=$6;
      var $63=$4;
      var $64=___gmpn_sub_n($58, $61, $62, $63);
      $cy=$64;
      var $65=$qh;
      var $66=(($65)|0)!=0;
      if ($66) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $68=$2;
      var $69=$4;
      var $70=(($68+($69<<2))|0);
      var $71=$2;
      var $72=$4;
      var $73=(($71+($72<<2))|0);
      var $74=$3;
      var $75=$lo;
      var $76=___gmpn_sub_n($70, $73, $74, $75);
      var $77=$cy;
      var $78=((($77)+($76))|0);
      $cy=$78;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $81=$cy;
      var $82=(($81)|0)!=0;
      if ($82) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $84=$1;
      var $85=$lo;
      var $86=(($84+($85<<2))|0);
      var $87=$1;
      var $88=$lo;
      var $89=(($87+($88<<2))|0);
      var $90=$hi;
      var $91=___gmpn_sub_1($86, $89, $90, 1);
      var $92=$qh;
      var $93=((($92)-($91))|0);
      $qh=$93;
      var $94=$2;
      var $95=$lo;
      var $96=(($94+($95<<2))|0);
      var $97=$2;
      var $98=$lo;
      var $99=(($97+($98<<2))|0);
      var $100=$3;
      var $101=$4;
      var $102=___gmpn_add_n($96, $99, $100, $101);
      var $103=$cy;
      var $104=((($103)-($102))|0);
      $cy=$104;
      label = 8; break;
    case 10: 
      var $106=$lo;
      var $107=(($106)|0) >= 50;
      if ($107) { label = 12; break; } else { label = 11; break; }
    case 11: 
      var $109=$1;
      var $110=$2;
      var $111=$hi;
      var $112=(($110+($111<<2))|0);
      var $113=$lo;
      var $114=($113<<1);
      var $115=$3;
      var $116=$hi;
      var $117=(($115+($116<<2))|0);
      var $118=$lo;
      var $119=$5;
      var $120=(($119)|0);
      var $121=HEAP32[(($120)>>2)];
      var $122=___gmpn_sbpi1_div_qr($109, $112, $114, $117, $118, $121);
      $ql=$122;
      label = 13; break;
    case 12: 
      var $124=$1;
      var $125=$2;
      var $126=$hi;
      var $127=(($125+($126<<2))|0);
      var $128=$3;
      var $129=$hi;
      var $130=(($128+($129<<2))|0);
      var $131=$lo;
      var $132=$5;
      var $133=$6;
      var $134=___gmpn_dcpi1_div_qr_n($124, $127, $130, $131, $132, $133);
      $ql=$134;
      label = 13; break;
    case 13: 
      var $136=$6;
      var $137=$3;
      var $138=$hi;
      var $139=$1;
      var $140=$lo;
      var $141=___gmpn_mul($136, $137, $138, $139, $140);
      var $142=$2;
      var $143=$2;
      var $144=$6;
      var $145=$4;
      var $146=___gmpn_sub_n($142, $143, $144, $145);
      $cy=$146;
      var $147=$ql;
      var $148=(($147)|0)!=0;
      if ($148) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $150=$2;
      var $151=$lo;
      var $152=(($150+($151<<2))|0);
      var $153=$2;
      var $154=$lo;
      var $155=(($153+($154<<2))|0);
      var $156=$3;
      var $157=$hi;
      var $158=___gmpn_sub_n($152, $155, $156, $157);
      var $159=$cy;
      var $160=((($159)+($158))|0);
      $cy=$160;
      label = 15; break;
    case 15: 
      label = 16; break;
    case 16: 
      var $163=$cy;
      var $164=(($163)|0)!=0;
      if ($164) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $166=$1;
      var $167=$1;
      var $168=$lo;
      var $169=___gmpn_sub_1($166, $167, $168, 1);
      var $170=$2;
      var $171=$2;
      var $172=$3;
      var $173=$4;
      var $174=___gmpn_add_n($170, $171, $172, $173);
      var $175=$cy;
      var $176=((($175)-($174))|0);
      $cy=$176;
      label = 16; break;
    case 18: 
      var $178=$qh;

      return $178;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_dcpi1_div_qr_n["X"]=1;

function ___gmpn_dcpi1_div_qr($qp, $np, $nn, $dp, $dn, $dinv) {
  var label = 0;
  var __stackBase__  = STACKTOP; assert(STACKTOP|0 % 4 == 0); assert(STACKTOP < STACK_MAX);
  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $qn;
      var $qh;
      var $cy;
      var $tp;
      var $__tmp_marker;
      var $q;
      var $n2;
      var $n1;
      var $n0;
      var $d1;
      var $d0;
      var $_q0;
      var $_t1;
      var $_t0;
      var $_mask;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      var $__x;
      var $__x4;
      var $__x05;
      var $__x16;
      var $__x27;
      var $__x38;
      var $__ul9;
      var $__vl10;
      var $__uh11;
      var $__vh12;
      var $__u13;
      var $__v14;
      var $__x15;
      var $__x17;
      var $__x18;
      var $cy19;
      var $cy1;
      $1=$qp;
      $2=$np;
      $3=$nn;
      $4=$dp;
      $5=$dn;
      $6=$dinv;
      $__tmp_marker=0;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $13=$5;
      var $14=($13<<2);
      var $15=STACKTOP;STACKTOP = (STACKTOP + $14)|0;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP|0 < STACK_MAX|0);
      var $16=$15;
      $tp=$16;
      var $17=$3;
      var $18=$5;
      var $19=((($17)-($18))|0);
      $qn=$19;
      var $20=$qn;
      var $21=$1;
      var $22=(($21+($20<<2))|0);
      $1=$22;
      var $23=$3;
      var $24=$2;
      var $25=(($24+($23<<2))|0);
      $2=$25;
      var $26=$5;
      var $27=$4;
      var $28=(($27+($26<<2))|0);
      $4=$28;
      var $29=$qn;
      var $30=$5;
      var $31=(($29)|0) > (($30)|0);
      if ($31) { label = 9; break; } else { label = 75; break; }
    case 9: 
      label = 10; break;
    case 10: 
      var $34=$5;
      var $35=$qn;
      var $36=((($35)-($34))|0);
      $qn=$36;
      label = 11; break;
    case 11: 
      var $38=$qn;
      var $39=$5;
      var $40=(($38)|0) > (($39)|0);
      if ($40) { label = 10; break; } else { label = 12; break; }
    case 12: 
      var $42=$qn;
      var $43=$1;
      var $44=(((-$42))|0);
      var $45=(($43+($44<<2))|0);
      $1=$45;
      var $46=$qn;
      var $47=$2;
      var $48=(((-$46))|0);
      var $49=(($47+($48<<2))|0);
      $2=$49;
      var $50=$qn;
      var $51=(($50)|0)==1;
      if ($51) { label = 13; break; } else { label = 54; break; }
    case 13: 
      var $53=$2;
      var $54=$5;
      var $55=(((-$54))|0);
      var $56=(($53+($55<<2))|0);
      var $57=(($56+4)|0);
      var $58=$4;
      var $59=$5;
      var $60=(((-$59))|0);
      var $61=(($58+($60<<2))|0);
      var $62=$5;
      var $63=___gmpn_cmp($57, $61, $62);
      var $64=(($63)|0) >= 0;
      var $65=(($64)&1);
      $qh=$65;
      var $66=$qh;
      var $67=(($66)|0)!=0;
      if ($67) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $69=$2;
      var $70=$5;
      var $71=(((-$70))|0);
      var $72=(($69+($71<<2))|0);
      var $73=(($72+4)|0);
      var $74=$2;
      var $75=$5;
      var $76=(((-$75))|0);
      var $77=(($74+($76<<2))|0);
      var $78=(($77+4)|0);
      var $79=$4;
      var $80=$5;
      var $81=(((-$80))|0);
      var $82=(($79+($81<<2))|0);
      var $83=$5;
      var $84=___gmpn_sub_n($73, $78, $82, $83);
      label = 15; break;
    case 15: 
      var $86=$2;
      var $87=(($86)|0);
      var $88=HEAP32[(($87)>>2)];
      $n2=$88;
      var $89=$2;
      var $90=((($89)-(4))|0);
      var $91=HEAP32[(($90)>>2)];
      $n1=$91;
      var $92=$2;
      var $93=((($92)-(8))|0);
      var $94=HEAP32[(($93)>>2)];
      $n0=$94;
      var $95=$4;
      var $96=((($95)-(4))|0);
      var $97=HEAP32[(($96)>>2)];
      $d1=$97;
      var $98=$4;
      var $99=((($98)-(8))|0);
      var $100=HEAP32[(($99)>>2)];
      $d0=$100;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $103=$n2;
      var $104=$d1;
      var $105=(($103)|0)==(($104)|0);
      var $106=(($105)&1);
      var $107=(($106)|0)!=0;
      var $108=(($107)&1);
      var $109=($108);
      var $110=(($109)|0)!=0;
      if ($110) { label = 18; break; } else { label = 22; break; }
    case 18: 
      var $112=$n1;
      var $113=$d0;
      var $114=(($112)|0)==(($113)|0);
      if ($114) { label = 19; break; } else { label = 22; break; }
    case 19: 
      $q=-1;
      var $116=$2;
      var $117=$5;
      var $118=(((-$117))|0);
      var $119=(($116+($118<<2))|0);
      var $120=$4;
      var $121=$5;
      var $122=(((-$121))|0);
      var $123=(($120+($122<<2))|0);
      var $124=$5;
      var $125=$q;
      var $126=___gmpn_submul_1($119, $123, $124, $125);
      $cy=$126;
      label = 20; break;
    case 20: 
      label = 21; break;
    case 21: 
      label = 53; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $132=$n2;
      $__u=$132;
      var $133=$6;
      var $134=(($133)|0);
      var $135=HEAP32[(($134)>>2)];
      $__v=$135;
      var $136=$__u;
      var $137=$136 & 65535;
      $__ul=$137;
      var $138=$__u;
      var $139=$138 >>> 16;
      $__uh=$139;
      var $140=$__v;
      var $141=$140 & 65535;
      $__vl=$141;
      var $142=$__v;
      var $143=$142 >>> 16;
      $__vh=$143;
      var $144=$__ul;
      var $145=$__vl;
      var $146=Math.imul($144,$145);
      $__x0=$146;
      var $147=$__ul;
      var $148=$__vh;
      var $149=Math.imul($147,$148);
      $__x1=$149;
      var $150=$__uh;
      var $151=$__vl;
      var $152=Math.imul($150,$151);
      $__x2=$152;
      var $153=$__uh;
      var $154=$__vh;
      var $155=Math.imul($153,$154);
      $__x3=$155;
      var $156=$__x0;
      var $157=$156 >>> 16;
      var $158=$__x1;
      var $159=((($158)+($157))|0);
      $__x1=$159;
      var $160=$__x2;
      var $161=$__x1;
      var $162=((($161)+($160))|0);
      $__x1=$162;
      var $163=$__x1;
      var $164=$__x2;
      var $165=(($163)>>>0) < (($164)>>>0);
      if ($165) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $167=$__x3;
      var $168=((($167)+(65536))|0);
      $__x3=$168;
      label = 26; break;
    case 26: 
      var $170=$__x3;
      var $171=$__x1;
      var $172=$171 >>> 16;
      var $173=((($170)+($172))|0);
      $q=$173;
      var $174=$__x1;
      var $175=$174 << 16;
      var $176=$__x0;
      var $177=$176 & 65535;
      var $178=((($175)+($177))|0);
      $_q0=$178;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $181=$_q0;
      var $182=$n1;
      var $183=((($181)+($182))|0);
      $__x=$183;
      var $184=$q;
      var $185=$n2;
      var $186=((($184)+($185))|0);
      var $187=$__x;
      var $188=$_q0;
      var $189=(($187)>>>0) < (($188)>>>0);
      var $190=(($189)&1);
      var $191=((($186)+($190))|0);
      $q=$191;
      var $192=$__x;
      $_q0=$192;
      label = 29; break;
    case 29: 
      var $194=$n1;
      var $195=$d1;
      var $196=$q;
      var $197=Math.imul($195,$196);
      var $198=((($194)-($197))|0);
      $n1=$198;
      label = 30; break;
    case 30: 
      var $200=$n0;
      var $201=$d0;
      var $202=((($200)-($201))|0);
      $__x4=$202;
      var $203=$n1;
      var $204=$d1;
      var $205=((($203)-($204))|0);
      var $206=$n0;
      var $207=$d0;
      var $208=(($206)>>>0) < (($207)>>>0);
      var $209=(($208)&1);
      var $210=((($205)-($209))|0);
      $n1=$210;
      var $211=$__x4;
      $n0=$211;
      label = 31; break;
    case 31: 
      label = 32; break;
    case 32: 
      var $214=$d0;
      $__u13=$214;
      var $215=$q;
      $__v14=$215;
      var $216=$__u13;
      var $217=$216 & 65535;
      $__ul9=$217;
      var $218=$__u13;
      var $219=$218 >>> 16;
      $__uh11=$219;
      var $220=$__v14;
      var $221=$220 & 65535;
      $__vl10=$221;
      var $222=$__v14;
      var $223=$222 >>> 16;
      $__vh12=$223;
      var $224=$__ul9;
      var $225=$__vl10;
      var $226=Math.imul($224,$225);
      $__x05=$226;
      var $227=$__ul9;
      var $228=$__vh12;
      var $229=Math.imul($227,$228);
      $__x16=$229;
      var $230=$__uh11;
      var $231=$__vl10;
      var $232=Math.imul($230,$231);
      $__x27=$232;
      var $233=$__uh11;
      var $234=$__vh12;
      var $235=Math.imul($233,$234);
      $__x38=$235;
      var $236=$__x05;
      var $237=$236 >>> 16;
      var $238=$__x16;
      var $239=((($238)+($237))|0);
      $__x16=$239;
      var $240=$__x27;
      var $241=$__x16;
      var $242=((($241)+($240))|0);
      $__x16=$242;
      var $243=$__x16;
      var $244=$__x27;
      var $245=(($243)>>>0) < (($244)>>>0);
      if ($245) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $247=$__x38;
      var $248=((($247)+(65536))|0);
      $__x38=$248;
      label = 34; break;
    case 34: 
      var $250=$__x38;
      var $251=$__x16;
      var $252=$251 >>> 16;
      var $253=((($250)+($252))|0);
      $_t1=$253;
      var $254=$__x16;
      var $255=$254 << 16;
      var $256=$__x05;
      var $257=$256 & 65535;
      var $258=((($255)+($257))|0);
      $_t0=$258;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $261=$n0;
      var $262=$_t0;
      var $263=((($261)-($262))|0);
      $__x15=$263;
      var $264=$n1;
      var $265=$_t1;
      var $266=((($264)-($265))|0);
      var $267=$n0;
      var $268=$_t0;
      var $269=(($267)>>>0) < (($268)>>>0);
      var $270=(($269)&1);
      var $271=((($266)-($270))|0);
      $n1=$271;
      var $272=$__x15;
      $n0=$272;
      label = 37; break;
    case 37: 
      var $274=$q;
      var $275=((($274)+(1))|0);
      $q=$275;
      var $276=$n1;
      var $277=$_q0;
      var $278=(($276)>>>0) >= (($277)>>>0);
      var $279=(($278)&1);
      var $280=(((-$279))|0);
      $_mask=$280;
      var $281=$_mask;
      var $282=$q;
      var $283=((($282)+($281))|0);
      $q=$283;
      label = 38; break;
    case 38: 
      var $285=$n0;
      var $286=$_mask;
      var $287=$d0;
      var $288=$286 & $287;
      var $289=((($285)+($288))|0);
      $__x17=$289;
      var $290=$n1;
      var $291=$_mask;
      var $292=$d1;
      var $293=$291 & $292;
      var $294=((($290)+($293))|0);
      var $295=$__x17;
      var $296=$n0;
      var $297=(($295)>>>0) < (($296)>>>0);
      var $298=(($297)&1);
      var $299=((($294)+($298))|0);
      $n1=$299;
      var $300=$__x17;
      $n0=$300;
      label = 39; break;
    case 39: 
      var $302=$n1;
      var $303=$d1;
      var $304=(($302)>>>0) >= (($303)>>>0);
      var $305=(($304)&1);
      var $306=(($305)|0)!=0;
      var $307=(($306)&1);
      var $308=($307);
      var $309=(($308)|0)!=0;
      if ($309) { label = 40; break; } else { label = 46; break; }
    case 40: 
      var $311=$n1;
      var $312=$d1;
      var $313=(($311)>>>0) > (($312)>>>0);
      if ($313) { label = 42; break; } else { label = 41; break; }
    case 41: 
      var $315=$n0;
      var $316=$d0;
      var $317=(($315)>>>0) >= (($316)>>>0);
      if ($317) { label = 42; break; } else { label = 45; break; }
    case 42: 
      var $319=$q;
      var $320=((($319)+(1))|0);
      $q=$320;
      label = 43; break;
    case 43: 
      var $322=$n0;
      var $323=$d0;
      var $324=((($322)-($323))|0);
      $__x18=$324;
      var $325=$n1;
      var $326=$d1;
      var $327=((($325)-($326))|0);
      var $328=$n0;
      var $329=$d0;
      var $330=(($328)>>>0) < (($329)>>>0);
      var $331=(($330)&1);
      var $332=((($327)-($331))|0);
      $n1=$332;
      var $333=$__x18;
      $n0=$333;
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      var $338=$5;
      var $339=(($338)|0) > 2;
      if ($339) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $341=$2;
      var $342=$5;
      var $343=(((-$342))|0);
      var $344=(($341+($343<<2))|0);
      var $345=$4;
      var $346=$5;
      var $347=(((-$346))|0);
      var $348=(($345+($347<<2))|0);
      var $349=$5;
      var $350=((($349)-(2))|0);
      var $351=$q;
      var $352=___gmpn_submul_1($344, $348, $350, $351);
      $cy19=$352;
      var $353=$n0;
      var $354=$cy19;
      var $355=(($353)>>>0) < (($354)>>>0);
      var $356=(($355)&1);
      $cy1=$356;
      var $357=$n0;
      var $358=$cy19;
      var $359=((($357)-($358))|0);
      $n0=$359;
      var $360=$n1;
      var $361=$cy1;
      var $362=(($360)>>>0) < (($361)>>>0);
      var $363=(($362)&1);
      $cy19=$363;
      var $364=$n1;
      var $365=$cy1;
      var $366=((($364)-($365))|0);
      $n1=$366;
      var $367=$n0;
      var $368=$2;
      var $369=((($368)-(8))|0);
      HEAP32[(($369)>>2)]=$367;
      var $370=$cy19;
      var $371=(($370)|0)!=0;
      var $372=(($371)&1);
      var $373=(($372)|0)!=0;
      var $374=(($373)&1);
      var $375=($374);
      var $376=(($375)|0)!=0;
      if ($376) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $378=$d1;
      var $379=$2;
      var $380=$5;
      var $381=(((-$380))|0);
      var $382=(($379+($381<<2))|0);
      var $383=$2;
      var $384=$5;
      var $385=(((-$384))|0);
      var $386=(($383+($385<<2))|0);
      var $387=$4;
      var $388=$5;
      var $389=(((-$388))|0);
      var $390=(($387+($389<<2))|0);
      var $391=$5;
      var $392=((($391)-(1))|0);
      var $393=___gmpn_add_n($382, $386, $390, $392);
      var $394=((($378)+($393))|0);
      var $395=$n1;
      var $396=((($395)+($394))|0);
      $n1=$396;
      var $397=$q;
      var $398=(($397)|0)==0;
      var $399=(($398)&1);
      var $400=$qh;
      var $401=((($400)-($399))|0);
      $qh=$401;
      var $402=$q;
      var $403=((($402)-(1))|0);
      $q=$403;
      label = 50; break;
    case 50: 
      label = 52; break;
    case 51: 
      var $406=$n0;
      var $407=$2;
      var $408=((($407)-(8))|0);
      HEAP32[(($408)>>2)]=$406;
      label = 52; break;
    case 52: 
      var $410=$n1;
      var $411=$2;
      var $412=((($411)-(4))|0);
      HEAP32[(($412)>>2)]=$410;
      label = 53; break;
    case 53: 
      var $414=$q;
      var $415=$1;
      var $416=(($415)|0);
      HEAP32[(($416)>>2)]=$414;
      label = 71; break;
    case 54: 
      var $418=$qn;
      var $419=(($418)|0)==2;
      if ($419) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $421=$1;
      var $422=$2;
      var $423=((($422)-(8))|0);
      var $424=$4;
      var $425=((($424)-(8))|0);
      var $426=___gmpn_divrem_2($421, 0, $423, 4, $425);
      $qh=$426;
      label = 60; break;
    case 56: 
      var $428=$qn;
      var $429=(($428)|0) >= 50;
      if ($429) { label = 58; break; } else { label = 57; break; }
    case 57: 
      var $431=$1;
      var $432=$2;
      var $433=$qn;
      var $434=(((-$433))|0);
      var $435=(($432+($434<<2))|0);
      var $436=$qn;
      var $437=($436<<1);
      var $438=$4;
      var $439=$qn;
      var $440=(((-$439))|0);
      var $441=(($438+($440<<2))|0);
      var $442=$qn;
      var $443=$6;
      var $444=(($443)|0);
      var $445=HEAP32[(($444)>>2)];
      var $446=___gmpn_sbpi1_div_qr($431, $435, $437, $441, $442, $445);
      $qh=$446;
      label = 59; break;
    case 58: 
      var $448=$1;
      var $449=$2;
      var $450=$qn;
      var $451=(((-$450))|0);
      var $452=(($449+($451<<2))|0);
      var $453=$4;
      var $454=$qn;
      var $455=(((-$454))|0);
      var $456=(($453+($455<<2))|0);
      var $457=$qn;
      var $458=$6;
      var $459=$tp;
      var $460=___gmpn_dcpi1_div_qr_n($448, $452, $456, $457, $458, $459);
      $qh=$460;
      label = 59; break;
    case 59: 
      label = 60; break;
    case 60: 
      var $463=$qn;
      var $464=$5;
      var $465=(($463)|0)!=(($464)|0);
      if ($465) { label = 61; break; } else { label = 70; break; }
    case 61: 
      var $467=$qn;
      var $468=$5;
      var $469=$qn;
      var $470=((($468)-($469))|0);
      var $471=(($467)|0) > (($470)|0);
      if ($471) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $473=$tp;
      var $474=$1;
      var $475=$qn;
      var $476=$4;
      var $477=$5;
      var $478=(((-$477))|0);
      var $479=(($476+($478<<2))|0);
      var $480=$5;
      var $481=$qn;
      var $482=((($480)-($481))|0);
      var $483=___gmpn_mul($473, $474, $475, $479, $482);
      label = 64; break;
    case 63: 
      var $485=$tp;
      var $486=$4;
      var $487=$5;
      var $488=(((-$487))|0);
      var $489=(($486+($488<<2))|0);
      var $490=$5;
      var $491=$qn;
      var $492=((($490)-($491))|0);
      var $493=$1;
      var $494=$qn;
      var $495=___gmpn_mul($485, $489, $492, $493, $494);
      label = 64; break;
    case 64: 
      var $497=$2;
      var $498=$5;
      var $499=(((-$498))|0);
      var $500=(($497+($499<<2))|0);
      var $501=$2;
      var $502=$5;
      var $503=(((-$502))|0);
      var $504=(($501+($503<<2))|0);
      var $505=$tp;
      var $506=$5;
      var $507=___gmpn_sub_n($500, $504, $505, $506);
      $cy=$507;
      var $508=$qh;
      var $509=(($508)|0)!=0;
      if ($509) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $511=$2;
      var $512=$5;
      var $513=(((-$512))|0);
      var $514=(($511+($513<<2))|0);
      var $515=$qn;
      var $516=(($514+($515<<2))|0);
      var $517=$2;
      var $518=$5;
      var $519=(((-$518))|0);
      var $520=(($517+($519<<2))|0);
      var $521=$qn;
      var $522=(($520+($521<<2))|0);
      var $523=$4;
      var $524=$5;
      var $525=(((-$524))|0);
      var $526=(($523+($525<<2))|0);
      var $527=$5;
      var $528=$qn;
      var $529=((($527)-($528))|0);
      var $530=___gmpn_sub_n($516, $522, $526, $529);
      var $531=$cy;
      var $532=((($531)+($530))|0);
      $cy=$532;
      label = 66; break;
    case 66: 
      label = 67; break;
    case 67: 
      var $535=$cy;
      var $536=(($535)|0)!=0;
      if ($536) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $538=$1;
      var $539=$1;
      var $540=$qn;
      var $541=___gmpn_sub_1($538, $539, $540, 1);
      var $542=$qh;
      var $543=((($542)-($541))|0);
      $qh=$543;
      var $544=$2;
      var $545=$5;
      var $546=(((-$545))|0);
      var $547=(($544+($546<<2))|0);
      var $548=$2;
      var $549=$5;
      var $550=(((-$549))|0);
      var $551=(($548+($550<<2))|0);
      var $552=$4;
      var $553=$5;
      var $554=(((-$553))|0);
      var $555=(($552+($554<<2))|0);
      var $556=$5;
      var $557=___gmpn_add_n($547, $551, $555, $556);
      var $558=$cy;
      var $559=((($558)-($557))|0);
      $cy=$559;
      label = 67; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $563=$3;
      var $564=$5;
      var $565=((($563)-($564))|0);
      var $566=$qn;
      var $567=((($565)-($566))|0);
      $qn=$567;
      label = 72; break;
    case 72: 
      var $569=$5;
      var $570=$1;
      var $571=(((-$569))|0);
      var $572=(($570+($571<<2))|0);
      $1=$572;
      var $573=$5;
      var $574=$2;
      var $575=(((-$573))|0);
      var $576=(($574+($575<<2))|0);
      $2=$576;
      var $577=$1;
      var $578=$2;
      var $579=$5;
      var $580=(((-$579))|0);
      var $581=(($578+($580<<2))|0);
      var $582=$4;
      var $583=$5;
      var $584=(((-$583))|0);
      var $585=(($582+($584<<2))|0);
      var $586=$5;
      var $587=$6;
      var $588=$tp;
      var $589=___gmpn_dcpi1_div_qr_n($577, $581, $585, $586, $587, $588);
      var $590=$5;
      var $591=$qn;
      var $592=((($591)-($590))|0);
      $qn=$592;
      label = 73; break;
    case 73: 
      var $594=$qn;
      var $595=(($594)|0) > 0;
      if ($595) { label = 72; break; } else { label = 74; break; }
    case 74: 
      label = 89; break;
    case 75: 
      var $598=$qn;
      var $599=$1;
      var $600=(((-$598))|0);
      var $601=(($599+($600<<2))|0);
      $1=$601;
      var $602=$qn;
      var $603=$2;
      var $604=(((-$602))|0);
      var $605=(($603+($604<<2))|0);
      $2=$605;
      var $606=$qn;
      var $607=(($606)|0) >= 50;
      if ($607) { label = 77; break; } else { label = 76; break; }
    case 76: 
      var $609=$1;
      var $610=$2;
      var $611=$qn;
      var $612=(((-$611))|0);
      var $613=(($610+($612<<2))|0);
      var $614=$qn;
      var $615=($614<<1);
      var $616=$4;
      var $617=$qn;
      var $618=(((-$617))|0);
      var $619=(($616+($618<<2))|0);
      var $620=$qn;
      var $621=$6;
      var $622=(($621)|0);
      var $623=HEAP32[(($622)>>2)];
      var $624=___gmpn_sbpi1_div_qr($609, $613, $615, $619, $620, $623);
      $qh=$624;
      label = 78; break;
    case 77: 
      var $626=$1;
      var $627=$2;
      var $628=$qn;
      var $629=(((-$628))|0);
      var $630=(($627+($629<<2))|0);
      var $631=$4;
      var $632=$qn;
      var $633=(((-$632))|0);
      var $634=(($631+($633<<2))|0);
      var $635=$qn;
      var $636=$6;
      var $637=$tp;
      var $638=___gmpn_dcpi1_div_qr_n($626, $630, $634, $635, $636, $637);
      $qh=$638;
      label = 78; break;
    case 78: 
      var $640=$qn;
      var $641=$5;
      var $642=(($640)|0)!=(($641)|0);
      if ($642) { label = 79; break; } else { label = 88; break; }
    case 79: 
      var $644=$qn;
      var $645=$5;
      var $646=$qn;
      var $647=((($645)-($646))|0);
      var $648=(($644)|0) > (($647)|0);
      if ($648) { label = 80; break; } else { label = 81; break; }
    case 80: 
      var $650=$tp;
      var $651=$1;
      var $652=$qn;
      var $653=$4;
      var $654=$5;
      var $655=(((-$654))|0);
      var $656=(($653+($655<<2))|0);
      var $657=$5;
      var $658=$qn;
      var $659=((($657)-($658))|0);
      var $660=___gmpn_mul($650, $651, $652, $656, $659);
      label = 82; break;
    case 81: 
      var $662=$tp;
      var $663=$4;
      var $664=$5;
      var $665=(((-$664))|0);
      var $666=(($663+($665<<2))|0);
      var $667=$5;
      var $668=$qn;
      var $669=((($667)-($668))|0);
      var $670=$1;
      var $671=$qn;
      var $672=___gmpn_mul($662, $666, $669, $670, $671);
      label = 82; break;
    case 82: 
      var $674=$2;
      var $675=$5;
      var $676=(((-$675))|0);
      var $677=(($674+($676<<2))|0);
      var $678=$2;
      var $679=$5;
      var $680=(((-$679))|0);
      var $681=(($678+($680<<2))|0);
      var $682=$tp;
      var $683=$5;
      var $684=___gmpn_sub_n($677, $681, $682, $683);
      $cy=$684;
      var $685=$qh;
      var $686=(($685)|0)!=0;
      if ($686) { label = 83; break; } else { label = 84; break; }
    case 83: 
      var $688=$2;
      var $689=$5;
      var $690=(((-$689))|0);
      var $691=(($688+($690<<2))|0);
      var $692=$qn;
      var $693=(($691+($692<<2))|0);
      var $694=$2;
      var $695=$5;
      var $696=(((-$695))|0);
      var $697=(($694+($696<<2))|0);
      var $698=$qn;
      var $699=(($697+($698<<2))|0);
      var $700=$4;
      var $701=$5;
      var $702=(((-$701))|0);
      var $703=(($700+($702<<2))|0);
      var $704=$5;
      var $705=$qn;
      var $706=((($704)-($705))|0);
      var $707=___gmpn_sub_n($693, $699, $703, $706);
      var $708=$cy;
      var $709=((($708)+($707))|0);
      $cy=$709;
      label = 84; break;
    case 84: 
      label = 85; break;
    case 85: 
      var $712=$cy;
      var $713=(($712)|0)!=0;
      if ($713) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $715=$1;
      var $716=$1;
      var $717=$qn;
      var $718=___gmpn_sub_1($715, $716, $717, 1);
      var $719=$qh;
      var $720=((($719)-($718))|0);
      $qh=$720;
      var $721=$2;
      var $722=$5;
      var $723=(((-$722))|0);
      var $724=(($721+($723<<2))|0);
      var $725=$2;
      var $726=$5;
      var $727=(((-$726))|0);
      var $728=(($725+($727<<2))|0);
      var $729=$4;
      var $730=$5;
      var $731=(((-$730))|0);
      var $732=(($729+($731<<2))|0);
      var $733=$5;
      var $734=___gmpn_add_n($724, $728, $732, $733);
      var $735=$cy;
      var $736=((($735)-($734))|0);
      $cy=$736;
      label = 85; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      label = 90; break;
    case 90: 
      var $741=$__tmp_marker;
      var $742=(($741)|0)!=0;
      var $743=(($742)&1);
      var $744=(($743)|0)!=0;
      var $745=(($744)&1);
      var $746=($745);
      var $747=(($746)|0)!=0;
      if ($747) { label = 91; break; } else { label = 92; break; }
    case 91: 
      var $749=$__tmp_marker;
      ___gmp_tmp_reentrant_free($749);
      label = 92; break;
    case 92: 
      label = 93; break;
    case 93: 
      var $752=$qh;
      STACKTOP = __stackBase__;
      return $752;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_dcpi1_div_qr["X"]=1;

function ___gmpn_mu_div_qr($qp, $rp, $np, $nn, $dp, $dn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $qn;
      var $cy;
      var $qh;
      $1=$qp;
      $2=$rp;
      $3=$np;
      $4=$nn;
      $5=$dp;
      $6=$dn;
      $7=$scratch;
      var $8=$4;
      var $9=$6;
      var $10=((($8)-($9))|0);
      $qn=$10;
      var $11=$qn;
      var $12=((($11)+(100))|0);
      var $13=$6;
      var $14=(($12)|0) < (($13)|0);
      if ($14) { label = 3; break; } else { label = 12; break; }
    case 3: 
      var $16=$1;
      var $17=$2;
      var $18=$4;
      var $19=(($17+($18<<2))|0);
      var $20=$qn;
      var $21=($20<<1);
      var $22=((($21)+(1))|0);
      var $23=(((-$22))|0);
      var $24=(($19+($23<<2))|0);
      var $25=$3;
      var $26=$4;
      var $27=(($25+($26<<2))|0);
      var $28=$qn;
      var $29=($28<<1);
      var $30=((($29)+(1))|0);
      var $31=(((-$30))|0);
      var $32=(($27+($31<<2))|0);
      var $33=$qn;
      var $34=($33<<1);
      var $35=((($34)+(1))|0);
      var $36=$5;
      var $37=$6;
      var $38=(($36+($37<<2))|0);
      var $39=$qn;
      var $40=((($39)+(1))|0);
      var $41=(((-$40))|0);
      var $42=(($38+($41<<2))|0);
      var $43=$qn;
      var $44=((($43)+(1))|0);
      var $45=$7;
      var $46=_mpn_mu_div_qr2($16, $24, $32, $35, $42, $44, $45);
      $qh=$46;
      var $47=$6;
      var $48=$qn;
      var $49=((($48)+(1))|0);
      var $50=((($47)-($49))|0);
      var $51=$qn;
      var $52=(($50)|0) > (($51)|0);
      if ($52) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $54=$7;
      var $55=$5;
      var $56=$6;
      var $57=$qn;
      var $58=((($57)+(1))|0);
      var $59=((($56)-($58))|0);
      var $60=$1;
      var $61=$qn;
      var $62=___gmpn_mul($54, $55, $59, $60, $61);
      label = 6; break;
    case 5: 
      var $64=$7;
      var $65=$1;
      var $66=$qn;
      var $67=$5;
      var $68=$6;
      var $69=$qn;
      var $70=((($69)+(1))|0);
      var $71=((($68)-($70))|0);
      var $72=___gmpn_mul($64, $65, $66, $67, $71);
      label = 6; break;
    case 6: 
      var $74=$qh;
      var $75=(($74)|0)!=0;
      if ($75) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $77=$7;
      var $78=$qn;
      var $79=(($77+($78<<2))|0);
      var $80=$7;
      var $81=$qn;
      var $82=(($80+($81<<2))|0);
      var $83=$5;
      var $84=$6;
      var $85=$qn;
      var $86=((($85)+(1))|0);
      var $87=((($84)-($86))|0);
      var $88=___gmpn_add_n($79, $82, $83, $87);
      $cy=$88;
      label = 9; break;
    case 8: 
      $cy=0;
      label = 9; break;
    case 9: 
      var $91=$cy;
      var $92=$6;
      var $93=((($92)-(1))|0);
      var $94=$7;
      var $95=(($94+($93<<2))|0);
      HEAP32[(($95)>>2)]=$91;
      var $96=$2;
      var $97=$3;
      var $98=$7;
      var $99=$4;
      var $100=$qn;
      var $101=($100<<1);
      var $102=((($101)+(1))|0);
      var $103=((($99)-($102))|0);
      var $104=___gmpn_sub_n($96, $97, $98, $103);
      $cy=$104;
      var $105=$2;
      var $106=$4;
      var $107=(($105+($106<<2))|0);
      var $108=$qn;
      var $109=($108<<1);
      var $110=((($109)+(1))|0);
      var $111=(((-$110))|0);
      var $112=(($107+($111<<2))|0);
      var $113=$2;
      var $114=$4;
      var $115=(($113+($114<<2))|0);
      var $116=$qn;
      var $117=($116<<1);
      var $118=((($117)+(1))|0);
      var $119=(((-$118))|0);
      var $120=(($115+($119<<2))|0);
      var $121=$7;
      var $122=$4;
      var $123=(($121+($122<<2))|0);
      var $124=$qn;
      var $125=($124<<1);
      var $126=((($125)+(1))|0);
      var $127=(((-$126))|0);
      var $128=(($123+($127<<2))|0);
      var $129=$qn;
      var $130=((($129)+(1))|0);
      var $131=$cy;
      var $132=_mpn_sub_nc387($112, $120, $128, $130, $131);
      $cy=$132;
      var $133=$cy;
      var $134=(($133)|0)!=0;
      if ($134) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $136=$1;
      var $137=$1;
      var $138=$qn;
      var $139=___gmpn_sub_1($136, $137, $138, 1);
      var $140=$qh;
      var $141=((($140)-($139))|0);
      $qh=$141;
      var $142=$2;
      var $143=$2;
      var $144=$5;
      var $145=$6;
      var $146=___gmpn_add_n($142, $143, $144, $145);
      label = 11; break;
    case 11: 
      label = 13; break;
    case 12: 
      var $149=$1;
      var $150=$2;
      var $151=$3;
      var $152=$4;
      var $153=$5;
      var $154=$6;
      var $155=$7;
      var $156=_mpn_mu_div_qr2($149, $150, $151, $152, $153, $154, $155);
      $qh=$156;
      label = 13; break;
    case 13: 
      var $158=$qh;

      return $158;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mu_div_qr["X"]=1;

function _mpn_mu_div_qr2($qp, $rp, $np, $nn, $dp, $dn, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $qn;
      var $in;
      var $cy;
      var $qh;
      var $ip;
      var $tp;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__n1;
      var $__dst2;
      var $__src3;
      var $__x4;
      var $__dst5;
      var $__n6;
      var $__n7;
      var $__dst8;
      var $__src9;
      var $__x10;
      $1=$qp;
      $2=$rp;
      $3=$np;
      $4=$nn;
      $5=$dp;
      $6=$dn;
      $7=$scratch;
      label = 3; break;
    case 3: 
      label = 4; break;
    case 4: 
      var $10=$4;
      var $11=$6;
      var $12=((($10)-($11))|0);
      $qn=$12;
      var $13=$qn;
      var $14=$6;
      var $15=___gmpn_mu_div_qr_choose_in($13, $14, 0);
      $in=$15;
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      var $18=$7;
      $ip=$18;
      var $19=$7;
      var $20=$in;
      var $21=(($19+($20<<2))|0);
      var $22=(($21+4)|0);
      $tp=$22;
      var $23=$6;
      var $24=$in;
      var $25=(($23)|0)==(($24)|0);
      if ($25) { label = 7; break; } else { label = 38; break; }
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 10; break;
    case 10: 
      label = 11; break;
    case 11: 
      label = 12; break;
    case 12: 
      label = 13; break;
    case 13: 
      label = 14; break;
    case 14: 
      label = 15; break;
    case 15: 
      var $35=$in;
      var $36=(($35)|0)!=0;
      if ($36) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $38=$in;
      var $39=((($38)-(1))|0);
      $__n=$39;
      var $40=$tp;
      var $41=(($40+4)|0);
      $__dst=$41;
      var $42=$5;
      $__src=$42;
      var $43=$__src;
      var $44=(($43+4)|0);
      $__src=$44;
      var $45=HEAP32[(($43)>>2)];
      $__x=$45;
      var $46=$__n;
      var $47=(($46)|0)!=0;
      if ($47) { label = 17; break; } else { label = 21; break; }
    case 17: 
      label = 18; break;
    case 18: 
      var $50=$__x;
      var $51=$__dst;
      var $52=(($51+4)|0);
      $__dst=$52;
      HEAP32[(($51)>>2)]=$50;
      var $53=$__src;
      var $54=(($53+4)|0);
      $__src=$54;
      var $55=HEAP32[(($53)>>2)];
      $__x=$55;
      label = 19; break;
    case 19: 
      var $57=$__n;
      var $58=((($57)-(1))|0);
      $__n=$58;
      var $59=(($58)|0)!=0;
      if ($59) { label = 18; break; } else { label = 20; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $62=$__x;
      var $63=$__dst;
      var $64=(($63+4)|0);
      $__dst=$64;
      HEAP32[(($63)>>2)]=$62;
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $68=$tp;
      var $69=(($68)|0);
      HEAP32[(($69)>>2)]=1;
      var $70=$ip;
      var $71=$tp;
      var $72=$in;
      var $73=((($72)+(1))|0);
      var $74=___gmpn_invertappr($70, $71, $73, 0);
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $80=$in;
      var $81=(($80)|0)!=0;
      if ($81) { label = 30; break; } else { label = 36; break; }
    case 30: 
      var $83=$in;
      var $84=((($83)-(1))|0);
      $__n1=$84;
      var $85=$ip;
      $__dst2=$85;
      var $86=$ip;
      var $87=(($86+4)|0);
      $__src3=$87;
      var $88=$__src3;
      var $89=(($88+4)|0);
      $__src3=$89;
      var $90=HEAP32[(($88)>>2)];
      $__x4=$90;
      var $91=$__n1;
      var $92=(($91)|0)!=0;
      if ($92) { label = 31; break; } else { label = 35; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $95=$__x4;
      var $96=$__dst2;
      var $97=(($96+4)|0);
      $__dst2=$97;
      HEAP32[(($96)>>2)]=$95;
      var $98=$__src3;
      var $99=(($98+4)|0);
      $__src3=$99;
      var $100=HEAP32[(($98)>>2)];
      $__x4=$100;
      label = 33; break;
    case 33: 
      var $102=$__n1;
      var $103=((($102)-(1))|0);
      $__n1=$103;
      var $104=(($103)|0)!=0;
      if ($104) { label = 32; break; } else { label = 34; break; }
    case 34: 
      label = 35; break;
    case 35: 
      var $107=$__x4;
      var $108=$__dst2;
      var $109=(($108+4)|0);
      $__dst2=$109;
      HEAP32[(($108)>>2)]=$107;
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 64; break;
    case 38: 
      var $113=$tp;
      var $114=$5;
      var $115=$6;
      var $116=(($114+($115<<2))|0);
      var $117=$in;
      var $118=((($117)+(1))|0);
      var $119=(((-$118))|0);
      var $120=(($116+($119<<2))|0);
      var $121=$in;
      var $122=((($121)+(1))|0);
      var $123=___gmpn_add_1($113, $120, $122, 1);
      $cy=$123;
      var $124=$cy;
      var $125=(($124)|0)!=0;
      var $126=(($125)&1);
      var $127=(($126)|0)!=0;
      var $128=(($127)&1);
      var $129=($128);
      var $130=(($129)|0)!=0;
      if ($130) { label = 39; break; } else { label = 49; break; }
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      var $135=$in;
      var $136=(($135)|0)!=0;
      if ($136) { label = 43; break; } else { label = 47; break; }
    case 43: 
      var $138=$ip;
      $__dst5=$138;
      var $139=$in;
      $__n6=$139;
      label = 44; break;
    case 44: 
      var $141=$__dst5;
      var $142=(($141+4)|0);
      $__dst5=$142;
      HEAP32[(($141)>>2)]=0;
      label = 45; break;
    case 45: 
      var $144=$__n6;
      var $145=((($144)-(1))|0);
      $__n6=$145;
      var $146=(($145)|0)!=0;
      if ($146) { label = 44; break; } else { label = 46; break; }
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 63; break;
    case 49: 
      var $151=$ip;
      var $152=$tp;
      var $153=$in;
      var $154=((($153)+(1))|0);
      var $155=___gmpn_invertappr($151, $152, $154, 0);
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      label = 54; break;
    case 54: 
      var $161=$in;
      var $162=(($161)|0)!=0;
      if ($162) { label = 55; break; } else { label = 61; break; }
    case 55: 
      var $164=$in;
      var $165=((($164)-(1))|0);
      $__n7=$165;
      var $166=$ip;
      $__dst8=$166;
      var $167=$ip;
      var $168=(($167+4)|0);
      $__src9=$168;
      var $169=$__src9;
      var $170=(($169+4)|0);
      $__src9=$170;
      var $171=HEAP32[(($169)>>2)];
      $__x10=$171;
      var $172=$__n7;
      var $173=(($172)|0)!=0;
      if ($173) { label = 56; break; } else { label = 60; break; }
    case 56: 
      label = 57; break;
    case 57: 
      var $176=$__x10;
      var $177=$__dst8;
      var $178=(($177+4)|0);
      $__dst8=$178;
      HEAP32[(($177)>>2)]=$176;
      var $179=$__src9;
      var $180=(($179+4)|0);
      $__src9=$180;
      var $181=HEAP32[(($179)>>2)];
      $__x10=$181;
      label = 58; break;
    case 58: 
      var $183=$__n7;
      var $184=((($183)-(1))|0);
      $__n7=$184;
      var $185=(($184)|0)!=0;
      if ($185) { label = 57; break; } else { label = 59; break; }
    case 59: 
      label = 60; break;
    case 60: 
      var $188=$__x10;
      var $189=$__dst8;
      var $190=(($189+4)|0);
      $__dst8=$190;
      HEAP32[(($189)>>2)]=$188;
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 63; break;
    case 63: 
      label = 64; break;
    case 64: 
      var $195=$1;
      var $196=$2;
      var $197=$3;
      var $198=$4;
      var $199=$5;
      var $200=$6;
      var $201=$ip;
      var $202=$in;
      var $203=$7;
      var $204=$in;
      var $205=(($203+($204<<2))|0);
      var $206=___gmpn_preinv_mu_div_qr($195, $196, $197, $198, $199, $200, $201, $202, $205);
      $qh=$206;
      var $207=$qh;

      return $207;
    default: assert(0, "bad label: " + label);
  }

}
_mpn_mu_div_qr2["X"]=1;

function _mpn_sub_nc387($rp, $up, $vp, $n, $ci) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $4;
  var $5;
  var $co;
  $1=$rp;
  $2=$up;
  $3=$vp;
  $4=$n;
  $5=$ci;
  var $6=$1;
  var $7=$2;
  var $8=$3;
  var $9=$4;
  var $10=___gmpn_sub_n($6, $7, $8, $9);
  $co=$10;
  var $11=$1;
  var $12=$1;
  var $13=$4;
  var $14=$5;
  var $15=___gmpn_sub_1($11, $12, $13, $14);
  var $16=$co;
  var $17=((($16)+($15))|0);
  $co=$17;
  var $18=$co;

  return $18;
}


function ___gmpn_mu_div_qr_choose_in($qn, $dn, $k) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $in;
      var $b;
      var $xn;
      $1=$qn;
      $2=$dn;
      $3=$k;
      var $4=$3;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 10; break; }
    case 3: 
      var $7=$1;
      var $8=$2;
      var $9=(($7)|0) > (($8)|0);
      if ($9) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $11=$1;
      var $12=((($11)-(1))|0);
      var $13=$2;
      var $14=((((($12)|0))/((($13)|0)))&-1);
      var $15=((($14)+(1))|0);
      $b=$15;
      var $16=$1;
      var $17=((($16)-(1))|0);
      var $18=$b;
      var $19=((((($17)|0))/((($18)|0)))&-1);
      var $20=((($19)+(1))|0);
      $in=$20;
      label = 9; break;
    case 5: 
      var $22=$1;
      var $23=((($22)*(3))&-1);
      var $24=$2;
      var $25=(($23)|0) > (($24)|0);
      if ($25) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $27=$1;
      var $28=((($27)-(1))|0);
      var $29=((((($28)|0))/(2))&-1);
      var $30=((($29)+(1))|0);
      $in=$30;
      label = 8; break;
    case 7: 
      var $32=$1;
      var $33=((($32)-(1))|0);
      var $34=(((($33)|0))&-1);
      var $35=((($34)+(1))|0);
      $in=$35;
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      label = 14; break;
    case 10: 
      var $39=$2;
      var $40=$1;
      var $41=(($39)|0) < (($40)|0);
      if ($41) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $43=$2;
      var $47 = $43;label = 13; break;
    case 12: 
      var $45=$1;
      var $47 = $45;label = 13; break;
    case 13: 
      var $47;
      $xn=$47;
      var $48=$xn;
      var $49=((($48)-(1))|0);
      var $50=$3;
      var $51=((((($49)|0))/((($50)|0)))&-1);
      var $52=((($51)+(1))|0);
      $in=$52;
      label = 14; break;
    case 14: 
      var $54=$in;

      return $54;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_mu_div_qr_choose_in["X"]=1;

function _mpn_mulmod_bnm1_itch390($rn, $an, $bn) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $n;
      var $itch;
      $1=$rn;
      $2=$an;
      $3=$bn;
      var $4=$1;
      var $5=$4 >> 1;
      $n=$5;
      var $6=$1;
      var $7=((($6)+(4))|0);
      var $8=$2;
      var $9=$n;
      var $10=(($8)|0) > (($9)|0);
      if ($10) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $12=$3;
      var $13=$n;
      var $14=(($12)|0) > (($13)|0);
      if ($14) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $16=$1;
      var $20 = $16;label = 6; break;
    case 5: 
      var $18=$n;
      var $20 = $18;label = 6; break;
    case 6: 
      var $20;
      var $23 = $20;label = 8; break;
    case 7: 
      var $23 = 0;label = 8; break;
    case 8: 
      var $23;
      var $24=((($7)+($23))|0);
      $itch=$24;
      var $25=$itch;

      return $25;
    default: assert(0, "bad label: " + label);
  }

}


function ___gmpn_bdiv_dbm1c($qp, $ap, $n, $bd, $h) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $a;
      var $p0;
      var $p1;
      var $cy;
      var $i;
      var $__x0;
      var $__x1;
      var $__x2;
      var $__x3;
      var $__ul;
      var $__vl;
      var $__uh;
      var $__vh;
      var $__u;
      var $__v;
      $1=$qp;
      $2=$ap;
      $3=$n;
      $4=$bd;
      $5=$h;
      $i=0;
      label = 3; break;
    case 3: 
      var $7=$i;
      var $8=$3;
      var $9=(($7)|0) < (($8)|0);
      if ($9) { label = 4; break; } else { label = 10; break; }
    case 4: 
      var $11=$i;
      var $12=$2;
      var $13=(($12+($11<<2))|0);
      var $14=HEAP32[(($13)>>2)];
      $a=$14;
      label = 5; break;
    case 5: 
      var $16=$a;
      $__u=$16;
      var $17=$4;
      var $18=$17 << 0;
      $__v=$18;
      var $19=$__u;
      var $20=$19 & 65535;
      $__ul=$20;
      var $21=$__u;
      var $22=$21 >>> 16;
      $__uh=$22;
      var $23=$__v;
      var $24=$23 & 65535;
      $__vl=$24;
      var $25=$__v;
      var $26=$25 >>> 16;
      $__vh=$26;
      var $27=$__ul;
      var $28=$__vl;
      var $29=Math.imul($27,$28);
      $__x0=$29;
      var $30=$__ul;
      var $31=$__vh;
      var $32=Math.imul($30,$31);
      $__x1=$32;
      var $33=$__uh;
      var $34=$__vl;
      var $35=Math.imul($33,$34);
      $__x2=$35;
      var $36=$__uh;
      var $37=$__vh;
      var $38=Math.imul($36,$37);
      $__x3=$38;
      var $39=$__x0;
      var $40=$39 >>> 16;
      var $41=$__x1;
      var $42=((($41)+($40))|0);
      $__x1=$42;
      var $43=$__x2;
      var $44=$__x1;
      var $45=((($44)+($43))|0);
      $__x1=$45;
      var $46=$__x1;
      var $47=$__x2;
      var $48=(($46)>>>0) < (($47)>>>0);
      if ($48) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $50=$__x3;
      var $51=((($50)+(65536))|0);
      $__x3=$51;
      label = 7; break;
    case 7: 
      var $53=$__x3;
      var $54=$__x1;
      var $55=$54 >>> 16;
      var $56=((($53)+($55))|0);
      $p1=$56;
      var $57=$__x1;
      var $58=$57 << 16;
      var $59=$__x0;
      var $60=$59 & 65535;
      var $61=((($58)+($60))|0);
      $p0=$61;
      label = 8; break;
    case 8: 
      var $63=$p0;
      var $64=$63 >>> 0;
      $p0=$64;
      var $65=$5;
      var $66=$p0;
      var $67=(($65)>>>0) < (($66)>>>0);
      var $68=(($67)&1);
      $cy=$68;
      var $69=$5;
      var $70=$p0;
      var $71=((($69)-($70))|0);
      $5=$71;
      var $72=$5;
      var $73=$i;
      var $74=$1;
      var $75=(($74+($73<<2))|0);
      HEAP32[(($75)>>2)]=$72;
      var $76=$5;
      var $77=$p1;
      var $78=((($76)-($77))|0);
      var $79=$cy;
      var $80=((($78)-($79))|0);
      $5=$80;
      label = 9; break;
    case 9: 
      var $82=$i;
      var $83=((($82)+(1))|0);
      $i=$83;
      label = 3; break;
    case 10: 
      var $85=$5;

      return $85;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_bdiv_dbm1c["X"]=1;

function ___gmpn_mu_div_qr_itch($nn, $dn, $mua_k) {
  var label = 0;


  var $1;
  var $2;
  var $3;
  var $itch_local;
  var $in;
  var $itch_out;
  $1=$nn;
  $2=$dn;
  $3=$mua_k;
  var $4=$2;
  var $5=((($4)+(1))|0);
  var $6=___gmpn_mulmod_bnm1_next_size($5);
  $itch_local=$6;
  var $7=$1;
  var $8=$2;
  var $9=((($7)-($8))|0);
  var $10=$2;
  var $11=$3;
  var $12=___gmpn_mu_div_qr_choose_in($9, $10, $11);
  $in=$12;
  var $13=$itch_local;
  var $14=$2;
  var $15=$in;
  var $16=_mpn_mulmod_bnm1_itch390($13, $14, $15);
  $itch_out=$16;
  var $17=$in;
  var $18=$itch_local;
  var $19=((($17)+($18))|0);
  var $20=$itch_out;
  var $21=((($19)+($20))|0);

  return $21;
}


function ___gmpn_preinv_mu_div_qr($qp, $rp, $np, $nn, $dp, $dn, $ip, $in, $scratch) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $5;
      var $6;
      var $7;
      var $8;
      var $9;
      var $10;
      var $qn;
      var $cy;
      var $cx;
      var $qh;
      var $r;
      var $tn;
      var $wn;
      var $__n;
      var $__dst;
      var $__src;
      var $__x;
      var $__x1;
      var $__p;
      var $__n2;
      var $__dst3;
      var $__src4;
      var $__x5;
      var $__x6;
      var $__p7;
      var $__x8;
      var $__p9;
      $2=$qp;
      $3=$rp;
      $4=$np;
      $5=$nn;
      $6=$dp;
      $7=$dn;
      $8=$ip;
      $9=$in;
      $10=$scratch;
      var $11=$5;
      var $12=$7;
      var $13=((($11)-($12))|0);
      $qn=$13;
      var $14=$qn;
      var $15=$4;
      var $16=(($15+($14<<2))|0);
      $4=$16;
      var $17=$qn;
      var $18=$2;
      var $19=(($18+($17<<2))|0);
      $2=$19;
      var $20=$4;
      var $21=$6;
      var $22=$7;
      var $23=___gmpn_cmp($20, $21, $22);
      var $24=(($23)|0) >= 0;
      var $25=(($24)&1);
      $qh=$25;
      var $26=$qh;
      var $27=(($26)|0)!=0;
      if ($27) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $29=$3;
      var $30=$4;
      var $31=$6;
      var $32=$7;
      var $33=___gmpn_sub_n($29, $30, $31, $32);
      label = 18; break;
    case 4: 
      label = 5; break;
    case 5: 
      label = 6; break;
    case 6: 
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      label = 9; break;
    case 9: 
      var $40=$7;
      var $41=(($40)|0)!=0;
      if ($41) { label = 10; break; } else { label = 16; break; }
    case 10: 
      var $43=$7;
      var $44=((($43)-(1))|0);
      $__n=$44;
      var $45=$3;
      $__dst=$45;
      var $46=$4;
      $__src=$46;
      var $47=$__src;
      var $48=(($47+4)|0);
      $__src=$48;
      var $49=HEAP32[(($47)>>2)];
      $__x=$49;
      var $50=$__n;
      var $51=(($50)|0)!=0;
      if ($51) { label = 11; break; } else { label = 15; break; }
    case 11: 
      label = 12; break;
    case 12: 
      var $54=$__x;
      var $55=$__dst;
      var $56=(($55+4)|0);
      $__dst=$56;
      HEAP32[(($55)>>2)]=$54;
      var $57=$__src;
      var $58=(($57+4)|0);
      $__src=$58;
      var $59=HEAP32[(($57)>>2)];
      $__x=$59;
      label = 13; break;
    case 13: 
      var $61=$__n;
      var $62=((($61)-(1))|0);
      $__n=$62;
      var $63=(($62)|0)!=0;
      if ($63) { label = 12; break; } else { label = 14; break; }
    case 14: 
      label = 15; break;
    case 15: 
      var $66=$__x;
      var $67=$__dst;
      var $68=(($67+4)|0);
      $__dst=$68;
      HEAP32[(($67)>>2)]=$66;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      var $72=$qn;
      var $73=(($72)|0)==0;
      if ($73) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $75=$qh;
      $1=$75;
      label = 81; break;
    case 20: 
      label = 21; break;
    case 21: 
      var $78=$qn;
      var $79=(($78)|0) > 0;
      if ($79) { label = 22; break; } else { label = 80; break; }
    case 22: 
      var $81=$qn;
      var $82=$9;
      var $83=(($81)|0) < (($82)|0);
      if ($83) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $85=$9;
      var $86=$qn;
      var $87=((($85)-($86))|0);
      var $88=$8;
      var $89=(($88+($87<<2))|0);
      $8=$89;
      var $90=$qn;
      $9=$90;
      label = 24; break;
    case 24: 
      var $92=$9;
      var $93=$4;
      var $94=(((-$92))|0);
      var $95=(($93+($94<<2))|0);
      $4=$95;
      var $96=$9;
      var $97=$2;
      var $98=(((-$96))|0);
      var $99=(($97+($98<<2))|0);
      $2=$99;
      var $100=$10;
      var $101=$3;
      var $102=$7;
      var $103=(($101+($102<<2))|0);
      var $104=$9;
      var $105=(((-$104))|0);
      var $106=(($103+($105<<2))|0);
      var $107=$8;
      var $108=$9;
      ___gmpn_mul_n($100, $106, $107, $108);
      var $109=$2;
      var $110=$10;
      var $111=$9;
      var $112=(($110+($111<<2))|0);
      var $113=$3;
      var $114=$7;
      var $115=(($113+($114<<2))|0);
      var $116=$9;
      var $117=(((-$116))|0);
      var $118=(($115+($117<<2))|0);
      var $119=$9;
      var $120=___gmpn_add_n($109, $112, $118, $119);
      $cy=$120;
      label = 25; break;
    case 25: 
      var $122=$cy;
      var $123=(($122)|0)==0;
      var $124=$123 ^ 1;
      var $125=(($124)&1);
      var $126=(($125)|0)!=0;
      var $127=(($126)&1);
      var $128=($127);
      var $129=(($128)|0)!=0;
      if ($129) { label = 26; break; } else { label = 27; break; }
    case 26: 
      ___gmp_assert_fail(((5248724)|0), 269, ((5249640)|0));
      throw "Reached an unreachable!"
    case 27: 
      label = 28; break;
    case 28: 
      var $133=$9;
      var $134=$qn;
      var $135=((($134)-($133))|0);
      $qn=$135;
      var $136=$9;
      var $137=(($136)|0) >= 40;
      if ($137) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $139=$10;
      var $140=$6;
      var $141=$7;
      var $142=$2;
      var $143=$9;
      var $144=___gmpn_mul($139, $140, $141, $142, $143);
      label = 44; break;
    case 30: 
      var $146=$7;
      var $147=((($146)+(1))|0);
      var $148=___gmpn_mulmod_bnm1_next_size($147);
      $tn=$148;
      var $149=$10;
      var $150=$tn;
      var $151=$6;
      var $152=$7;
      var $153=$2;
      var $154=$9;
      var $155=$10;
      var $156=$tn;
      var $157=(($155+($156<<2))|0);
      ___gmpn_mulmod_bnm1($149, $150, $151, $152, $153, $154, $157);
      var $158=$7;
      var $159=$9;
      var $160=((($158)+($159))|0);
      var $161=$tn;
      var $162=((($160)-($161))|0);
      $wn=$162;
      var $163=$wn;
      var $164=(($163)|0) > 0;
      if ($164) { label = 31; break; } else { label = 43; break; }
    case 31: 
      var $166=$10;
      var $167=$10;
      var $168=$3;
      var $169=$7;
      var $170=(($168+($169<<2))|0);
      var $171=$wn;
      var $172=(((-$171))|0);
      var $173=(($170+($172<<2))|0);
      var $174=$wn;
      var $175=___gmpn_sub_n($166, $167, $173, $174);
      $cy=$175;
      var $176=$10;
      var $177=$wn;
      var $178=(($176+($177<<2))|0);
      var $179=$10;
      var $180=$wn;
      var $181=(($179+($180<<2))|0);
      var $182=$tn;
      var $183=$wn;
      var $184=((($182)-($183))|0);
      var $185=$cy;
      var $186=___gmpn_sub_1($178, $181, $184, $185);
      $cy=$186;
      var $187=$3;
      var $188=$7;
      var $189=(($187+($188<<2))|0);
      var $190=$9;
      var $191=(((-$190))|0);
      var $192=(($189+($191<<2))|0);
      var $193=$10;
      var $194=$7;
      var $195=(($193+($194<<2))|0);
      var $196=$tn;
      var $197=$7;
      var $198=((($196)-($197))|0);
      var $199=___gmpn_cmp($192, $195, $198);
      var $200=(($199)|0) < 0;
      var $201=(($200)&1);
      $cx=$201;
      label = 32; break;
    case 32: 
      var $203=$cx;
      var $204=$cy;
      var $205=(($203)>>>0) >= (($204)>>>0);
      var $206=$205 ^ 1;
      var $207=(($206)&1);
      var $208=(($207)|0)!=0;
      var $209=(($208)&1);
      var $210=($209);
      var $211=(($210)|0)!=0;
      if ($211) { label = 33; break; } else { label = 34; break; }
    case 33: 
      ___gmp_assert_fail(((5248724)|0), 289, ((5249112)|0));
      throw "Reached an unreachable!"
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      var $216=$10;
      $__p=$216;
      var $217=$__p;
      var $218=HEAP32[(($217)>>2)];
      var $219=$cx;
      var $220=$cy;
      var $221=((($219)-($220))|0);
      var $222=((($218)+($221))|0);
      $__x1=$222;
      var $223=$__x1;
      var $224=$__p;
      HEAP32[(($224)>>2)]=$223;
      var $225=$__x1;
      var $226=$cx;
      var $227=$cy;
      var $228=((($226)-($227))|0);
      var $229=(($225)>>>0) < (($228)>>>0);
      if ($229) { label = 37; break; } else { label = 41; break; }
    case 37: 
      label = 38; break;
    case 38: 
      var $232=$__p;
      var $233=(($232+4)|0);
      $__p=$233;
      var $234=HEAP32[(($233)>>2)];
      var $235=((($234)+(1))|0);
      HEAP32[(($233)>>2)]=$235;
      var $236=(($235)|0)==0;
      if ($236) { label = 39; break; } else { label = 40; break; }
    case 39: 
      label = 38; break;
    case 40: 
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      label = 44; break;
    case 44: 
      var $243=$7;
      var $244=$9;
      var $245=((($243)-($244))|0);
      var $246=$3;
      var $247=(($246+($245<<2))|0);
      var $248=HEAP32[(($247)>>2)];
      var $249=$7;
      var $250=$10;
      var $251=(($250+($249<<2))|0);
      var $252=HEAP32[(($251)>>2)];
      var $253=((($248)-($252))|0);
      $r=$253;
      var $254=$7;
      var $255=$9;
      var $256=(($254)|0)!=(($255)|0);
      if ($256) { label = 45; break; } else { label = 63; break; }
    case 45: 
      var $258=$10;
      var $259=$4;
      var $260=$10;
      var $261=$9;
      var $262=___gmpn_sub_n($258, $259, $260, $261);
      $cy=$262;
      var $263=$10;
      var $264=$9;
      var $265=(($263+($264<<2))|0);
      var $266=$3;
      var $267=$10;
      var $268=$9;
      var $269=(($267+($268<<2))|0);
      var $270=$7;
      var $271=$9;
      var $272=((($270)-($271))|0);
      var $273=$cy;
      var $274=_mpn_sub_nc387($265, $266, $269, $272, $273);
      $cy=$274;
      label = 46; break;
    case 46: 
      label = 47; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $283=$7;
      var $284=(($283)|0)!=0;
      if ($284) { label = 54; break; } else { label = 60; break; }
    case 54: 
      var $286=$7;
      var $287=((($286)-(1))|0);
      $__n2=$287;
      var $288=$3;
      $__dst3=$288;
      var $289=$10;
      $__src4=$289;
      var $290=$__src4;
      var $291=(($290+4)|0);
      $__src4=$291;
      var $292=HEAP32[(($290)>>2)];
      $__x5=$292;
      var $293=$__n2;
      var $294=(($293)|0)!=0;
      if ($294) { label = 55; break; } else { label = 59; break; }
    case 55: 
      label = 56; break;
    case 56: 
      var $297=$__x5;
      var $298=$__dst3;
      var $299=(($298+4)|0);
      $__dst3=$299;
      HEAP32[(($298)>>2)]=$297;
      var $300=$__src4;
      var $301=(($300+4)|0);
      $__src4=$301;
      var $302=HEAP32[(($300)>>2)];
      $__x5=$302;
      label = 57; break;
    case 57: 
      var $304=$__n2;
      var $305=((($304)-(1))|0);
      $__n2=$305;
      var $306=(($305)|0)!=0;
      if ($306) { label = 56; break; } else { label = 58; break; }
    case 58: 
      label = 59; break;
    case 59: 
      var $309=$__x5;
      var $310=$__dst3;
      var $311=(($310+4)|0);
      $__dst3=$311;
      HEAP32[(($310)>>2)]=$309;
      label = 60; break;
    case 60: 
      label = 61; break;
    case 61: 
      label = 62; break;
    case 62: 
      label = 64; break;
    case 63: 
      var $316=$3;
      var $317=$4;
      var $318=$10;
      var $319=$9;
      var $320=___gmpn_sub_n($316, $317, $318, $319);
      $cy=$320;
      label = 64; break;
    case 64: 
      var $322=$cy;
      var $323=$r;
      var $324=((($323)-($322))|0);
      $r=$324;
      label = 65; break;
    case 65: 
      var $326=$r;
      var $327=(($326)|0)!=0;
      if ($327) { label = 66; break; } else { label = 72; break; }
    case 66: 
      label = 67; break;
    case 67: 
      var $330=$2;
      $__p7=$330;
      label = 68; break;
    case 68: 
      var $332=$__p7;
      var $333=(($332+4)|0);
      $__p7=$333;
      var $334=HEAP32[(($332)>>2)];
      var $335=((($334)+(1))|0);
      HEAP32[(($332)>>2)]=$335;
      var $336=(($335)|0)==0;
      if ($336) { label = 69; break; } else { label = 70; break; }
    case 69: 
      label = 68; break;
    case 70: 
      label = 71; break;
    case 71: 
      var $340=$3;
      var $341=$3;
      var $342=$6;
      var $343=$7;
      var $344=___gmpn_sub_n($340, $341, $342, $343);
      $cy=$344;
      var $345=$cy;
      var $346=$r;
      var $347=((($346)-($345))|0);
      $r=$347;
      label = 65; break;
    case 72: 
      var $349=$3;
      var $350=$6;
      var $351=$7;
      var $352=___gmpn_cmp($349, $350, $351);
      var $353=(($352)|0) >= 0;
      if ($353) { label = 73; break; } else { label = 79; break; }
    case 73: 
      label = 74; break;
    case 74: 
      var $356=$2;
      $__p9=$356;
      label = 75; break;
    case 75: 
      var $358=$__p9;
      var $359=(($358+4)|0);
      $__p9=$359;
      var $360=HEAP32[(($358)>>2)];
      var $361=((($360)+(1))|0);
      HEAP32[(($358)>>2)]=$361;
      var $362=(($361)|0)==0;
      if ($362) { label = 76; break; } else { label = 77; break; }
    case 76: 
      label = 75; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $366=$3;
      var $367=$3;
      var $368=$6;
      var $369=$7;
      var $370=___gmpn_sub_n($366, $367, $368, $369);
      $cy=$370;
      label = 79; break;
    case 79: 
      label = 21; break;
    case 80: 
      var $373=$qh;
      $1=$373;
      label = 81; break;
    case 81: 
      var $375=$1;

      return $375;
    default: assert(0, "bad label: " + label);
  }

}
___gmpn_preinv_mu_div_qr["X"]=1;

function _malloc($bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b1;
      var $p2;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F3;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F4;
      var $rsize5;
      var $p6;
      var $r7;
      var $dvs;
      var $rsize8;
      var $p9;
      var $r10;
      $1=$bytes;
      var $2=$1;
      var $3=(($2)>>>0) <= 244;
      if ($3) { label = 3; break; } else { label = 38; break; }
    case 3: 
      var $5=$1;
      var $6=(($5)>>>0) < 11;
      if ($6) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $14 = 16;label = 6; break;
    case 5: 
      var $9=$1;
      var $10=((($9)+(4))|0);
      var $11=((($10)+(7))|0);
      var $12=$11 & -8;
      var $14 = $12;label = 6; break;
    case 6: 
      var $14;
      $nb=$14;
      var $15=$nb;
      var $16=$15 >>> 3;
      $idx=$16;
      var $17=HEAP32[((((5249956)|0))>>2)];
      var $18=$idx;
      var $19=$17 >>> (($18)>>>0);
      $smallbits=$19;
      var $20=$smallbits;
      var $21=$20 & 3;
      var $22=(($21)|0)!=0;
      if ($22) { label = 7; break; } else { label = 14; break; }
    case 7: 
      var $24=$smallbits;
      var $25=$24 ^ -1;
      var $26=$25 & 1;
      var $27=$idx;
      var $28=((($27)+($26))|0);
      $idx=$28;
      var $29=$idx;
      var $30=$29 << 1;
      var $31=((((5249996)|0)+($30<<2))|0);
      var $32=$31;
      var $33=$32;
      $b=$33;
      var $34=$b;
      var $35=(($34+8)|0);
      var $36=HEAP32[(($35)>>2)];
      $p=$36;
      var $37=$p;
      var $38=(($37+8)|0);
      var $39=HEAP32[(($38)>>2)];
      $F=$39;
      var $40=$b;
      var $41=$F;
      var $42=(($40)|0)==(($41)|0);
      if ($42) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $44=$idx;
      var $45=1 << $44;
      var $46=$45 ^ -1;
      var $47=HEAP32[((((5249956)|0))>>2)];
      var $48=$47 & $46;
      HEAP32[((((5249956)|0))>>2)]=$48;
      label = 13; break;
    case 9: 
      var $50=$F;
      var $51=$50;
      var $52=HEAP32[((((5249972)|0))>>2)];
      var $53=(($51)>>>0) >= (($52)>>>0);
      var $54=(($53)&1);
      var $55=($54);
      var $56=(($55)|0)!=0;
      if ($56) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $58=$F;
      var $59=$b;
      var $60=(($59+8)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$b;
      var $62=$F;
      var $63=(($62+12)|0);
      HEAP32[(($63)>>2)]=$61;
      label = 12; break;
    case 11: 
      _abort();
      throw "Reached an unreachable!"
    case 12: 
      label = 13; break;
    case 13: 
      var $67=$idx;
      var $68=$67 << 3;
      var $69=$68 | 1;
      var $70=$69 | 2;
      var $71=$p;
      var $72=(($71+4)|0);
      HEAP32[(($72)>>2)]=$70;
      var $73=$p;
      var $74=$73;
      var $75=$idx;
      var $76=$75 << 3;
      var $77=(($74+$76)|0);
      var $78=$77;
      var $79=(($78+4)|0);
      var $80=HEAP32[(($79)>>2)];
      var $81=$80 | 1;
      HEAP32[(($79)>>2)]=$81;
      var $82=$p;
      var $83=$82;
      var $84=(($83+8)|0);
      $mem=$84;
      label = 54; break;
    case 14: 
      var $86=$nb;
      var $87=HEAP32[((((5249964)|0))>>2)];
      var $88=(($86)>>>0) > (($87)>>>0);
      if ($88) { label = 15; break; } else { label = 36; break; }
    case 15: 
      var $90=$smallbits;
      var $91=(($90)|0)!=0;
      if ($91) { label = 16; break; } else { label = 31; break; }
    case 16: 
      var $93=$smallbits;
      var $94=$idx;
      var $95=$93 << $94;
      var $96=$idx;
      var $97=1 << $96;
      var $98=$97 << 1;
      var $99=$idx;
      var $100=1 << $99;
      var $101=$100 << 1;
      var $102=(((-$101))|0);
      var $103=$98 | $102;
      var $104=$95 & $103;
      $leftbits=$104;
      var $105=$leftbits;
      var $106=$leftbits;
      var $107=(((-$106))|0);
      var $108=$105 & $107;
      $leastbit=$108;
      var $109=$leastbit;
      var $110=((($109)-(1))|0);
      $Y=$110;
      var $111=$Y;
      var $112=$111 >>> 12;
      var $113=$112 & 16;
      $K=$113;
      var $114=$K;
      $N=$114;
      var $115=$K;
      var $116=$Y;
      var $117=$116 >>> (($115)>>>0);
      $Y=$117;
      var $118=$Y;
      var $119=$118 >>> 5;
      var $120=$119 & 8;
      $K=$120;
      var $121=$N;
      var $122=((($121)+($120))|0);
      $N=$122;
      var $123=$K;
      var $124=$Y;
      var $125=$124 >>> (($123)>>>0);
      $Y=$125;
      var $126=$Y;
      var $127=$126 >>> 2;
      var $128=$127 & 4;
      $K=$128;
      var $129=$N;
      var $130=((($129)+($128))|0);
      $N=$130;
      var $131=$K;
      var $132=$Y;
      var $133=$132 >>> (($131)>>>0);
      $Y=$133;
      var $134=$Y;
      var $135=$134 >>> 1;
      var $136=$135 & 2;
      $K=$136;
      var $137=$N;
      var $138=((($137)+($136))|0);
      $N=$138;
      var $139=$K;
      var $140=$Y;
      var $141=$140 >>> (($139)>>>0);
      $Y=$141;
      var $142=$Y;
      var $143=$142 >>> 1;
      var $144=$143 & 1;
      $K=$144;
      var $145=$N;
      var $146=((($145)+($144))|0);
      $N=$146;
      var $147=$K;
      var $148=$Y;
      var $149=$148 >>> (($147)>>>0);
      $Y=$149;
      var $150=$N;
      var $151=$Y;
      var $152=((($150)+($151))|0);
      $i=$152;
      var $153=$i;
      var $154=$153 << 1;
      var $155=((((5249996)|0)+($154<<2))|0);
      var $156=$155;
      var $157=$156;
      $b1=$157;
      var $158=$b1;
      var $159=(($158+8)|0);
      var $160=HEAP32[(($159)>>2)];
      $p2=$160;
      var $161=$p2;
      var $162=(($161+8)|0);
      var $163=HEAP32[(($162)>>2)];
      $F3=$163;
      var $164=$b1;
      var $165=$F3;
      var $166=(($164)|0)==(($165)|0);
      if ($166) { label = 17; break; } else { label = 18; break; }
    case 17: 
      var $168=$i;
      var $169=1 << $168;
      var $170=$169 ^ -1;
      var $171=HEAP32[((((5249956)|0))>>2)];
      var $172=$171 & $170;
      HEAP32[((((5249956)|0))>>2)]=$172;
      label = 22; break;
    case 18: 
      var $174=$F3;
      var $175=$174;
      var $176=HEAP32[((((5249972)|0))>>2)];
      var $177=(($175)>>>0) >= (($176)>>>0);
      var $178=(($177)&1);
      var $179=($178);
      var $180=(($179)|0)!=0;
      if ($180) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $182=$F3;
      var $183=$b1;
      var $184=(($183+8)|0);
      HEAP32[(($184)>>2)]=$182;
      var $185=$b1;
      var $186=$F3;
      var $187=(($186+12)|0);
      HEAP32[(($187)>>2)]=$185;
      label = 21; break;
    case 20: 
      _abort();
      throw "Reached an unreachable!"
    case 21: 
      label = 22; break;
    case 22: 
      var $191=$i;
      var $192=$191 << 3;
      var $193=$nb;
      var $194=((($192)-($193))|0);
      $rsize=$194;
      var $195=$nb;
      var $196=$195 | 1;
      var $197=$196 | 2;
      var $198=$p2;
      var $199=(($198+4)|0);
      HEAP32[(($199)>>2)]=$197;
      var $200=$p2;
      var $201=$200;
      var $202=$nb;
      var $203=(($201+$202)|0);
      var $204=$203;
      $r=$204;
      var $205=$rsize;
      var $206=$205 | 1;
      var $207=$r;
      var $208=(($207+4)|0);
      HEAP32[(($208)>>2)]=$206;
      var $209=$rsize;
      var $210=$r;
      var $211=$210;
      var $212=$rsize;
      var $213=(($211+$212)|0);
      var $214=$213;
      var $215=(($214)|0);
      HEAP32[(($215)>>2)]=$209;
      var $216=HEAP32[((((5249964)|0))>>2)];
      $DVS=$216;
      var $217=$DVS;
      var $218=(($217)|0)!=0;
      if ($218) { label = 23; break; } else { label = 30; break; }
    case 23: 
      var $220=HEAP32[((((5249976)|0))>>2)];
      $DV=$220;
      var $221=$DVS;
      var $222=$221 >>> 3;
      $I=$222;
      var $223=$I;
      var $224=$223 << 1;
      var $225=((((5249996)|0)+($224<<2))|0);
      var $226=$225;
      var $227=$226;
      $B=$227;
      var $228=$B;
      $F4=$228;
      var $229=HEAP32[((((5249956)|0))>>2)];
      var $230=$I;
      var $231=1 << $230;
      var $232=$229 & $231;
      var $233=(($232)|0)!=0;
      if ($233) { label = 25; break; } else { label = 24; break; }
    case 24: 
      var $235=$I;
      var $236=1 << $235;
      var $237=HEAP32[((((5249956)|0))>>2)];
      var $238=$237 | $236;
      HEAP32[((((5249956)|0))>>2)]=$238;
      label = 29; break;
    case 25: 
      var $240=$B;
      var $241=(($240+8)|0);
      var $242=HEAP32[(($241)>>2)];
      var $243=$242;
      var $244=HEAP32[((((5249972)|0))>>2)];
      var $245=(($243)>>>0) >= (($244)>>>0);
      var $246=(($245)&1);
      var $247=($246);
      var $248=(($247)|0)!=0;
      if ($248) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $250=$B;
      var $251=(($250+8)|0);
      var $252=HEAP32[(($251)>>2)];
      $F4=$252;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 29; break;
    case 29: 
      var $256=$DV;
      var $257=$B;
      var $258=(($257+8)|0);
      HEAP32[(($258)>>2)]=$256;
      var $259=$DV;
      var $260=$F4;
      var $261=(($260+12)|0);
      HEAP32[(($261)>>2)]=$259;
      var $262=$F4;
      var $263=$DV;
      var $264=(($263+8)|0);
      HEAP32[(($264)>>2)]=$262;
      var $265=$B;
      var $266=$DV;
      var $267=(($266+12)|0);
      HEAP32[(($267)>>2)]=$265;
      label = 30; break;
    case 30: 
      var $269=$rsize;
      HEAP32[((((5249964)|0))>>2)]=$269;
      var $270=$r;
      HEAP32[((((5249976)|0))>>2)]=$270;
      var $271=$p2;
      var $272=$271;
      var $273=(($272+8)|0);
      $mem=$273;
      label = 54; break;
    case 31: 
      var $275=HEAP32[((((5249960)|0))>>2)];
      var $276=(($275)|0)!=0;
      if ($276) { label = 32; break; } else { label = 34; break; }
    case 32: 
      var $278=$nb;
      var $279=_tmalloc_small(5249956, $278);
      $mem=$279;
      var $280=(($279)|0)!=0;
      if ($280) { label = 33; break; } else { label = 34; break; }
    case 33: 
      label = 54; break;
    case 34: 
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 45; break;
    case 38: 
      var $287=$1;
      var $288=(($287)>>>0) >= 4294967232;
      if ($288) { label = 39; break; } else { label = 40; break; }
    case 39: 
      $nb=-1;
      label = 44; break;
    case 40: 
      var $291=$1;
      var $292=((($291)+(4))|0);
      var $293=((($292)+(7))|0);
      var $294=$293 & -8;
      $nb=$294;
      var $295=HEAP32[((((5249960)|0))>>2)];
      var $296=(($295)|0)!=0;
      if ($296) { label = 41; break; } else { label = 43; break; }
    case 41: 
      var $298=$nb;
      var $299=_tmalloc_large(5249956, $298);
      $mem=$299;
      var $300=(($299)|0)!=0;
      if ($300) { label = 42; break; } else { label = 43; break; }
    case 42: 
      label = 54; break;
    case 43: 
      label = 44; break;
    case 44: 
      label = 45; break;
    case 45: 
      var $305=$nb;
      var $306=HEAP32[((((5249964)|0))>>2)];
      var $307=(($305)>>>0) <= (($306)>>>0);
      if ($307) { label = 46; break; } else { label = 50; break; }
    case 46: 
      var $309=HEAP32[((((5249964)|0))>>2)];
      var $310=$nb;
      var $311=((($309)-($310))|0);
      $rsize5=$311;
      var $312=HEAP32[((((5249976)|0))>>2)];
      $p6=$312;
      var $313=$rsize5;
      var $314=(($313)>>>0) >= 16;
      if ($314) { label = 47; break; } else { label = 48; break; }
    case 47: 
      var $316=$p6;
      var $317=$316;
      var $318=$nb;
      var $319=(($317+$318)|0);
      var $320=$319;
      HEAP32[((((5249976)|0))>>2)]=$320;
      $r7=$320;
      var $321=$rsize5;
      HEAP32[((((5249964)|0))>>2)]=$321;
      var $322=$rsize5;
      var $323=$322 | 1;
      var $324=$r7;
      var $325=(($324+4)|0);
      HEAP32[(($325)>>2)]=$323;
      var $326=$rsize5;
      var $327=$r7;
      var $328=$327;
      var $329=$rsize5;
      var $330=(($328+$329)|0);
      var $331=$330;
      var $332=(($331)|0);
      HEAP32[(($332)>>2)]=$326;
      var $333=$nb;
      var $334=$333 | 1;
      var $335=$334 | 2;
      var $336=$p6;
      var $337=(($336+4)|0);
      HEAP32[(($337)>>2)]=$335;
      label = 49; break;
    case 48: 
      var $339=HEAP32[((((5249964)|0))>>2)];
      $dvs=$339;
      HEAP32[((((5249964)|0))>>2)]=0;
      HEAP32[((((5249976)|0))>>2)]=0;
      var $340=$dvs;
      var $341=$340 | 1;
      var $342=$341 | 2;
      var $343=$p6;
      var $344=(($343+4)|0);
      HEAP32[(($344)>>2)]=$342;
      var $345=$p6;
      var $346=$345;
      var $347=$dvs;
      var $348=(($346+$347)|0);
      var $349=$348;
      var $350=(($349+4)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=$351 | 1;
      HEAP32[(($350)>>2)]=$352;
      label = 49; break;
    case 49: 
      var $354=$p6;
      var $355=$354;
      var $356=(($355+8)|0);
      $mem=$356;
      label = 54; break;
    case 50: 
      var $358=$nb;
      var $359=HEAP32[((((5249968)|0))>>2)];
      var $360=(($358)>>>0) < (($359)>>>0);
      if ($360) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $362=$nb;
      var $363=HEAP32[((((5249968)|0))>>2)];
      var $364=((($363)-($362))|0);
      HEAP32[((((5249968)|0))>>2)]=$364;
      $rsize8=$364;
      var $365=HEAP32[((((5249980)|0))>>2)];
      $p9=$365;
      var $366=$p9;
      var $367=$366;
      var $368=$nb;
      var $369=(($367+$368)|0);
      var $370=$369;
      HEAP32[((((5249980)|0))>>2)]=$370;
      $r10=$370;
      var $371=$rsize8;
      var $372=$371 | 1;
      var $373=$r10;
      var $374=(($373+4)|0);
      HEAP32[(($374)>>2)]=$372;
      var $375=$nb;
      var $376=$375 | 1;
      var $377=$376 | 2;
      var $378=$p9;
      var $379=(($378+4)|0);
      HEAP32[(($379)>>2)]=$377;
      var $380=$p9;
      var $381=$380;
      var $382=(($381+8)|0);
      $mem=$382;
      label = 54; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $385=$nb;
      var $386=_sys_alloc(5249956, $385);
      $mem=$386;
      label = 54; break;
    case 54: 
      var $388=$mem;

      return $388;
    default: assert(0, "bad label: " + label);
  }

}
_malloc["X"]=1;

function _tmalloc_small($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F1;
      $1=$m;
      $2=$nb;
      var $3=$1;
      var $4=(($3+4)|0);
      var $5=HEAP32[(($4)>>2)];
      var $6=$1;
      var $7=(($6+4)|0);
      var $8=HEAP32[(($7)>>2)];
      var $9=(((-$8))|0);
      var $10=$5 & $9;
      $leastbit=$10;
      var $11=$leastbit;
      var $12=((($11)-(1))|0);
      $Y=$12;
      var $13=$Y;
      var $14=$13 >>> 12;
      var $15=$14 & 16;
      $K=$15;
      var $16=$K;
      $N=$16;
      var $17=$K;
      var $18=$Y;
      var $19=$18 >>> (($17)>>>0);
      $Y=$19;
      var $20=$Y;
      var $21=$20 >>> 5;
      var $22=$21 & 8;
      $K=$22;
      var $23=$N;
      var $24=((($23)+($22))|0);
      $N=$24;
      var $25=$K;
      var $26=$Y;
      var $27=$26 >>> (($25)>>>0);
      $Y=$27;
      var $28=$Y;
      var $29=$28 >>> 2;
      var $30=$29 & 4;
      $K=$30;
      var $31=$N;
      var $32=((($31)+($30))|0);
      $N=$32;
      var $33=$K;
      var $34=$Y;
      var $35=$34 >>> (($33)>>>0);
      $Y=$35;
      var $36=$Y;
      var $37=$36 >>> 1;
      var $38=$37 & 2;
      $K=$38;
      var $39=$N;
      var $40=((($39)+($38))|0);
      $N=$40;
      var $41=$K;
      var $42=$Y;
      var $43=$42 >>> (($41)>>>0);
      $Y=$43;
      var $44=$Y;
      var $45=$44 >>> 1;
      var $46=$45 & 1;
      $K=$46;
      var $47=$N;
      var $48=((($47)+($46))|0);
      $N=$48;
      var $49=$K;
      var $50=$Y;
      var $51=$50 >>> (($49)>>>0);
      $Y=$51;
      var $52=$N;
      var $53=$Y;
      var $54=((($52)+($53))|0);
      $i=$54;
      var $55=$i;
      var $56=$1;
      var $57=(($56+304)|0);
      var $58=(($57+($55<<2))|0);
      var $59=HEAP32[(($58)>>2)];
      $t=$59;
      $v=$59;
      var $60=$t;
      var $61=(($60+4)|0);
      var $62=HEAP32[(($61)>>2)];
      var $63=$62 & -8;
      var $64=$2;
      var $65=((($63)-($64))|0);
      $rsize=$65;
      label = 3; break;
    case 3: 
      var $67=$t;
      var $68=(($67+16)|0);
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=(($70)|0)!=0;
      if ($71) { label = 4; break; } else { label = 5; break; }
    case 4: 
      var $73=$t;
      var $74=(($73+16)|0);
      var $75=(($74)|0);
      var $76=HEAP32[(($75)>>2)];
      var $83 = $76;label = 6; break;
    case 5: 
      var $78=$t;
      var $79=(($78+16)|0);
      var $80=(($79+4)|0);
      var $81=HEAP32[(($80)>>2)];
      var $83 = $81;label = 6; break;
    case 6: 
      var $83;
      $t=$83;
      var $84=(($83)|0)!=0;
      if ($84) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $86=$t;
      var $87=(($86+4)|0);
      var $88=HEAP32[(($87)>>2)];
      var $89=$88 & -8;
      var $90=$2;
      var $91=((($89)-($90))|0);
      $trem=$91;
      var $92=$trem;
      var $93=$rsize;
      var $94=(($92)>>>0) < (($93)>>>0);
      if ($94) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $96=$trem;
      $rsize=$96;
      var $97=$t;
      $v=$97;
      label = 9; break;
    case 9: 
      label = 3; break;
    case 10: 
      var $100=$v;
      var $101=$100;
      var $102=$1;
      var $103=(($102+16)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($101)>>>0) >= (($104)>>>0);
      var $106=(($105)&1);
      var $107=($106);
      var $108=(($107)|0)!=0;
      if ($108) { label = 11; break; } else { label = 70; break; }
    case 11: 
      var $110=$v;
      var $111=$110;
      var $112=$2;
      var $113=(($111+$112)|0);
      var $114=$113;
      $r=$114;
      var $115=$v;
      var $116=$115;
      var $117=$r;
      var $118=$117;
      var $119=(($116)>>>0) < (($118)>>>0);
      var $120=(($119)&1);
      var $121=($120);
      var $122=(($121)|0)!=0;
      if ($122) { label = 12; break; } else { label = 69; break; }
    case 12: 
      var $124=$v;
      var $125=(($124+24)|0);
      var $126=HEAP32[(($125)>>2)];
      $XP=$126;
      var $127=$v;
      var $128=(($127+12)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=$v;
      var $131=(($129)|0)!=(($130)|0);
      if ($131) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $133=$v;
      var $134=(($133+8)|0);
      var $135=HEAP32[(($134)>>2)];
      $F=$135;
      var $136=$v;
      var $137=(($136+12)|0);
      var $138=HEAP32[(($137)>>2)];
      $R=$138;
      var $139=$F;
      var $140=$139;
      var $141=$1;
      var $142=(($141+16)|0);
      var $143=HEAP32[(($142)>>2)];
      var $144=(($140)>>>0) >= (($143)>>>0);
      var $145=(($144)&1);
      var $146=($145);
      var $147=(($146)|0)!=0;
      if ($147) { label = 14; break; } else { label = 15; break; }
    case 14: 
      var $149=$R;
      var $150=$F;
      var $151=(($150+12)|0);
      HEAP32[(($151)>>2)]=$149;
      var $152=$F;
      var $153=$R;
      var $154=(($153+8)|0);
      HEAP32[(($154)>>2)]=$152;
      label = 16; break;
    case 15: 
      _abort();
      throw "Reached an unreachable!"
    case 16: 
      label = 29; break;
    case 17: 
      var $158=$v;
      var $159=(($158+16)|0);
      var $160=(($159+4)|0);
      $RP=$160;
      var $161=HEAP32[(($160)>>2)];
      $R=$161;
      var $162=(($161)|0)!=0;
      if ($162) { label = 19; break; } else { label = 18; break; }
    case 18: 
      var $164=$v;
      var $165=(($164+16)|0);
      var $166=(($165)|0);
      $RP=$166;
      var $167=HEAP32[(($166)>>2)];
      $R=$167;
      var $168=(($167)|0)!=0;
      if ($168) { label = 19; break; } else { label = 28; break; }
    case 19: 
      label = 20; break;
    case 20: 
      var $171=$R;
      var $172=(($171+16)|0);
      var $173=(($172+4)|0);
      $CP=$173;
      var $174=HEAP32[(($173)>>2)];
      var $175=(($174)|0)!=0;
      if ($175) { var $183 = 1;label = 22; break; } else { label = 21; break; }
    case 21: 
      var $177=$R;
      var $178=(($177+16)|0);
      var $179=(($178)|0);
      $CP=$179;
      var $180=HEAP32[(($179)>>2)];
      var $181=(($180)|0)!=0;
      var $183 = $181;label = 22; break;
    case 22: 
      var $183;
      if ($183) { label = 23; break; } else { label = 24; break; }
    case 23: 
      var $185=$CP;
      $RP=$185;
      var $186=HEAP32[(($185)>>2)];
      $R=$186;
      label = 20; break;
    case 24: 
      var $188=$RP;
      var $189=$188;
      var $190=$1;
      var $191=(($190+16)|0);
      var $192=HEAP32[(($191)>>2)];
      var $193=(($189)>>>0) >= (($192)>>>0);
      var $194=(($193)&1);
      var $195=($194);
      var $196=(($195)|0)!=0;
      if ($196) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $198=$RP;
      HEAP32[(($198)>>2)]=0;
      label = 27; break;
    case 26: 
      _abort();
      throw "Reached an unreachable!"
    case 27: 
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      var $203=$XP;
      var $204=(($203)|0)!=0;
      if ($204) { label = 30; break; } else { label = 57; break; }
    case 30: 
      var $206=$v;
      var $207=(($206+28)|0);
      var $208=HEAP32[(($207)>>2)];
      var $209=$1;
      var $210=(($209+304)|0);
      var $211=(($210+($208<<2))|0);
      $H=$211;
      var $212=$v;
      var $213=$H;
      var $214=HEAP32[(($213)>>2)];
      var $215=(($212)|0)==(($214)|0);
      if ($215) { label = 31; break; } else { label = 34; break; }
    case 31: 
      var $217=$R;
      var $218=$H;
      HEAP32[(($218)>>2)]=$217;
      var $219=(($217)|0)==0;
      if ($219) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $221=$v;
      var $222=(($221+28)|0);
      var $223=HEAP32[(($222)>>2)];
      var $224=1 << $223;
      var $225=$224 ^ -1;
      var $226=$1;
      var $227=(($226+4)|0);
      var $228=HEAP32[(($227)>>2)];
      var $229=$228 & $225;
      HEAP32[(($227)>>2)]=$229;
      label = 33; break;
    case 33: 
      label = 41; break;
    case 34: 
      var $232=$XP;
      var $233=$232;
      var $234=$1;
      var $235=(($234+16)|0);
      var $236=HEAP32[(($235)>>2)];
      var $237=(($233)>>>0) >= (($236)>>>0);
      var $238=(($237)&1);
      var $239=($238);
      var $240=(($239)|0)!=0;
      if ($240) { label = 35; break; } else { label = 39; break; }
    case 35: 
      var $242=$XP;
      var $243=(($242+16)|0);
      var $244=(($243)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=$v;
      var $247=(($245)|0)==(($246)|0);
      if ($247) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $249=$R;
      var $250=$XP;
      var $251=(($250+16)|0);
      var $252=(($251)|0);
      HEAP32[(($252)>>2)]=$249;
      label = 38; break;
    case 37: 
      var $254=$R;
      var $255=$XP;
      var $256=(($255+16)|0);
      var $257=(($256+4)|0);
      HEAP32[(($257)>>2)]=$254;
      label = 38; break;
    case 38: 
      label = 40; break;
    case 39: 
      _abort();
      throw "Reached an unreachable!"
    case 40: 
      label = 41; break;
    case 41: 
      var $262=$R;
      var $263=(($262)|0)!=0;
      if ($263) { label = 42; break; } else { label = 56; break; }
    case 42: 
      var $265=$R;
      var $266=$265;
      var $267=$1;
      var $268=(($267+16)|0);
      var $269=HEAP32[(($268)>>2)];
      var $270=(($266)>>>0) >= (($269)>>>0);
      var $271=(($270)&1);
      var $272=($271);
      var $273=(($272)|0)!=0;
      if ($273) { label = 43; break; } else { label = 54; break; }
    case 43: 
      var $275=$XP;
      var $276=$R;
      var $277=(($276+24)|0);
      HEAP32[(($277)>>2)]=$275;
      var $278=$v;
      var $279=(($278+16)|0);
      var $280=(($279)|0);
      var $281=HEAP32[(($280)>>2)];
      $C0=$281;
      var $282=(($281)|0)!=0;
      if ($282) { label = 44; break; } else { label = 48; break; }
    case 44: 
      var $284=$C0;
      var $285=$284;
      var $286=$1;
      var $287=(($286+16)|0);
      var $288=HEAP32[(($287)>>2)];
      var $289=(($285)>>>0) >= (($288)>>>0);
      var $290=(($289)&1);
      var $291=($290);
      var $292=(($291)|0)!=0;
      if ($292) { label = 45; break; } else { label = 46; break; }
    case 45: 
      var $294=$C0;
      var $295=$R;
      var $296=(($295+16)|0);
      var $297=(($296)|0);
      HEAP32[(($297)>>2)]=$294;
      var $298=$R;
      var $299=$C0;
      var $300=(($299+24)|0);
      HEAP32[(($300)>>2)]=$298;
      label = 47; break;
    case 46: 
      _abort();
      throw "Reached an unreachable!"
    case 47: 
      label = 48; break;
    case 48: 
      var $304=$v;
      var $305=(($304+16)|0);
      var $306=(($305+4)|0);
      var $307=HEAP32[(($306)>>2)];
      $C1=$307;
      var $308=(($307)|0)!=0;
      if ($308) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $310=$C1;
      var $311=$310;
      var $312=$1;
      var $313=(($312+16)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=(($311)>>>0) >= (($314)>>>0);
      var $316=(($315)&1);
      var $317=($316);
      var $318=(($317)|0)!=0;
      if ($318) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $320=$C1;
      var $321=$R;
      var $322=(($321+16)|0);
      var $323=(($322+4)|0);
      HEAP32[(($323)>>2)]=$320;
      var $324=$R;
      var $325=$C1;
      var $326=(($325+24)|0);
      HEAP32[(($326)>>2)]=$324;
      label = 52; break;
    case 51: 
      _abort();
      throw "Reached an unreachable!"
    case 52: 
      label = 53; break;
    case 53: 
      label = 55; break;
    case 54: 
      _abort();
      throw "Reached an unreachable!"
    case 55: 
      label = 56; break;
    case 56: 
      label = 57; break;
    case 57: 
      var $334=$rsize;
      var $335=(($334)>>>0) < 16;
      if ($335) { label = 58; break; } else { label = 59; break; }
    case 58: 
      var $337=$rsize;
      var $338=$2;
      var $339=((($337)+($338))|0);
      var $340=$339 | 1;
      var $341=$340 | 2;
      var $342=$v;
      var $343=(($342+4)|0);
      HEAP32[(($343)>>2)]=$341;
      var $344=$v;
      var $345=$344;
      var $346=$rsize;
      var $347=$2;
      var $348=((($346)+($347))|0);
      var $349=(($345+$348)|0);
      var $350=$349;
      var $351=(($350+4)|0);
      var $352=HEAP32[(($351)>>2)];
      var $353=$352 | 1;
      HEAP32[(($351)>>2)]=$353;
      label = 68; break;
    case 59: 
      var $355=$2;
      var $356=$355 | 1;
      var $357=$356 | 2;
      var $358=$v;
      var $359=(($358+4)|0);
      HEAP32[(($359)>>2)]=$357;
      var $360=$rsize;
      var $361=$360 | 1;
      var $362=$r;
      var $363=(($362+4)|0);
      HEAP32[(($363)>>2)]=$361;
      var $364=$rsize;
      var $365=$r;
      var $366=$365;
      var $367=$rsize;
      var $368=(($366+$367)|0);
      var $369=$368;
      var $370=(($369)|0);
      HEAP32[(($370)>>2)]=$364;
      var $371=$1;
      var $372=(($371+8)|0);
      var $373=HEAP32[(($372)>>2)];
      $DVS=$373;
      var $374=$DVS;
      var $375=(($374)|0)!=0;
      if ($375) { label = 60; break; } else { label = 67; break; }
    case 60: 
      var $377=$1;
      var $378=(($377+20)|0);
      var $379=HEAP32[(($378)>>2)];
      $DV=$379;
      var $380=$DVS;
      var $381=$380 >>> 3;
      $I=$381;
      var $382=$I;
      var $383=$382 << 1;
      var $384=$1;
      var $385=(($384+40)|0);
      var $386=(($385+($383<<2))|0);
      var $387=$386;
      var $388=$387;
      $B=$388;
      var $389=$B;
      $F1=$389;
      var $390=$1;
      var $391=(($390)|0);
      var $392=HEAP32[(($391)>>2)];
      var $393=$I;
      var $394=1 << $393;
      var $395=$392 & $394;
      var $396=(($395)|0)!=0;
      if ($396) { label = 62; break; } else { label = 61; break; }
    case 61: 
      var $398=$I;
      var $399=1 << $398;
      var $400=$1;
      var $401=(($400)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=$402 | $399;
      HEAP32[(($401)>>2)]=$403;
      label = 66; break;
    case 62: 
      var $405=$B;
      var $406=(($405+8)|0);
      var $407=HEAP32[(($406)>>2)];
      var $408=$407;
      var $409=$1;
      var $410=(($409+16)|0);
      var $411=HEAP32[(($410)>>2)];
      var $412=(($408)>>>0) >= (($411)>>>0);
      var $413=(($412)&1);
      var $414=($413);
      var $415=(($414)|0)!=0;
      if ($415) { label = 63; break; } else { label = 64; break; }
    case 63: 
      var $417=$B;
      var $418=(($417+8)|0);
      var $419=HEAP32[(($418)>>2)];
      $F1=$419;
      label = 65; break;
    case 64: 
      _abort();
      throw "Reached an unreachable!"
    case 65: 
      label = 66; break;
    case 66: 
      var $423=$DV;
      var $424=$B;
      var $425=(($424+8)|0);
      HEAP32[(($425)>>2)]=$423;
      var $426=$DV;
      var $427=$F1;
      var $428=(($427+12)|0);
      HEAP32[(($428)>>2)]=$426;
      var $429=$F1;
      var $430=$DV;
      var $431=(($430+8)|0);
      HEAP32[(($431)>>2)]=$429;
      var $432=$B;
      var $433=$DV;
      var $434=(($433+12)|0);
      HEAP32[(($434)>>2)]=$432;
      label = 67; break;
    case 67: 
      var $436=$rsize;
      var $437=$1;
      var $438=(($437+8)|0);
      HEAP32[(($438)>>2)]=$436;
      var $439=$r;
      var $440=$1;
      var $441=(($440+20)|0);
      HEAP32[(($441)>>2)]=$439;
      label = 68; break;
    case 68: 
      var $443=$v;
      var $444=$443;
      var $445=(($444+8)|0);

      return $445;
    case 69: 
      label = 70; break;
    case 70: 
      _abort();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + label);
  }

}
_tmalloc_small["X"]=1;

function _tmalloc_large($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y1;
      var $K2;
      var $N3;
      var $trem4;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F5;
      var $TP;
      var $H6;
      var $I7;
      var $X8;
      var $Y9;
      var $N10;
      var $K11;
      var $T;
      var $K12;
      var $C;
      var $F13;
      $2=$m;
      $3=$nb;
      $v=0;
      var $4=$3;
      var $5=(((-$4))|0);
      $rsize=$5;
      var $6=$3;
      var $7=$6 >>> 8;
      $X=$7;
      var $8=$X;
      var $9=(($8)|0)==0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $idx=0;
      label = 8; break;
    case 4: 
      var $12=$X;
      var $13=(($12)>>>0) > 65535;
      if ($13) { label = 5; break; } else { label = 6; break; }
    case 5: 
      $idx=31;
      label = 7; break;
    case 6: 
      var $16=$X;
      $Y=$16;
      var $17=$Y;
      var $18=((($17)-(256))|0);
      var $19=$18 >>> 16;
      var $20=$19 & 8;
      $N=$20;
      var $21=$N;
      var $22=$Y;
      var $23=$22 << $21;
      $Y=$23;
      var $24=((($23)-(4096))|0);
      var $25=$24 >>> 16;
      var $26=$25 & 4;
      $K=$26;
      var $27=$K;
      var $28=$N;
      var $29=((($28)+($27))|0);
      $N=$29;
      var $30=$K;
      var $31=$Y;
      var $32=$31 << $30;
      $Y=$32;
      var $33=((($32)-(16384))|0);
      var $34=$33 >>> 16;
      var $35=$34 & 2;
      $K=$35;
      var $36=$N;
      var $37=((($36)+($35))|0);
      $N=$37;
      var $38=$N;
      var $39=(((14)-($38))|0);
      var $40=$K;
      var $41=$Y;
      var $42=$41 << $40;
      $Y=$42;
      var $43=$42 >>> 15;
      var $44=((($39)+($43))|0);
      $K=$44;
      var $45=$K;
      var $46=$45 << 1;
      var $47=$3;
      var $48=$K;
      var $49=((($48)+(7))|0);
      var $50=$47 >>> (($49)>>>0);
      var $51=$50 & 1;
      var $52=((($46)+($51))|0);
      $idx=$52;
      label = 7; break;
    case 7: 
      label = 8; break;
    case 8: 
      var $55=$idx;
      var $56=$2;
      var $57=(($56+304)|0);
      var $58=(($57+($55<<2))|0);
      var $59=HEAP32[(($58)>>2)];
      $t=$59;
      var $60=(($59)|0)!=0;
      if ($60) { label = 9; break; } else { label = 24; break; }
    case 9: 
      var $62=$3;
      var $63=$idx;
      var $64=(($63)|0)==31;
      if ($64) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $73 = 0;label = 12; break;
    case 11: 
      var $67=$idx;
      var $68=$67 >>> 1;
      var $69=((($68)+(8))|0);
      var $70=((($69)-(2))|0);
      var $71=(((31)-($70))|0);
      var $73 = $71;label = 12; break;
    case 12: 
      var $73;
      var $74=$62 << $73;
      $sizebits=$74;
      $rst=0;
      label = 13; break;
    case 13: 
      var $76=$t;
      var $77=(($76+4)|0);
      var $78=HEAP32[(($77)>>2)];
      var $79=$78 & -8;
      var $80=$3;
      var $81=((($79)-($80))|0);
      $trem=$81;
      var $82=$trem;
      var $83=$rsize;
      var $84=(($82)>>>0) < (($83)>>>0);
      if ($84) { label = 14; break; } else { label = 17; break; }
    case 14: 
      var $86=$t;
      $v=$86;
      var $87=$trem;
      $rsize=$87;
      var $88=(($87)|0)==0;
      if ($88) { label = 15; break; } else { label = 16; break; }
    case 15: 
      label = 23; break;
    case 16: 
      label = 17; break;
    case 17: 
      var $92=$t;
      var $93=(($92+16)|0);
      var $94=(($93+4)|0);
      var $95=HEAP32[(($94)>>2)];
      $rt=$95;
      var $96=$sizebits;
      var $97=$96 >>> 31;
      var $98=$97 & 1;
      var $99=$t;
      var $100=(($99+16)|0);
      var $101=(($100+($98<<2))|0);
      var $102=HEAP32[(($101)>>2)];
      $t=$102;
      var $103=$rt;
      var $104=(($103)|0)!=0;
      if ($104) { label = 18; break; } else { label = 20; break; }
    case 18: 
      var $106=$rt;
      var $107=$t;
      var $108=(($106)|0)!=(($107)|0);
      if ($108) { label = 19; break; } else { label = 20; break; }
    case 19: 
      var $110=$rt;
      $rst=$110;
      label = 20; break;
    case 20: 
      var $112=$t;
      var $113=(($112)|0)==0;
      if ($113) { label = 21; break; } else { label = 22; break; }
    case 21: 
      var $115=$rst;
      $t=$115;
      label = 23; break;
    case 22: 
      var $117=$sizebits;
      var $118=$117 << 1;
      $sizebits=$118;
      label = 13; break;
    case 23: 
      label = 24; break;
    case 24: 
      var $121=$t;
      var $122=(($121)|0)==0;
      if ($122) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $124=$v;
      var $125=(($124)|0)==0;
      if ($125) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $127=$idx;
      var $128=1 << $127;
      var $129=$128 << 1;
      var $130=$idx;
      var $131=1 << $130;
      var $132=$131 << 1;
      var $133=(((-$132))|0);
      var $134=$129 | $133;
      var $135=$2;
      var $136=(($135+4)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$134 & $137;
      $leftbits=$138;
      var $139=$leftbits;
      var $140=(($139)|0)!=0;
      if ($140) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $142=$leftbits;
      var $143=$leftbits;
      var $144=(((-$143))|0);
      var $145=$142 & $144;
      $leastbit=$145;
      var $146=$leastbit;
      var $147=((($146)-(1))|0);
      $Y1=$147;
      var $148=$Y1;
      var $149=$148 >>> 12;
      var $150=$149 & 16;
      $K2=$150;
      var $151=$K2;
      $N3=$151;
      var $152=$K2;
      var $153=$Y1;
      var $154=$153 >>> (($152)>>>0);
      $Y1=$154;
      var $155=$Y1;
      var $156=$155 >>> 5;
      var $157=$156 & 8;
      $K2=$157;
      var $158=$N3;
      var $159=((($158)+($157))|0);
      $N3=$159;
      var $160=$K2;
      var $161=$Y1;
      var $162=$161 >>> (($160)>>>0);
      $Y1=$162;
      var $163=$Y1;
      var $164=$163 >>> 2;
      var $165=$164 & 4;
      $K2=$165;
      var $166=$N3;
      var $167=((($166)+($165))|0);
      $N3=$167;
      var $168=$K2;
      var $169=$Y1;
      var $170=$169 >>> (($168)>>>0);
      $Y1=$170;
      var $171=$Y1;
      var $172=$171 >>> 1;
      var $173=$172 & 2;
      $K2=$173;
      var $174=$N3;
      var $175=((($174)+($173))|0);
      $N3=$175;
      var $176=$K2;
      var $177=$Y1;
      var $178=$177 >>> (($176)>>>0);
      $Y1=$178;
      var $179=$Y1;
      var $180=$179 >>> 1;
      var $181=$180 & 1;
      $K2=$181;
      var $182=$N3;
      var $183=((($182)+($181))|0);
      $N3=$183;
      var $184=$K2;
      var $185=$Y1;
      var $186=$185 >>> (($184)>>>0);
      $Y1=$186;
      var $187=$N3;
      var $188=$Y1;
      var $189=((($187)+($188))|0);
      $i=$189;
      var $190=$i;
      var $191=$2;
      var $192=(($191+304)|0);
      var $193=(($192+($190<<2))|0);
      var $194=HEAP32[(($193)>>2)];
      $t=$194;
      label = 28; break;
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $198=$t;
      var $199=(($198)|0)!=0;
      if ($199) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $201=$t;
      var $202=(($201+4)|0);
      var $203=HEAP32[(($202)>>2)];
      var $204=$203 & -8;
      var $205=$3;
      var $206=((($204)-($205))|0);
      $trem4=$206;
      var $207=$trem4;
      var $208=$rsize;
      var $209=(($207)>>>0) < (($208)>>>0);
      if ($209) { label = 32; break; } else { label = 33; break; }
    case 32: 
      var $211=$trem4;
      $rsize=$211;
      var $212=$t;
      $v=$212;
      label = 33; break;
    case 33: 
      var $214=$t;
      var $215=(($214+16)|0);
      var $216=(($215)|0);
      var $217=HEAP32[(($216)>>2)];
      var $218=(($217)|0)!=0;
      if ($218) { label = 34; break; } else { label = 35; break; }
    case 34: 
      var $220=$t;
      var $221=(($220+16)|0);
      var $222=(($221)|0);
      var $223=HEAP32[(($222)>>2)];
      var $230 = $223;label = 36; break;
    case 35: 
      var $225=$t;
      var $226=(($225+16)|0);
      var $227=(($226+4)|0);
      var $228=HEAP32[(($227)>>2)];
      var $230 = $228;label = 36; break;
    case 36: 
      var $230;
      $t=$230;
      label = 30; break;
    case 37: 
      var $232=$v;
      var $233=(($232)|0)!=0;
      if ($233) { label = 38; break; } else { label = 127; break; }
    case 38: 
      var $235=$rsize;
      var $236=$2;
      var $237=(($236+8)|0);
      var $238=HEAP32[(($237)>>2)];
      var $239=$3;
      var $240=((($238)-($239))|0);
      var $241=(($235)>>>0) < (($240)>>>0);
      if ($241) { label = 39; break; } else { label = 127; break; }
    case 39: 
      var $243=$v;
      var $244=$243;
      var $245=$2;
      var $246=(($245+16)|0);
      var $247=HEAP32[(($246)>>2)];
      var $248=(($244)>>>0) >= (($247)>>>0);
      var $249=(($248)&1);
      var $250=($249);
      var $251=(($250)|0)!=0;
      if ($251) { label = 40; break; } else { label = 126; break; }
    case 40: 
      var $253=$v;
      var $254=$253;
      var $255=$3;
      var $256=(($254+$255)|0);
      var $257=$256;
      $r=$257;
      var $258=$v;
      var $259=$258;
      var $260=$r;
      var $261=$260;
      var $262=(($259)>>>0) < (($261)>>>0);
      var $263=(($262)&1);
      var $264=($263);
      var $265=(($264)|0)!=0;
      if ($265) { label = 41; break; } else { label = 125; break; }
    case 41: 
      var $267=$v;
      var $268=(($267+24)|0);
      var $269=HEAP32[(($268)>>2)];
      $XP=$269;
      var $270=$v;
      var $271=(($270+12)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=$v;
      var $274=(($272)|0)!=(($273)|0);
      if ($274) { label = 42; break; } else { label = 46; break; }
    case 42: 
      var $276=$v;
      var $277=(($276+8)|0);
      var $278=HEAP32[(($277)>>2)];
      $F=$278;
      var $279=$v;
      var $280=(($279+12)|0);
      var $281=HEAP32[(($280)>>2)];
      $R=$281;
      var $282=$F;
      var $283=$282;
      var $284=$2;
      var $285=(($284+16)|0);
      var $286=HEAP32[(($285)>>2)];
      var $287=(($283)>>>0) >= (($286)>>>0);
      var $288=(($287)&1);
      var $289=($288);
      var $290=(($289)|0)!=0;
      if ($290) { label = 43; break; } else { label = 44; break; }
    case 43: 
      var $292=$R;
      var $293=$F;
      var $294=(($293+12)|0);
      HEAP32[(($294)>>2)]=$292;
      var $295=$F;
      var $296=$R;
      var $297=(($296+8)|0);
      HEAP32[(($297)>>2)]=$295;
      label = 45; break;
    case 44: 
      _abort();
      throw "Reached an unreachable!"
    case 45: 
      label = 58; break;
    case 46: 
      var $301=$v;
      var $302=(($301+16)|0);
      var $303=(($302+4)|0);
      $RP=$303;
      var $304=HEAP32[(($303)>>2)];
      $R=$304;
      var $305=(($304)|0)!=0;
      if ($305) { label = 48; break; } else { label = 47; break; }
    case 47: 
      var $307=$v;
      var $308=(($307+16)|0);
      var $309=(($308)|0);
      $RP=$309;
      var $310=HEAP32[(($309)>>2)];
      $R=$310;
      var $311=(($310)|0)!=0;
      if ($311) { label = 48; break; } else { label = 57; break; }
    case 48: 
      label = 49; break;
    case 49: 
      var $314=$R;
      var $315=(($314+16)|0);
      var $316=(($315+4)|0);
      $CP=$316;
      var $317=HEAP32[(($316)>>2)];
      var $318=(($317)|0)!=0;
      if ($318) { var $326 = 1;label = 51; break; } else { label = 50; break; }
    case 50: 
      var $320=$R;
      var $321=(($320+16)|0);
      var $322=(($321)|0);
      $CP=$322;
      var $323=HEAP32[(($322)>>2)];
      var $324=(($323)|0)!=0;
      var $326 = $324;label = 51; break;
    case 51: 
      var $326;
      if ($326) { label = 52; break; } else { label = 53; break; }
    case 52: 
      var $328=$CP;
      $RP=$328;
      var $329=HEAP32[(($328)>>2)];
      $R=$329;
      label = 49; break;
    case 53: 
      var $331=$RP;
      var $332=$331;
      var $333=$2;
      var $334=(($333+16)|0);
      var $335=HEAP32[(($334)>>2)];
      var $336=(($332)>>>0) >= (($335)>>>0);
      var $337=(($336)&1);
      var $338=($337);
      var $339=(($338)|0)!=0;
      if ($339) { label = 54; break; } else { label = 55; break; }
    case 54: 
      var $341=$RP;
      HEAP32[(($341)>>2)]=0;
      label = 56; break;
    case 55: 
      _abort();
      throw "Reached an unreachable!"
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      var $346=$XP;
      var $347=(($346)|0)!=0;
      if ($347) { label = 59; break; } else { label = 86; break; }
    case 59: 
      var $349=$v;
      var $350=(($349+28)|0);
      var $351=HEAP32[(($350)>>2)];
      var $352=$2;
      var $353=(($352+304)|0);
      var $354=(($353+($351<<2))|0);
      $H=$354;
      var $355=$v;
      var $356=$H;
      var $357=HEAP32[(($356)>>2)];
      var $358=(($355)|0)==(($357)|0);
      if ($358) { label = 60; break; } else { label = 63; break; }
    case 60: 
      var $360=$R;
      var $361=$H;
      HEAP32[(($361)>>2)]=$360;
      var $362=(($360)|0)==0;
      if ($362) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $364=$v;
      var $365=(($364+28)|0);
      var $366=HEAP32[(($365)>>2)];
      var $367=1 << $366;
      var $368=$367 ^ -1;
      var $369=$2;
      var $370=(($369+4)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=$371 & $368;
      HEAP32[(($370)>>2)]=$372;
      label = 62; break;
    case 62: 
      label = 70; break;
    case 63: 
      var $375=$XP;
      var $376=$375;
      var $377=$2;
      var $378=(($377+16)|0);
      var $379=HEAP32[(($378)>>2)];
      var $380=(($376)>>>0) >= (($379)>>>0);
      var $381=(($380)&1);
      var $382=($381);
      var $383=(($382)|0)!=0;
      if ($383) { label = 64; break; } else { label = 68; break; }
    case 64: 
      var $385=$XP;
      var $386=(($385+16)|0);
      var $387=(($386)|0);
      var $388=HEAP32[(($387)>>2)];
      var $389=$v;
      var $390=(($388)|0)==(($389)|0);
      if ($390) { label = 65; break; } else { label = 66; break; }
    case 65: 
      var $392=$R;
      var $393=$XP;
      var $394=(($393+16)|0);
      var $395=(($394)|0);
      HEAP32[(($395)>>2)]=$392;
      label = 67; break;
    case 66: 
      var $397=$R;
      var $398=$XP;
      var $399=(($398+16)|0);
      var $400=(($399+4)|0);
      HEAP32[(($400)>>2)]=$397;
      label = 67; break;
    case 67: 
      label = 69; break;
    case 68: 
      _abort();
      throw "Reached an unreachable!"
    case 69: 
      label = 70; break;
    case 70: 
      var $405=$R;
      var $406=(($405)|0)!=0;
      if ($406) { label = 71; break; } else { label = 85; break; }
    case 71: 
      var $408=$R;
      var $409=$408;
      var $410=$2;
      var $411=(($410+16)|0);
      var $412=HEAP32[(($411)>>2)];
      var $413=(($409)>>>0) >= (($412)>>>0);
      var $414=(($413)&1);
      var $415=($414);
      var $416=(($415)|0)!=0;
      if ($416) { label = 72; break; } else { label = 83; break; }
    case 72: 
      var $418=$XP;
      var $419=$R;
      var $420=(($419+24)|0);
      HEAP32[(($420)>>2)]=$418;
      var $421=$v;
      var $422=(($421+16)|0);
      var $423=(($422)|0);
      var $424=HEAP32[(($423)>>2)];
      $C0=$424;
      var $425=(($424)|0)!=0;
      if ($425) { label = 73; break; } else { label = 77; break; }
    case 73: 
      var $427=$C0;
      var $428=$427;
      var $429=$2;
      var $430=(($429+16)|0);
      var $431=HEAP32[(($430)>>2)];
      var $432=(($428)>>>0) >= (($431)>>>0);
      var $433=(($432)&1);
      var $434=($433);
      var $435=(($434)|0)!=0;
      if ($435) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $437=$C0;
      var $438=$R;
      var $439=(($438+16)|0);
      var $440=(($439)|0);
      HEAP32[(($440)>>2)]=$437;
      var $441=$R;
      var $442=$C0;
      var $443=(($442+24)|0);
      HEAP32[(($443)>>2)]=$441;
      label = 76; break;
    case 75: 
      _abort();
      throw "Reached an unreachable!"
    case 76: 
      label = 77; break;
    case 77: 
      var $447=$v;
      var $448=(($447+16)|0);
      var $449=(($448+4)|0);
      var $450=HEAP32[(($449)>>2)];
      $C1=$450;
      var $451=(($450)|0)!=0;
      if ($451) { label = 78; break; } else { label = 82; break; }
    case 78: 
      var $453=$C1;
      var $454=$453;
      var $455=$2;
      var $456=(($455+16)|0);
      var $457=HEAP32[(($456)>>2)];
      var $458=(($454)>>>0) >= (($457)>>>0);
      var $459=(($458)&1);
      var $460=($459);
      var $461=(($460)|0)!=0;
      if ($461) { label = 79; break; } else { label = 80; break; }
    case 79: 
      var $463=$C1;
      var $464=$R;
      var $465=(($464+16)|0);
      var $466=(($465+4)|0);
      HEAP32[(($466)>>2)]=$463;
      var $467=$R;
      var $468=$C1;
      var $469=(($468+24)|0);
      HEAP32[(($469)>>2)]=$467;
      label = 81; break;
    case 80: 
      _abort();
      throw "Reached an unreachable!"
    case 81: 
      label = 82; break;
    case 82: 
      label = 84; break;
    case 83: 
      _abort();
      throw "Reached an unreachable!"
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      var $477=$rsize;
      var $478=(($477)>>>0) < 16;
      if ($478) { label = 87; break; } else { label = 88; break; }
    case 87: 
      var $480=$rsize;
      var $481=$3;
      var $482=((($480)+($481))|0);
      var $483=$482 | 1;
      var $484=$483 | 2;
      var $485=$v;
      var $486=(($485+4)|0);
      HEAP32[(($486)>>2)]=$484;
      var $487=$v;
      var $488=$487;
      var $489=$rsize;
      var $490=$3;
      var $491=((($489)+($490))|0);
      var $492=(($488+$491)|0);
      var $493=$492;
      var $494=(($493+4)|0);
      var $495=HEAP32[(($494)>>2)];
      var $496=$495 | 1;
      HEAP32[(($494)>>2)]=$496;
      label = 124; break;
    case 88: 
      var $498=$3;
      var $499=$498 | 1;
      var $500=$499 | 2;
      var $501=$v;
      var $502=(($501+4)|0);
      HEAP32[(($502)>>2)]=$500;
      var $503=$rsize;
      var $504=$503 | 1;
      var $505=$r;
      var $506=(($505+4)|0);
      HEAP32[(($506)>>2)]=$504;
      var $507=$rsize;
      var $508=$r;
      var $509=$508;
      var $510=$rsize;
      var $511=(($509+$510)|0);
      var $512=$511;
      var $513=(($512)|0);
      HEAP32[(($513)>>2)]=$507;
      var $514=$rsize;
      var $515=$514 >>> 3;
      var $516=(($515)>>>0) < 32;
      if ($516) { label = 89; break; } else { label = 96; break; }
    case 89: 
      var $518=$rsize;
      var $519=$518 >>> 3;
      $I=$519;
      var $520=$I;
      var $521=$520 << 1;
      var $522=$2;
      var $523=(($522+40)|0);
      var $524=(($523+($521<<2))|0);
      var $525=$524;
      var $526=$525;
      $B=$526;
      var $527=$B;
      $F5=$527;
      var $528=$2;
      var $529=(($528)|0);
      var $530=HEAP32[(($529)>>2)];
      var $531=$I;
      var $532=1 << $531;
      var $533=$530 & $532;
      var $534=(($533)|0)!=0;
      if ($534) { label = 91; break; } else { label = 90; break; }
    case 90: 
      var $536=$I;
      var $537=1 << $536;
      var $538=$2;
      var $539=(($538)|0);
      var $540=HEAP32[(($539)>>2)];
      var $541=$540 | $537;
      HEAP32[(($539)>>2)]=$541;
      label = 95; break;
    case 91: 
      var $543=$B;
      var $544=(($543+8)|0);
      var $545=HEAP32[(($544)>>2)];
      var $546=$545;
      var $547=$2;
      var $548=(($547+16)|0);
      var $549=HEAP32[(($548)>>2)];
      var $550=(($546)>>>0) >= (($549)>>>0);
      var $551=(($550)&1);
      var $552=($551);
      var $553=(($552)|0)!=0;
      if ($553) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $555=$B;
      var $556=(($555+8)|0);
      var $557=HEAP32[(($556)>>2)];
      $F5=$557;
      label = 94; break;
    case 93: 
      _abort();
      throw "Reached an unreachable!"
    case 94: 
      label = 95; break;
    case 95: 
      var $561=$r;
      var $562=$B;
      var $563=(($562+8)|0);
      HEAP32[(($563)>>2)]=$561;
      var $564=$r;
      var $565=$F5;
      var $566=(($565+12)|0);
      HEAP32[(($566)>>2)]=$564;
      var $567=$F5;
      var $568=$r;
      var $569=(($568+8)|0);
      HEAP32[(($569)>>2)]=$567;
      var $570=$B;
      var $571=$r;
      var $572=(($571+12)|0);
      HEAP32[(($572)>>2)]=$570;
      label = 123; break;
    case 96: 
      var $574=$r;
      var $575=$574;
      $TP=$575;
      var $576=$rsize;
      var $577=$576 >>> 8;
      $X8=$577;
      var $578=$X8;
      var $579=(($578)|0)==0;
      if ($579) { label = 97; break; } else { label = 98; break; }
    case 97: 
      $I7=0;
      label = 102; break;
    case 98: 
      var $582=$X8;
      var $583=(($582)>>>0) > 65535;
      if ($583) { label = 99; break; } else { label = 100; break; }
    case 99: 
      $I7=31;
      label = 101; break;
    case 100: 
      var $586=$X8;
      $Y9=$586;
      var $587=$Y9;
      var $588=((($587)-(256))|0);
      var $589=$588 >>> 16;
      var $590=$589 & 8;
      $N10=$590;
      var $591=$N10;
      var $592=$Y9;
      var $593=$592 << $591;
      $Y9=$593;
      var $594=((($593)-(4096))|0);
      var $595=$594 >>> 16;
      var $596=$595 & 4;
      $K11=$596;
      var $597=$K11;
      var $598=$N10;
      var $599=((($598)+($597))|0);
      $N10=$599;
      var $600=$K11;
      var $601=$Y9;
      var $602=$601 << $600;
      $Y9=$602;
      var $603=((($602)-(16384))|0);
      var $604=$603 >>> 16;
      var $605=$604 & 2;
      $K11=$605;
      var $606=$N10;
      var $607=((($606)+($605))|0);
      $N10=$607;
      var $608=$N10;
      var $609=(((14)-($608))|0);
      var $610=$K11;
      var $611=$Y9;
      var $612=$611 << $610;
      $Y9=$612;
      var $613=$612 >>> 15;
      var $614=((($609)+($613))|0);
      $K11=$614;
      var $615=$K11;
      var $616=$615 << 1;
      var $617=$rsize;
      var $618=$K11;
      var $619=((($618)+(7))|0);
      var $620=$617 >>> (($619)>>>0);
      var $621=$620 & 1;
      var $622=((($616)+($621))|0);
      $I7=$622;
      label = 101; break;
    case 101: 
      label = 102; break;
    case 102: 
      var $625=$I7;
      var $626=$2;
      var $627=(($626+304)|0);
      var $628=(($627+($625<<2))|0);
      $H6=$628;
      var $629=$I7;
      var $630=$TP;
      var $631=(($630+28)|0);
      HEAP32[(($631)>>2)]=$629;
      var $632=$TP;
      var $633=(($632+16)|0);
      var $634=(($633+4)|0);
      HEAP32[(($634)>>2)]=0;
      var $635=$TP;
      var $636=(($635+16)|0);
      var $637=(($636)|0);
      HEAP32[(($637)>>2)]=0;
      var $638=$2;
      var $639=(($638+4)|0);
      var $640=HEAP32[(($639)>>2)];
      var $641=$I7;
      var $642=1 << $641;
      var $643=$640 & $642;
      var $644=(($643)|0)!=0;
      if ($644) { label = 104; break; } else { label = 103; break; }
    case 103: 
      var $646=$I7;
      var $647=1 << $646;
      var $648=$2;
      var $649=(($648+4)|0);
      var $650=HEAP32[(($649)>>2)];
      var $651=$650 | $647;
      HEAP32[(($649)>>2)]=$651;
      var $652=$TP;
      var $653=$H6;
      HEAP32[(($653)>>2)]=$652;
      var $654=$H6;
      var $655=$654;
      var $656=$TP;
      var $657=(($656+24)|0);
      HEAP32[(($657)>>2)]=$655;
      var $658=$TP;
      var $659=$TP;
      var $660=(($659+12)|0);
      HEAP32[(($660)>>2)]=$658;
      var $661=$TP;
      var $662=(($661+8)|0);
      HEAP32[(($662)>>2)]=$658;
      label = 122; break;
    case 104: 
      var $664=$H6;
      var $665=HEAP32[(($664)>>2)];
      $T=$665;
      var $666=$rsize;
      var $667=$I7;
      var $668=(($667)|0)==31;
      if ($668) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $677 = 0;label = 107; break;
    case 106: 
      var $671=$I7;
      var $672=$671 >>> 1;
      var $673=((($672)+(8))|0);
      var $674=((($673)-(2))|0);
      var $675=(((31)-($674))|0);
      var $677 = $675;label = 107; break;
    case 107: 
      var $677;
      var $678=$666 << $677;
      $K12=$678;
      label = 108; break;
    case 108: 
      var $680=$T;
      var $681=(($680+4)|0);
      var $682=HEAP32[(($681)>>2)];
      var $683=$682 & -8;
      var $684=$rsize;
      var $685=(($683)|0)!=(($684)|0);
      if ($685) { label = 109; break; } else { label = 115; break; }
    case 109: 
      var $687=$K12;
      var $688=$687 >>> 31;
      var $689=$688 & 1;
      var $690=$T;
      var $691=(($690+16)|0);
      var $692=(($691+($689<<2))|0);
      $C=$692;
      var $693=$K12;
      var $694=$693 << 1;
      $K12=$694;
      var $695=$C;
      var $696=HEAP32[(($695)>>2)];
      var $697=(($696)|0)!=0;
      if ($697) { label = 110; break; } else { label = 111; break; }
    case 110: 
      var $699=$C;
      var $700=HEAP32[(($699)>>2)];
      $T=$700;
      label = 114; break;
    case 111: 
      var $702=$C;
      var $703=$702;
      var $704=$2;
      var $705=(($704+16)|0);
      var $706=HEAP32[(($705)>>2)];
      var $707=(($703)>>>0) >= (($706)>>>0);
      var $708=(($707)&1);
      var $709=($708);
      var $710=(($709)|0)!=0;
      if ($710) { label = 112; break; } else { label = 113; break; }
    case 112: 
      var $712=$TP;
      var $713=$C;
      HEAP32[(($713)>>2)]=$712;
      var $714=$T;
      var $715=$TP;
      var $716=(($715+24)|0);
      HEAP32[(($716)>>2)]=$714;
      var $717=$TP;
      var $718=$TP;
      var $719=(($718+12)|0);
      HEAP32[(($719)>>2)]=$717;
      var $720=$TP;
      var $721=(($720+8)|0);
      HEAP32[(($721)>>2)]=$717;
      label = 121; break;
    case 113: 
      _abort();
      throw "Reached an unreachable!"
    case 114: 
      label = 120; break;
    case 115: 
      var $725=$T;
      var $726=(($725+8)|0);
      var $727=HEAP32[(($726)>>2)];
      $F13=$727;
      var $728=$T;
      var $729=$728;
      var $730=$2;
      var $731=(($730+16)|0);
      var $732=HEAP32[(($731)>>2)];
      var $733=(($729)>>>0) >= (($732)>>>0);
      if ($733) { label = 116; break; } else { var $742 = 0;label = 117; break; }
    case 116: 
      var $735=$F13;
      var $736=$735;
      var $737=$2;
      var $738=(($737+16)|0);
      var $739=HEAP32[(($738)>>2)];
      var $740=(($736)>>>0) >= (($739)>>>0);
      var $742 = $740;label = 117; break;
    case 117: 
      var $742;
      var $743=(($742)&1);
      var $744=($743);
      var $745=(($744)|0)!=0;
      if ($745) { label = 118; break; } else { label = 119; break; }
    case 118: 
      var $747=$TP;
      var $748=$F13;
      var $749=(($748+12)|0);
      HEAP32[(($749)>>2)]=$747;
      var $750=$T;
      var $751=(($750+8)|0);
      HEAP32[(($751)>>2)]=$747;
      var $752=$F13;
      var $753=$TP;
      var $754=(($753+8)|0);
      HEAP32[(($754)>>2)]=$752;
      var $755=$T;
      var $756=$TP;
      var $757=(($756+12)|0);
      HEAP32[(($757)>>2)]=$755;
      var $758=$TP;
      var $759=(($758+24)|0);
      HEAP32[(($759)>>2)]=0;
      label = 121; break;
    case 119: 
      _abort();
      throw "Reached an unreachable!"
    case 120: 
      label = 108; break;
    case 121: 
      label = 122; break;
    case 122: 
      label = 123; break;
    case 123: 
      label = 124; break;
    case 124: 
      var $766=$v;
      var $767=$766;
      var $768=(($767+8)|0);
      $1=$768;
      label = 128; break;
    case 125: 
      label = 126; break;
    case 126: 
      _abort();
      throw "Reached an unreachable!"
    case 127: 
      $1=0;
      label = 128; break;
    case 128: 
      var $773=$1;

      return $773;
    default: assert(0, "bad label: " + label);
  }

}
_tmalloc_large["X"]=1;

function _sys_alloc($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $mem;
      var $br;
      var $ss;
      var $asize;
      var $base;
      var $esize;
      var $end;
      var $asize1;
      var $br2;
      var $end3;
      var $ssize;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $2=$m;
      $3=$nb;
      $tbase=-1;
      $tsize=0;
      $mmap_flag=0;
      var $4=HEAP32[((((5248324)|0))>>2)];
      var $5=(($4)|0)!=0;
      if ($5) { var $10 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $7=_init_mparams();
      var $8=(($7)|0)!=0;
      var $10 = $8;label = 4; break;
    case 4: 
      var $10;
      var $11=(($10)&1);
      var $12=$2;
      var $13=(($12+440)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$14 & 0;
      var $16=(($15)|0)!=0;
      if ($16) { label = 5; break; } else { label = 10; break; }
    case 5: 
      var $18=$3;
      var $19=HEAP32[((((5248336)|0))>>2)];
      var $20=(($18)>>>0) >= (($19)>>>0);
      if ($20) { label = 6; break; } else { label = 10; break; }
    case 6: 
      var $22=$2;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=(($24)|0)!=0;
      if ($25) { label = 7; break; } else { label = 10; break; }
    case 7: 
      var $27=$2;
      var $28=$3;
      var $29=_mmap_alloc($27, $28);
      $mem=$29;
      var $30=$mem;
      var $31=(($30)|0)!=0;
      if ($31) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $33=$mem;
      $1=$33;
      label = 93; break;
    case 9: 
      label = 10; break;
    case 10: 
      var $36=$2;
      var $37=(($36+440)|0);
      var $38=HEAP32[(($37)>>2)];
      var $39=$38 & 4;
      var $40=(($39)|0)!=0;
      if ($40) { label = 43; break; } else { label = 11; break; }
    case 11: 
      $br=-1;
      var $42=$2;
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=(($44)|0)==0;
      if ($45) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $55 = 0;label = 14; break;
    case 13: 
      var $48=$2;
      var $49=$2;
      var $50=(($49+24)|0);
      var $51=HEAP32[(($50)>>2)];
      var $52=$51;
      var $53=_segment_holding($48, $52);
      var $55 = $53;label = 14; break;
    case 14: 
      var $55;
      $ss=$55;
      $asize=0;
      var $56=$ss;
      var $57=(($56)|0)==0;
      if ($57) { label = 15; break; } else { label = 23; break; }
    case 15: 
      var $59=_sbrk(0);
      $base=$59;
      var $60=$base;
      var $61=(($60)|0)!=-1;
      if ($61) { label = 16; break; } else { label = 22; break; }
    case 16: 
      var $63=$3;
      var $64=((($63)+(48))|0);
      var $65=HEAP32[((((5248332)|0))>>2)];
      var $66=((($65)-(1))|0);
      var $67=((($64)+($66))|0);
      var $68=HEAP32[((((5248332)|0))>>2)];
      var $69=((($68)-(1))|0);
      var $70=$69 ^ -1;
      var $71=$67 & $70;
      $asize=$71;
      var $72=$base;
      var $73=$72;
      var $74=HEAP32[((((5248328)|0))>>2)];
      var $75=((($74)-(1))|0);
      var $76=$73 & $75;
      var $77=(($76)|0)==0;
      if ($77) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $79=$base;
      var $80=$79;
      var $81=HEAP32[((((5248328)|0))>>2)];
      var $82=((($81)-(1))|0);
      var $83=((($80)+($82))|0);
      var $84=HEAP32[((((5248328)|0))>>2)];
      var $85=((($84)-(1))|0);
      var $86=$85 ^ -1;
      var $87=$83 & $86;
      var $88=$base;
      var $89=$88;
      var $90=((($87)-($89))|0);
      var $91=$asize;
      var $92=((($91)+($90))|0);
      $asize=$92;
      label = 18; break;
    case 18: 
      var $94=$asize;
      var $95=(($94)>>>0) < 2147483647;
      if ($95) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $97=$asize;
      var $98=_sbrk($97);
      $br=$98;
      var $99=$base;
      var $100=(($98)|0)==(($99)|0);
      if ($100) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $102=$base;
      $tbase=$102;
      var $103=$asize;
      $tsize=$103;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 27; break;
    case 23: 
      var $107=$3;
      var $108=$2;
      var $109=(($108+12)|0);
      var $110=HEAP32[(($109)>>2)];
      var $111=((($107)-($110))|0);
      var $112=((($111)+(48))|0);
      var $113=HEAP32[((((5248332)|0))>>2)];
      var $114=((($113)-(1))|0);
      var $115=((($112)+($114))|0);
      var $116=HEAP32[((((5248332)|0))>>2)];
      var $117=((($116)-(1))|0);
      var $118=$117 ^ -1;
      var $119=$115 & $118;
      $asize=$119;
      var $120=$asize;
      var $121=(($120)>>>0) < 2147483647;
      if ($121) { label = 24; break; } else { label = 26; break; }
    case 24: 
      var $123=$asize;
      var $124=_sbrk($123);
      $br=$124;
      var $125=$ss;
      var $126=(($125)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=$ss;
      var $129=(($128+4)|0);
      var $130=HEAP32[(($129)>>2)];
      var $131=(($127+$130)|0);
      var $132=(($124)|0)==(($131)|0);
      if ($132) { label = 25; break; } else { label = 26; break; }
    case 25: 
      var $134=$br;
      $tbase=$134;
      var $135=$asize;
      $tsize=$135;
      label = 26; break;
    case 26: 
      label = 27; break;
    case 27: 
      var $138=$tbase;
      var $139=(($138)|0)==-1;
      if ($139) { label = 28; break; } else { label = 42; break; }
    case 28: 
      var $141=$br;
      var $142=(($141)|0)!=-1;
      if ($142) { label = 29; break; } else { label = 38; break; }
    case 29: 
      var $144=$asize;
      var $145=(($144)>>>0) < 2147483647;
      if ($145) { label = 30; break; } else { label = 37; break; }
    case 30: 
      var $147=$asize;
      var $148=$3;
      var $149=((($148)+(48))|0);
      var $150=(($147)>>>0) < (($149)>>>0);
      if ($150) { label = 31; break; } else { label = 37; break; }
    case 31: 
      var $152=$3;
      var $153=((($152)+(48))|0);
      var $154=$asize;
      var $155=((($153)-($154))|0);
      var $156=HEAP32[((((5248332)|0))>>2)];
      var $157=((($156)-(1))|0);
      var $158=((($155)+($157))|0);
      var $159=HEAP32[((((5248332)|0))>>2)];
      var $160=((($159)-(1))|0);
      var $161=$160 ^ -1;
      var $162=$158 & $161;
      $esize=$162;
      var $163=$esize;
      var $164=(($163)>>>0) < 2147483647;
      if ($164) { label = 32; break; } else { label = 36; break; }
    case 32: 
      var $166=$esize;
      var $167=_sbrk($166);
      $end=$167;
      var $168=$end;
      var $169=(($168)|0)!=-1;
      if ($169) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $171=$esize;
      var $172=$asize;
      var $173=((($172)+($171))|0);
      $asize=$173;
      label = 35; break;
    case 34: 
      var $175=$asize;
      var $176=(((-$175))|0);
      var $177=_sbrk($176);
      $br=-1;
      label = 35; break;
    case 35: 
      label = 36; break;
    case 36: 
      label = 37; break;
    case 37: 
      label = 38; break;
    case 38: 
      var $182=$br;
      var $183=(($182)|0)!=-1;
      if ($183) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $185=$br;
      $tbase=$185;
      var $186=$asize;
      $tsize=$186;
      label = 41; break;
    case 40: 
      var $188=$2;
      var $189=(($188+440)|0);
      var $190=HEAP32[(($189)>>2)];
      var $191=$190 | 4;
      HEAP32[(($189)>>2)]=$191;
      label = 41; break;
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $195=$tbase;
      var $196=(($195)|0)==-1;
      if ($196) { label = 44; break; } else { label = 53; break; }
    case 44: 
      var $198=$3;
      var $199=((($198)+(48))|0);
      var $200=HEAP32[((((5248332)|0))>>2)];
      var $201=((($200)-(1))|0);
      var $202=((($199)+($201))|0);
      var $203=HEAP32[((((5248332)|0))>>2)];
      var $204=((($203)-(1))|0);
      var $205=$204 ^ -1;
      var $206=$202 & $205;
      $asize1=$206;
      var $207=$asize1;
      var $208=(($207)>>>0) < 2147483647;
      if ($208) { label = 45; break; } else { label = 52; break; }
    case 45: 
      $br2=-1;
      $end3=-1;
      var $210=$asize1;
      var $211=_sbrk($210);
      $br2=$211;
      var $212=_sbrk(0);
      $end3=$212;
      var $213=$br2;
      var $214=(($213)|0)!=-1;
      if ($214) { label = 46; break; } else { label = 51; break; }
    case 46: 
      var $216=$end3;
      var $217=(($216)|0)!=-1;
      if ($217) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $219=$br2;
      var $220=$end3;
      var $221=(($219)>>>0) < (($220)>>>0);
      if ($221) { label = 48; break; } else { label = 51; break; }
    case 48: 
      var $223=$end3;
      var $224=$br2;
      var $225=$223;
      var $226=$224;
      var $227=((($225)-($226))|0);
      $ssize=$227;
      var $228=$ssize;
      var $229=$3;
      var $230=((($229)+(40))|0);
      var $231=(($228)>>>0) > (($230)>>>0);
      if ($231) { label = 49; break; } else { label = 50; break; }
    case 49: 
      var $233=$br2;
      $tbase=$233;
      var $234=$ssize;
      $tsize=$234;
      label = 50; break;
    case 50: 
      label = 51; break;
    case 51: 
      label = 52; break;
    case 52: 
      label = 53; break;
    case 53: 
      var $239=$tbase;
      var $240=(($239)|0)!=-1;
      if ($240) { label = 54; break; } else { label = 92; break; }
    case 54: 
      var $242=$tsize;
      var $243=$2;
      var $244=(($243+432)|0);
      var $245=HEAP32[(($244)>>2)];
      var $246=((($245)+($242))|0);
      HEAP32[(($244)>>2)]=$246;
      var $247=$2;
      var $248=(($247+436)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=(($246)>>>0) > (($249)>>>0);
      if ($250) { label = 55; break; } else { label = 56; break; }
    case 55: 
      var $252=$2;
      var $253=(($252+432)|0);
      var $254=HEAP32[(($253)>>2)];
      var $255=$2;
      var $256=(($255+436)|0);
      HEAP32[(($256)>>2)]=$254;
      label = 56; break;
    case 56: 
      var $258=$2;
      var $259=(($258+24)|0);
      var $260=HEAP32[(($259)>>2)];
      var $261=(($260)|0)!=0;
      if ($261) { label = 64; break; } else { label = 57; break; }
    case 57: 
      var $263=$2;
      var $264=(($263+16)|0);
      var $265=HEAP32[(($264)>>2)];
      var $266=(($265)|0)==0;
      if ($266) { label = 59; break; } else { label = 58; break; }
    case 58: 
      var $268=$tbase;
      var $269=$2;
      var $270=(($269+16)|0);
      var $271=HEAP32[(($270)>>2)];
      var $272=(($268)>>>0) < (($271)>>>0);
      if ($272) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $274=$tbase;
      var $275=$2;
      var $276=(($275+16)|0);
      HEAP32[(($276)>>2)]=$274;
      label = 60; break;
    case 60: 
      var $278=$tbase;
      var $279=$2;
      var $280=(($279+444)|0);
      var $281=(($280)|0);
      HEAP32[(($281)>>2)]=$278;
      var $282=$tsize;
      var $283=$2;
      var $284=(($283+444)|0);
      var $285=(($284+4)|0);
      HEAP32[(($285)>>2)]=$282;
      var $286=$mmap_flag;
      var $287=$2;
      var $288=(($287+444)|0);
      var $289=(($288+12)|0);
      HEAP32[(($289)>>2)]=$286;
      var $290=HEAP32[((((5248324)|0))>>2)];
      var $291=$2;
      var $292=(($291+36)|0);
      HEAP32[(($292)>>2)]=$290;
      var $293=$2;
      var $294=(($293+32)|0);
      HEAP32[(($294)>>2)]=-1;
      var $295=$2;
      _init_bins($295);
      var $296=$2;
      var $297=(($296)|0)==5249956;
      if ($297) { label = 61; break; } else { label = 62; break; }
    case 61: 
      var $299=$2;
      var $300=$tbase;
      var $301=$300;
      var $302=$tsize;
      var $303=((($302)-(40))|0);
      _init_top($299, $301, $303);
      label = 63; break;
    case 62: 
      var $305=$2;
      var $306=$305;
      var $307=((($306)-(8))|0);
      var $308=$307;
      var $309=$308;
      var $310=$2;
      var $311=$310;
      var $312=((($311)-(8))|0);
      var $313=$312;
      var $314=(($313+4)|0);
      var $315=HEAP32[(($314)>>2)];
      var $316=$315 & -8;
      var $317=(($309+$316)|0);
      var $318=$317;
      $mn=$318;
      var $319=$2;
      var $320=$mn;
      var $321=$tbase;
      var $322=$tsize;
      var $323=(($321+$322)|0);
      var $324=$mn;
      var $325=$324;
      var $326=$323;
      var $327=$325;
      var $328=((($326)-($327))|0);
      var $329=((($328)-(40))|0);
      _init_top($319, $320, $329);
      label = 63; break;
    case 63: 
      label = 89; break;
    case 64: 
      var $332=$2;
      var $333=(($332+444)|0);
      $sp=$333;
      label = 65; break;
    case 65: 
      var $335=$sp;
      var $336=(($335)|0)!=0;
      if ($336) { label = 66; break; } else { var $348 = 0;label = 67; break; }
    case 66: 
      var $338=$tbase;
      var $339=$sp;
      var $340=(($339)|0);
      var $341=HEAP32[(($340)>>2)];
      var $342=$sp;
      var $343=(($342+4)|0);
      var $344=HEAP32[(($343)>>2)];
      var $345=(($341+$344)|0);
      var $346=(($338)|0)!=(($345)|0);
      var $348 = $346;label = 67; break;
    case 67: 
      var $348;
      if ($348) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $350=$sp;
      var $351=(($350+8)|0);
      var $352=HEAP32[(($351)>>2)];
      $sp=$352;
      label = 65; break;
    case 69: 
      var $354=$sp;
      var $355=(($354)|0)!=0;
      if ($355) { label = 70; break; } else { label = 75; break; }
    case 70: 
      var $357=$sp;
      var $358=(($357+12)|0);
      var $359=HEAP32[(($358)>>2)];
      var $360=$359 & 8;
      var $361=(($360)|0)!=0;
      if ($361) { label = 75; break; } else { label = 71; break; }
    case 71: 
      var $363=$sp;
      var $364=(($363+12)|0);
      var $365=HEAP32[(($364)>>2)];
      var $366=$365 & 0;
      var $367=$mmap_flag;
      var $368=(($366)|0)==(($367)|0);
      if ($368) { label = 72; break; } else { label = 75; break; }
    case 72: 
      var $370=$2;
      var $371=(($370+24)|0);
      var $372=HEAP32[(($371)>>2)];
      var $373=$372;
      var $374=$sp;
      var $375=(($374)|0);
      var $376=HEAP32[(($375)>>2)];
      var $377=(($373)>>>0) >= (($376)>>>0);
      if ($377) { label = 73; break; } else { label = 75; break; }
    case 73: 
      var $379=$2;
      var $380=(($379+24)|0);
      var $381=HEAP32[(($380)>>2)];
      var $382=$381;
      var $383=$sp;
      var $384=(($383)|0);
      var $385=HEAP32[(($384)>>2)];
      var $386=$sp;
      var $387=(($386+4)|0);
      var $388=HEAP32[(($387)>>2)];
      var $389=(($385+$388)|0);
      var $390=(($382)>>>0) < (($389)>>>0);
      if ($390) { label = 74; break; } else { label = 75; break; }
    case 74: 
      var $392=$tsize;
      var $393=$sp;
      var $394=(($393+4)|0);
      var $395=HEAP32[(($394)>>2)];
      var $396=((($395)+($392))|0);
      HEAP32[(($394)>>2)]=$396;
      var $397=$2;
      var $398=$2;
      var $399=(($398+24)|0);
      var $400=HEAP32[(($399)>>2)];
      var $401=$2;
      var $402=(($401+12)|0);
      var $403=HEAP32[(($402)>>2)];
      var $404=$tsize;
      var $405=((($403)+($404))|0);
      _init_top($397, $400, $405);
      label = 88; break;
    case 75: 
      var $407=$tbase;
      var $408=$2;
      var $409=(($408+16)|0);
      var $410=HEAP32[(($409)>>2)];
      var $411=(($407)>>>0) < (($410)>>>0);
      if ($411) { label = 76; break; } else { label = 77; break; }
    case 76: 
      var $413=$tbase;
      var $414=$2;
      var $415=(($414+16)|0);
      HEAP32[(($415)>>2)]=$413;
      label = 77; break;
    case 77: 
      var $417=$2;
      var $418=(($417+444)|0);
      $sp=$418;
      label = 78; break;
    case 78: 
      var $420=$sp;
      var $421=(($420)|0)!=0;
      if ($421) { label = 79; break; } else { var $431 = 0;label = 80; break; }
    case 79: 
      var $423=$sp;
      var $424=(($423)|0);
      var $425=HEAP32[(($424)>>2)];
      var $426=$tbase;
      var $427=$tsize;
      var $428=(($426+$427)|0);
      var $429=(($425)|0)!=(($428)|0);
      var $431 = $429;label = 80; break;
    case 80: 
      var $431;
      if ($431) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $433=$sp;
      var $434=(($433+8)|0);
      var $435=HEAP32[(($434)>>2)];
      $sp=$435;
      label = 78; break;
    case 82: 
      var $437=$sp;
      var $438=(($437)|0)!=0;
      if ($438) { label = 83; break; } else { label = 86; break; }
    case 83: 
      var $440=$sp;
      var $441=(($440+12)|0);
      var $442=HEAP32[(($441)>>2)];
      var $443=$442 & 8;
      var $444=(($443)|0)!=0;
      if ($444) { label = 86; break; } else { label = 84; break; }
    case 84: 
      var $446=$sp;
      var $447=(($446+12)|0);
      var $448=HEAP32[(($447)>>2)];
      var $449=$448 & 0;
      var $450=$mmap_flag;
      var $451=(($449)|0)==(($450)|0);
      if ($451) { label = 85; break; } else { label = 86; break; }
    case 85: 
      var $453=$sp;
      var $454=(($453)|0);
      var $455=HEAP32[(($454)>>2)];
      $oldbase=$455;
      var $456=$tbase;
      var $457=$sp;
      var $458=(($457)|0);
      HEAP32[(($458)>>2)]=$456;
      var $459=$tsize;
      var $460=$sp;
      var $461=(($460+4)|0);
      var $462=HEAP32[(($461)>>2)];
      var $463=((($462)+($459))|0);
      HEAP32[(($461)>>2)]=$463;
      var $464=$2;
      var $465=$tbase;
      var $466=$oldbase;
      var $467=$3;
      var $468=_prepend_alloc($464, $465, $466, $467);
      $1=$468;
      label = 93; break;
    case 86: 
      var $470=$2;
      var $471=$tbase;
      var $472=$tsize;
      var $473=$mmap_flag;
      _add_segment($470, $471, $472, $473);
      label = 87; break;
    case 87: 
      label = 88; break;
    case 88: 
      label = 89; break;
    case 89: 
      var $477=$3;
      var $478=$2;
      var $479=(($478+12)|0);
      var $480=HEAP32[(($479)>>2)];
      var $481=(($477)>>>0) < (($480)>>>0);
      if ($481) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $483=$3;
      var $484=$2;
      var $485=(($484+12)|0);
      var $486=HEAP32[(($485)>>2)];
      var $487=((($486)-($483))|0);
      HEAP32[(($485)>>2)]=$487;
      $rsize=$487;
      var $488=$2;
      var $489=(($488+24)|0);
      var $490=HEAP32[(($489)>>2)];
      $p=$490;
      var $491=$p;
      var $492=$491;
      var $493=$3;
      var $494=(($492+$493)|0);
      var $495=$494;
      var $496=$2;
      var $497=(($496+24)|0);
      HEAP32[(($497)>>2)]=$495;
      $r=$495;
      var $498=$rsize;
      var $499=$498 | 1;
      var $500=$r;
      var $501=(($500+4)|0);
      HEAP32[(($501)>>2)]=$499;
      var $502=$3;
      var $503=$502 | 1;
      var $504=$503 | 2;
      var $505=$p;
      var $506=(($505+4)|0);
      HEAP32[(($506)>>2)]=$504;
      var $507=$p;
      var $508=$507;
      var $509=(($508+8)|0);
      $1=$509;
      label = 93; break;
    case 91: 
      label = 92; break;
    case 92: 
      var $512=___errno_location();
      HEAP32[(($512)>>2)]=12;
      $1=0;
      label = 93; break;
    case 93: 
      var $514=$1;

      return $514;
    default: assert(0, "bad label: " + label);
  }

}
_sys_alloc["X"]=1;

function _free($mem) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F2;
      var $B3;
      var $I4;
      var $TP5;
      var $XP6;
      var $R7;
      var $F8;
      var $RP9;
      var $CP10;
      var $H11;
      var $C012;
      var $C113;
      var $I14;
      var $B15;
      var $F16;
      var $tp;
      var $H17;
      var $I18;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K19;
      var $C;
      var $F20;
      $1=$mem;
      var $2=$1;
      var $3=(($2)|0)!=0;
      if ($3) { label = 3; break; } else { label = 197; break; }
    case 3: 
      var $5=$1;
      var $6=((($5)-(8))|0);
      var $7=$6;
      $p=$7;
      var $8=$p;
      var $9=$8;
      var $10=HEAP32[((((5249972)|0))>>2)];
      var $11=(($9)>>>0) >= (($10)>>>0);
      if ($11) { label = 4; break; } else { var $19 = 0;label = 5; break; }
    case 4: 
      var $13=$p;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & 3;
      var $17=(($16)|0)!=1;
      var $19 = $17;label = 5; break;
    case 5: 
      var $19;
      var $20=(($19)&1);
      var $21=($20);
      var $22=(($21)|0)!=0;
      if ($22) { label = 6; break; } else { label = 194; break; }
    case 6: 
      var $24=$p;
      var $25=(($24+4)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=$26 & -8;
      $psize=$27;
      var $28=$p;
      var $29=$28;
      var $30=$psize;
      var $31=(($29+$30)|0);
      var $32=$31;
      $next=$32;
      var $33=$p;
      var $34=(($33+4)|0);
      var $35=HEAP32[(($34)>>2)];
      var $36=$35 & 1;
      var $37=(($36)|0)!=0;
      if ($37) { label = 78; break; } else { label = 7; break; }
    case 7: 
      var $39=$p;
      var $40=(($39)|0);
      var $41=HEAP32[(($40)>>2)];
      $prevsize=$41;
      var $42=$p;
      var $43=(($42+4)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44 & 3;
      var $46=(($45)|0)==0;
      if ($46) { label = 8; break; } else { label = 9; break; }
    case 8: 
      var $48=$prevsize;
      var $49=((($48)+(16))|0);
      var $50=$psize;
      var $51=((($50)+($49))|0);
      $psize=$51;
      label = 196; break;
    case 9: 
      var $53=$p;
      var $54=$53;
      var $55=$prevsize;
      var $56=(((-$55))|0);
      var $57=(($54+$56)|0);
      var $58=$57;
      $prev=$58;
      var $59=$prevsize;
      var $60=$psize;
      var $61=((($60)+($59))|0);
      $psize=$61;
      var $62=$prev;
      $p=$62;
      var $63=$prev;
      var $64=$63;
      var $65=HEAP32[((((5249972)|0))>>2)];
      var $66=(($64)>>>0) >= (($65)>>>0);
      var $67=(($66)&1);
      var $68=($67);
      var $69=(($68)|0)!=0;
      if ($69) { label = 10; break; } else { label = 75; break; }
    case 10: 
      var $71=$p;
      var $72=HEAP32[((((5249976)|0))>>2)];
      var $73=(($71)|0)!=(($72)|0);
      if ($73) { label = 11; break; } else { label = 71; break; }
    case 11: 
      var $75=$prevsize;
      var $76=$75 >>> 3;
      var $77=(($76)>>>0) < 32;
      if ($77) { label = 12; break; } else { label = 24; break; }
    case 12: 
      var $79=$p;
      var $80=(($79+8)|0);
      var $81=HEAP32[(($80)>>2)];
      $F=$81;
      var $82=$p;
      var $83=(($82+12)|0);
      var $84=HEAP32[(($83)>>2)];
      $B=$84;
      var $85=$prevsize;
      var $86=$85 >>> 3;
      $I=$86;
      var $87=$F;
      var $88=$B;
      var $89=(($87)|0)==(($88)|0);
      if ($89) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $91=$I;
      var $92=1 << $91;
      var $93=$92 ^ -1;
      var $94=HEAP32[((((5249956)|0))>>2)];
      var $95=$94 & $93;
      HEAP32[((((5249956)|0))>>2)]=$95;
      label = 23; break;
    case 14: 
      var $97=$F;
      var $98=$I;
      var $99=$98 << 1;
      var $100=((((5249996)|0)+($99<<2))|0);
      var $101=$100;
      var $102=$101;
      var $103=(($97)|0)==(($102)|0);
      if ($103) { label = 16; break; } else { label = 15; break; }
    case 15: 
      var $105=$F;
      var $106=$105;
      var $107=HEAP32[((((5249972)|0))>>2)];
      var $108=(($106)>>>0) >= (($107)>>>0);
      if ($108) { label = 16; break; } else { var $125 = 0;label = 19; break; }
    case 16: 
      var $110=$B;
      var $111=$I;
      var $112=$111 << 1;
      var $113=((((5249996)|0)+($112<<2))|0);
      var $114=$113;
      var $115=$114;
      var $116=(($110)|0)==(($115)|0);
      if ($116) { var $123 = 1;label = 18; break; } else { label = 17; break; }
    case 17: 
      var $118=$B;
      var $119=$118;
      var $120=HEAP32[((((5249972)|0))>>2)];
      var $121=(($119)>>>0) >= (($120)>>>0);
      var $123 = $121;label = 18; break;
    case 18: 
      var $123;
      var $125 = $123;label = 19; break;
    case 19: 
      var $125;
      var $126=(($125)&1);
      var $127=($126);
      var $128=(($127)|0)!=0;
      if ($128) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $130=$B;
      var $131=$F;
      var $132=(($131+12)|0);
      HEAP32[(($132)>>2)]=$130;
      var $133=$F;
      var $134=$B;
      var $135=(($134+8)|0);
      HEAP32[(($135)>>2)]=$133;
      label = 22; break;
    case 21: 
      _abort();
      throw "Reached an unreachable!"
    case 22: 
      label = 23; break;
    case 23: 
      label = 70; break;
    case 24: 
      var $140=$p;
      var $141=$140;
      $TP=$141;
      var $142=$TP;
      var $143=(($142+24)|0);
      var $144=HEAP32[(($143)>>2)];
      $XP=$144;
      var $145=$TP;
      var $146=(($145+12)|0);
      var $147=HEAP32[(($146)>>2)];
      var $148=$TP;
      var $149=(($147)|0)!=(($148)|0);
      if ($149) { label = 25; break; } else { label = 29; break; }
    case 25: 
      var $151=$TP;
      var $152=(($151+8)|0);
      var $153=HEAP32[(($152)>>2)];
      $F1=$153;
      var $154=$TP;
      var $155=(($154+12)|0);
      var $156=HEAP32[(($155)>>2)];
      $R=$156;
      var $157=$F1;
      var $158=$157;
      var $159=HEAP32[((((5249972)|0))>>2)];
      var $160=(($158)>>>0) >= (($159)>>>0);
      var $161=(($160)&1);
      var $162=($161);
      var $163=(($162)|0)!=0;
      if ($163) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $165=$R;
      var $166=$F1;
      var $167=(($166+12)|0);
      HEAP32[(($167)>>2)]=$165;
      var $168=$F1;
      var $169=$R;
      var $170=(($169+8)|0);
      HEAP32[(($170)>>2)]=$168;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 41; break;
    case 29: 
      var $174=$TP;
      var $175=(($174+16)|0);
      var $176=(($175+4)|0);
      $RP=$176;
      var $177=HEAP32[(($176)>>2)];
      $R=$177;
      var $178=(($177)|0)!=0;
      if ($178) { label = 31; break; } else { label = 30; break; }
    case 30: 
      var $180=$TP;
      var $181=(($180+16)|0);
      var $182=(($181)|0);
      $RP=$182;
      var $183=HEAP32[(($182)>>2)];
      $R=$183;
      var $184=(($183)|0)!=0;
      if ($184) { label = 31; break; } else { label = 40; break; }
    case 31: 
      label = 32; break;
    case 32: 
      var $187=$R;
      var $188=(($187+16)|0);
      var $189=(($188+4)|0);
      $CP=$189;
      var $190=HEAP32[(($189)>>2)];
      var $191=(($190)|0)!=0;
      if ($191) { var $199 = 1;label = 34; break; } else { label = 33; break; }
    case 33: 
      var $193=$R;
      var $194=(($193+16)|0);
      var $195=(($194)|0);
      $CP=$195;
      var $196=HEAP32[(($195)>>2)];
      var $197=(($196)|0)!=0;
      var $199 = $197;label = 34; break;
    case 34: 
      var $199;
      if ($199) { label = 35; break; } else { label = 36; break; }
    case 35: 
      var $201=$CP;
      $RP=$201;
      var $202=HEAP32[(($201)>>2)];
      $R=$202;
      label = 32; break;
    case 36: 
      var $204=$RP;
      var $205=$204;
      var $206=HEAP32[((((5249972)|0))>>2)];
      var $207=(($205)>>>0) >= (($206)>>>0);
      var $208=(($207)&1);
      var $209=($208);
      var $210=(($209)|0)!=0;
      if ($210) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $212=$RP;
      HEAP32[(($212)>>2)]=0;
      label = 39; break;
    case 38: 
      _abort();
      throw "Reached an unreachable!"
    case 39: 
      label = 40; break;
    case 40: 
      label = 41; break;
    case 41: 
      var $217=$XP;
      var $218=(($217)|0)!=0;
      if ($218) { label = 42; break; } else { label = 69; break; }
    case 42: 
      var $220=$TP;
      var $221=(($220+28)|0);
      var $222=HEAP32[(($221)>>2)];
      var $223=((((5250260)|0)+($222<<2))|0);
      $H=$223;
      var $224=$TP;
      var $225=$H;
      var $226=HEAP32[(($225)>>2)];
      var $227=(($224)|0)==(($226)|0);
      if ($227) { label = 43; break; } else { label = 46; break; }
    case 43: 
      var $229=$R;
      var $230=$H;
      HEAP32[(($230)>>2)]=$229;
      var $231=(($229)|0)==0;
      if ($231) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $233=$TP;
      var $234=(($233+28)|0);
      var $235=HEAP32[(($234)>>2)];
      var $236=1 << $235;
      var $237=$236 ^ -1;
      var $238=HEAP32[((((5249960)|0))>>2)];
      var $239=$238 & $237;
      HEAP32[((((5249960)|0))>>2)]=$239;
      label = 45; break;
    case 45: 
      label = 53; break;
    case 46: 
      var $242=$XP;
      var $243=$242;
      var $244=HEAP32[((((5249972)|0))>>2)];
      var $245=(($243)>>>0) >= (($244)>>>0);
      var $246=(($245)&1);
      var $247=($246);
      var $248=(($247)|0)!=0;
      if ($248) { label = 47; break; } else { label = 51; break; }
    case 47: 
      var $250=$XP;
      var $251=(($250+16)|0);
      var $252=(($251)|0);
      var $253=HEAP32[(($252)>>2)];
      var $254=$TP;
      var $255=(($253)|0)==(($254)|0);
      if ($255) { label = 48; break; } else { label = 49; break; }
    case 48: 
      var $257=$R;
      var $258=$XP;
      var $259=(($258+16)|0);
      var $260=(($259)|0);
      HEAP32[(($260)>>2)]=$257;
      label = 50; break;
    case 49: 
      var $262=$R;
      var $263=$XP;
      var $264=(($263+16)|0);
      var $265=(($264+4)|0);
      HEAP32[(($265)>>2)]=$262;
      label = 50; break;
    case 50: 
      label = 52; break;
    case 51: 
      _abort();
      throw "Reached an unreachable!"
    case 52: 
      label = 53; break;
    case 53: 
      var $270=$R;
      var $271=(($270)|0)!=0;
      if ($271) { label = 54; break; } else { label = 68; break; }
    case 54: 
      var $273=$R;
      var $274=$273;
      var $275=HEAP32[((((5249972)|0))>>2)];
      var $276=(($274)>>>0) >= (($275)>>>0);
      var $277=(($276)&1);
      var $278=($277);
      var $279=(($278)|0)!=0;
      if ($279) { label = 55; break; } else { label = 66; break; }
    case 55: 
      var $281=$XP;
      var $282=$R;
      var $283=(($282+24)|0);
      HEAP32[(($283)>>2)]=$281;
      var $284=$TP;
      var $285=(($284+16)|0);
      var $286=(($285)|0);
      var $287=HEAP32[(($286)>>2)];
      $C0=$287;
      var $288=(($287)|0)!=0;
      if ($288) { label = 56; break; } else { label = 60; break; }
    case 56: 
      var $290=$C0;
      var $291=$290;
      var $292=HEAP32[((((5249972)|0))>>2)];
      var $293=(($291)>>>0) >= (($292)>>>0);
      var $294=(($293)&1);
      var $295=($294);
      var $296=(($295)|0)!=0;
      if ($296) { label = 57; break; } else { label = 58; break; }
    case 57: 
      var $298=$C0;
      var $299=$R;
      var $300=(($299+16)|0);
      var $301=(($300)|0);
      HEAP32[(($301)>>2)]=$298;
      var $302=$R;
      var $303=$C0;
      var $304=(($303+24)|0);
      HEAP32[(($304)>>2)]=$302;
      label = 59; break;
    case 58: 
      _abort();
      throw "Reached an unreachable!"
    case 59: 
      label = 60; break;
    case 60: 
      var $308=$TP;
      var $309=(($308+16)|0);
      var $310=(($309+4)|0);
      var $311=HEAP32[(($310)>>2)];
      $C1=$311;
      var $312=(($311)|0)!=0;
      if ($312) { label = 61; break; } else { label = 65; break; }
    case 61: 
      var $314=$C1;
      var $315=$314;
      var $316=HEAP32[((((5249972)|0))>>2)];
      var $317=(($315)>>>0) >= (($316)>>>0);
      var $318=(($317)&1);
      var $319=($318);
      var $320=(($319)|0)!=0;
      if ($320) { label = 62; break; } else { label = 63; break; }
    case 62: 
      var $322=$C1;
      var $323=$R;
      var $324=(($323+16)|0);
      var $325=(($324+4)|0);
      HEAP32[(($325)>>2)]=$322;
      var $326=$R;
      var $327=$C1;
      var $328=(($327+24)|0);
      HEAP32[(($328)>>2)]=$326;
      label = 64; break;
    case 63: 
      _abort();
      throw "Reached an unreachable!"
    case 64: 
      label = 65; break;
    case 65: 
      label = 67; break;
    case 66: 
      _abort();
      throw "Reached an unreachable!"
    case 67: 
      label = 68; break;
    case 68: 
      label = 69; break;
    case 69: 
      label = 70; break;
    case 70: 
      label = 74; break;
    case 71: 
      var $338=$next;
      var $339=(($338+4)|0);
      var $340=HEAP32[(($339)>>2)];
      var $341=$340 & 3;
      var $342=(($341)|0)==3;
      if ($342) { label = 72; break; } else { label = 73; break; }
    case 72: 
      var $344=$psize;
      HEAP32[((((5249964)|0))>>2)]=$344;
      var $345=$next;
      var $346=(($345+4)|0);
      var $347=HEAP32[(($346)>>2)];
      var $348=$347 & -2;
      HEAP32[(($346)>>2)]=$348;
      var $349=$psize;
      var $350=$349 | 1;
      var $351=$p;
      var $352=(($351+4)|0);
      HEAP32[(($352)>>2)]=$350;
      var $353=$psize;
      var $354=$p;
      var $355=$354;
      var $356=$psize;
      var $357=(($355+$356)|0);
      var $358=$357;
      var $359=(($358)|0);
      HEAP32[(($359)>>2)]=$353;
      label = 196; break;
    case 73: 
      label = 74; break;
    case 74: 
      label = 76; break;
    case 75: 
      label = 195; break;
    case 76: 
      label = 77; break;
    case 77: 
      label = 78; break;
    case 78: 
      var $366=$p;
      var $367=$366;
      var $368=$next;
      var $369=$368;
      var $370=(($367)>>>0) < (($369)>>>0);
      if ($370) { label = 79; break; } else { var $378 = 0;label = 80; break; }
    case 79: 
      var $372=$next;
      var $373=(($372+4)|0);
      var $374=HEAP32[(($373)>>2)];
      var $375=$374 & 1;
      var $376=(($375)|0)!=0;
      var $378 = $376;label = 80; break;
    case 80: 
      var $378;
      var $379=(($378)&1);
      var $380=($379);
      var $381=(($380)|0)!=0;
      if ($381) { label = 81; break; } else { label = 193; break; }
    case 81: 
      var $383=$next;
      var $384=(($383+4)|0);
      var $385=HEAP32[(($384)>>2)];
      var $386=$385 & 2;
      var $387=(($386)|0)!=0;
      if ($387) { label = 154; break; } else { label = 82; break; }
    case 82: 
      var $389=$next;
      var $390=HEAP32[((((5249980)|0))>>2)];
      var $391=(($389)|0)==(($390)|0);
      if ($391) { label = 83; break; } else { label = 88; break; }
    case 83: 
      var $393=$psize;
      var $394=HEAP32[((((5249968)|0))>>2)];
      var $395=((($394)+($393))|0);
      HEAP32[((((5249968)|0))>>2)]=$395;
      $tsize=$395;
      var $396=$p;
      HEAP32[((((5249980)|0))>>2)]=$396;
      var $397=$tsize;
      var $398=$397 | 1;
      var $399=$p;
      var $400=(($399+4)|0);
      HEAP32[(($400)>>2)]=$398;
      var $401=$p;
      var $402=HEAP32[((((5249976)|0))>>2)];
      var $403=(($401)|0)==(($402)|0);
      if ($403) { label = 84; break; } else { label = 85; break; }
    case 84: 
      HEAP32[((((5249976)|0))>>2)]=0;
      HEAP32[((((5249964)|0))>>2)]=0;
      label = 85; break;
    case 85: 
      var $406=$tsize;
      var $407=HEAP32[((((5249984)|0))>>2)];
      var $408=(($406)>>>0) > (($407)>>>0);
      if ($408) { label = 86; break; } else { label = 87; break; }
    case 86: 
      var $410=_sys_trim(5249956, 0);
      label = 87; break;
    case 87: 
      label = 196; break;
    case 88: 
      var $413=$next;
      var $414=HEAP32[((((5249976)|0))>>2)];
      var $415=(($413)|0)==(($414)|0);
      if ($415) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $417=$psize;
      var $418=HEAP32[((((5249964)|0))>>2)];
      var $419=((($418)+($417))|0);
      HEAP32[((((5249964)|0))>>2)]=$419;
      $dsize=$419;
      var $420=$p;
      HEAP32[((((5249976)|0))>>2)]=$420;
      var $421=$dsize;
      var $422=$421 | 1;
      var $423=$p;
      var $424=(($423+4)|0);
      HEAP32[(($424)>>2)]=$422;
      var $425=$dsize;
      var $426=$p;
      var $427=$426;
      var $428=$dsize;
      var $429=(($427+$428)|0);
      var $430=$429;
      var $431=(($430)|0);
      HEAP32[(($431)>>2)]=$425;
      label = 196; break;
    case 90: 
      var $433=$next;
      var $434=(($433+4)|0);
      var $435=HEAP32[(($434)>>2)];
      var $436=$435 & -8;
      $nsize=$436;
      var $437=$nsize;
      var $438=$psize;
      var $439=((($438)+($437))|0);
      $psize=$439;
      var $440=$nsize;
      var $441=$440 >>> 3;
      var $442=(($441)>>>0) < 32;
      if ($442) { label = 91; break; } else { label = 103; break; }
    case 91: 
      var $444=$next;
      var $445=(($444+8)|0);
      var $446=HEAP32[(($445)>>2)];
      $F2=$446;
      var $447=$next;
      var $448=(($447+12)|0);
      var $449=HEAP32[(($448)>>2)];
      $B3=$449;
      var $450=$nsize;
      var $451=$450 >>> 3;
      $I4=$451;
      var $452=$F2;
      var $453=$B3;
      var $454=(($452)|0)==(($453)|0);
      if ($454) { label = 92; break; } else { label = 93; break; }
    case 92: 
      var $456=$I4;
      var $457=1 << $456;
      var $458=$457 ^ -1;
      var $459=HEAP32[((((5249956)|0))>>2)];
      var $460=$459 & $458;
      HEAP32[((((5249956)|0))>>2)]=$460;
      label = 102; break;
    case 93: 
      var $462=$F2;
      var $463=$I4;
      var $464=$463 << 1;
      var $465=((((5249996)|0)+($464<<2))|0);
      var $466=$465;
      var $467=$466;
      var $468=(($462)|0)==(($467)|0);
      if ($468) { label = 95; break; } else { label = 94; break; }
    case 94: 
      var $470=$F2;
      var $471=$470;
      var $472=HEAP32[((((5249972)|0))>>2)];
      var $473=(($471)>>>0) >= (($472)>>>0);
      if ($473) { label = 95; break; } else { var $490 = 0;label = 98; break; }
    case 95: 
      var $475=$B3;
      var $476=$I4;
      var $477=$476 << 1;
      var $478=((((5249996)|0)+($477<<2))|0);
      var $479=$478;
      var $480=$479;
      var $481=(($475)|0)==(($480)|0);
      if ($481) { var $488 = 1;label = 97; break; } else { label = 96; break; }
    case 96: 
      var $483=$B3;
      var $484=$483;
      var $485=HEAP32[((((5249972)|0))>>2)];
      var $486=(($484)>>>0) >= (($485)>>>0);
      var $488 = $486;label = 97; break;
    case 97: 
      var $488;
      var $490 = $488;label = 98; break;
    case 98: 
      var $490;
      var $491=(($490)&1);
      var $492=($491);
      var $493=(($492)|0)!=0;
      if ($493) { label = 99; break; } else { label = 100; break; }
    case 99: 
      var $495=$B3;
      var $496=$F2;
      var $497=(($496+12)|0);
      HEAP32[(($497)>>2)]=$495;
      var $498=$F2;
      var $499=$B3;
      var $500=(($499+8)|0);
      HEAP32[(($500)>>2)]=$498;
      label = 101; break;
    case 100: 
      _abort();
      throw "Reached an unreachable!"
    case 101: 
      label = 102; break;
    case 102: 
      label = 149; break;
    case 103: 
      var $505=$next;
      var $506=$505;
      $TP5=$506;
      var $507=$TP5;
      var $508=(($507+24)|0);
      var $509=HEAP32[(($508)>>2)];
      $XP6=$509;
      var $510=$TP5;
      var $511=(($510+12)|0);
      var $512=HEAP32[(($511)>>2)];
      var $513=$TP5;
      var $514=(($512)|0)!=(($513)|0);
      if ($514) { label = 104; break; } else { label = 108; break; }
    case 104: 
      var $516=$TP5;
      var $517=(($516+8)|0);
      var $518=HEAP32[(($517)>>2)];
      $F8=$518;
      var $519=$TP5;
      var $520=(($519+12)|0);
      var $521=HEAP32[(($520)>>2)];
      $R7=$521;
      var $522=$F8;
      var $523=$522;
      var $524=HEAP32[((((5249972)|0))>>2)];
      var $525=(($523)>>>0) >= (($524)>>>0);
      var $526=(($525)&1);
      var $527=($526);
      var $528=(($527)|0)!=0;
      if ($528) { label = 105; break; } else { label = 106; break; }
    case 105: 
      var $530=$R7;
      var $531=$F8;
      var $532=(($531+12)|0);
      HEAP32[(($532)>>2)]=$530;
      var $533=$F8;
      var $534=$R7;
      var $535=(($534+8)|0);
      HEAP32[(($535)>>2)]=$533;
      label = 107; break;
    case 106: 
      _abort();
      throw "Reached an unreachable!"
    case 107: 
      label = 120; break;
    case 108: 
      var $539=$TP5;
      var $540=(($539+16)|0);
      var $541=(($540+4)|0);
      $RP9=$541;
      var $542=HEAP32[(($541)>>2)];
      $R7=$542;
      var $543=(($542)|0)!=0;
      if ($543) { label = 110; break; } else { label = 109; break; }
    case 109: 
      var $545=$TP5;
      var $546=(($545+16)|0);
      var $547=(($546)|0);
      $RP9=$547;
      var $548=HEAP32[(($547)>>2)];
      $R7=$548;
      var $549=(($548)|0)!=0;
      if ($549) { label = 110; break; } else { label = 119; break; }
    case 110: 
      label = 111; break;
    case 111: 
      var $552=$R7;
      var $553=(($552+16)|0);
      var $554=(($553+4)|0);
      $CP10=$554;
      var $555=HEAP32[(($554)>>2)];
      var $556=(($555)|0)!=0;
      if ($556) { var $564 = 1;label = 113; break; } else { label = 112; break; }
    case 112: 
      var $558=$R7;
      var $559=(($558+16)|0);
      var $560=(($559)|0);
      $CP10=$560;
      var $561=HEAP32[(($560)>>2)];
      var $562=(($561)|0)!=0;
      var $564 = $562;label = 113; break;
    case 113: 
      var $564;
      if ($564) { label = 114; break; } else { label = 115; break; }
    case 114: 
      var $566=$CP10;
      $RP9=$566;
      var $567=HEAP32[(($566)>>2)];
      $R7=$567;
      label = 111; break;
    case 115: 
      var $569=$RP9;
      var $570=$569;
      var $571=HEAP32[((((5249972)|0))>>2)];
      var $572=(($570)>>>0) >= (($571)>>>0);
      var $573=(($572)&1);
      var $574=($573);
      var $575=(($574)|0)!=0;
      if ($575) { label = 116; break; } else { label = 117; break; }
    case 116: 
      var $577=$RP9;
      HEAP32[(($577)>>2)]=0;
      label = 118; break;
    case 117: 
      _abort();
      throw "Reached an unreachable!"
    case 118: 
      label = 119; break;
    case 119: 
      label = 120; break;
    case 120: 
      var $582=$XP6;
      var $583=(($582)|0)!=0;
      if ($583) { label = 121; break; } else { label = 148; break; }
    case 121: 
      var $585=$TP5;
      var $586=(($585+28)|0);
      var $587=HEAP32[(($586)>>2)];
      var $588=((((5250260)|0)+($587<<2))|0);
      $H11=$588;
      var $589=$TP5;
      var $590=$H11;
      var $591=HEAP32[(($590)>>2)];
      var $592=(($589)|0)==(($591)|0);
      if ($592) { label = 122; break; } else { label = 125; break; }
    case 122: 
      var $594=$R7;
      var $595=$H11;
      HEAP32[(($595)>>2)]=$594;
      var $596=(($594)|0)==0;
      if ($596) { label = 123; break; } else { label = 124; break; }
    case 123: 
      var $598=$TP5;
      var $599=(($598+28)|0);
      var $600=HEAP32[(($599)>>2)];
      var $601=1 << $600;
      var $602=$601 ^ -1;
      var $603=HEAP32[((((5249960)|0))>>2)];
      var $604=$603 & $602;
      HEAP32[((((5249960)|0))>>2)]=$604;
      label = 124; break;
    case 124: 
      label = 132; break;
    case 125: 
      var $607=$XP6;
      var $608=$607;
      var $609=HEAP32[((((5249972)|0))>>2)];
      var $610=(($608)>>>0) >= (($609)>>>0);
      var $611=(($610)&1);
      var $612=($611);
      var $613=(($612)|0)!=0;
      if ($613) { label = 126; break; } else { label = 130; break; }
    case 126: 
      var $615=$XP6;
      var $616=(($615+16)|0);
      var $617=(($616)|0);
      var $618=HEAP32[(($617)>>2)];
      var $619=$TP5;
      var $620=(($618)|0)==(($619)|0);
      if ($620) { label = 127; break; } else { label = 128; break; }
    case 127: 
      var $622=$R7;
      var $623=$XP6;
      var $624=(($623+16)|0);
      var $625=(($624)|0);
      HEAP32[(($625)>>2)]=$622;
      label = 129; break;
    case 128: 
      var $627=$R7;
      var $628=$XP6;
      var $629=(($628+16)|0);
      var $630=(($629+4)|0);
      HEAP32[(($630)>>2)]=$627;
      label = 129; break;
    case 129: 
      label = 131; break;
    case 130: 
      _abort();
      throw "Reached an unreachable!"
    case 131: 
      label = 132; break;
    case 132: 
      var $635=$R7;
      var $636=(($635)|0)!=0;
      if ($636) { label = 133; break; } else { label = 147; break; }
    case 133: 
      var $638=$R7;
      var $639=$638;
      var $640=HEAP32[((((5249972)|0))>>2)];
      var $641=(($639)>>>0) >= (($640)>>>0);
      var $642=(($641)&1);
      var $643=($642);
      var $644=(($643)|0)!=0;
      if ($644) { label = 134; break; } else { label = 145; break; }
    case 134: 
      var $646=$XP6;
      var $647=$R7;
      var $648=(($647+24)|0);
      HEAP32[(($648)>>2)]=$646;
      var $649=$TP5;
      var $650=(($649+16)|0);
      var $651=(($650)|0);
      var $652=HEAP32[(($651)>>2)];
      $C012=$652;
      var $653=(($652)|0)!=0;
      if ($653) { label = 135; break; } else { label = 139; break; }
    case 135: 
      var $655=$C012;
      var $656=$655;
      var $657=HEAP32[((((5249972)|0))>>2)];
      var $658=(($656)>>>0) >= (($657)>>>0);
      var $659=(($658)&1);
      var $660=($659);
      var $661=(($660)|0)!=0;
      if ($661) { label = 136; break; } else { label = 137; break; }
    case 136: 
      var $663=$C012;
      var $664=$R7;
      var $665=(($664+16)|0);
      var $666=(($665)|0);
      HEAP32[(($666)>>2)]=$663;
      var $667=$R7;
      var $668=$C012;
      var $669=(($668+24)|0);
      HEAP32[(($669)>>2)]=$667;
      label = 138; break;
    case 137: 
      _abort();
      throw "Reached an unreachable!"
    case 138: 
      label = 139; break;
    case 139: 
      var $673=$TP5;
      var $674=(($673+16)|0);
      var $675=(($674+4)|0);
      var $676=HEAP32[(($675)>>2)];
      $C113=$676;
      var $677=(($676)|0)!=0;
      if ($677) { label = 140; break; } else { label = 144; break; }
    case 140: 
      var $679=$C113;
      var $680=$679;
      var $681=HEAP32[((((5249972)|0))>>2)];
      var $682=(($680)>>>0) >= (($681)>>>0);
      var $683=(($682)&1);
      var $684=($683);
      var $685=(($684)|0)!=0;
      if ($685) { label = 141; break; } else { label = 142; break; }
    case 141: 
      var $687=$C113;
      var $688=$R7;
      var $689=(($688+16)|0);
      var $690=(($689+4)|0);
      HEAP32[(($690)>>2)]=$687;
      var $691=$R7;
      var $692=$C113;
      var $693=(($692+24)|0);
      HEAP32[(($693)>>2)]=$691;
      label = 143; break;
    case 142: 
      _abort();
      throw "Reached an unreachable!"
    case 143: 
      label = 144; break;
    case 144: 
      label = 146; break;
    case 145: 
      _abort();
      throw "Reached an unreachable!"
    case 146: 
      label = 147; break;
    case 147: 
      label = 148; break;
    case 148: 
      label = 149; break;
    case 149: 
      var $702=$psize;
      var $703=$702 | 1;
      var $704=$p;
      var $705=(($704+4)|0);
      HEAP32[(($705)>>2)]=$703;
      var $706=$psize;
      var $707=$p;
      var $708=$707;
      var $709=$psize;
      var $710=(($708+$709)|0);
      var $711=$710;
      var $712=(($711)|0);
      HEAP32[(($712)>>2)]=$706;
      var $713=$p;
      var $714=HEAP32[((((5249976)|0))>>2)];
      var $715=(($713)|0)==(($714)|0);
      if ($715) { label = 150; break; } else { label = 151; break; }
    case 150: 
      var $717=$psize;
      HEAP32[((((5249964)|0))>>2)]=$717;
      label = 196; break;
    case 151: 
      label = 152; break;
    case 152: 
      label = 153; break;
    case 153: 
      label = 155; break;
    case 154: 
      var $722=$next;
      var $723=(($722+4)|0);
      var $724=HEAP32[(($723)>>2)];
      var $725=$724 & -2;
      HEAP32[(($723)>>2)]=$725;
      var $726=$psize;
      var $727=$726 | 1;
      var $728=$p;
      var $729=(($728+4)|0);
      HEAP32[(($729)>>2)]=$727;
      var $730=$psize;
      var $731=$p;
      var $732=$731;
      var $733=$psize;
      var $734=(($732+$733)|0);
      var $735=$734;
      var $736=(($735)|0);
      HEAP32[(($736)>>2)]=$730;
      label = 155; break;
    case 155: 
      var $738=$psize;
      var $739=$738 >>> 3;
      var $740=(($739)>>>0) < 32;
      if ($740) { label = 156; break; } else { label = 163; break; }
    case 156: 
      var $742=$psize;
      var $743=$742 >>> 3;
      $I14=$743;
      var $744=$I14;
      var $745=$744 << 1;
      var $746=((((5249996)|0)+($745<<2))|0);
      var $747=$746;
      var $748=$747;
      $B15=$748;
      var $749=$B15;
      $F16=$749;
      var $750=HEAP32[((((5249956)|0))>>2)];
      var $751=$I14;
      var $752=1 << $751;
      var $753=$750 & $752;
      var $754=(($753)|0)!=0;
      if ($754) { label = 158; break; } else { label = 157; break; }
    case 157: 
      var $756=$I14;
      var $757=1 << $756;
      var $758=HEAP32[((((5249956)|0))>>2)];
      var $759=$758 | $757;
      HEAP32[((((5249956)|0))>>2)]=$759;
      label = 162; break;
    case 158: 
      var $761=$B15;
      var $762=(($761+8)|0);
      var $763=HEAP32[(($762)>>2)];
      var $764=$763;
      var $765=HEAP32[((((5249972)|0))>>2)];
      var $766=(($764)>>>0) >= (($765)>>>0);
      var $767=(($766)&1);
      var $768=($767);
      var $769=(($768)|0)!=0;
      if ($769) { label = 159; break; } else { label = 160; break; }
    case 159: 
      var $771=$B15;
      var $772=(($771+8)|0);
      var $773=HEAP32[(($772)>>2)];
      $F16=$773;
      label = 161; break;
    case 160: 
      _abort();
      throw "Reached an unreachable!"
    case 161: 
      label = 162; break;
    case 162: 
      var $777=$p;
      var $778=$B15;
      var $779=(($778+8)|0);
      HEAP32[(($779)>>2)]=$777;
      var $780=$p;
      var $781=$F16;
      var $782=(($781+12)|0);
      HEAP32[(($782)>>2)]=$780;
      var $783=$F16;
      var $784=$p;
      var $785=(($784+8)|0);
      HEAP32[(($785)>>2)]=$783;
      var $786=$B15;
      var $787=$p;
      var $788=(($787+12)|0);
      HEAP32[(($788)>>2)]=$786;
      label = 192; break;
    case 163: 
      var $790=$p;
      var $791=$790;
      $tp=$791;
      var $792=$psize;
      var $793=$792 >>> 8;
      $X=$793;
      var $794=$X;
      var $795=(($794)|0)==0;
      if ($795) { label = 164; break; } else { label = 165; break; }
    case 164: 
      $I18=0;
      label = 169; break;
    case 165: 
      var $798=$X;
      var $799=(($798)>>>0) > 65535;
      if ($799) { label = 166; break; } else { label = 167; break; }
    case 166: 
      $I18=31;
      label = 168; break;
    case 167: 
      var $802=$X;
      $Y=$802;
      var $803=$Y;
      var $804=((($803)-(256))|0);
      var $805=$804 >>> 16;
      var $806=$805 & 8;
      $N=$806;
      var $807=$N;
      var $808=$Y;
      var $809=$808 << $807;
      $Y=$809;
      var $810=((($809)-(4096))|0);
      var $811=$810 >>> 16;
      var $812=$811 & 4;
      $K=$812;
      var $813=$K;
      var $814=$N;
      var $815=((($814)+($813))|0);
      $N=$815;
      var $816=$K;
      var $817=$Y;
      var $818=$817 << $816;
      $Y=$818;
      var $819=((($818)-(16384))|0);
      var $820=$819 >>> 16;
      var $821=$820 & 2;
      $K=$821;
      var $822=$N;
      var $823=((($822)+($821))|0);
      $N=$823;
      var $824=$N;
      var $825=(((14)-($824))|0);
      var $826=$K;
      var $827=$Y;
      var $828=$827 << $826;
      $Y=$828;
      var $829=$828 >>> 15;
      var $830=((($825)+($829))|0);
      $K=$830;
      var $831=$K;
      var $832=$831 << 1;
      var $833=$psize;
      var $834=$K;
      var $835=((($834)+(7))|0);
      var $836=$833 >>> (($835)>>>0);
      var $837=$836 & 1;
      var $838=((($832)+($837))|0);
      $I18=$838;
      label = 168; break;
    case 168: 
      label = 169; break;
    case 169: 
      var $841=$I18;
      var $842=((((5250260)|0)+($841<<2))|0);
      $H17=$842;
      var $843=$I18;
      var $844=$tp;
      var $845=(($844+28)|0);
      HEAP32[(($845)>>2)]=$843;
      var $846=$tp;
      var $847=(($846+16)|0);
      var $848=(($847+4)|0);
      HEAP32[(($848)>>2)]=0;
      var $849=$tp;
      var $850=(($849+16)|0);
      var $851=(($850)|0);
      HEAP32[(($851)>>2)]=0;
      var $852=HEAP32[((((5249960)|0))>>2)];
      var $853=$I18;
      var $854=1 << $853;
      var $855=$852 & $854;
      var $856=(($855)|0)!=0;
      if ($856) { label = 171; break; } else { label = 170; break; }
    case 170: 
      var $858=$I18;
      var $859=1 << $858;
      var $860=HEAP32[((((5249960)|0))>>2)];
      var $861=$860 | $859;
      HEAP32[((((5249960)|0))>>2)]=$861;
      var $862=$tp;
      var $863=$H17;
      HEAP32[(($863)>>2)]=$862;
      var $864=$H17;
      var $865=$864;
      var $866=$tp;
      var $867=(($866+24)|0);
      HEAP32[(($867)>>2)]=$865;
      var $868=$tp;
      var $869=$tp;
      var $870=(($869+12)|0);
      HEAP32[(($870)>>2)]=$868;
      var $871=$tp;
      var $872=(($871+8)|0);
      HEAP32[(($872)>>2)]=$868;
      label = 189; break;
    case 171: 
      var $874=$H17;
      var $875=HEAP32[(($874)>>2)];
      $T=$875;
      var $876=$psize;
      var $877=$I18;
      var $878=(($877)|0)==31;
      if ($878) { label = 172; break; } else { label = 173; break; }
    case 172: 
      var $887 = 0;label = 174; break;
    case 173: 
      var $881=$I18;
      var $882=$881 >>> 1;
      var $883=((($882)+(8))|0);
      var $884=((($883)-(2))|0);
      var $885=(((31)-($884))|0);
      var $887 = $885;label = 174; break;
    case 174: 
      var $887;
      var $888=$876 << $887;
      $K19=$888;
      label = 175; break;
    case 175: 
      var $890=$T;
      var $891=(($890+4)|0);
      var $892=HEAP32[(($891)>>2)];
      var $893=$892 & -8;
      var $894=$psize;
      var $895=(($893)|0)!=(($894)|0);
      if ($895) { label = 176; break; } else { label = 182; break; }
    case 176: 
      var $897=$K19;
      var $898=$897 >>> 31;
      var $899=$898 & 1;
      var $900=$T;
      var $901=(($900+16)|0);
      var $902=(($901+($899<<2))|0);
      $C=$902;
      var $903=$K19;
      var $904=$903 << 1;
      $K19=$904;
      var $905=$C;
      var $906=HEAP32[(($905)>>2)];
      var $907=(($906)|0)!=0;
      if ($907) { label = 177; break; } else { label = 178; break; }
    case 177: 
      var $909=$C;
      var $910=HEAP32[(($909)>>2)];
      $T=$910;
      label = 181; break;
    case 178: 
      var $912=$C;
      var $913=$912;
      var $914=HEAP32[((((5249972)|0))>>2)];
      var $915=(($913)>>>0) >= (($914)>>>0);
      var $916=(($915)&1);
      var $917=($916);
      var $918=(($917)|0)!=0;
      if ($918) { label = 179; break; } else { label = 180; break; }
    case 179: 
      var $920=$tp;
      var $921=$C;
      HEAP32[(($921)>>2)]=$920;
      var $922=$T;
      var $923=$tp;
      var $924=(($923+24)|0);
      HEAP32[(($924)>>2)]=$922;
      var $925=$tp;
      var $926=$tp;
      var $927=(($926+12)|0);
      HEAP32[(($927)>>2)]=$925;
      var $928=$tp;
      var $929=(($928+8)|0);
      HEAP32[(($929)>>2)]=$925;
      label = 188; break;
    case 180: 
      _abort();
      throw "Reached an unreachable!"
    case 181: 
      label = 187; break;
    case 182: 
      var $933=$T;
      var $934=(($933+8)|0);
      var $935=HEAP32[(($934)>>2)];
      $F20=$935;
      var $936=$T;
      var $937=$936;
      var $938=HEAP32[((((5249972)|0))>>2)];
      var $939=(($937)>>>0) >= (($938)>>>0);
      if ($939) { label = 183; break; } else { var $946 = 0;label = 184; break; }
    case 183: 
      var $941=$F20;
      var $942=$941;
      var $943=HEAP32[((((5249972)|0))>>2)];
      var $944=(($942)>>>0) >= (($943)>>>0);
      var $946 = $944;label = 184; break;
    case 184: 
      var $946;
      var $947=(($946)&1);
      var $948=($947);
      var $949=(($948)|0)!=0;
      if ($949) { label = 185; break; } else { label = 186; break; }
    case 185: 
      var $951=$tp;
      var $952=$F20;
      var $953=(($952+12)|0);
      HEAP32[(($953)>>2)]=$951;
      var $954=$T;
      var $955=(($954+8)|0);
      HEAP32[(($955)>>2)]=$951;
      var $956=$F20;
      var $957=$tp;
      var $958=(($957+8)|0);
      HEAP32[(($958)>>2)]=$956;
      var $959=$T;
      var $960=$tp;
      var $961=(($960+12)|0);
      HEAP32[(($961)>>2)]=$959;
      var $962=$tp;
      var $963=(($962+24)|0);
      HEAP32[(($963)>>2)]=0;
      label = 188; break;
    case 186: 
      _abort();
      throw "Reached an unreachable!"
    case 187: 
      label = 175; break;
    case 188: 
      label = 189; break;
    case 189: 
      var $968=HEAP32[((((5249988)|0))>>2)];
      var $969=((($968)-(1))|0);
      HEAP32[((((5249988)|0))>>2)]=$969;
      var $970=(($969)|0)==0;
      if ($970) { label = 190; break; } else { label = 191; break; }
    case 190: 
      var $972=_release_unused_segments(5249956);
      label = 191; break;
    case 191: 
      label = 192; break;
    case 192: 
      label = 196; break;
    case 193: 
      label = 194; break;
    case 194: 
      label = 195; break;
    case 195: 
      _abort();
      throw "Reached an unreachable!"
    case 196: 
      label = 197; break;
    case 197: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_free["X"]=1;

function _sys_trim($m, $pad) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $1=$m;
      $2=$pad;
      $released=0;
      var $3=HEAP32[((((5248324)|0))>>2)];
      var $4=(($3)|0)!=0;
      if ($4) { var $9 = 1;label = 4; break; } else { label = 3; break; }
    case 3: 
      var $6=_init_mparams();
      var $7=(($6)|0)!=0;
      var $9 = $7;label = 4; break;
    case 4: 
      var $9;
      var $10=(($9)&1);
      var $11=$2;
      var $12=(($11)>>>0) < 4294967232;
      if ($12) { label = 5; break; } else { label = 26; break; }
    case 5: 
      var $14=$1;
      var $15=(($14+24)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=(($16)|0)!=0;
      if ($17) { label = 6; break; } else { label = 26; break; }
    case 6: 
      var $19=$2;
      var $20=((($19)+(40))|0);
      $2=$20;
      var $21=$1;
      var $22=(($21+12)|0);
      var $23=HEAP32[(($22)>>2)];
      var $24=$2;
      var $25=(($23)>>>0) > (($24)>>>0);
      if ($25) { label = 7; break; } else { label = 22; break; }
    case 7: 
      var $27=HEAP32[((((5248332)|0))>>2)];
      $unit=$27;
      var $28=$1;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$2;
      var $32=((($30)-($31))|0);
      var $33=$unit;
      var $34=((($33)-(1))|0);
      var $35=((($32)+($34))|0);
      var $36=$unit;
      var $37=Math.floor(((($35)>>>0))/((($36)>>>0)));
      var $38=((($37)-(1))|0);
      var $39=$unit;
      var $40=Math.imul($38,$39);
      $extra=$40;
      var $41=$1;
      var $42=$1;
      var $43=(($42+24)|0);
      var $44=HEAP32[(($43)>>2)];
      var $45=$44;
      var $46=_segment_holding($41, $45);
      $sp=$46;
      var $47=$sp;
      var $48=(($47+12)|0);
      var $49=HEAP32[(($48)>>2)];
      var $50=$49 & 8;
      var $51=(($50)|0)!=0;
      if ($51) { label = 19; break; } else { label = 8; break; }
    case 8: 
      var $53=$sp;
      var $54=(($53+12)|0);
      var $55=HEAP32[(($54)>>2)];
      var $56=$55 & 0;
      var $57=(($56)|0)!=0;
      if ($57) { label = 9; break; } else { label = 10; break; }
    case 9: 
      label = 18; break;
    case 10: 
      var $60=$extra;
      var $61=(($60)>>>0) >= 2147483647;
      if ($61) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $63=$unit;
      var $64=(((-2147483648)-($63))|0);
      $extra=$64;
      label = 12; break;
    case 12: 
      var $66=_sbrk(0);
      $old_br=$66;
      var $67=$old_br;
      var $68=$sp;
      var $69=(($68)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=$sp;
      var $72=(($71+4)|0);
      var $73=HEAP32[(($72)>>2)];
      var $74=(($70+$73)|0);
      var $75=(($67)|0)==(($74)|0);
      if ($75) { label = 13; break; } else { label = 17; break; }
    case 13: 
      var $77=$extra;
      var $78=(((-$77))|0);
      var $79=_sbrk($78);
      $rel_br=$79;
      var $80=_sbrk(0);
      $new_br=$80;
      var $81=$rel_br;
      var $82=(($81)|0)!=-1;
      if ($82) { label = 14; break; } else { label = 16; break; }
    case 14: 
      var $84=$new_br;
      var $85=$old_br;
      var $86=(($84)>>>0) < (($85)>>>0);
      if ($86) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $88=$old_br;
      var $89=$new_br;
      var $90=$88;
      var $91=$89;
      var $92=((($90)-($91))|0);
      $released=$92;
      label = 16; break;
    case 16: 
      label = 17; break;
    case 17: 
      label = 18; break;
    case 18: 
      label = 19; break;
    case 19: 
      var $97=$released;
      var $98=(($97)|0)!=0;
      if ($98) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $100=$released;
      var $101=$sp;
      var $102=(($101+4)|0);
      var $103=HEAP32[(($102)>>2)];
      var $104=((($103)-($100))|0);
      HEAP32[(($102)>>2)]=$104;
      var $105=$released;
      var $106=$1;
      var $107=(($106+432)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=((($108)-($105))|0);
      HEAP32[(($107)>>2)]=$109;
      var $110=$1;
      var $111=$1;
      var $112=(($111+24)|0);
      var $113=HEAP32[(($112)>>2)];
      var $114=$1;
      var $115=(($114+12)|0);
      var $116=HEAP32[(($115)>>2)];
      var $117=$released;
      var $118=((($116)-($117))|0);
      _init_top($110, $113, $118);
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      var $121=$released;
      var $122=(($121)|0)==0;
      if ($122) { label = 23; break; } else { label = 25; break; }
    case 23: 
      var $124=$1;
      var $125=(($124+12)|0);
      var $126=HEAP32[(($125)>>2)];
      var $127=$1;
      var $128=(($127+28)|0);
      var $129=HEAP32[(($128)>>2)];
      var $130=(($126)>>>0) > (($129)>>>0);
      if ($130) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $132=$1;
      var $133=(($132+28)|0);
      HEAP32[(($133)>>2)]=-1;
      label = 25; break;
    case 25: 
      label = 26; break;
    case 26: 
      var $136=$released;
      var $137=(($136)|0)!=0;
      var $138=$137 ? 1 : 0;

      return $138;
    default: assert(0, "bad label: " + label);
  }

}
_sys_trim["X"]=1;

function _realloc($oldmem, $bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $m;
      $2=$oldmem;
      $3=$bytes;
      var $4=$2;
      var $5=(($4)|0)==0;
      if ($5) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $7=$3;
      var $8=_malloc($7);
      $1=$8;
      label = 5; break;
    case 4: 
      $m=5249956;
      var $10=$m;
      var $11=$2;
      var $12=$3;
      var $13=_internal_realloc($10, $11, $12);
      $1=$13;
      label = 5; break;
    case 5: 
      var $15=$1;

      return $15;
    default: assert(0, "bad label: " + label);
  }

}
Module["_realloc"] = _realloc;

function _release_unused_segments($m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H1;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $released=0;
      $nsegs=0;
      var $2=$1;
      var $3=(($2+444)|0);
      $pred=$3;
      var $4=$pred;
      var $5=(($4+8)|0);
      var $6=HEAP32[(($5)>>2)];
      $sp=$6;
      label = 3; break;
    case 3: 
      var $8=$sp;
      var $9=(($8)|0)!=0;
      if ($9) { label = 4; break; } else { label = 88; break; }
    case 4: 
      var $11=$sp;
      var $12=(($11)|0);
      var $13=HEAP32[(($12)>>2)];
      $base=$13;
      var $14=$sp;
      var $15=(($14+4)|0);
      var $16=HEAP32[(($15)>>2)];
      $size=$16;
      var $17=$sp;
      var $18=(($17+8)|0);
      var $19=HEAP32[(($18)>>2)];
      $next=$19;
      var $20=$nsegs;
      var $21=((($20)+(1))|0);
      $nsegs=$21;
      var $22=$sp;
      var $23=(($22+12)|0);
      var $24=HEAP32[(($23)>>2)];
      var $25=$24 & 0;
      var $26=(($25)|0)!=0;
      if ($26) { label = 5; break; } else { label = 87; break; }
    case 5: 
      var $28=$sp;
      var $29=(($28+12)|0);
      var $30=HEAP32[(($29)>>2)];
      var $31=$30 & 8;
      var $32=(($31)|0)!=0;
      if ($32) { label = 87; break; } else { label = 6; break; }
    case 6: 
      var $34=$base;
      var $35=$base;
      var $36=(($35+8)|0);
      var $37=$36;
      var $38=$37 & 7;
      var $39=(($38)|0)==0;
      if ($39) { label = 7; break; } else { label = 8; break; }
    case 7: 
      var $49 = 0;label = 9; break;
    case 8: 
      var $42=$base;
      var $43=(($42+8)|0);
      var $44=$43;
      var $45=$44 & 7;
      var $46=(((8)-($45))|0);
      var $47=$46 & 7;
      var $49 = $47;label = 9; break;
    case 9: 
      var $49;
      var $50=(($34+$49)|0);
      var $51=$50;
      $p=$51;
      var $52=$p;
      var $53=(($52+4)|0);
      var $54=HEAP32[(($53)>>2)];
      var $55=$54 & -8;
      $psize=$55;
      var $56=$p;
      var $57=(($56+4)|0);
      var $58=HEAP32[(($57)>>2)];
      var $59=$58 & 3;
      var $60=(($59)|0)!=1;
      if ($60) { label = 86; break; } else { label = 10; break; }
    case 10: 
      var $62=$p;
      var $63=$62;
      var $64=$psize;
      var $65=(($63+$64)|0);
      var $66=$base;
      var $67=$size;
      var $68=(($66+$67)|0);
      var $69=((($68)-(40))|0);
      var $70=(($65)>>>0) >= (($69)>>>0);
      if ($70) { label = 11; break; } else { label = 86; break; }
    case 11: 
      var $72=$p;
      var $73=$72;
      $tp=$73;
      var $74=$p;
      var $75=$1;
      var $76=(($75+20)|0);
      var $77=HEAP32[(($76)>>2)];
      var $78=(($74)|0)==(($77)|0);
      if ($78) { label = 12; break; } else { label = 13; break; }
    case 12: 
      var $80=$1;
      var $81=(($80+20)|0);
      HEAP32[(($81)>>2)]=0;
      var $82=$1;
      var $83=(($82+8)|0);
      HEAP32[(($83)>>2)]=0;
      label = 59; break;
    case 13: 
      var $85=$tp;
      var $86=(($85+24)|0);
      var $87=HEAP32[(($86)>>2)];
      $XP=$87;
      var $88=$tp;
      var $89=(($88+12)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$tp;
      var $92=(($90)|0)!=(($91)|0);
      if ($92) { label = 14; break; } else { label = 18; break; }
    case 14: 
      var $94=$tp;
      var $95=(($94+8)|0);
      var $96=HEAP32[(($95)>>2)];
      $F=$96;
      var $97=$tp;
      var $98=(($97+12)|0);
      var $99=HEAP32[(($98)>>2)];
      $R=$99;
      var $100=$F;
      var $101=$100;
      var $102=$1;
      var $103=(($102+16)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=(($101)>>>0) >= (($104)>>>0);
      var $106=(($105)&1);
      var $107=($106);
      var $108=(($107)|0)!=0;
      if ($108) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $110=$R;
      var $111=$F;
      var $112=(($111+12)|0);
      HEAP32[(($112)>>2)]=$110;
      var $113=$F;
      var $114=$R;
      var $115=(($114+8)|0);
      HEAP32[(($115)>>2)]=$113;
      label = 17; break;
    case 16: 
      _abort();
      throw "Reached an unreachable!"
    case 17: 
      label = 30; break;
    case 18: 
      var $119=$tp;
      var $120=(($119+16)|0);
      var $121=(($120+4)|0);
      $RP=$121;
      var $122=HEAP32[(($121)>>2)];
      $R=$122;
      var $123=(($122)|0)!=0;
      if ($123) { label = 20; break; } else { label = 19; break; }
    case 19: 
      var $125=$tp;
      var $126=(($125+16)|0);
      var $127=(($126)|0);
      $RP=$127;
      var $128=HEAP32[(($127)>>2)];
      $R=$128;
      var $129=(($128)|0)!=0;
      if ($129) { label = 20; break; } else { label = 29; break; }
    case 20: 
      label = 21; break;
    case 21: 
      var $132=$R;
      var $133=(($132+16)|0);
      var $134=(($133+4)|0);
      $CP=$134;
      var $135=HEAP32[(($134)>>2)];
      var $136=(($135)|0)!=0;
      if ($136) { var $144 = 1;label = 23; break; } else { label = 22; break; }
    case 22: 
      var $138=$R;
      var $139=(($138+16)|0);
      var $140=(($139)|0);
      $CP=$140;
      var $141=HEAP32[(($140)>>2)];
      var $142=(($141)|0)!=0;
      var $144 = $142;label = 23; break;
    case 23: 
      var $144;
      if ($144) { label = 24; break; } else { label = 25; break; }
    case 24: 
      var $146=$CP;
      $RP=$146;
      var $147=HEAP32[(($146)>>2)];
      $R=$147;
      label = 21; break;
    case 25: 
      var $149=$RP;
      var $150=$149;
      var $151=$1;
      var $152=(($151+16)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=(($150)>>>0) >= (($153)>>>0);
      var $155=(($154)&1);
      var $156=($155);
      var $157=(($156)|0)!=0;
      if ($157) { label = 26; break; } else { label = 27; break; }
    case 26: 
      var $159=$RP;
      HEAP32[(($159)>>2)]=0;
      label = 28; break;
    case 27: 
      _abort();
      throw "Reached an unreachable!"
    case 28: 
      label = 29; break;
    case 29: 
      label = 30; break;
    case 30: 
      var $164=$XP;
      var $165=(($164)|0)!=0;
      if ($165) { label = 31; break; } else { label = 58; break; }
    case 31: 
      var $167=$tp;
      var $168=(($167+28)|0);
      var $169=HEAP32[(($168)>>2)];
      var $170=$1;
      var $171=(($170+304)|0);
      var $172=(($171+($169<<2))|0);
      $H=$172;
      var $173=$tp;
      var $174=$H;
      var $175=HEAP32[(($174)>>2)];
      var $176=(($173)|0)==(($175)|0);
      if ($176) { label = 32; break; } else { label = 35; break; }
    case 32: 
      var $178=$R;
      var $179=$H;
      HEAP32[(($179)>>2)]=$178;
      var $180=(($178)|0)==0;
      if ($180) { label = 33; break; } else { label = 34; break; }
    case 33: 
      var $182=$tp;
      var $183=(($182+28)|0);
      var $184=HEAP32[(($183)>>2)];
      var $185=1 << $184;
      var $186=$185 ^ -1;
      var $187=$1;
      var $188=(($187+4)|0);
      var $189=HEAP32[(($188)>>2)];
      var $190=$189 & $186;
      HEAP32[(($188)>>2)]=$190;
      label = 34; break;
    case 34: 
      label = 42; break;
    case 35: 
      var $193=$XP;
      var $194=$193;
      var $195=$1;
      var $196=(($195+16)|0);
      var $197=HEAP32[(($196)>>2)];
      var $198=(($194)>>>0) >= (($197)>>>0);
      var $199=(($198)&1);
      var $200=($199);
      var $201=(($200)|0)!=0;
      if ($201) { label = 36; break; } else { label = 40; break; }
    case 36: 
      var $203=$XP;
      var $204=(($203+16)|0);
      var $205=(($204)|0);
      var $206=HEAP32[(($205)>>2)];
      var $207=$tp;
      var $208=(($206)|0)==(($207)|0);
      if ($208) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $210=$R;
      var $211=$XP;
      var $212=(($211+16)|0);
      var $213=(($212)|0);
      HEAP32[(($213)>>2)]=$210;
      label = 39; break;
    case 38: 
      var $215=$R;
      var $216=$XP;
      var $217=(($216+16)|0);
      var $218=(($217+4)|0);
      HEAP32[(($218)>>2)]=$215;
      label = 39; break;
    case 39: 
      label = 41; break;
    case 40: 
      _abort();
      throw "Reached an unreachable!"
    case 41: 
      label = 42; break;
    case 42: 
      var $223=$R;
      var $224=(($223)|0)!=0;
      if ($224) { label = 43; break; } else { label = 57; break; }
    case 43: 
      var $226=$R;
      var $227=$226;
      var $228=$1;
      var $229=(($228+16)|0);
      var $230=HEAP32[(($229)>>2)];
      var $231=(($227)>>>0) >= (($230)>>>0);
      var $232=(($231)&1);
      var $233=($232);
      var $234=(($233)|0)!=0;
      if ($234) { label = 44; break; } else { label = 55; break; }
    case 44: 
      var $236=$XP;
      var $237=$R;
      var $238=(($237+24)|0);
      HEAP32[(($238)>>2)]=$236;
      var $239=$tp;
      var $240=(($239+16)|0);
      var $241=(($240)|0);
      var $242=HEAP32[(($241)>>2)];
      $C0=$242;
      var $243=(($242)|0)!=0;
      if ($243) { label = 45; break; } else { label = 49; break; }
    case 45: 
      var $245=$C0;
      var $246=$245;
      var $247=$1;
      var $248=(($247+16)|0);
      var $249=HEAP32[(($248)>>2)];
      var $250=(($246)>>>0) >= (($249)>>>0);
      var $251=(($250)&1);
      var $252=($251);
      var $253=(($252)|0)!=0;
      if ($253) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $255=$C0;
      var $256=$R;
      var $257=(($256+16)|0);
      var $258=(($257)|0);
      HEAP32[(($258)>>2)]=$255;
      var $259=$R;
      var $260=$C0;
      var $261=(($260+24)|0);
      HEAP32[(($261)>>2)]=$259;
      label = 48; break;
    case 47: 
      _abort();
      throw "Reached an unreachable!"
    case 48: 
      label = 49; break;
    case 49: 
      var $265=$tp;
      var $266=(($265+16)|0);
      var $267=(($266+4)|0);
      var $268=HEAP32[(($267)>>2)];
      $C1=$268;
      var $269=(($268)|0)!=0;
      if ($269) { label = 50; break; } else { label = 54; break; }
    case 50: 
      var $271=$C1;
      var $272=$271;
      var $273=$1;
      var $274=(($273+16)|0);
      var $275=HEAP32[(($274)>>2)];
      var $276=(($272)>>>0) >= (($275)>>>0);
      var $277=(($276)&1);
      var $278=($277);
      var $279=(($278)|0)!=0;
      if ($279) { label = 51; break; } else { label = 52; break; }
    case 51: 
      var $281=$C1;
      var $282=$R;
      var $283=(($282+16)|0);
      var $284=(($283+4)|0);
      HEAP32[(($284)>>2)]=$281;
      var $285=$R;
      var $286=$C1;
      var $287=(($286+24)|0);
      HEAP32[(($287)>>2)]=$285;
      label = 53; break;
    case 52: 
      _abort();
      throw "Reached an unreachable!"
    case 53: 
      label = 54; break;
    case 54: 
      label = 56; break;
    case 55: 
      _abort();
      throw "Reached an unreachable!"
    case 56: 
      label = 57; break;
    case 57: 
      label = 58; break;
    case 58: 
      label = 59; break;
    case 59: 
      var $296=$psize;
      var $297=$296 >>> 8;
      $X=$297;
      var $298=$X;
      var $299=(($298)|0)==0;
      if ($299) { label = 60; break; } else { label = 61; break; }
    case 60: 
      $I=0;
      label = 65; break;
    case 61: 
      var $302=$X;
      var $303=(($302)>>>0) > 65535;
      if ($303) { label = 62; break; } else { label = 63; break; }
    case 62: 
      $I=31;
      label = 64; break;
    case 63: 
      var $306=$X;
      $Y=$306;
      var $307=$Y;
      var $308=((($307)-(256))|0);
      var $309=$308 >>> 16;
      var $310=$309 & 8;
      $N=$310;
      var $311=$N;
      var $312=$Y;
      var $313=$312 << $311;
      $Y=$313;
      var $314=((($313)-(4096))|0);
      var $315=$314 >>> 16;
      var $316=$315 & 4;
      $K=$316;
      var $317=$K;
      var $318=$N;
      var $319=((($318)+($317))|0);
      $N=$319;
      var $320=$K;
      var $321=$Y;
      var $322=$321 << $320;
      $Y=$322;
      var $323=((($322)-(16384))|0);
      var $324=$323 >>> 16;
      var $325=$324 & 2;
      $K=$325;
      var $326=$N;
      var $327=((($326)+($325))|0);
      $N=$327;
      var $328=$N;
      var $329=(((14)-($328))|0);
      var $330=$K;
      var $331=$Y;
      var $332=$331 << $330;
      $Y=$332;
      var $333=$332 >>> 15;
      var $334=((($329)+($333))|0);
      $K=$334;
      var $335=$K;
      var $336=$335 << 1;
      var $337=$psize;
      var $338=$K;
      var $339=((($338)+(7))|0);
      var $340=$337 >>> (($339)>>>0);
      var $341=$340 & 1;
      var $342=((($336)+($341))|0);
      $I=$342;
      label = 64; break;
    case 64: 
      label = 65; break;
    case 65: 
      var $345=$I;
      var $346=$1;
      var $347=(($346+304)|0);
      var $348=(($347+($345<<2))|0);
      $H1=$348;
      var $349=$I;
      var $350=$tp;
      var $351=(($350+28)|0);
      HEAP32[(($351)>>2)]=$349;
      var $352=$tp;
      var $353=(($352+16)|0);
      var $354=(($353+4)|0);
      HEAP32[(($354)>>2)]=0;
      var $355=$tp;
      var $356=(($355+16)|0);
      var $357=(($356)|0);
      HEAP32[(($357)>>2)]=0;
      var $358=$1;
      var $359=(($358+4)|0);
      var $360=HEAP32[(($359)>>2)];
      var $361=$I;
      var $362=1 << $361;
      var $363=$360 & $362;
      var $364=(($363)|0)!=0;
      if ($364) { label = 67; break; } else { label = 66; break; }
    case 66: 
      var $366=$I;
      var $367=1 << $366;
      var $368=$1;
      var $369=(($368+4)|0);
      var $370=HEAP32[(($369)>>2)];
      var $371=$370 | $367;
      HEAP32[(($369)>>2)]=$371;
      var $372=$tp;
      var $373=$H1;
      HEAP32[(($373)>>2)]=$372;
      var $374=$H1;
      var $375=$374;
      var $376=$tp;
      var $377=(($376+24)|0);
      HEAP32[(($377)>>2)]=$375;
      var $378=$tp;
      var $379=$tp;
      var $380=(($379+12)|0);
      HEAP32[(($380)>>2)]=$378;
      var $381=$tp;
      var $382=(($381+8)|0);
      HEAP32[(($382)>>2)]=$378;
      label = 85; break;
    case 67: 
      var $384=$H1;
      var $385=HEAP32[(($384)>>2)];
      $T=$385;
      var $386=$psize;
      var $387=$I;
      var $388=(($387)|0)==31;
      if ($388) { label = 68; break; } else { label = 69; break; }
    case 68: 
      var $397 = 0;label = 70; break;
    case 69: 
      var $391=$I;
      var $392=$391 >>> 1;
      var $393=((($392)+(8))|0);
      var $394=((($393)-(2))|0);
      var $395=(((31)-($394))|0);
      var $397 = $395;label = 70; break;
    case 70: 
      var $397;
      var $398=$386 << $397;
      $K2=$398;
      label = 71; break;
    case 71: 
      var $400=$T;
      var $401=(($400+4)|0);
      var $402=HEAP32[(($401)>>2)];
      var $403=$402 & -8;
      var $404=$psize;
      var $405=(($403)|0)!=(($404)|0);
      if ($405) { label = 72; break; } else { label = 78; break; }
    case 72: 
      var $407=$K2;
      var $408=$407 >>> 31;
      var $409=$408 & 1;
      var $410=$T;
      var $411=(($410+16)|0);
      var $412=(($411+($409<<2))|0);
      $C=$412;
      var $413=$K2;
      var $414=$413 << 1;
      $K2=$414;
      var $415=$C;
      var $416=HEAP32[(($415)>>2)];
      var $417=(($416)|0)!=0;
      if ($417) { label = 73; break; } else { label = 74; break; }
    case 73: 
      var $419=$C;
      var $420=HEAP32[(($419)>>2)];
      $T=$420;
      label = 77; break;
    case 74: 
      var $422=$C;
      var $423=$422;
      var $424=$1;
      var $425=(($424+16)|0);
      var $426=HEAP32[(($425)>>2)];
      var $427=(($423)>>>0) >= (($426)>>>0);
      var $428=(($427)&1);
      var $429=($428);
      var $430=(($429)|0)!=0;
      if ($430) { label = 75; break; } else { label = 76; break; }
    case 75: 
      var $432=$tp;
      var $433=$C;
      HEAP32[(($433)>>2)]=$432;
      var $434=$T;
      var $435=$tp;
      var $436=(($435+24)|0);
      HEAP32[(($436)>>2)]=$434;
      var $437=$tp;
      var $438=$tp;
      var $439=(($438+12)|0);
      HEAP32[(($439)>>2)]=$437;
      var $440=$tp;
      var $441=(($440+8)|0);
      HEAP32[(($441)>>2)]=$437;
      label = 84; break;
    case 76: 
      _abort();
      throw "Reached an unreachable!"
    case 77: 
      label = 83; break;
    case 78: 
      var $445=$T;
      var $446=(($445+8)|0);
      var $447=HEAP32[(($446)>>2)];
      $F3=$447;
      var $448=$T;
      var $449=$448;
      var $450=$1;
      var $451=(($450+16)|0);
      var $452=HEAP32[(($451)>>2)];
      var $453=(($449)>>>0) >= (($452)>>>0);
      if ($453) { label = 79; break; } else { var $462 = 0;label = 80; break; }
    case 79: 
      var $455=$F3;
      var $456=$455;
      var $457=$1;
      var $458=(($457+16)|0);
      var $459=HEAP32[(($458)>>2)];
      var $460=(($456)>>>0) >= (($459)>>>0);
      var $462 = $460;label = 80; break;
    case 80: 
      var $462;
      var $463=(($462)&1);
      var $464=($463);
      var $465=(($464)|0)!=0;
      if ($465) { label = 81; break; } else { label = 82; break; }
    case 81: 
      var $467=$tp;
      var $468=$F3;
      var $469=(($468+12)|0);
      HEAP32[(($469)>>2)]=$467;
      var $470=$T;
      var $471=(($470+8)|0);
      HEAP32[(($471)>>2)]=$467;
      var $472=$F3;
      var $473=$tp;
      var $474=(($473+8)|0);
      HEAP32[(($474)>>2)]=$472;
      var $475=$T;
      var $476=$tp;
      var $477=(($476+12)|0);
      HEAP32[(($477)>>2)]=$475;
      var $478=$tp;
      var $479=(($478+24)|0);
      HEAP32[(($479)>>2)]=0;
      label = 84; break;
    case 82: 
      _abort();
      throw "Reached an unreachable!"
    case 83: 
      label = 71; break;
    case 84: 
      label = 85; break;
    case 85: 
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $486=$sp;
      $pred=$486;
      var $487=$next;
      $sp=$487;
      label = 3; break;
    case 88: 
      var $489=$nsegs;
      var $490=(($489)>>>0) > 4294967295;
      if ($490) { label = 89; break; } else { label = 90; break; }
    case 89: 
      var $492=$nsegs;
      var $495 = $492;label = 91; break;
    case 90: 
      var $495 = -1;label = 91; break;
    case 91: 
      var $495;
      var $496=$1;
      var $497=(($496+32)|0);
      HEAP32[(($497)>>2)]=$495;
      var $498=$released;

      return $498;
    default: assert(0, "bad label: " + label);
  }

}
_release_unused_segments["X"]=1;

function _mmap_resize($m, $oldp, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $oldsize;
      var $offset;
      var $oldmmsize;
      var $newmmsize;
      var $cp;
      var $newp;
      var $psize;
      $2=$m;
      $3=$oldp;
      $4=$nb;
      var $5=$3;
      var $6=(($5+4)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7 & -8;
      $oldsize=$8;
      var $9=$4;
      var $10=$9 >>> 3;
      var $11=(($10)>>>0) < 32;
      if ($11) { label = 3; break; } else { label = 4; break; }
    case 3: 
      $1=0;
      label = 15; break;
    case 4: 
      var $14=$oldsize;
      var $15=$4;
      var $16=((($15)+(4))|0);
      var $17=(($14)>>>0) >= (($16)>>>0);
      if ($17) { label = 5; break; } else { label = 7; break; }
    case 5: 
      var $19=$oldsize;
      var $20=$4;
      var $21=((($19)-($20))|0);
      var $22=HEAP32[((((5248332)|0))>>2)];
      var $23=$22 << 1;
      var $24=(($21)>>>0) <= (($23)>>>0);
      if ($24) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $26=$3;
      $1=$26;
      label = 15; break;
    case 7: 
      var $28=$3;
      var $29=(($28)|0);
      var $30=HEAP32[(($29)>>2)];
      $offset=$30;
      var $31=$oldsize;
      var $32=$offset;
      var $33=((($31)+($32))|0);
      var $34=((($33)+(16))|0);
      $oldmmsize=$34;
      var $35=$4;
      var $36=((($35)+(24))|0);
      var $37=((($36)+(7))|0);
      var $38=HEAP32[((((5248328)|0))>>2)];
      var $39=((($38)-(1))|0);
      var $40=((($37)+($39))|0);
      var $41=HEAP32[((((5248328)|0))>>2)];
      var $42=((($41)-(1))|0);
      var $43=$42 ^ -1;
      var $44=$40 & $43;
      $newmmsize=$44;
      $cp=-1;
      var $45=$cp;
      var $46=(($45)|0)!=-1;
      if ($46) { label = 8; break; } else { label = 13; break; }
    case 8: 
      var $48=$cp;
      var $49=$offset;
      var $50=(($48+$49)|0);
      var $51=$50;
      $newp=$51;
      var $52=$newmmsize;
      var $53=$offset;
      var $54=((($52)-($53))|0);
      var $55=((($54)-(16))|0);
      $psize=$55;
      var $56=$psize;
      var $57=$newp;
      var $58=(($57+4)|0);
      HEAP32[(($58)>>2)]=$56;
      var $59=$newp;
      var $60=$59;
      var $61=$psize;
      var $62=(($60+$61)|0);
      var $63=$62;
      var $64=(($63+4)|0);
      HEAP32[(($64)>>2)]=7;
      var $65=$newp;
      var $66=$65;
      var $67=$psize;
      var $68=((($67)+(4))|0);
      var $69=(($66+$68)|0);
      var $70=$69;
      var $71=(($70+4)|0);
      HEAP32[(($71)>>2)]=0;
      var $72=$cp;
      var $73=$2;
      var $74=(($73+16)|0);
      var $75=HEAP32[(($74)>>2)];
      var $76=(($72)>>>0) < (($75)>>>0);
      if ($76) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $78=$cp;
      var $79=$2;
      var $80=(($79+16)|0);
      HEAP32[(($80)>>2)]=$78;
      label = 10; break;
    case 10: 
      var $82=$newmmsize;
      var $83=$oldmmsize;
      var $84=((($82)-($83))|0);
      var $85=$2;
      var $86=(($85+432)|0);
      var $87=HEAP32[(($86)>>2)];
      var $88=((($87)+($84))|0);
      HEAP32[(($86)>>2)]=$88;
      var $89=$2;
      var $90=(($89+436)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=(($88)>>>0) > (($91)>>>0);
      if ($92) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $94=$2;
      var $95=(($94+432)|0);
      var $96=HEAP32[(($95)>>2)];
      var $97=$2;
      var $98=(($97+436)|0);
      HEAP32[(($98)>>2)]=$96;
      label = 12; break;
    case 12: 
      var $100=$newp;
      $1=$100;
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 15; break;
    case 15: 
      var $104=$1;

      return $104;
    default: assert(0, "bad label: " + label);
  }

}
_mmap_resize["X"]=1;

function _segment_holding($m, $addr) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $sp;
      $2=$m;
      $3=$addr;
      var $4=$2;
      var $5=(($4+444)|0);
      $sp=$5;
      label = 3; break;
    case 3: 
      var $7=$3;
      var $8=$sp;
      var $9=(($8)|0);
      var $10=HEAP32[(($9)>>2)];
      var $11=(($7)>>>0) >= (($10)>>>0);
      if ($11) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $13=$3;
      var $14=$sp;
      var $15=(($14)|0);
      var $16=HEAP32[(($15)>>2)];
      var $17=$sp;
      var $18=(($17+4)|0);
      var $19=HEAP32[(($18)>>2)];
      var $20=(($16+$19)|0);
      var $21=(($13)>>>0) < (($20)>>>0);
      if ($21) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $23=$sp;
      $1=$23;
      label = 9; break;
    case 6: 
      var $25=$sp;
      var $26=(($25+8)|0);
      var $27=HEAP32[(($26)>>2)];
      $sp=$27;
      var $28=(($27)|0)==0;
      if ($28) { label = 7; break; } else { label = 8; break; }
    case 7: 
      $1=0;
      label = 9; break;
    case 8: 
      label = 3; break;
    case 9: 
      var $32=$1;

      return $32;
    default: assert(0, "bad label: " + label);
  }

}


function _init_top($m, $p, $psize) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $offset;
      $1=$m;
      $2=$p;
      $3=$psize;
      var $4=$2;
      var $5=$4;
      var $6=(($5+8)|0);
      var $7=$6;
      var $8=$7 & 7;
      var $9=(($8)|0)==0;
      if ($9) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $20 = 0;label = 5; break;
    case 4: 
      var $12=$2;
      var $13=$12;
      var $14=(($13+8)|0);
      var $15=$14;
      var $16=$15 & 7;
      var $17=(((8)-($16))|0);
      var $18=$17 & 7;
      var $20 = $18;label = 5; break;
    case 5: 
      var $20;
      $offset=$20;
      var $21=$2;
      var $22=$21;
      var $23=$offset;
      var $24=(($22+$23)|0);
      var $25=$24;
      $2=$25;
      var $26=$offset;
      var $27=$3;
      var $28=((($27)-($26))|0);
      $3=$28;
      var $29=$2;
      var $30=$1;
      var $31=(($30+24)|0);
      HEAP32[(($31)>>2)]=$29;
      var $32=$3;
      var $33=$1;
      var $34=(($33+12)|0);
      HEAP32[(($34)>>2)]=$32;
      var $35=$3;
      var $36=$35 | 1;
      var $37=$2;
      var $38=(($37+4)|0);
      HEAP32[(($38)>>2)]=$36;
      var $39=$2;
      var $40=$39;
      var $41=$3;
      var $42=(($40+$41)|0);
      var $43=$42;
      var $44=(($43+4)|0);
      HEAP32[(($44)>>2)]=40;
      var $45=HEAP32[((((5248340)|0))>>2)];
      var $46=$1;
      var $47=(($46+28)|0);
      HEAP32[(($47)>>2)]=$45;

      return;
    default: assert(0, "bad label: " + label);
  }

}
_init_top["X"]=1;

function _mmap_alloc($m, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $mmsize;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $2=$m;
      $3=$nb;
      var $4=$3;
      var $5=((($4)+(24))|0);
      var $6=((($5)+(7))|0);
      var $7=HEAP32[((((5248328)|0))>>2)];
      var $8=((($7)-(1))|0);
      var $9=((($6)+($8))|0);
      var $10=HEAP32[((((5248328)|0))>>2)];
      var $11=((($10)-(1))|0);
      var $12=$11 ^ -1;
      var $13=$9 & $12;
      $mmsize=$13;
      var $14=$mmsize;
      var $15=$3;
      var $16=(($14)>>>0) > (($15)>>>0);
      if ($16) { label = 3; break; } else { label = 14; break; }
    case 3: 
      $mm=-1;
      var $18=$mm;
      var $19=(($18)|0)!=-1;
      if ($19) { label = 4; break; } else { label = 13; break; }
    case 4: 
      var $21=$mm;
      var $22=(($21+8)|0);
      var $23=$22;
      var $24=$23 & 7;
      var $25=(($24)|0)==0;
      if ($25) { label = 5; break; } else { label = 6; break; }
    case 5: 
      var $35 = 0;label = 7; break;
    case 6: 
      var $28=$mm;
      var $29=(($28+8)|0);
      var $30=$29;
      var $31=$30 & 7;
      var $32=(((8)-($31))|0);
      var $33=$32 & 7;
      var $35 = $33;label = 7; break;
    case 7: 
      var $35;
      $offset=$35;
      var $36=$mmsize;
      var $37=$offset;
      var $38=((($36)-($37))|0);
      var $39=((($38)-(16))|0);
      $psize=$39;
      var $40=$mm;
      var $41=$offset;
      var $42=(($40+$41)|0);
      var $43=$42;
      $p=$43;
      var $44=$offset;
      var $45=$p;
      var $46=(($45)|0);
      HEAP32[(($46)>>2)]=$44;
      var $47=$psize;
      var $48=$p;
      var $49=(($48+4)|0);
      HEAP32[(($49)>>2)]=$47;
      var $50=$p;
      var $51=$50;
      var $52=$psize;
      var $53=(($51+$52)|0);
      var $54=$53;
      var $55=(($54+4)|0);
      HEAP32[(($55)>>2)]=7;
      var $56=$p;
      var $57=$56;
      var $58=$psize;
      var $59=((($58)+(4))|0);
      var $60=(($57+$59)|0);
      var $61=$60;
      var $62=(($61+4)|0);
      HEAP32[(($62)>>2)]=0;
      var $63=$2;
      var $64=(($63+16)|0);
      var $65=HEAP32[(($64)>>2)];
      var $66=(($65)|0)==0;
      if ($66) { label = 9; break; } else { label = 8; break; }
    case 8: 
      var $68=$mm;
      var $69=$2;
      var $70=(($69+16)|0);
      var $71=HEAP32[(($70)>>2)];
      var $72=(($68)>>>0) < (($71)>>>0);
      if ($72) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $74=$mm;
      var $75=$2;
      var $76=(($75+16)|0);
      HEAP32[(($76)>>2)]=$74;
      label = 10; break;
    case 10: 
      var $78=$mmsize;
      var $79=$2;
      var $80=(($79+432)|0);
      var $81=HEAP32[(($80)>>2)];
      var $82=((($81)+($78))|0);
      HEAP32[(($80)>>2)]=$82;
      var $83=$2;
      var $84=(($83+436)|0);
      var $85=HEAP32[(($84)>>2)];
      var $86=(($82)>>>0) > (($85)>>>0);
      if ($86) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $88=$2;
      var $89=(($88+432)|0);
      var $90=HEAP32[(($89)>>2)];
      var $91=$2;
      var $92=(($91+436)|0);
      HEAP32[(($92)>>2)]=$90;
      label = 12; break;
    case 12: 
      var $94=$p;
      var $95=$94;
      var $96=(($95+8)|0);
      $1=$96;
      label = 15; break;
    case 13: 
      label = 14; break;
    case 14: 
      $1=0;
      label = 15; break;
    case 15: 
      var $100=$1;

      return $100;
    default: assert(0, "bad label: " + label);
  }

}
_mmap_alloc["X"]=1;

function _init_bins($m) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $i;
      var $bin;
      $1=$m;
      $i=0;
      label = 3; break;
    case 3: 
      var $3=$i;
      var $4=(($3)>>>0) < 32;
      if ($4) { label = 4; break; } else { label = 6; break; }
    case 4: 
      var $6=$i;
      var $7=$6 << 1;
      var $8=$1;
      var $9=(($8+40)|0);
      var $10=(($9+($7<<2))|0);
      var $11=$10;
      var $12=$11;
      $bin=$12;
      var $13=$bin;
      var $14=$bin;
      var $15=(($14+12)|0);
      HEAP32[(($15)>>2)]=$13;
      var $16=$bin;
      var $17=(($16+8)|0);
      HEAP32[(($17)>>2)]=$13;
      label = 5; break;
    case 5: 
      var $19=$i;
      var $20=((($19)+(1))|0);
      $i=$20;
      label = 3; break;
    case 6: 

      return;
    default: assert(0, "bad label: " + label);
  }

}


function _internal_realloc($m, $oldmem, $bytes) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $oldp;
      var $oldsize;
      var $next;
      var $newp;
      var $extra;
      var $nb;
      var $rsize;
      var $remainder;
      var $newsize;
      var $newtopsize;
      var $newtop;
      var $newmem;
      var $oc;
      $2=$m;
      $3=$oldmem;
      $4=$bytes;
      var $5=$4;
      var $6=(($5)>>>0) >= 4294967232;
      if ($6) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $8=___errno_location();
      HEAP32[(($8)>>2)]=12;
      $1=0;
      label = 35; break;
    case 4: 
      var $10=$3;
      var $11=((($10)-(8))|0);
      var $12=$11;
      $oldp=$12;
      var $13=$oldp;
      var $14=(($13+4)|0);
      var $15=HEAP32[(($14)>>2)];
      var $16=$15 & -8;
      $oldsize=$16;
      var $17=$oldp;
      var $18=$17;
      var $19=$oldsize;
      var $20=(($18+$19)|0);
      var $21=$20;
      $next=$21;
      $newp=0;
      $extra=0;
      var $22=$oldp;
      var $23=$22;
      var $24=$2;
      var $25=(($24+16)|0);
      var $26=HEAP32[(($25)>>2)];
      var $27=(($23)>>>0) >= (($26)>>>0);
      if ($27) { label = 5; break; } else { var $47 = 0;label = 8; break; }
    case 5: 
      var $29=$oldp;
      var $30=(($29+4)|0);
      var $31=HEAP32[(($30)>>2)];
      var $32=$31 & 3;
      var $33=(($32)|0)!=1;
      if ($33) { label = 6; break; } else { var $47 = 0;label = 8; break; }
    case 6: 
      var $35=$oldp;
      var $36=$35;
      var $37=$next;
      var $38=$37;
      var $39=(($36)>>>0) < (($38)>>>0);
      if ($39) { label = 7; break; } else { var $47 = 0;label = 8; break; }
    case 7: 
      var $41=$next;
      var $42=(($41+4)|0);
      var $43=HEAP32[(($42)>>2)];
      var $44=$43 & 1;
      var $45=(($44)|0)!=0;
      var $47 = $45;label = 8; break;
    case 8: 
      var $47;
      var $48=(($47)&1);
      var $49=($48);
      var $50=(($49)|0)!=0;
      if ($50) { label = 9; break; } else { label = 24; break; }
    case 9: 
      var $52=$4;
      var $53=(($52)>>>0) < 11;
      if ($53) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $61 = 16;label = 12; break;
    case 11: 
      var $56=$4;
      var $57=((($56)+(4))|0);
      var $58=((($57)+(7))|0);
      var $59=$58 & -8;
      var $61 = $59;label = 12; break;
    case 12: 
      var $61;
      $nb=$61;
      var $62=$oldp;
      var $63=(($62+4)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=$64 & 3;
      var $66=(($65)|0)==0;
      if ($66) { label = 13; break; } else { label = 14; break; }
    case 13: 
      var $68=$2;
      var $69=$oldp;
      var $70=$nb;
      var $71=_mmap_resize($68, $69, $70);
      $newp=$71;
      label = 23; break;
    case 14: 
      var $73=$oldsize;
      var $74=$nb;
      var $75=(($73)>>>0) >= (($74)>>>0);
      if ($75) { label = 15; break; } else { label = 18; break; }
    case 15: 
      var $77=$oldsize;
      var $78=$nb;
      var $79=((($77)-($78))|0);
      $rsize=$79;
      var $80=$oldp;
      $newp=$80;
      var $81=$rsize;
      var $82=(($81)>>>0) >= 16;
      if ($82) { label = 16; break; } else { label = 17; break; }
    case 16: 
      var $84=$newp;
      var $85=$84;
      var $86=$nb;
      var $87=(($85+$86)|0);
      var $88=$87;
      $remainder=$88;
      var $89=$newp;
      var $90=(($89+4)|0);
      var $91=HEAP32[(($90)>>2)];
      var $92=$91 & 1;
      var $93=$nb;
      var $94=$92 | $93;
      var $95=$94 | 2;
      var $96=$newp;
      var $97=(($96+4)|0);
      HEAP32[(($97)>>2)]=$95;
      var $98=$newp;
      var $99=$98;
      var $100=$nb;
      var $101=(($99+$100)|0);
      var $102=$101;
      var $103=(($102+4)|0);
      var $104=HEAP32[(($103)>>2)];
      var $105=$104 | 1;
      HEAP32[(($103)>>2)]=$105;
      var $106=$rsize;
      var $107=$106 | 1;
      var $108=$107 | 2;
      var $109=$remainder;
      var $110=(($109+4)|0);
      HEAP32[(($110)>>2)]=$108;
      var $111=$remainder;
      var $112=$111;
      var $113=$rsize;
      var $114=(($112+$113)|0);
      var $115=$114;
      var $116=(($115+4)|0);
      var $117=HEAP32[(($116)>>2)];
      var $118=$117 | 1;
      HEAP32[(($116)>>2)]=$118;
      var $119=$remainder;
      var $120=$119;
      var $121=(($120+8)|0);
      $extra=$121;
      label = 17; break;
    case 17: 
      label = 22; break;
    case 18: 
      var $124=$next;
      var $125=$2;
      var $126=(($125+24)|0);
      var $127=HEAP32[(($126)>>2)];
      var $128=(($124)|0)==(($127)|0);
      if ($128) { label = 19; break; } else { label = 21; break; }
    case 19: 
      var $130=$oldsize;
      var $131=$2;
      var $132=(($131+12)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=((($130)+($133))|0);
      var $135=$nb;
      var $136=(($134)>>>0) > (($135)>>>0);
      if ($136) { label = 20; break; } else { label = 21; break; }
    case 20: 
      var $138=$oldsize;
      var $139=$2;
      var $140=(($139+12)|0);
      var $141=HEAP32[(($140)>>2)];
      var $142=((($138)+($141))|0);
      $newsize=$142;
      var $143=$newsize;
      var $144=$nb;
      var $145=((($143)-($144))|0);
      $newtopsize=$145;
      var $146=$oldp;
      var $147=$146;
      var $148=$nb;
      var $149=(($147+$148)|0);
      var $150=$149;
      $newtop=$150;
      var $151=$oldp;
      var $152=(($151+4)|0);
      var $153=HEAP32[(($152)>>2)];
      var $154=$153 & 1;
      var $155=$nb;
      var $156=$154 | $155;
      var $157=$156 | 2;
      var $158=$oldp;
      var $159=(($158+4)|0);
      HEAP32[(($159)>>2)]=$157;
      var $160=$oldp;
      var $161=$160;
      var $162=$nb;
      var $163=(($161+$162)|0);
      var $164=$163;
      var $165=(($164+4)|0);
      var $166=HEAP32[(($165)>>2)];
      var $167=$166 | 1;
      HEAP32[(($165)>>2)]=$167;
      var $168=$newtopsize;
      var $169=$168 | 1;
      var $170=$newtop;
      var $171=(($170+4)|0);
      HEAP32[(($171)>>2)]=$169;
      var $172=$newtop;
      var $173=$2;
      var $174=(($173+24)|0);
      HEAP32[(($174)>>2)]=$172;
      var $175=$newtopsize;
      var $176=$2;
      var $177=(($176+12)|0);
      HEAP32[(($177)>>2)]=$175;
      var $178=$oldp;
      $newp=$178;
      label = 21; break;
    case 21: 
      label = 22; break;
    case 22: 
      label = 23; break;
    case 23: 
      label = 25; break;
    case 24: 
      _abort();
      throw "Reached an unreachable!"
    case 25: 
      var $184=$newp;
      var $185=(($184)|0)!=0;
      if ($185) { label = 26; break; } else { label = 29; break; }
    case 26: 
      var $187=$extra;
      var $188=(($187)|0)!=0;
      if ($188) { label = 27; break; } else { label = 28; break; }
    case 27: 
      var $190=$extra;
      _free($190);
      label = 28; break;
    case 28: 
      var $192=$newp;
      var $193=$192;
      var $194=(($193+8)|0);
      $1=$194;
      label = 35; break;
    case 29: 
      var $196=$4;
      var $197=_malloc($196);
      $newmem=$197;
      var $198=$newmem;
      var $199=(($198)|0)!=0;
      if ($199) { label = 30; break; } else { label = 34; break; }
    case 30: 
      var $201=$oldsize;
      var $202=$oldp;
      var $203=(($202+4)|0);
      var $204=HEAP32[(($203)>>2)];
      var $205=$204 & 3;
      var $206=(($205)|0)==0;
      var $207=$206 ? 8 : 4;
      var $208=((($201)-($207))|0);
      $oc=$208;
      var $209=$newmem;
      var $210=$3;
      var $211=$oc;
      var $212=$4;
      var $213=(($211)>>>0) < (($212)>>>0);
      if ($213) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $215=$oc;
      var $219 = $215;label = 33; break;
    case 32: 
      var $217=$4;
      var $219 = $217;label = 33; break;
    case 33: 
      var $219;
      assert($219 % 1 === 0);_memcpy($209, $210, $219);
      var $220=$3;
      _free($220);
      label = 34; break;
    case 34: 
      var $222=$newmem;
      $1=$222;
      label = 35; break;
    case 35: 
      var $224=$1;

      return $224;
    default: assert(0, "bad label: " + label);
  }

}
_internal_realloc["X"]=1;

function _init_mparams() {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $magic;
      var $psize;
      var $gsize;
      var $1=HEAP32[((((5248324)|0))>>2)];
      var $2=(($1)|0)==0;
      if ($2) { label = 3; break; } else { label = 7; break; }
    case 3: 
      var $4=_sysconf(8);
      $psize=$4;
      var $5=$psize;
      $gsize=$5;
      var $6=$gsize;
      var $7=$gsize;
      var $8=((($7)-(1))|0);
      var $9=$6 & $8;
      var $10=(($9)|0)!=0;
      if ($10) { label = 5; break; } else { label = 4; break; }
    case 4: 
      var $12=$psize;
      var $13=$psize;
      var $14=((($13)-(1))|0);
      var $15=$12 & $14;
      var $16=(($15)|0)!=0;
      if ($16) { label = 5; break; } else { label = 6; break; }
    case 5: 
      _abort();
      throw "Reached an unreachable!"
    case 6: 
      var $19=$gsize;
      HEAP32[((((5248332)|0))>>2)]=$19;
      var $20=$psize;
      HEAP32[((((5248328)|0))>>2)]=$20;
      HEAP32[((((5248336)|0))>>2)]=-1;
      HEAP32[((((5248340)|0))>>2)]=2097152;
      HEAP32[((((5248344)|0))>>2)]=0;
      var $21=HEAP32[((((5248344)|0))>>2)];
      HEAP32[((((5250396)|0))>>2)]=$21;
      var $22=_time(0);
      var $23=$22 ^ 1431655765;
      $magic=$23;
      var $24=$magic;
      var $25=$24 | 8;
      $magic=$25;
      var $26=$magic;
      var $27=$26 & -8;
      $magic=$27;
      var $28=$magic;
      HEAP32[((((5248324)|0))>>2)]=$28;
      label = 7; break;
    case 7: 

      return 1;
    default: assert(0, "bad label: " + label);
  }

}


function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F1;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I2;
      var $B3;
      var $F4;
      var $TP5;
      var $H6;
      var $I7;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K8;
      var $C;
      var $F9;
      $1=$m;
      $2=$newbase;
      $3=$oldbase;
      $4=$nb;
      var $5=$2;
      var $6=$2;
      var $7=(($6+8)|0);
      var $8=$7;
      var $9=$8 & 7;
      var $10=(($9)|0)==0;
      if ($10) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $20 = 0;label = 5; break;
    case 4: 
      var $13=$2;
      var $14=(($13+8)|0);
      var $15=$14;
      var $16=$15 & 7;
      var $17=(((8)-($16))|0);
      var $18=$17 & 7;
      var $20 = $18;label = 5; break;
    case 5: 
      var $20;
      var $21=(($5+$20)|0);
      var $22=$21;
      $p=$22;
      var $23=$3;
      var $24=$3;
      var $25=(($24+8)|0);
      var $26=$25;
      var $27=$26 & 7;
      var $28=(($27)|0)==0;
      if ($28) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $38 = 0;label = 8; break;
    case 7: 
      var $31=$3;
      var $32=(($31+8)|0);
      var $33=$32;
      var $34=$33 & 7;
      var $35=(((8)-($34))|0);
      var $36=$35 & 7;
      var $38 = $36;label = 8; break;
    case 8: 
      var $38;
      var $39=(($23+$38)|0);
      var $40=$39;
      $oldfirst=$40;
      var $41=$oldfirst;
      var $42=$41;
      var $43=$p;
      var $44=$43;
      var $45=$42;
      var $46=$44;
      var $47=((($45)-($46))|0);
      $psize=$47;
      var $48=$p;
      var $49=$48;
      var $50=$4;
      var $51=(($49+$50)|0);
      var $52=$51;
      $q=$52;
      var $53=$psize;
      var $54=$4;
      var $55=((($53)-($54))|0);
      $qsize=$55;
      var $56=$4;
      var $57=$56 | 1;
      var $58=$57 | 2;
      var $59=$p;
      var $60=(($59+4)|0);
      HEAP32[(($60)>>2)]=$58;
      var $61=$oldfirst;
      var $62=$1;
      var $63=(($62+24)|0);
      var $64=HEAP32[(($63)>>2)];
      var $65=(($61)|0)==(($64)|0);
      if ($65) { label = 9; break; } else { label = 10; break; }
    case 9: 
      var $67=$qsize;
      var $68=$1;
      var $69=(($68+12)|0);
      var $70=HEAP32[(($69)>>2)];
      var $71=((($70)+($67))|0);
      HEAP32[(($69)>>2)]=$71;
      $tsize=$71;
      var $72=$q;
      var $73=$1;
      var $74=(($73+24)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$tsize;
      var $76=$75 | 1;
      var $77=$q;
      var $78=(($77+4)|0);
      HEAP32[(($78)>>2)]=$76;
      label = 110; break;
    case 10: 
      var $80=$oldfirst;
      var $81=$1;
      var $82=(($81+20)|0);
      var $83=HEAP32[(($82)>>2)];
      var $84=(($80)|0)==(($83)|0);
      if ($84) { label = 11; break; } else { label = 12; break; }
    case 11: 
      var $86=$qsize;
      var $87=$1;
      var $88=(($87+8)|0);
      var $89=HEAP32[(($88)>>2)];
      var $90=((($89)+($86))|0);
      HEAP32[(($88)>>2)]=$90;
      $dsize=$90;
      var $91=$q;
      var $92=$1;
      var $93=(($92+20)|0);
      HEAP32[(($93)>>2)]=$91;
      var $94=$dsize;
      var $95=$94 | 1;
      var $96=$q;
      var $97=(($96+4)|0);
      HEAP32[(($97)>>2)]=$95;
      var $98=$dsize;
      var $99=$q;
      var $100=$99;
      var $101=$dsize;
      var $102=(($100+$101)|0);
      var $103=$102;
      var $104=(($103)|0);
      HEAP32[(($104)>>2)]=$98;
      label = 109; break;
    case 12: 
      var $106=$oldfirst;
      var $107=(($106+4)|0);
      var $108=HEAP32[(($107)>>2)];
      var $109=$108 & 3;
      var $110=(($109)|0)!=1;
      if ($110) { label = 73; break; } else { label = 13; break; }
    case 13: 
      var $112=$oldfirst;
      var $113=(($112+4)|0);
      var $114=HEAP32[(($113)>>2)];
      var $115=$114 & -8;
      $nsize=$115;
      var $116=$nsize;
      var $117=$116 >>> 3;
      var $118=(($117)>>>0) < 32;
      if ($118) { label = 14; break; } else { label = 26; break; }
    case 14: 
      var $120=$oldfirst;
      var $121=(($120+8)|0);
      var $122=HEAP32[(($121)>>2)];
      $F=$122;
      var $123=$oldfirst;
      var $124=(($123+12)|0);
      var $125=HEAP32[(($124)>>2)];
      $B=$125;
      var $126=$nsize;
      var $127=$126 >>> 3;
      $I=$127;
      var $128=$F;
      var $129=$B;
      var $130=(($128)|0)==(($129)|0);
      if ($130) { label = 15; break; } else { label = 16; break; }
    case 15: 
      var $132=$I;
      var $133=1 << $132;
      var $134=$133 ^ -1;
      var $135=$1;
      var $136=(($135)|0);
      var $137=HEAP32[(($136)>>2)];
      var $138=$137 & $134;
      HEAP32[(($136)>>2)]=$138;
      label = 25; break;
    case 16: 
      var $140=$F;
      var $141=$I;
      var $142=$141 << 1;
      var $143=$1;
      var $144=(($143+40)|0);
      var $145=(($144+($142<<2))|0);
      var $146=$145;
      var $147=$146;
      var $148=(($140)|0)==(($147)|0);
      if ($148) { label = 18; break; } else { label = 17; break; }
    case 17: 
      var $150=$F;
      var $151=$150;
      var $152=$1;
      var $153=(($152+16)|0);
      var $154=HEAP32[(($153)>>2)];
      var $155=(($151)>>>0) >= (($154)>>>0);
      if ($155) { label = 18; break; } else { var $176 = 0;label = 21; break; }
    case 18: 
      var $157=$B;
      var $158=$I;
      var $159=$158 << 1;
      var $160=$1;
      var $161=(($160+40)|0);
      var $162=(($161+($159<<2))|0);
      var $163=$162;
      var $164=$163;
      var $165=(($157)|0)==(($164)|0);
      if ($165) { var $174 = 1;label = 20; break; } else { label = 19; break; }
    case 19: 
      var $167=$B;
      var $168=$167;
      var $169=$1;
      var $170=(($169+16)|0);
      var $171=HEAP32[(($170)>>2)];
      var $172=(($168)>>>0) >= (($171)>>>0);
      var $174 = $172;label = 20; break;
    case 20: 
      var $174;
      var $176 = $174;label = 21; break;
    case 21: 
      var $176;
      var $177=(($176)&1);
      var $178=($177);
      var $179=(($178)|0)!=0;
      if ($179) { label = 22; break; } else { label = 23; break; }
    case 22: 
      var $181=$B;
      var $182=$F;
      var $183=(($182+12)|0);
      HEAP32[(($183)>>2)]=$181;
      var $184=$F;
      var $185=$B;
      var $186=(($185+8)|0);
      HEAP32[(($186)>>2)]=$184;
      label = 24; break;
    case 23: 
      _abort();
      throw "Reached an unreachable!"
    case 24: 
      label = 25; break;
    case 25: 
      label = 72; break;
    case 26: 
      var $191=$oldfirst;
      var $192=$191;
      $TP=$192;
      var $193=$TP;
      var $194=(($193+24)|0);
      var $195=HEAP32[(($194)>>2)];
      $XP=$195;
      var $196=$TP;
      var $197=(($196+12)|0);
      var $198=HEAP32[(($197)>>2)];
      var $199=$TP;
      var $200=(($198)|0)!=(($199)|0);
      if ($200) { label = 27; break; } else { label = 31; break; }
    case 27: 
      var $202=$TP;
      var $203=(($202+8)|0);
      var $204=HEAP32[(($203)>>2)];
      $F1=$204;
      var $205=$TP;
      var $206=(($205+12)|0);
      var $207=HEAP32[(($206)>>2)];
      $R=$207;
      var $208=$F1;
      var $209=$208;
      var $210=$1;
      var $211=(($210+16)|0);
      var $212=HEAP32[(($211)>>2)];
      var $213=(($209)>>>0) >= (($212)>>>0);
      var $214=(($213)&1);
      var $215=($214);
      var $216=(($215)|0)!=0;
      if ($216) { label = 28; break; } else { label = 29; break; }
    case 28: 
      var $218=$R;
      var $219=$F1;
      var $220=(($219+12)|0);
      HEAP32[(($220)>>2)]=$218;
      var $221=$F1;
      var $222=$R;
      var $223=(($222+8)|0);
      HEAP32[(($223)>>2)]=$221;
      label = 30; break;
    case 29: 
      _abort();
      throw "Reached an unreachable!"
    case 30: 
      label = 43; break;
    case 31: 
      var $227=$TP;
      var $228=(($227+16)|0);
      var $229=(($228+4)|0);
      $RP=$229;
      var $230=HEAP32[(($229)>>2)];
      $R=$230;
      var $231=(($230)|0)!=0;
      if ($231) { label = 33; break; } else { label = 32; break; }
    case 32: 
      var $233=$TP;
      var $234=(($233+16)|0);
      var $235=(($234)|0);
      $RP=$235;
      var $236=HEAP32[(($235)>>2)];
      $R=$236;
      var $237=(($236)|0)!=0;
      if ($237) { label = 33; break; } else { label = 42; break; }
    case 33: 
      label = 34; break;
    case 34: 
      var $240=$R;
      var $241=(($240+16)|0);
      var $242=(($241+4)|0);
      $CP=$242;
      var $243=HEAP32[(($242)>>2)];
      var $244=(($243)|0)!=0;
      if ($244) { var $252 = 1;label = 36; break; } else { label = 35; break; }
    case 35: 
      var $246=$R;
      var $247=(($246+16)|0);
      var $248=(($247)|0);
      $CP=$248;
      var $249=HEAP32[(($248)>>2)];
      var $250=(($249)|0)!=0;
      var $252 = $250;label = 36; break;
    case 36: 
      var $252;
      if ($252) { label = 37; break; } else { label = 38; break; }
    case 37: 
      var $254=$CP;
      $RP=$254;
      var $255=HEAP32[(($254)>>2)];
      $R=$255;
      label = 34; break;
    case 38: 
      var $257=$RP;
      var $258=$257;
      var $259=$1;
      var $260=(($259+16)|0);
      var $261=HEAP32[(($260)>>2)];
      var $262=(($258)>>>0) >= (($261)>>>0);
      var $263=(($262)&1);
      var $264=($263);
      var $265=(($264)|0)!=0;
      if ($265) { label = 39; break; } else { label = 40; break; }
    case 39: 
      var $267=$RP;
      HEAP32[(($267)>>2)]=0;
      label = 41; break;
    case 40: 
      _abort();
      throw "Reached an unreachable!"
    case 41: 
      label = 42; break;
    case 42: 
      label = 43; break;
    case 43: 
      var $272=$XP;
      var $273=(($272)|0)!=0;
      if ($273) { label = 44; break; } else { label = 71; break; }
    case 44: 
      var $275=$TP;
      var $276=(($275+28)|0);
      var $277=HEAP32[(($276)>>2)];
      var $278=$1;
      var $279=(($278+304)|0);
      var $280=(($279+($277<<2))|0);
      $H=$280;
      var $281=$TP;
      var $282=$H;
      var $283=HEAP32[(($282)>>2)];
      var $284=(($281)|0)==(($283)|0);
      if ($284) { label = 45; break; } else { label = 48; break; }
    case 45: 
      var $286=$R;
      var $287=$H;
      HEAP32[(($287)>>2)]=$286;
      var $288=(($286)|0)==0;
      if ($288) { label = 46; break; } else { label = 47; break; }
    case 46: 
      var $290=$TP;
      var $291=(($290+28)|0);
      var $292=HEAP32[(($291)>>2)];
      var $293=1 << $292;
      var $294=$293 ^ -1;
      var $295=$1;
      var $296=(($295+4)|0);
      var $297=HEAP32[(($296)>>2)];
      var $298=$297 & $294;
      HEAP32[(($296)>>2)]=$298;
      label = 47; break;
    case 47: 
      label = 55; break;
    case 48: 
      var $301=$XP;
      var $302=$301;
      var $303=$1;
      var $304=(($303+16)|0);
      var $305=HEAP32[(($304)>>2)];
      var $306=(($302)>>>0) >= (($305)>>>0);
      var $307=(($306)&1);
      var $308=($307);
      var $309=(($308)|0)!=0;
      if ($309) { label = 49; break; } else { label = 53; break; }
    case 49: 
      var $311=$XP;
      var $312=(($311+16)|0);
      var $313=(($312)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$TP;
      var $316=(($314)|0)==(($315)|0);
      if ($316) { label = 50; break; } else { label = 51; break; }
    case 50: 
      var $318=$R;
      var $319=$XP;
      var $320=(($319+16)|0);
      var $321=(($320)|0);
      HEAP32[(($321)>>2)]=$318;
      label = 52; break;
    case 51: 
      var $323=$R;
      var $324=$XP;
      var $325=(($324+16)|0);
      var $326=(($325+4)|0);
      HEAP32[(($326)>>2)]=$323;
      label = 52; break;
    case 52: 
      label = 54; break;
    case 53: 
      _abort();
      throw "Reached an unreachable!"
    case 54: 
      label = 55; break;
    case 55: 
      var $331=$R;
      var $332=(($331)|0)!=0;
      if ($332) { label = 56; break; } else { label = 70; break; }
    case 56: 
      var $334=$R;
      var $335=$334;
      var $336=$1;
      var $337=(($336+16)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=(($335)>>>0) >= (($338)>>>0);
      var $340=(($339)&1);
      var $341=($340);
      var $342=(($341)|0)!=0;
      if ($342) { label = 57; break; } else { label = 68; break; }
    case 57: 
      var $344=$XP;
      var $345=$R;
      var $346=(($345+24)|0);
      HEAP32[(($346)>>2)]=$344;
      var $347=$TP;
      var $348=(($347+16)|0);
      var $349=(($348)|0);
      var $350=HEAP32[(($349)>>2)];
      $C0=$350;
      var $351=(($350)|0)!=0;
      if ($351) { label = 58; break; } else { label = 62; break; }
    case 58: 
      var $353=$C0;
      var $354=$353;
      var $355=$1;
      var $356=(($355+16)|0);
      var $357=HEAP32[(($356)>>2)];
      var $358=(($354)>>>0) >= (($357)>>>0);
      var $359=(($358)&1);
      var $360=($359);
      var $361=(($360)|0)!=0;
      if ($361) { label = 59; break; } else { label = 60; break; }
    case 59: 
      var $363=$C0;
      var $364=$R;
      var $365=(($364+16)|0);
      var $366=(($365)|0);
      HEAP32[(($366)>>2)]=$363;
      var $367=$R;
      var $368=$C0;
      var $369=(($368+24)|0);
      HEAP32[(($369)>>2)]=$367;
      label = 61; break;
    case 60: 
      _abort();
      throw "Reached an unreachable!"
    case 61: 
      label = 62; break;
    case 62: 
      var $373=$TP;
      var $374=(($373+16)|0);
      var $375=(($374+4)|0);
      var $376=HEAP32[(($375)>>2)];
      $C1=$376;
      var $377=(($376)|0)!=0;
      if ($377) { label = 63; break; } else { label = 67; break; }
    case 63: 
      var $379=$C1;
      var $380=$379;
      var $381=$1;
      var $382=(($381+16)|0);
      var $383=HEAP32[(($382)>>2)];
      var $384=(($380)>>>0) >= (($383)>>>0);
      var $385=(($384)&1);
      var $386=($385);
      var $387=(($386)|0)!=0;
      if ($387) { label = 64; break; } else { label = 65; break; }
    case 64: 
      var $389=$C1;
      var $390=$R;
      var $391=(($390+16)|0);
      var $392=(($391+4)|0);
      HEAP32[(($392)>>2)]=$389;
      var $393=$R;
      var $394=$C1;
      var $395=(($394+24)|0);
      HEAP32[(($395)>>2)]=$393;
      label = 66; break;
    case 65: 
      _abort();
      throw "Reached an unreachable!"
    case 66: 
      label = 67; break;
    case 67: 
      label = 69; break;
    case 68: 
      _abort();
      throw "Reached an unreachable!"
    case 69: 
      label = 70; break;
    case 70: 
      label = 71; break;
    case 71: 
      label = 72; break;
    case 72: 
      var $404=$oldfirst;
      var $405=$404;
      var $406=$nsize;
      var $407=(($405+$406)|0);
      var $408=$407;
      $oldfirst=$408;
      var $409=$nsize;
      var $410=$qsize;
      var $411=((($410)+($409))|0);
      $qsize=$411;
      label = 73; break;
    case 73: 
      var $413=$oldfirst;
      var $414=(($413+4)|0);
      var $415=HEAP32[(($414)>>2)];
      var $416=$415 & -2;
      HEAP32[(($414)>>2)]=$416;
      var $417=$qsize;
      var $418=$417 | 1;
      var $419=$q;
      var $420=(($419+4)|0);
      HEAP32[(($420)>>2)]=$418;
      var $421=$qsize;
      var $422=$q;
      var $423=$422;
      var $424=$qsize;
      var $425=(($423+$424)|0);
      var $426=$425;
      var $427=(($426)|0);
      HEAP32[(($427)>>2)]=$421;
      var $428=$qsize;
      var $429=$428 >>> 3;
      var $430=(($429)>>>0) < 32;
      if ($430) { label = 74; break; } else { label = 81; break; }
    case 74: 
      var $432=$qsize;
      var $433=$432 >>> 3;
      $I2=$433;
      var $434=$I2;
      var $435=$434 << 1;
      var $436=$1;
      var $437=(($436+40)|0);
      var $438=(($437+($435<<2))|0);
      var $439=$438;
      var $440=$439;
      $B3=$440;
      var $441=$B3;
      $F4=$441;
      var $442=$1;
      var $443=(($442)|0);
      var $444=HEAP32[(($443)>>2)];
      var $445=$I2;
      var $446=1 << $445;
      var $447=$444 & $446;
      var $448=(($447)|0)!=0;
      if ($448) { label = 76; break; } else { label = 75; break; }
    case 75: 
      var $450=$I2;
      var $451=1 << $450;
      var $452=$1;
      var $453=(($452)|0);
      var $454=HEAP32[(($453)>>2)];
      var $455=$454 | $451;
      HEAP32[(($453)>>2)]=$455;
      label = 80; break;
    case 76: 
      var $457=$B3;
      var $458=(($457+8)|0);
      var $459=HEAP32[(($458)>>2)];
      var $460=$459;
      var $461=$1;
      var $462=(($461+16)|0);
      var $463=HEAP32[(($462)>>2)];
      var $464=(($460)>>>0) >= (($463)>>>0);
      var $465=(($464)&1);
      var $466=($465);
      var $467=(($466)|0)!=0;
      if ($467) { label = 77; break; } else { label = 78; break; }
    case 77: 
      var $469=$B3;
      var $470=(($469+8)|0);
      var $471=HEAP32[(($470)>>2)];
      $F4=$471;
      label = 79; break;
    case 78: 
      _abort();
      throw "Reached an unreachable!"
    case 79: 
      label = 80; break;
    case 80: 
      var $475=$q;
      var $476=$B3;
      var $477=(($476+8)|0);
      HEAP32[(($477)>>2)]=$475;
      var $478=$q;
      var $479=$F4;
      var $480=(($479+12)|0);
      HEAP32[(($480)>>2)]=$478;
      var $481=$F4;
      var $482=$q;
      var $483=(($482+8)|0);
      HEAP32[(($483)>>2)]=$481;
      var $484=$B3;
      var $485=$q;
      var $486=(($485+12)|0);
      HEAP32[(($486)>>2)]=$484;
      label = 108; break;
    case 81: 
      var $488=$q;
      var $489=$488;
      $TP5=$489;
      var $490=$qsize;
      var $491=$490 >>> 8;
      $X=$491;
      var $492=$X;
      var $493=(($492)|0)==0;
      if ($493) { label = 82; break; } else { label = 83; break; }
    case 82: 
      $I7=0;
      label = 87; break;
    case 83: 
      var $496=$X;
      var $497=(($496)>>>0) > 65535;
      if ($497) { label = 84; break; } else { label = 85; break; }
    case 84: 
      $I7=31;
      label = 86; break;
    case 85: 
      var $500=$X;
      $Y=$500;
      var $501=$Y;
      var $502=((($501)-(256))|0);
      var $503=$502 >>> 16;
      var $504=$503 & 8;
      $N=$504;
      var $505=$N;
      var $506=$Y;
      var $507=$506 << $505;
      $Y=$507;
      var $508=((($507)-(4096))|0);
      var $509=$508 >>> 16;
      var $510=$509 & 4;
      $K=$510;
      var $511=$K;
      var $512=$N;
      var $513=((($512)+($511))|0);
      $N=$513;
      var $514=$K;
      var $515=$Y;
      var $516=$515 << $514;
      $Y=$516;
      var $517=((($516)-(16384))|0);
      var $518=$517 >>> 16;
      var $519=$518 & 2;
      $K=$519;
      var $520=$N;
      var $521=((($520)+($519))|0);
      $N=$521;
      var $522=$N;
      var $523=(((14)-($522))|0);
      var $524=$K;
      var $525=$Y;
      var $526=$525 << $524;
      $Y=$526;
      var $527=$526 >>> 15;
      var $528=((($523)+($527))|0);
      $K=$528;
      var $529=$K;
      var $530=$529 << 1;
      var $531=$qsize;
      var $532=$K;
      var $533=((($532)+(7))|0);
      var $534=$531 >>> (($533)>>>0);
      var $535=$534 & 1;
      var $536=((($530)+($535))|0);
      $I7=$536;
      label = 86; break;
    case 86: 
      label = 87; break;
    case 87: 
      var $539=$I7;
      var $540=$1;
      var $541=(($540+304)|0);
      var $542=(($541+($539<<2))|0);
      $H6=$542;
      var $543=$I7;
      var $544=$TP5;
      var $545=(($544+28)|0);
      HEAP32[(($545)>>2)]=$543;
      var $546=$TP5;
      var $547=(($546+16)|0);
      var $548=(($547+4)|0);
      HEAP32[(($548)>>2)]=0;
      var $549=$TP5;
      var $550=(($549+16)|0);
      var $551=(($550)|0);
      HEAP32[(($551)>>2)]=0;
      var $552=$1;
      var $553=(($552+4)|0);
      var $554=HEAP32[(($553)>>2)];
      var $555=$I7;
      var $556=1 << $555;
      var $557=$554 & $556;
      var $558=(($557)|0)!=0;
      if ($558) { label = 89; break; } else { label = 88; break; }
    case 88: 
      var $560=$I7;
      var $561=1 << $560;
      var $562=$1;
      var $563=(($562+4)|0);
      var $564=HEAP32[(($563)>>2)];
      var $565=$564 | $561;
      HEAP32[(($563)>>2)]=$565;
      var $566=$TP5;
      var $567=$H6;
      HEAP32[(($567)>>2)]=$566;
      var $568=$H6;
      var $569=$568;
      var $570=$TP5;
      var $571=(($570+24)|0);
      HEAP32[(($571)>>2)]=$569;
      var $572=$TP5;
      var $573=$TP5;
      var $574=(($573+12)|0);
      HEAP32[(($574)>>2)]=$572;
      var $575=$TP5;
      var $576=(($575+8)|0);
      HEAP32[(($576)>>2)]=$572;
      label = 107; break;
    case 89: 
      var $578=$H6;
      var $579=HEAP32[(($578)>>2)];
      $T=$579;
      var $580=$qsize;
      var $581=$I7;
      var $582=(($581)|0)==31;
      if ($582) { label = 90; break; } else { label = 91; break; }
    case 90: 
      var $591 = 0;label = 92; break;
    case 91: 
      var $585=$I7;
      var $586=$585 >>> 1;
      var $587=((($586)+(8))|0);
      var $588=((($587)-(2))|0);
      var $589=(((31)-($588))|0);
      var $591 = $589;label = 92; break;
    case 92: 
      var $591;
      var $592=$580 << $591;
      $K8=$592;
      label = 93; break;
    case 93: 
      var $594=$T;
      var $595=(($594+4)|0);
      var $596=HEAP32[(($595)>>2)];
      var $597=$596 & -8;
      var $598=$qsize;
      var $599=(($597)|0)!=(($598)|0);
      if ($599) { label = 94; break; } else { label = 100; break; }
    case 94: 
      var $601=$K8;
      var $602=$601 >>> 31;
      var $603=$602 & 1;
      var $604=$T;
      var $605=(($604+16)|0);
      var $606=(($605+($603<<2))|0);
      $C=$606;
      var $607=$K8;
      var $608=$607 << 1;
      $K8=$608;
      var $609=$C;
      var $610=HEAP32[(($609)>>2)];
      var $611=(($610)|0)!=0;
      if ($611) { label = 95; break; } else { label = 96; break; }
    case 95: 
      var $613=$C;
      var $614=HEAP32[(($613)>>2)];
      $T=$614;
      label = 99; break;
    case 96: 
      var $616=$C;
      var $617=$616;
      var $618=$1;
      var $619=(($618+16)|0);
      var $620=HEAP32[(($619)>>2)];
      var $621=(($617)>>>0) >= (($620)>>>0);
      var $622=(($621)&1);
      var $623=($622);
      var $624=(($623)|0)!=0;
      if ($624) { label = 97; break; } else { label = 98; break; }
    case 97: 
      var $626=$TP5;
      var $627=$C;
      HEAP32[(($627)>>2)]=$626;
      var $628=$T;
      var $629=$TP5;
      var $630=(($629+24)|0);
      HEAP32[(($630)>>2)]=$628;
      var $631=$TP5;
      var $632=$TP5;
      var $633=(($632+12)|0);
      HEAP32[(($633)>>2)]=$631;
      var $634=$TP5;
      var $635=(($634+8)|0);
      HEAP32[(($635)>>2)]=$631;
      label = 106; break;
    case 98: 
      _abort();
      throw "Reached an unreachable!"
    case 99: 
      label = 105; break;
    case 100: 
      var $639=$T;
      var $640=(($639+8)|0);
      var $641=HEAP32[(($640)>>2)];
      $F9=$641;
      var $642=$T;
      var $643=$642;
      var $644=$1;
      var $645=(($644+16)|0);
      var $646=HEAP32[(($645)>>2)];
      var $647=(($643)>>>0) >= (($646)>>>0);
      if ($647) { label = 101; break; } else { var $656 = 0;label = 102; break; }
    case 101: 
      var $649=$F9;
      var $650=$649;
      var $651=$1;
      var $652=(($651+16)|0);
      var $653=HEAP32[(($652)>>2)];
      var $654=(($650)>>>0) >= (($653)>>>0);
      var $656 = $654;label = 102; break;
    case 102: 
      var $656;
      var $657=(($656)&1);
      var $658=($657);
      var $659=(($658)|0)!=0;
      if ($659) { label = 103; break; } else { label = 104; break; }
    case 103: 
      var $661=$TP5;
      var $662=$F9;
      var $663=(($662+12)|0);
      HEAP32[(($663)>>2)]=$661;
      var $664=$T;
      var $665=(($664+8)|0);
      HEAP32[(($665)>>2)]=$661;
      var $666=$F9;
      var $667=$TP5;
      var $668=(($667+8)|0);
      HEAP32[(($668)>>2)]=$666;
      var $669=$T;
      var $670=$TP5;
      var $671=(($670+12)|0);
      HEAP32[(($671)>>2)]=$669;
      var $672=$TP5;
      var $673=(($672+24)|0);
      HEAP32[(($673)>>2)]=0;
      label = 106; break;
    case 104: 
      _abort();
      throw "Reached an unreachable!"
    case 105: 
      label = 93; break;
    case 106: 
      label = 107; break;
    case 107: 
      label = 108; break;
    case 108: 
      label = 109; break;
    case 109: 
      label = 110; break;
    case 110: 
      var $681=$p;
      var $682=$681;
      var $683=(($682+8)|0);

      return $683;
    default: assert(0, "bad label: " + label);
  }

}
_prepend_alloc["X"]=1;

function _add_segment($m, $tbase, $tsize, $mmapped) {
  var label = 0;

  label = 2; 
  while(1) switch(label) {
    case 2: 
      var $1;
      var $2;
      var $3;
      var $4;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I1;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K2;
      var $C;
      var $F3;
      $1=$m;
      $2=$tbase;
      $3=$tsize;
      $4=$mmapped;
      var $5=$1;
      var $6=(($5+24)|0);
      var $7=HEAP32[(($6)>>2)];
      var $8=$7;
      $old_top=$8;
      var $9=$1;
      var $10=$old_top;
      var $11=_segment_holding($9, $10);
      $oldsp=$11;
      var $12=$oldsp;
      var $13=(($12)|0);
      var $14=HEAP32[(($13)>>2)];
      var $15=$oldsp;
      var $16=(($15+4)|0);
      var $17=HEAP32[(($16)>>2)];
      var $18=(($14+$17)|0);
      $old_end=$18;
      $ssize=24;
      var $19=$old_end;
      var $20=$ssize;
      var $21=((($20)+(16))|0);
      var $22=((($21)+(7))|0);
      var $23=(((-$22))|0);
      var $24=(($19+$23)|0);
      $rawsp=$24;
      var $25=$rawsp;
      var $26=(($25+8)|0);
      var $27=$26;
      var $28=$27 & 7;
      var $29=(($28)|0)==0;
      if ($29) { label = 3; break; } else { label = 4; break; }
    case 3: 
      var $39 = 0;label = 5; break;
    case 4: 
      var $32=$rawsp;
      var $33=(($32+8)|0);
      var $34=$33;
      var $35=$34 & 7;
      var $36=(((8)-($35))|0);
      var $37=$36 & 7;
      var $39 = $37;label = 5; break;
    case 5: 
      var $39;
      $offset=$39;
      var $40=$rawsp;
      var $41=$offset;
      var $42=(($40+$41)|0);
      $asp=$42;
      var $43=$asp;
      var $44=$old_top;
      var $45=(($44+16)|0);
      var $46=(($43)>>>0) < (($45)>>>0);
      if ($46) { label = 6; break; } else { label = 7; break; }
    case 6: 
      var $48=$old_top;
      var $52 = $48;label = 8; break;
    case 7: 
      var $50=$asp;
      var $52 = $50;label = 8; break;
    case 8: 
      var $52;
      $csp=$52;
      var $53=$csp;
      var $54=$53;
      $sp=$54;
      var $55=$sp;
      var $56=$55;
      var $57=(($56+8)|0);
      var $58=$57;
      $ss=$58;
      var $59=$sp;
      var $60=$59;
      var $61=$ssize;
      var $62=(($60+$61)|0);
      var $63=$62;
      $tnext=$63;
      var $64=$tnext;
      $p=$64;
      $nfences=0;
      var $65=$1;
      var $66=$2;
      var $67=$66;
      var $68=$3;
      var $69=((($68)-(40))|0);
      _init_top($65, $67, $69);
      var $70=$ssize;
      var $71=$70 | 1;
      var $72=$71 | 2;
      var $73=$sp;
      var $74=(($73+4)|0);
      HEAP32[(($74)>>2)]=$72;
      var $75=$ss;
      var $76=$1;
      var $77=(($76+444)|0);
      var $78=$75;
      var $79=$77;
      assert(16 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($79)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($79)+(4))>>2)];HEAP32[((($78)+(8))>>2)]=HEAP32[((($79)+(8))>>2)];HEAP32[((($78)+(12))>>2)]=HEAP32[((($79)+(12))>>2)];
      var $80=$2;
      var $81=$1;
      var $82=(($81+444)|0);
      var $83=(($82)|0);
      HEAP32[(($83)>>2)]=$80;
      var $84=$3;
      var $85=$1;
      var $86=(($85+444)|0);
      var $87=(($86+4)|0);
      HEAP32[(($87)>>2)]=$84;
      var $88=$4;
      var $89=$1;
      var $90=(($89+444)|0);
      var $91=(($90+12)|0);
      HEAP32[(($91)>>2)]=$88;
      var $92=$ss;
      var $93=$1;
      var $94=(($93+444)|0);
      var $95=(($94+8)|0);
      HEAP32[(($95)>>2)]=$92;
      label = 9; break;
    case 9: 
      var $97=$p;
      var $98=$97;
      var $99=(($98+4)|0);
      var $100=$99;
      $nextp=$100;
      var $101=$p;
      var $102=(($101+4)|0);
      HEAP32[(($102)>>2)]=7;
      var $103=$nfences;
      var $104=((($103)+(1))|0);
      $nfences=$104;
      var $105=$nextp;
      var $106=(($105+4)|0);
      var $107=$106;
      var $108=$old_end;
      var $109=(($107)>>>0) < (($108)>>>0);
      if ($109) { label = 10; break; } else { label = 11; break; }
    case 10: 
      var $111=$nextp;
      $p=$111;
      label = 12; break;
    case 11: 
      label = 13; break;
    case 12: 
      label = 9; break;
    case 13: 
      var $115=$csp;
      var $116=$old_top;
      var $117=(($115)|0)!=(($116)|0);
      if ($117) { label = 14; break; } else { label = 50; break; }
    case 14: 
      var $119=$old_top;
      var $120=$119;
      $q=$120;
      var $121=$csp;
      var $122=$old_top;
      var $123=$121;
      var $124=$122;
      var $125=((($123)-($124))|0);
      $psize=$125;
      var $126=$q;
      var $127=$126;
      var $128=$psize;
      var $129=(($127+$128)|0);
      var $130=$129;
      $tn=$130;
      var $131=$tn;
      var $132=(($131+4)|0);
      var $133=HEAP32[(($132)>>2)];
      var $134=$133 & -2;
      HEAP32[(($132)>>2)]=$134;
      var $135=$psize;
      var $136=$135 | 1;
      var $137=$q;
      var $138=(($137+4)|0);
      HEAP32[(($138)>>2)]=$136;
      var $139=$psize;
      var $140=$q;
      var $141=$140;
      var $142=$psize;
      var $143=(($141+$142)|0);
      var $144=$143;
      var $145=(($144)|0);
      HEAP32[(($145)>>2)]=$139;
      var $146=$psize;
      var $147=$146 >>> 3;
      var $148=(($147)>>>0) < 32;
      if ($148) { label = 15; break; } else { label = 22; break; }
    case 15: 
      var $150=$psize;
      var $151=$150 >>> 3;
      $I=$151;
      var $152=$I;
      var $153=$152 << 1;
      var $154=$1;
      var $155=(($154+40)|0);
      var $156=(($155+($153<<2))|0);
      var $157=$156;
      var $158=$157;
      $B=$158;
      var $159=$B;
      $F=$159;
      var $160=$1;
      var $161=(($160)|0);
      var $162=HEAP32[(($161)>>2)];
      var $163=$I;
      var $164=1 << $163;
      var $165=$162 & $164;
      var $166=(($165)|0)!=0;
      if ($166) { label = 17; break; } else { label = 16; break; }
    case 16: 
      var $168=$I;
      var $169=1 << $168;
      var $170=$1;
      var $171=(($170)|0);
      var $172=HEAP32[(($171)>>2)];
      var $173=$172 | $169;
      HEAP32[(($171)>>2)]=$173;
      label = 21; break;
    case 17: 
      var $175=$B;
      var $176=(($175+8)|0);
      var $177=HEAP32[(($176)>>2)];
      var $178=$177;
      var $179=$1;
      var $180=(($179+16)|0);
      var $181=HEAP32[(($180)>>2)];
      var $182=(($178)>>>0) >= (($181)>>>0);
      var $183=(($182)&1);
      var $184=($183);
      var $185=(($184)|0)!=0;
      if ($185) { label = 18; break; } else { label = 19; break; }
    case 18: 
      var $187=$B;
      var $188=(($187+8)|0);
      var $189=HEAP32[(($188)>>2)];
      $F=$189;
      label = 20; break;
    case 19: 
      _abort();
      throw "Reached an unreachable!"
    case 20: 
      label = 21; break;
    case 21: 
      var $193=$q;
      var $194=$B;
      var $195=(($194+8)|0);
      HEAP32[(($195)>>2)]=$193;
      var $196=$q;
      var $197=$F;
      var $198=(($197+12)|0);
      HEAP32[(($198)>>2)]=$196;
      var $199=$F;
      var $200=$q;
      var $201=(($200+8)|0);
      HEAP32[(($201)>>2)]=$199;
      var $202=$B;
      var $203=$q;
      var $204=(($203+12)|0);
      HEAP32[(($204)>>2)]=$202;
      label = 49; break;
    case 22: 
      var $206=$q;
      var $207=$206;
      $TP=$207;
      var $208=$psize;
      var $209=$208 >>> 8;
      $X=$209;
      var $210=$X;
      var $211=(($210)|0)==0;
      if ($211) { label = 23; break; } else { label = 24; break; }
    case 23: 
      $I1=0;
      label = 28; break;
    case 24: 
      var $214=$X;
      var $215=(($214)>>>0) > 65535;
      if ($215) { label = 25; break; } else { label = 26; break; }
    case 25: 
      $I1=31;
      label = 27; break;
    case 26: 
      var $218=$X;
      $Y=$218;
      var $219=$Y;
      var $220=((($219)-(256))|0);
      var $221=$220 >>> 16;
      var $222=$221 & 8;
      $N=$222;
      var $223=$N;
      var $224=$Y;
      var $225=$224 << $223;
      $Y=$225;
      var $226=((($225)-(4096))|0);
      var $227=$226 >>> 16;
      var $228=$227 & 4;
      $K=$228;
      var $229=$K;
      var $230=$N;
      var $231=((($230)+($229))|0);
      $N=$231;
      var $232=$K;
      var $233=$Y;
      var $234=$233 << $232;
      $Y=$234;
      var $235=((($234)-(16384))|0);
      var $236=$235 >>> 16;
      var $237=$236 & 2;
      $K=$237;
      var $238=$N;
      var $239=((($238)+($237))|0);
      $N=$239;
      var $240=$N;
      var $241=(((14)-($240))|0);
      var $242=$K;
      var $243=$Y;
      var $244=$243 << $242;
      $Y=$244;
      var $245=$244 >>> 15;
      var $246=((($241)+($245))|0);
      $K=$246;
      var $247=$K;
      var $248=$247 << 1;
      var $249=$psize;
      var $250=$K;
      var $251=((($250)+(7))|0);
      var $252=$249 >>> (($251)>>>0);
      var $253=$252 & 1;
      var $254=((($248)+($253))|0);
      $I1=$254;
      label = 27; break;
    case 27: 
      label = 28; break;
    case 28: 
      var $257=$I1;
      var $258=$1;
      var $259=(($258+304)|0);
      var $260=(($259+($257<<2))|0);
      $H=$260;
      var $261=$I1;
      var $262=$TP;
      var $263=(($262+28)|0);
      HEAP32[(($263)>>2)]=$261;
      var $264=$TP;
      var $265=(($264+16)|0);
      var $266=(($265+4)|0);
      HEAP32[(($266)>>2)]=0;
      var $267=$TP;
      var $268=(($267+16)|0);
      var $269=(($268)|0);
      HEAP32[(($269)>>2)]=0;
      var $270=$1;
      var $271=(($270+4)|0);
      var $272=HEAP32[(($271)>>2)];
      var $273=$I1;
      var $274=1 << $273;
      var $275=$272 & $274;
      var $276=(($275)|0)!=0;
      if ($276) { label = 30; break; } else { label = 29; break; }
    case 29: 
      var $278=$I1;
      var $279=1 << $278;
      var $280=$1;
      var $281=(($280+4)|0);
      var $282=HEAP32[(($281)>>2)];
      var $283=$282 | $279;
      HEAP32[(($281)>>2)]=$283;
      var $284=$TP;
      var $285=$H;
      HEAP32[(($285)>>2)]=$284;
      var $286=$H;
      var $287=$286;
      var $288=$TP;
      var $289=(($288+24)|0);
      HEAP32[(($289)>>2)]=$287;
      var $290=$TP;
      var $291=$TP;
      var $292=(($291+12)|0);
      HEAP32[(($292)>>2)]=$290;
      var $293=$TP;
      var $294=(($293+8)|0);
      HEAP32[(($294)>>2)]=$290;
      label = 48; break;
    case 30: 
      var $296=$H;
      var $297=HEAP32[(($296)>>2)];
      $T=$297;
      var $298=$psize;
      var $299=$I1;
      var $300=(($299)|0)==31;
      if ($300) { label = 31; break; } else { label = 32; break; }
    case 31: 
      var $309 = 0;label = 33; break;
    case 32: 
      var $303=$I1;
      var $304=$303 >>> 1;
      var $305=((($304)+(8))|0);
      var $306=((($305)-(2))|0);
      var $307=(((31)-($306))|0);
      var $309 = $307;label = 33; break;
    case 33: 
      var $309;
      var $310=$298 << $309;
      $K2=$310;
      label = 34; break;
    case 34: 
      var $312=$T;
      var $313=(($312+4)|0);
      var $314=HEAP32[(($313)>>2)];
      var $315=$314 & -8;
      var $316=$psize;
      var $317=(($315)|0)!=(($316)|0);
      if ($317) { label = 35; break; } else { label = 41; break; }
    case 35: 
      var $319=$K2;
      var $320=$319 >>> 31;
      var $321=$320 & 1;
      var $322=$T;
      var $323=(($322+16)|0);
      var $324=(($323+($321<<2))|0);
      $C=$324;
      var $325=$K2;
      var $326=$325 << 1;
      $K2=$326;
      var $327=$C;
      var $328=HEAP32[(($327)>>2)];
      var $329=(($328)|0)!=0;
      if ($329) { label = 36; break; } else { label = 37; break; }
    case 36: 
      var $331=$C;
      var $332=HEAP32[(($331)>>2)];
      $T=$332;
      label = 40; break;
    case 37: 
      var $334=$C;
      var $335=$334;
      var $336=$1;
      var $337=(($336+16)|0);
      var $338=HEAP32[(($337)>>2)];
      var $339=(($335)>>>0) >= (($338)>>>0);
      var $340=(($339)&1);
      var $341=($340);
      var $342=(($341)|0)!=0;
      if ($342) { label = 38; break; } else { label = 39; break; }
    case 38: 
      var $344=$TP;
      var $345=$C;
      HEAP32[(($345)>>2)]=$344;
      var $346=$T;
      var $347=$TP;
      var $348=(($347+24)|0);
      HEAP32[(($348)>>2)]=$346;
      var $349=$TP;
      var $350=$TP;
      var $351=(($350+12)|0);
      HEAP32[(($351)>>2)]=$349;
      var $352=$TP;
      var $353=(($352+8)|0);
      HEAP32[(($353)>>2)]=$349;
      label = 47; break;
    case 39: 
      _abort();
      throw "Reached an unreachable!"
    case 40: 
      label = 46; break;
    case 41: 
      var $357=$T;
      var $358=(($357+8)|0);
      var $359=HEAP32[(($358)>>2)];
      $F3=$359;
      var $360=$T;
      var $361=$360;
      var $362=$1;
      var $363=(($362+16)|0);
      var $364=HEAP32[(($363)>>2)];
      var $365=(($361)>>>0) >= (($364)>>>0);
      if ($365) { label = 42; break; } else { var $374 = 0;label = 43; break; }
    case 42: 
      var $367=$F3;
      var $368=$367;
      var $369=$1;
      var $370=(($369+16)|0);
      var $371=HEAP32[(($370)>>2)];
      var $372=(($368)>>>0) >= (($371)>>>0);
      var $374 = $372;label = 43; break;
    case 43: 
      var $374;
      var $375=(($374)&1);
      var $376=($375);
      var $377=(($376)|0)!=0;
      if ($377) { label = 44; break; } else { label = 45; break; }
    case 44: 
      var $379=$TP;
      var $380=$F3;
      var $381=(($380+12)|0);
      HEAP32[(($381)>>2)]=$379;
      var $382=$T;
      var $383=(($382+8)|0);
      HEAP32[(($383)>>2)]=$379;
      var $384=$F3;
      var $385=$TP;
      var $386=(($385+8)|0);
      HEAP32[(($386)>>2)]=$384;
      var $387=$T;
      var $388=$TP;
      var $389=(($388+12)|0);
      HEAP32[(($389)>>2)]=$387;
      var $390=$TP;
      var $391=(($390+24)|0);
      HEAP32[(($391)>>2)]=0;
      label = 47; break;
    case 45: 
      _abort();
      throw "Reached an unreachable!"
    case 46: 
      label = 34; break;
    case 47: 
      label = 48; break;
    case 48: 
      label = 49; break;
    case 49: 
      label = 50; break;
    case 50: 

      return;
    default: assert(0, "bad label: " + label);
  }

}
_add_segment["X"]=1;

// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);


  var ret;

  ret = Module['_main'](argc, argv, 0);


  return ret;
}




function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}






  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_mpfr_powerof2_raw","_mpn_bc_invertappr","_mpfr_tmp_allocate","___gmpn_toom33_mul","___gmpn_toom_interpolate_8pts","___gmpn_toom32_mul","___gmpn_add_n","_mpn_fft_add_modF","_init_mparams","_DO_mpn_sublsh_n","_abs_sub_add_n","___gmpn_lshift","___gmpn_mulmod_bnm1_next_size","___gmpn_scan1","___gmpn_add_1","_mpn_dc_get_str","_mpn_mul_fft_decompose","_mpn_mulmod_bnm1_itch390","___gmpn_toom63_mul","___gmp_divide_by_zero","___gmpn_toom_eval_dgr3_pm1","_release_unused_segments","_free","___gmpn_toom8h_mul","_mpn_fft_mul_2exp_modF","___gmpn_toom_couple_handling","_sys_alloc","___gmpn_toom_eval_pm2exp","___gmpfr_extract_double","_mpfr_mulhigh_n_basecase","_mpn_toom8h_mul_itch","___gmpn_add","_mpfr_cmp_si_2exp","_mpfr_setmin","___gmpn_get_str","_mpn_fft_fft","_mpfr_fits_slong_p","_mpfr_sub1sp","_mpn_fft_initl","_mpn_zero_p313","___gmpn_toom8_sqr","_mpfr_sqrhigh_n","_main","_mpfr_round_raw","_DO_mpn_addlsh_n","_init_bins","_mpn_zero_p287","___gmpn_toom_interpolate_7pts","_mpn_sqrmod_bnm1_itch","_mpn_bc_mulmod_bnp1","_mpn_bc_sqrmod_bnp1","_tmalloc_small","_mmap_alloc","_mpfr_mul_ui","___gmpn_toom4_sqr","___gmpn_toom53_mul","_mpn_sub_nc387","_mpfr_mpn_sub_aux","_mpfr_add1sp","_mpfr_nexttozero","_tmalloc_large","___gmpn_mu_div_qr_itch","___gmpn_sub_n","_mpfr_tmp_free","___gmpn_rshift","___gmpn_divrem","___gmpn_bdiv_dbm1c","_mpn_mul_fft_lcm","_mpfr_init2","_mpfr_mulhigh_n","___gmpn_submul_1","___gmpn_toom_eval_pm2","___gmpn_toom_interpolate_6pts","_init_top","___gmpn_tdiv_qr","_mpn_toom6h_mul_itch","_mpfr_set_divby0","_mpfr_set_d","_mpfr_rint","_mpfr_div","_mpn_fft_sub_modF","_mpn_mulmod_bnm1_itch","_mpn_sb_get_str","___gmpn_sbpi1_div_qr","___gmpn_toom_interpolate_16pts","___gmpn_toom44_mul","_mpfr_round_p","_mpn_zero_p281","___gmpn_sub_1","_mpfr_set4","_mpn_sub_nc","_mpfr_set_si_2exp","_sys_trim","_mpfr_can_round_raw","_mpn_fft_fftinv","_mmap_resize","_mpn_add_nc345","_mpfr_mpn_exp","_prepend_alloc","___gmpn_invertappr","___gmpn_toom6_sqr","___gmpn_cmp","___gmpn_toom_interpolate_12pts","___gmpn_bc_mulmod_bnm1","_mpfr_divhigh_n","___gmpn_ni_invertappr","___gmpn_toom6h_mul","___gmpn_sqrmod_bnm1_next_size","___gmpn_lshiftc","_mpfr_default_allocate","_mpfr_cmp2","___gmpn_mulmod_bnm1","___gmpn_addmul_1","___gmpn_sqrmod_bnm1","_mpfr_overflow","_mpn_fft_normalize","___gmpn_preinv_mu_div_qr","_mpfr_check_range","_mpfr_underflow","___gmpfr_out_str","___gmpn_fft_next_size","___gmp_tmp_reentrant_alloc","___gmp_default_free","_mpn_fft_norm_modF","_mpfr_add1","_mpn_mulmod_bnm1_itch344","___gmpn_dcpi1_div_qr","_add_segment","_mpfr_get_str_aux","_mpn_fft_mul_modF_K","___gmp_tmp_reentrant_free","_mpn_zero_p284","_malloc","___gmpn_toom3_sqr","___gmp_assert_fail","_mpfr_default_free","_mpfr_get_str","___gmpn_mu_div_qr_choose_in","_mpfr_round_raw_2","_mpfr_add","___gmpn_toom43_mul","_mpn_mu_div_qr2","_mpn_bc_sqrmod_bnm1","_mpn_add_nc","_mpn_mul_fft_internal","___gmp_default_reallocate","_mpfr_setmax","___gmp_exception","___gmpn_toom22_mul","_mpfr_mpn_cmp_aux","___gmpn_fft_best_k","_mpfr_ceil_mul","___gmpn_mul_n","___gmpn_sqr","_mpfr_mpn_cmpzero","_mpfr_clear","___gmpn_toom_eval_pm2rexp","_mpfr_assert_fail","___gmpn_mul","_DO_mpn_sublsh_n343","_DO_mpn_sublsh_n340","_internal_realloc","___gmpn_divrem_1","___gmpn_divrem_2","___gmpn_dcpi1_div_qr_n","___gmpn_mul_1","___gmp_default_allocate","_mpfr_sub1","_realloc","___gmpn_toom_interpolate_5pts","_segment_holding","___gmpn_popcount","_abs_sub_n298","___gmpn_mu_div_qr","_mpn_sub_nc353","___gmpn_toom2_sqr","___gmp_assert_header","_mpn_sub_nc358","___gmpn_mul_fft","___gmpn_mul_basecase","___gmpn_sbpi1_divappr_q","___gmpn_nussbaumer_mul","___gmpn_toom_eval_dgr3_pm2","___gmpn_sqr_basecase","___gmpn_preinv_divrem_1","_mpfr_mul","___gmpn_sub","___gmpn_toom_eval_pm1","_mpfr_mul_2si","___gmp_get_memory_functions","___gmpn_divexact_1","_mpn_fft_div_2exp_modF","___gmpn_toom42_mul","_mpfr_get_si","_mpfr_divhigh_n_basecase"]


